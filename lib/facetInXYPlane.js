'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Facet = require('./facet'),
    vec3 = require('./maths/vec3'),
    LineInXYPlane = require('./lineInXYPlane'),
    arrayUtilities = require('./utilities/array'),
    verticesUtilities = require('./utilities/vertices'),
    quaternionUtilities = require('./utilities/quaternion');

var add = vec3.add,
    subtract = vec3.subtract,
    scale = vec3.scale,
    transform = vec3.transform,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    fourth = arrayUtilities.fourth,
    permute = arrayUtilities.permute,
    calculateRotationQuaternion = quaternionUtilities.calculateRotationQuaternion,
    calculateNormal = verticesUtilities.calculateNormal,
    rotateVertices = verticesUtilities.rotateVertices,
    translateVertices = verticesUtilities.translateVertices;

var FacetInXYPlane = function (_Facet) {
  _inherits(FacetInXYPlane, _Facet);

  function FacetInXYPlane(vertices, normal, rotationQuaternion, translation) {
    _classCallCheck(this, FacetInXYPlane);

    var _this = _possibleConstructorReturn(this, (FacetInXYPlane.__proto__ || Object.getPrototypeOf(FacetInXYPlane)).call(this, vertices, normal));

    _this.rotationQuaternion = rotationQuaternion;

    _this.translation = translation;
    return _this;
  }

  _createClass(FacetInXYPlane, [{
    key: 'getRotationQuaternion',
    value: function getRotationQuaternion() {
      return this.rotationQuaternion;
    }
  }, {
    key: 'getTranslation',
    value: function getTranslation() {
      return this.translation;
    }
  }, {
    key: 'getForwardsRotationQuaternion',
    value: function getForwardsRotationQuaternion() {
      var forwardsRotationQuaternion = this.rotationQuaternion;

      return forwardsRotationQuaternion;
    }
  }, {
    key: 'getBackwardsRotationQuaternion',
    value: function getBackwardsRotationQuaternion() {
      var rotationQuaternionComponents = this.rotationQuaternion,
          ///
      backwardsRotationQuaternionComponents = rotationQuaternionComponents.map(function (rotationQuaternionComponent, index) {
        var backwardsRotationQuaternionComponent = index < 1 ? ///
        +rotationQuaternionComponent : -rotationQuaternionComponent;

        return backwardsRotationQuaternionComponent;
      }),
          backwardsRotationQuaternion = backwardsRotationQuaternionComponents;

      return backwardsRotationQuaternion;
    }
  }, {
    key: 'getForwardsTranslation',
    value: function getForwardsTranslation() {
      var forwardsTranslation = this.translation;

      return forwardsTranslation;
    }
  }, {
    key: 'getBackwardsTranslation',
    value: function getBackwardsTranslation() {
      var translationComponents = this.translation,
          ///
      backwardsTranslationComponents = translationComponents.map(function (translationComponent, index) {
        var backwardsTranslationComponent = index < 2 ? ///
        +translationComponent : -translationComponent;

        return backwardsTranslationComponent;
      }),
          backwardsTranslation = backwardsTranslationComponents;

      return backwardsTranslation;
    }
  }, {
    key: 'getEdgeLinesInXYPlane',
    value: function getEdgeLinesInXYPlane() {
      var edgeLinesInXYPlane = [],
          verticesLength = 3; ///

      for (var index = 0; index < verticesLength; index++) {
        var startIndex = index,
            endIndex = (index + 1) % verticesLength,
            startVertex = this.vertices[startIndex],
            endVertex = this.vertices[endIndex],
            edgeLineInXYPlane = LineInXYPlane.fromVertices(startVertex, endVertex);

        edgeLinesInXYPlane.push(edgeLineInXYPlane);
      }

      return edgeLinesInXYPlane;
    }
  }, {
    key: 'rotate',
    value: function rotate(rotationMatrix) {
      var mat2 = rotationMatrix; ///

      this.vertices = this.vertices.map(function (vertex) {
        var vec = vertex;

        vec = transform(vec, mat2);

        vertex = vec;

        return vertex;
      });
    }
  }, {
    key: 'possiblySplit',
    value: function possiblySplit(verticalLineInXYPlane) {
      var intersections = this.calculateIntersectionsWithVerticalLineInXYPlane(verticalLineInXYPlane),
          intersectionsIncludesNull = intersections.includes(null),
          facetsInXYPlane = intersectionsIncludesNull ? this.possiblySplitWithNullIntersection(intersections) : this.possiblySplitWithoutNullIntersection(intersections);

      return facetsInXYPlane;
    }
  }, {
    key: 'possiblySplitWithNullIntersection',
    value: function possiblySplitWithNullIntersection(intersections) {
      var facetsInXYPlane = void 0;

      var nonNullIntersections = intersections.reduce(function (nonNullIntersections, intersection) {
        if (intersection !== null) {
          var nonNullIntersection = intersection; ///

          nonNullIntersections.push(nonNullIntersection);
        }

        return nonNullIntersections;
      }, []),
          firstNonNullIntersection = first(nonNullIntersections);

      if (firstNonNullIntersection > 0 && firstNonNullIntersection < 1) {
        facetsInXYPlane = this.splitWithNullIntersection(intersections);
      } else {
        var facetInXYPlane = this; ///

        facetsInXYPlane = [facetInXYPlane];
      }

      return facetsInXYPlane;
    }
  }, {
    key: 'splitWithNullIntersection',
    value: function splitWithNullIntersection(intersections) {
      var verticesLength = 3,
          nullIntersectionIndex = intersections.indexOf(null),
          places = verticesLength - nullIntersectionIndex & verticesLength;

      var vertices = this.getVertices();

      intersections = permute(intersections, places);

      vertices = permute(vertices, places);

      var firstVertex = first(vertices),
          secondVertex = second(vertices),
          thirdVertex = third(vertices),
          nonNullIntersections = intersections.slice(1),
          firstNonNullIntersection = first(nonNullIntersections),
          secondNonNullIntersection = second(nonNullIntersections),
          firstIntermediateVertex = calculateIntermediateVertex(secondVertex, thirdVertex, firstNonNullIntersection),
          secondIntermediateVertex = calculateIntermediateVertex(thirdVertex, firstVertex, secondNonNullIntersection),
          firstVertices = [firstVertex, secondVertex, secondIntermediateVertex],
          secondVertices = [secondVertex, firstIntermediateVertex, secondIntermediateVertex],
          thirdVertices = [firstIntermediateVertex, thirdVertex, secondIntermediateVertex],
          normal = this.getNormal(),
          firstFacetInXYPlane = new FacetInXYPlane(firstVertices, normal, this.rotationQuaternion, this.translation),
          secondFacetInXYPlane = new FacetInXYPlane(secondVertices, normal, this.rotationQuaternion, this.translation),
          thirdFacetInXYPlane = new FacetInXYPlane(thirdVertices, normal, this.rotationQuaternion, this.translation),
          facetsInXYPlane = [firstFacetInXYPlane, secondFacetInXYPlane, thirdFacetInXYPlane];

      return facetsInXYPlane;
    }
  }, {
    key: 'possiblySplitWithoutNullIntersection',
    value: function possiblySplitWithoutNullIntersection(intersections) {}
  }, {
    key: 'permuteVertices',
    value: function permuteVertices(places) {
      var vertices = this.getVertices();

      vertices = permute(vertices, places);

      this.setVertices(vertices);
    }
  }, {
    key: 'calculateIntersectionsWithVerticalLineInXYPlane',
    value: function calculateIntersectionsWithVerticalLineInXYPlane(verticalLineInXYPlane) {
      var edgeLinesInXYPlane = this.getEdgeLinesInXYPlane(),
          intersections = edgeLinesInXYPlane.map(function (edgeLineInXYPlane) {
        var intersection = edgeLineInXYPlane.calculateIntersectionWithVerticalLineInXYPlane(verticalLineInXYPlane);

        return intersection;
      });

      return intersections;
    }
  }], [{
    key: 'fromFacet',
    value: function fromFacet(facet) {
      var normal = facet.getNormal();

      var rotationQuaternion = calculateRotationQuaternion(normal);

      var vertices = facet.getVertices();

      vertices = rotateVertices(vertices, rotationQuaternion);

      var translation = calculateTranslation(vertices);

      vertices = translateVertices(vertices, translation);

      normal = calculateNormal(vertices);

      var facetInXYPlane = new FacetInXYPlane(vertices, normal, rotationQuaternion, translation);

      return facetInXYPlane;
    }
  }]);

  return FacetInXYPlane;
}(Facet);

module.exports = FacetInXYPlane;

function calculateTranslation(vertices) {
  var firstVertex = first(vertices),
      vertex = firstVertex,
      ///
  vertexComponents = vertex,
      ///
  thirdVertexComponent = third(vertexComponents),
      z = thirdVertexComponent,
      ///
  translation = [0, 0, -z];

  return translation;
}

function calculateIntermediateVertex(startVertex, endVertex, nonNullIntersection) {
  var direction = subtract(endVertex, startVertex),
      offset = scale(direction, nonNullIntersection),
      intermediateVertex = add(startVertex, offset);

  return intermediateVertex;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9mYWNldEluWFlQbGFuZS5qcyJdLCJuYW1lcyI6WyJGYWNldCIsInJlcXVpcmUiLCJ2ZWMzIiwiTGluZUluWFlQbGFuZSIsImFycmF5VXRpbGl0aWVzIiwidmVydGljZXNVdGlsaXRpZXMiLCJxdWF0ZXJuaW9uVXRpbGl0aWVzIiwiYWRkIiwic3VidHJhY3QiLCJzY2FsZSIsInRyYW5zZm9ybSIsImZpcnN0Iiwic2Vjb25kIiwidGhpcmQiLCJmb3VydGgiLCJwZXJtdXRlIiwiY2FsY3VsYXRlUm90YXRpb25RdWF0ZXJuaW9uIiwiY2FsY3VsYXRlTm9ybWFsIiwicm90YXRlVmVydGljZXMiLCJ0cmFuc2xhdGVWZXJ0aWNlcyIsIkZhY2V0SW5YWVBsYW5lIiwidmVydGljZXMiLCJub3JtYWwiLCJyb3RhdGlvblF1YXRlcm5pb24iLCJ0cmFuc2xhdGlvbiIsImZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uIiwicm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50cyIsImJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudHMiLCJtYXAiLCJyb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQiLCJpbmRleCIsImJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCIsImJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiIsImZvcndhcmRzVHJhbnNsYXRpb24iLCJ0cmFuc2xhdGlvbkNvbXBvbmVudHMiLCJiYWNrd2FyZHNUcmFuc2xhdGlvbkNvbXBvbmVudHMiLCJ0cmFuc2xhdGlvbkNvbXBvbmVudCIsImJhY2t3YXJkc1RyYW5zbGF0aW9uQ29tcG9uZW50IiwiYmFja3dhcmRzVHJhbnNsYXRpb24iLCJlZGdlTGluZXNJblhZUGxhbmUiLCJ2ZXJ0aWNlc0xlbmd0aCIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsInN0YXJ0VmVydGV4IiwiZW5kVmVydGV4IiwiZWRnZUxpbmVJblhZUGxhbmUiLCJmcm9tVmVydGljZXMiLCJwdXNoIiwicm90YXRpb25NYXRyaXgiLCJtYXQyIiwidmVydGV4IiwidmVjIiwidmVydGljYWxMaW5lSW5YWVBsYW5lIiwiaW50ZXJzZWN0aW9ucyIsImNhbGN1bGF0ZUludGVyc2VjdGlvbnNXaXRoVmVydGljYWxMaW5lSW5YWVBsYW5lIiwiaW50ZXJzZWN0aW9uc0luY2x1ZGVzTnVsbCIsImluY2x1ZGVzIiwiZmFjZXRzSW5YWVBsYW5lIiwicG9zc2libHlTcGxpdFdpdGhOdWxsSW50ZXJzZWN0aW9uIiwicG9zc2libHlTcGxpdFdpdGhvdXROdWxsSW50ZXJzZWN0aW9uIiwibm9uTnVsbEludGVyc2VjdGlvbnMiLCJyZWR1Y2UiLCJpbnRlcnNlY3Rpb24iLCJub25OdWxsSW50ZXJzZWN0aW9uIiwiZmlyc3ROb25OdWxsSW50ZXJzZWN0aW9uIiwic3BsaXRXaXRoTnVsbEludGVyc2VjdGlvbiIsImZhY2V0SW5YWVBsYW5lIiwibnVsbEludGVyc2VjdGlvbkluZGV4IiwiaW5kZXhPZiIsInBsYWNlcyIsImdldFZlcnRpY2VzIiwiZmlyc3RWZXJ0ZXgiLCJzZWNvbmRWZXJ0ZXgiLCJ0aGlyZFZlcnRleCIsInNsaWNlIiwic2Vjb25kTm9uTnVsbEludGVyc2VjdGlvbiIsImZpcnN0SW50ZXJtZWRpYXRlVmVydGV4IiwiY2FsY3VsYXRlSW50ZXJtZWRpYXRlVmVydGV4Iiwic2Vjb25kSW50ZXJtZWRpYXRlVmVydGV4IiwiZmlyc3RWZXJ0aWNlcyIsInNlY29uZFZlcnRpY2VzIiwidGhpcmRWZXJ0aWNlcyIsImdldE5vcm1hbCIsImZpcnN0RmFjZXRJblhZUGxhbmUiLCJzZWNvbmRGYWNldEluWFlQbGFuZSIsInRoaXJkRmFjZXRJblhZUGxhbmUiLCJzZXRWZXJ0aWNlcyIsImdldEVkZ2VMaW5lc0luWFlQbGFuZSIsImNhbGN1bGF0ZUludGVyc2VjdGlvbldpdGhWZXJ0aWNhbExpbmVJblhZUGxhbmUiLCJmYWNldCIsImNhbGN1bGF0ZVRyYW5zbGF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsInZlcnRleENvbXBvbmVudHMiLCJ0aGlyZFZlcnRleENvbXBvbmVudCIsInoiLCJkaXJlY3Rpb24iLCJvZmZzZXQiLCJpbnRlcm1lZGlhdGVWZXJ0ZXgiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBRUEsSUFBTUEsUUFBUUMsUUFBUSxTQUFSLENBQWQ7QUFBQSxJQUNNQyxPQUFPRCxRQUFRLGNBQVIsQ0FEYjtBQUFBLElBRU1FLGdCQUFnQkYsUUFBUSxpQkFBUixDQUZ0QjtBQUFBLElBR01HLGlCQUFpQkgsUUFBUSxtQkFBUixDQUh2QjtBQUFBLElBSU1JLG9CQUFvQkosUUFBUSxzQkFBUixDQUoxQjtBQUFBLElBS01LLHNCQUFzQkwsUUFBUSx3QkFBUixDQUw1Qjs7SUFPUU0sRyxHQUFvQ0wsSSxDQUFwQ0ssRztJQUFLQyxRLEdBQStCTixJLENBQS9CTSxRO0lBQVVDLEssR0FBcUJQLEksQ0FBckJPLEs7SUFBT0MsUyxHQUFjUixJLENBQWRRLFM7SUFDdEJDLEssR0FBMENQLGMsQ0FBMUNPLEs7SUFBT0MsTSxHQUFtQ1IsYyxDQUFuQ1EsTTtJQUFRQyxLLEdBQTJCVCxjLENBQTNCUyxLO0lBQU9DLE0sR0FBb0JWLGMsQ0FBcEJVLE07SUFBUUMsTyxHQUFZWCxjLENBQVpXLE87SUFDOUJDLDJCLEdBQWdDVixtQixDQUFoQ1UsMkI7SUFDQUMsZSxHQUF1RFosaUIsQ0FBdkRZLGU7SUFBaUJDLGMsR0FBc0NiLGlCLENBQXRDYSxjO0lBQWdCQyxpQixHQUFzQmQsaUIsQ0FBdEJjLGlCOztJQUVuQ0MsYzs7O0FBQ0osMEJBQVlDLFFBQVosRUFBc0JDLE1BQXRCLEVBQThCQyxrQkFBOUIsRUFBa0RDLFdBQWxELEVBQStEO0FBQUE7O0FBQUEsZ0lBQ3ZESCxRQUR1RCxFQUM3Q0MsTUFENkM7O0FBRzdELFVBQUtDLGtCQUFMLEdBQTBCQSxrQkFBMUI7O0FBRUEsVUFBS0MsV0FBTCxHQUFtQkEsV0FBbkI7QUFMNkQ7QUFNOUQ7Ozs7NENBRXVCO0FBQ3RCLGFBQU8sS0FBS0Qsa0JBQVo7QUFDRDs7O3FDQUVnQjtBQUNmLGFBQU8sS0FBS0MsV0FBWjtBQUNEOzs7b0RBRStCO0FBQzlCLFVBQU1DLDZCQUE2QixLQUFLRixrQkFBeEM7O0FBRUEsYUFBT0UsMEJBQVA7QUFDRDs7O3FEQUVnQztBQUMvQixVQUFNQywrQkFBK0IsS0FBS0gsa0JBQTFDO0FBQUEsVUFBOEQ7QUFDeERJLDhDQUF3Q0QsNkJBQTZCRSxHQUE3QixDQUFpQyxVQUFTQywyQkFBVCxFQUFzQ0MsS0FBdEMsRUFBNkM7QUFDcEgsWUFBTUMsdUNBQXdDRCxRQUFRLENBQVQsR0FBZTtBQUNiLFNBQUNELDJCQURILEdBRUksQ0FBQ0EsMkJBRmxEOztBQUlBLGVBQU9FLG9DQUFQO0FBQ0QsT0FOdUMsQ0FEOUM7QUFBQSxVQVFNQyw4QkFBOEJMLHFDQVJwQzs7QUFVQSxhQUFPSywyQkFBUDtBQUNEOzs7NkNBRXdCO0FBQ3ZCLFVBQU1DLHNCQUFzQixLQUFLVCxXQUFqQzs7QUFFQSxhQUFPUyxtQkFBUDtBQUNEOzs7OENBRXlCO0FBQ3hCLFVBQU1DLHdCQUF3QixLQUFLVixXQUFuQztBQUFBLFVBQWdEO0FBQzFDVyx1Q0FBaUNELHNCQUFzQk4sR0FBdEIsQ0FBMEIsVUFBU1Esb0JBQVQsRUFBK0JOLEtBQS9CLEVBQXNDO0FBQy9GLFlBQU1PLGdDQUFpQ1AsUUFBUSxDQUFULEdBQWM7QUFDWixTQUFDTSxvQkFESCxHQUVJLENBQUNBLG9CQUYzQzs7QUFJQSxlQUFPQyw2QkFBUDtBQUNELE9BTmdDLENBRHZDO0FBQUEsVUFRTUMsdUJBQXVCSCw4QkFSN0I7O0FBVUEsYUFBT0csb0JBQVA7QUFDRDs7OzRDQUV1QjtBQUN0QixVQUFNQyxxQkFBcUIsRUFBM0I7QUFBQSxVQUNNQyxpQkFBaUIsQ0FEdkIsQ0FEc0IsQ0FFSTs7QUFFMUIsV0FBSyxJQUFJVixRQUFRLENBQWpCLEVBQW9CQSxRQUFRVSxjQUE1QixFQUE0Q1YsT0FBNUMsRUFBcUQ7QUFDbkQsWUFBTVcsYUFBYVgsS0FBbkI7QUFBQSxZQUNNWSxXQUFXLENBQUNaLFFBQVEsQ0FBVCxJQUFjVSxjQUQvQjtBQUFBLFlBRU1HLGNBQWMsS0FBS3RCLFFBQUwsQ0FBY29CLFVBQWQsQ0FGcEI7QUFBQSxZQUdNRyxZQUFZLEtBQUt2QixRQUFMLENBQWNxQixRQUFkLENBSGxCO0FBQUEsWUFJTUcsb0JBQW9CMUMsY0FBYzJDLFlBQWQsQ0FBMkJILFdBQTNCLEVBQXdDQyxTQUF4QyxDQUoxQjs7QUFNQUwsMkJBQW1CUSxJQUFuQixDQUF3QkYsaUJBQXhCO0FBQ0Q7O0FBRUQsYUFBT04sa0JBQVA7QUFDRDs7OzJCQUVNUyxjLEVBQWdCO0FBQ3JCLFVBQU1DLE9BQU9ELGNBQWIsQ0FEcUIsQ0FDUzs7QUFFOUIsV0FBSzNCLFFBQUwsR0FBZ0IsS0FBS0EsUUFBTCxDQUFjTyxHQUFkLENBQWtCLFVBQVNzQixNQUFULEVBQWlCO0FBQ2pELFlBQUlDLE1BQU1ELE1BQVY7O0FBRUFDLGNBQU16QyxVQUFVeUMsR0FBVixFQUFlRixJQUFmLENBQU47O0FBRUFDLGlCQUFTQyxHQUFUOztBQUVBLGVBQU9ELE1BQVA7QUFDRCxPQVJlLENBQWhCO0FBU0Q7OztrQ0FFYUUscUIsRUFBdUI7QUFDbkMsVUFBTUMsZ0JBQWdCLEtBQUtDLCtDQUFMLENBQXFERixxQkFBckQsQ0FBdEI7QUFBQSxVQUNNRyw0QkFBNEJGLGNBQWNHLFFBQWQsQ0FBdUIsSUFBdkIsQ0FEbEM7QUFBQSxVQUVNQyxrQkFBa0JGLDRCQUNFLEtBQUtHLGlDQUFMLENBQXVDTCxhQUF2QyxDQURGLEdBRUksS0FBS00sb0NBQUwsQ0FBMENOLGFBQTFDLENBSjVCOztBQU1BLGFBQU9JLGVBQVA7QUFDRDs7O3NEQUVpQ0osYSxFQUFlO0FBQy9DLFVBQUlJLHdCQUFKOztBQUVBLFVBQU1HLHVCQUF1QlAsY0FBY1EsTUFBZCxDQUFxQixVQUFTRCxvQkFBVCxFQUErQkUsWUFBL0IsRUFBNkM7QUFDdkYsWUFBSUEsaUJBQWlCLElBQXJCLEVBQTJCO0FBQ3pCLGNBQU1DLHNCQUFzQkQsWUFBNUIsQ0FEeUIsQ0FDaUI7O0FBRTFDRiwrQkFBcUJiLElBQXJCLENBQTBCZ0IsbUJBQTFCO0FBQ0Q7O0FBRUQsZUFBT0gsb0JBQVA7QUFDRCxPQVJzQixFQVFwQixFQVJvQixDQUE3QjtBQUFBLFVBU01JLDJCQUEyQnJELE1BQU1pRCxvQkFBTixDQVRqQzs7QUFXQSxVQUFLSSwyQkFBMkIsQ0FBNUIsSUFBbUNBLDJCQUEyQixDQUFsRSxFQUFzRTtBQUNwRVAsMEJBQWtCLEtBQUtRLHlCQUFMLENBQStCWixhQUEvQixDQUFsQjtBQUNELE9BRkQsTUFFTztBQUNMLFlBQU1hLGlCQUFpQixJQUF2QixDQURLLENBQ3lCOztBQUU5QlQsMEJBQWtCLENBQ2hCUyxjQURnQixDQUFsQjtBQUdEOztBQUVELGFBQU9ULGVBQVA7QUFDRDs7OzhDQUV5QkosYSxFQUFlO0FBQ3ZDLFVBQU1iLGlCQUFpQixDQUF2QjtBQUFBLFVBQ00yQix3QkFBd0JkLGNBQWNlLE9BQWQsQ0FBc0IsSUFBdEIsQ0FEOUI7QUFBQSxVQUVNQyxTQUFVN0IsaUJBQWlCMkIscUJBQWxCLEdBQTJDM0IsY0FGMUQ7O0FBSUEsVUFBSW5CLFdBQVcsS0FBS2lELFdBQUwsRUFBZjs7QUFFQWpCLHNCQUFnQnRDLFFBQVFzQyxhQUFSLEVBQXVCZ0IsTUFBdkIsQ0FBaEI7O0FBRUFoRCxpQkFBV04sUUFBUU0sUUFBUixFQUFrQmdELE1BQWxCLENBQVg7O0FBRUEsVUFBTUUsY0FBYzVELE1BQU1VLFFBQU4sQ0FBcEI7QUFBQSxVQUNNbUQsZUFBZTVELE9BQU9TLFFBQVAsQ0FEckI7QUFBQSxVQUVNb0QsY0FBYzVELE1BQU1RLFFBQU4sQ0FGcEI7QUFBQSxVQUdNdUMsdUJBQXVCUCxjQUFjcUIsS0FBZCxDQUFvQixDQUFwQixDQUg3QjtBQUFBLFVBSU1WLDJCQUEyQnJELE1BQU1pRCxvQkFBTixDQUpqQztBQUFBLFVBS01lLDRCQUE0Qi9ELE9BQU9nRCxvQkFBUCxDQUxsQztBQUFBLFVBTU1nQiwwQkFBMEJDLDRCQUE0QkwsWUFBNUIsRUFBMENDLFdBQTFDLEVBQXVEVCx3QkFBdkQsQ0FOaEM7QUFBQSxVQU9NYywyQkFBMkJELDRCQUE0QkosV0FBNUIsRUFBeUNGLFdBQXpDLEVBQXNESSx5QkFBdEQsQ0FQakM7QUFBQSxVQVFNSSxnQkFBZ0IsQ0FDZFIsV0FEYyxFQUVkQyxZQUZjLEVBR2RNLHdCQUhjLENBUnRCO0FBQUEsVUFhTUUsaUJBQWlCLENBQ2ZSLFlBRGUsRUFFZkksdUJBRmUsRUFHZkUsd0JBSGUsQ0FidkI7QUFBQSxVQWtCTUcsZ0JBQWdCLENBQ2RMLHVCQURjLEVBRWRILFdBRmMsRUFHZEssd0JBSGMsQ0FsQnRCO0FBQUEsVUF1Qk14RCxTQUFTLEtBQUs0RCxTQUFMLEVBdkJmO0FBQUEsVUF3Qk1DLHNCQUFzQixJQUFJL0QsY0FBSixDQUFtQjJELGFBQW5CLEVBQWtDekQsTUFBbEMsRUFBMEMsS0FBS0Msa0JBQS9DLEVBQW1FLEtBQUtDLFdBQXhFLENBeEI1QjtBQUFBLFVBeUJNNEQsdUJBQXVCLElBQUloRSxjQUFKLENBQW1CNEQsY0FBbkIsRUFBbUMxRCxNQUFuQyxFQUEyQyxLQUFLQyxrQkFBaEQsRUFBb0UsS0FBS0MsV0FBekUsQ0F6QjdCO0FBQUEsVUEwQk02RCxzQkFBc0IsSUFBSWpFLGNBQUosQ0FBbUI2RCxhQUFuQixFQUFrQzNELE1BQWxDLEVBQTBDLEtBQUtDLGtCQUEvQyxFQUFtRSxLQUFLQyxXQUF4RSxDQTFCNUI7QUFBQSxVQTJCTWlDLGtCQUFrQixDQUNoQjBCLG1CQURnQixFQUVoQkMsb0JBRmdCLEVBR2hCQyxtQkFIZ0IsQ0EzQnhCOztBQWlDQSxhQUFPNUIsZUFBUDtBQUNEOzs7eURBRW9DSixhLEVBQWUsQ0FFbkQ7OztvQ0FFZWdCLE0sRUFBUTtBQUN0QixVQUFJaEQsV0FBVyxLQUFLaUQsV0FBTCxFQUFmOztBQUVBakQsaUJBQVdOLFFBQVFNLFFBQVIsRUFBa0JnRCxNQUFsQixDQUFYOztBQUVBLFdBQUtpQixXQUFMLENBQWlCakUsUUFBakI7QUFDRDs7O29FQUUrQytCLHFCLEVBQXVCO0FBQ3JFLFVBQU1iLHFCQUFxQixLQUFLZ0QscUJBQUwsRUFBM0I7QUFBQSxVQUNNbEMsZ0JBQWdCZCxtQkFBbUJYLEdBQW5CLENBQXVCLFVBQVNpQixpQkFBVCxFQUE0QjtBQUNqRSxZQUFNaUIsZUFBZWpCLGtCQUFrQjJDLDhDQUFsQixDQUFpRXBDLHFCQUFqRSxDQUFyQjs7QUFFQSxlQUFPVSxZQUFQO0FBQ0QsT0FKZSxDQUR0Qjs7QUFPQSxhQUFPVCxhQUFQO0FBQ0Q7Ozs4QkFFZ0JvQyxLLEVBQU87QUFDdEIsVUFBSW5FLFNBQVNtRSxNQUFNUCxTQUFOLEVBQWI7O0FBRUEsVUFBTTNELHFCQUFxQlAsNEJBQTRCTSxNQUE1QixDQUEzQjs7QUFFQSxVQUFJRCxXQUFXb0UsTUFBTW5CLFdBQU4sRUFBZjs7QUFFQWpELGlCQUFXSCxlQUFlRyxRQUFmLEVBQXlCRSxrQkFBekIsQ0FBWDs7QUFFQSxVQUFNQyxjQUFja0UscUJBQXFCckUsUUFBckIsQ0FBcEI7O0FBRUFBLGlCQUFXRixrQkFBa0JFLFFBQWxCLEVBQTRCRyxXQUE1QixDQUFYOztBQUVBRixlQUFTTCxnQkFBZ0JJLFFBQWhCLENBQVQ7O0FBRUEsVUFBTTZDLGlCQUFpQixJQUFJOUMsY0FBSixDQUFtQkMsUUFBbkIsRUFBNkJDLE1BQTdCLEVBQXFDQyxrQkFBckMsRUFBeURDLFdBQXpELENBQXZCOztBQUVBLGFBQU8wQyxjQUFQO0FBQ0Q7Ozs7RUFyTjBCbEUsSzs7QUF3TjdCMkYsT0FBT0MsT0FBUCxHQUFpQnhFLGNBQWpCOztBQUVBLFNBQVNzRSxvQkFBVCxDQUE4QnJFLFFBQTlCLEVBQXdDO0FBQ3RDLE1BQU1rRCxjQUFjNUQsTUFBTVUsUUFBTixDQUFwQjtBQUFBLE1BQ002QixTQUFTcUIsV0FEZjtBQUFBLE1BQzRCO0FBQ3RCc0IscUJBQW1CM0MsTUFGekI7QUFBQSxNQUVrQztBQUM1QjRDLHlCQUF1QmpGLE1BQU1nRixnQkFBTixDQUg3QjtBQUFBLE1BSU1FLElBQUlELG9CQUpWO0FBQUEsTUFJZ0M7QUFDMUJ0RSxnQkFBYyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBQ3VFLENBQVIsQ0FMcEI7O0FBT0EsU0FBT3ZFLFdBQVA7QUFDRDs7QUFFRCxTQUFTcUQsMkJBQVQsQ0FBcUNsQyxXQUFyQyxFQUFrREMsU0FBbEQsRUFBNkRtQixtQkFBN0QsRUFBa0Y7QUFDaEYsTUFBTWlDLFlBQVl4RixTQUFTb0MsU0FBVCxFQUFvQkQsV0FBcEIsQ0FBbEI7QUFBQSxNQUNNc0QsU0FBU3hGLE1BQU11RixTQUFOLEVBQWlCakMsbUJBQWpCLENBRGY7QUFBQSxNQUVNbUMscUJBQXFCM0YsSUFBSW9DLFdBQUosRUFBaUJzRCxNQUFqQixDQUYzQjs7QUFJQSxTQUFPQyxrQkFBUDtBQUNEIiwiZmlsZSI6ImZhY2V0SW5YWVBsYW5lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBGYWNldCA9IHJlcXVpcmUoJy4vZmFjZXQnKSxcbiAgICAgIHZlYzMgPSByZXF1aXJlKCcuL21hdGhzL3ZlYzMnKSxcbiAgICAgIExpbmVJblhZUGxhbmUgPSByZXF1aXJlKCcuL2xpbmVJblhZUGxhbmUnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIHZlcnRpY2VzVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvdmVydGljZXMnKSxcbiAgICAgIHF1YXRlcm5pb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9xdWF0ZXJuaW9uJyk7XG5cbmNvbnN0IHsgYWRkLCBzdWJ0cmFjdCwgc2NhbGUsIHRyYW5zZm9ybSB9ID0gdmVjMyxcbiAgICAgIHsgZmlyc3QsIHNlY29uZCwgdGhpcmQsIGZvdXJ0aCwgcGVybXV0ZSB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGNhbGN1bGF0ZVJvdGF0aW9uUXVhdGVybmlvbiB9ID0gcXVhdGVybmlvblV0aWxpdGllcyxcbiAgICAgIHsgY2FsY3VsYXRlTm9ybWFsLCByb3RhdGVWZXJ0aWNlcywgdHJhbnNsYXRlVmVydGljZXMgfSA9IHZlcnRpY2VzVXRpbGl0aWVzO1xuXG5jbGFzcyBGYWNldEluWFlQbGFuZSBleHRlbmRzIEZhY2V0IHtcbiAgY29uc3RydWN0b3IodmVydGljZXMsIG5vcm1hbCwgcm90YXRpb25RdWF0ZXJuaW9uLCB0cmFuc2xhdGlvbikge1xuICAgIHN1cGVyKHZlcnRpY2VzLCBub3JtYWwpO1xuICAgIFxuICAgIHRoaXMucm90YXRpb25RdWF0ZXJuaW9uID0gcm90YXRpb25RdWF0ZXJuaW9uO1xuXG4gICAgdGhpcy50cmFuc2xhdGlvbiA9IHRyYW5zbGF0aW9uO1xuICB9XG5cbiAgZ2V0Um90YXRpb25RdWF0ZXJuaW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJvdGF0aW9uUXVhdGVybmlvbjtcbiAgfVxuXG4gIGdldFRyYW5zbGF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zbGF0aW9uO1xuICB9XG5cbiAgZ2V0Rm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb24oKSB7XG4gICAgY29uc3QgZm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb24gPSB0aGlzLnJvdGF0aW9uUXVhdGVybmlvbjtcblxuICAgIHJldHVybiBmb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbjtcbiAgfVxuICBcbiAgZ2V0QmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uKCkge1xuICAgIGNvbnN0IHJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudHMgPSB0aGlzLnJvdGF0aW9uUXVhdGVybmlvbiwgLy8vXG4gICAgICAgICAgYmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50cyA9IHJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudHMubWFwKGZ1bmN0aW9uKHJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IGJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCA9IChpbmRleCA8IDEpID8gIC8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArcm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtcm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gYmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50O1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiA9IGJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudHM7XG4gICAgICAgICAgICAgIFxuICAgIHJldHVybiBiYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb247XG4gIH1cblxuICBnZXRGb3J3YXJkc1RyYW5zbGF0aW9uKCkge1xuICAgIGNvbnN0IGZvcndhcmRzVHJhbnNsYXRpb24gPSB0aGlzLnRyYW5zbGF0aW9uO1xuXG4gICAgcmV0dXJuIGZvcndhcmRzVHJhbnNsYXRpb247XG4gIH1cblxuICBnZXRCYWNrd2FyZHNUcmFuc2xhdGlvbigpIHtcbiAgICBjb25zdCB0cmFuc2xhdGlvbkNvbXBvbmVudHMgPSB0aGlzLnRyYW5zbGF0aW9uLCAvLy9cbiAgICAgICAgICBiYWNrd2FyZHNUcmFuc2xhdGlvbkNvbXBvbmVudHMgPSB0cmFuc2xhdGlvbkNvbXBvbmVudHMubWFwKGZ1bmN0aW9uKHRyYW5zbGF0aW9uQ29tcG9uZW50LCBpbmRleCkge1xuICAgICAgICAgICAgY29uc3QgYmFja3dhcmRzVHJhbnNsYXRpb25Db21wb25lbnQgPSAoaW5kZXggPCAyKSA/IC8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICt0cmFuc2xhdGlvbkNvbXBvbmVudCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtdHJhbnNsYXRpb25Db21wb25lbnQ7XG5cbiAgICAgICAgICAgIHJldHVybiBiYWNrd2FyZHNUcmFuc2xhdGlvbkNvbXBvbmVudDtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBiYWNrd2FyZHNUcmFuc2xhdGlvbiA9IGJhY2t3YXJkc1RyYW5zbGF0aW9uQ29tcG9uZW50cztcbiAgICBcbiAgICByZXR1cm4gYmFja3dhcmRzVHJhbnNsYXRpb247XG4gIH1cblxuICBnZXRFZGdlTGluZXNJblhZUGxhbmUoKSB7XG4gICAgY29uc3QgZWRnZUxpbmVzSW5YWVBsYW5lID0gW10sXG4gICAgICAgICAgdmVydGljZXNMZW5ndGggPSAzOyAvLy9cblxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB2ZXJ0aWNlc0xlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IGluZGV4LFxuICAgICAgICAgICAgZW5kSW5kZXggPSAoaW5kZXggKyAxKSAlIHZlcnRpY2VzTGVuZ3RoLFxuICAgICAgICAgICAgc3RhcnRWZXJ0ZXggPSB0aGlzLnZlcnRpY2VzW3N0YXJ0SW5kZXhdLFxuICAgICAgICAgICAgZW5kVmVydGV4ID0gdGhpcy52ZXJ0aWNlc1tlbmRJbmRleF0sXG4gICAgICAgICAgICBlZGdlTGluZUluWFlQbGFuZSA9IExpbmVJblhZUGxhbmUuZnJvbVZlcnRpY2VzKHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgpO1xuXG4gICAgICBlZGdlTGluZXNJblhZUGxhbmUucHVzaChlZGdlTGluZUluWFlQbGFuZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVkZ2VMaW5lc0luWFlQbGFuZTtcbiAgfVxuXG4gIHJvdGF0ZShyb3RhdGlvbk1hdHJpeCkge1xuICAgIGNvbnN0IG1hdDIgPSByb3RhdGlvbk1hdHJpeDsgIC8vL1xuXG4gICAgdGhpcy52ZXJ0aWNlcyA9IHRoaXMudmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgbGV0IHZlYyA9IHZlcnRleDtcblxuICAgICAgdmVjID0gdHJhbnNmb3JtKHZlYywgbWF0Mik7XG5cbiAgICAgIHZlcnRleCA9IHZlYztcblxuICAgICAgcmV0dXJuIHZlcnRleDtcbiAgICB9KTtcbiAgfVxuXG4gIHBvc3NpYmx5U3BsaXQodmVydGljYWxMaW5lSW5YWVBsYW5lKSB7XG4gICAgY29uc3QgaW50ZXJzZWN0aW9ucyA9IHRoaXMuY2FsY3VsYXRlSW50ZXJzZWN0aW9uc1dpdGhWZXJ0aWNhbExpbmVJblhZUGxhbmUodmVydGljYWxMaW5lSW5YWVBsYW5lKSxcbiAgICAgICAgICBpbnRlcnNlY3Rpb25zSW5jbHVkZXNOdWxsID0gaW50ZXJzZWN0aW9ucy5pbmNsdWRlcyhudWxsKSxcbiAgICAgICAgICBmYWNldHNJblhZUGxhbmUgPSBpbnRlcnNlY3Rpb25zSW5jbHVkZXNOdWxsID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zc2libHlTcGxpdFdpdGhOdWxsSW50ZXJzZWN0aW9uKGludGVyc2VjdGlvbnMpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NzaWJseVNwbGl0V2l0aG91dE51bGxJbnRlcnNlY3Rpb24oaW50ZXJzZWN0aW9ucyk7XG5cbiAgICByZXR1cm4gZmFjZXRzSW5YWVBsYW5lO1xuICB9XG5cbiAgcG9zc2libHlTcGxpdFdpdGhOdWxsSW50ZXJzZWN0aW9uKGludGVyc2VjdGlvbnMpIHtcbiAgICBsZXQgZmFjZXRzSW5YWVBsYW5lO1xuXG4gICAgY29uc3Qgbm9uTnVsbEludGVyc2VjdGlvbnMgPSBpbnRlcnNlY3Rpb25zLnJlZHVjZShmdW5jdGlvbihub25OdWxsSW50ZXJzZWN0aW9ucywgaW50ZXJzZWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG5vbk51bGxJbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247IC8vL1xuXG4gICAgICAgICAgICAgIG5vbk51bGxJbnRlcnNlY3Rpb25zLnB1c2gobm9uTnVsbEludGVyc2VjdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBub25OdWxsSW50ZXJzZWN0aW9ucztcbiAgICAgICAgICB9LCBbXSksXG4gICAgICAgICAgZmlyc3ROb25OdWxsSW50ZXJzZWN0aW9uID0gZmlyc3Qobm9uTnVsbEludGVyc2VjdGlvbnMpO1xuXG4gICAgaWYgKChmaXJzdE5vbk51bGxJbnRlcnNlY3Rpb24gPiAwKSAmJiAoZmlyc3ROb25OdWxsSW50ZXJzZWN0aW9uIDwgMSkpIHtcbiAgICAgIGZhY2V0c0luWFlQbGFuZSA9IHRoaXMuc3BsaXRXaXRoTnVsbEludGVyc2VjdGlvbihpbnRlcnNlY3Rpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZmFjZXRJblhZUGxhbmUgPSB0aGlzOyAgLy8vXG5cbiAgICAgIGZhY2V0c0luWFlQbGFuZSA9IFtcbiAgICAgICAgZmFjZXRJblhZUGxhbmVcbiAgICAgIF07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhY2V0c0luWFlQbGFuZTtcbiAgfVxuXG4gIHNwbGl0V2l0aE51bGxJbnRlcnNlY3Rpb24oaW50ZXJzZWN0aW9ucykge1xuICAgIGNvbnN0IHZlcnRpY2VzTGVuZ3RoID0gMyxcbiAgICAgICAgICBudWxsSW50ZXJzZWN0aW9uSW5kZXggPSBpbnRlcnNlY3Rpb25zLmluZGV4T2YobnVsbCksXG4gICAgICAgICAgcGxhY2VzID0gKHZlcnRpY2VzTGVuZ3RoIC0gbnVsbEludGVyc2VjdGlvbkluZGV4KSAmIHZlcnRpY2VzTGVuZ3RoO1xuXG4gICAgbGV0IHZlcnRpY2VzID0gdGhpcy5nZXRWZXJ0aWNlcygpO1xuXG4gICAgaW50ZXJzZWN0aW9ucyA9IHBlcm11dGUoaW50ZXJzZWN0aW9ucywgcGxhY2VzKTtcblxuICAgIHZlcnRpY2VzID0gcGVybXV0ZSh2ZXJ0aWNlcywgcGxhY2VzKTtcblxuICAgIGNvbnN0IGZpcnN0VmVydGV4ID0gZmlyc3QodmVydGljZXMpLFxuICAgICAgICAgIHNlY29uZFZlcnRleCA9IHNlY29uZCh2ZXJ0aWNlcyksXG4gICAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh2ZXJ0aWNlcyksXG4gICAgICAgICAgbm9uTnVsbEludGVyc2VjdGlvbnMgPSBpbnRlcnNlY3Rpb25zLnNsaWNlKDEpLFxuICAgICAgICAgIGZpcnN0Tm9uTnVsbEludGVyc2VjdGlvbiA9IGZpcnN0KG5vbk51bGxJbnRlcnNlY3Rpb25zKSxcbiAgICAgICAgICBzZWNvbmROb25OdWxsSW50ZXJzZWN0aW9uID0gc2Vjb25kKG5vbk51bGxJbnRlcnNlY3Rpb25zKSxcbiAgICAgICAgICBmaXJzdEludGVybWVkaWF0ZVZlcnRleCA9IGNhbGN1bGF0ZUludGVybWVkaWF0ZVZlcnRleChzZWNvbmRWZXJ0ZXgsIHRoaXJkVmVydGV4LCBmaXJzdE5vbk51bGxJbnRlcnNlY3Rpb24pLFxuICAgICAgICAgIHNlY29uZEludGVybWVkaWF0ZVZlcnRleCA9IGNhbGN1bGF0ZUludGVybWVkaWF0ZVZlcnRleCh0aGlyZFZlcnRleCwgZmlyc3RWZXJ0ZXgsIHNlY29uZE5vbk51bGxJbnRlcnNlY3Rpb24pLFxuICAgICAgICAgIGZpcnN0VmVydGljZXMgPSBbXG4gICAgICAgICAgICBmaXJzdFZlcnRleCxcbiAgICAgICAgICAgIHNlY29uZFZlcnRleCxcbiAgICAgICAgICAgIHNlY29uZEludGVybWVkaWF0ZVZlcnRleFxuICAgICAgICAgIF0sXG4gICAgICAgICAgc2Vjb25kVmVydGljZXMgPSBbXG4gICAgICAgICAgICBzZWNvbmRWZXJ0ZXgsXG4gICAgICAgICAgICBmaXJzdEludGVybWVkaWF0ZVZlcnRleCxcbiAgICAgICAgICAgIHNlY29uZEludGVybWVkaWF0ZVZlcnRleFxuICAgICAgICAgIF0sXG4gICAgICAgICAgdGhpcmRWZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgIGZpcnN0SW50ZXJtZWRpYXRlVmVydGV4LFxuICAgICAgICAgICAgdGhpcmRWZXJ0ZXgsXG4gICAgICAgICAgICBzZWNvbmRJbnRlcm1lZGlhdGVWZXJ0ZXhcbiAgICAgICAgICBdLFxuICAgICAgICAgIG5vcm1hbCA9IHRoaXMuZ2V0Tm9ybWFsKCksXG4gICAgICAgICAgZmlyc3RGYWNldEluWFlQbGFuZSA9IG5ldyBGYWNldEluWFlQbGFuZShmaXJzdFZlcnRpY2VzLCBub3JtYWwsIHRoaXMucm90YXRpb25RdWF0ZXJuaW9uLCB0aGlzLnRyYW5zbGF0aW9uKSxcbiAgICAgICAgICBzZWNvbmRGYWNldEluWFlQbGFuZSA9IG5ldyBGYWNldEluWFlQbGFuZShzZWNvbmRWZXJ0aWNlcywgbm9ybWFsLCB0aGlzLnJvdGF0aW9uUXVhdGVybmlvbiwgdGhpcy50cmFuc2xhdGlvbiksXG4gICAgICAgICAgdGhpcmRGYWNldEluWFlQbGFuZSA9IG5ldyBGYWNldEluWFlQbGFuZSh0aGlyZFZlcnRpY2VzLCBub3JtYWwsIHRoaXMucm90YXRpb25RdWF0ZXJuaW9uLCB0aGlzLnRyYW5zbGF0aW9uKSxcbiAgICAgICAgICBmYWNldHNJblhZUGxhbmUgPSBbXG4gICAgICAgICAgICBmaXJzdEZhY2V0SW5YWVBsYW5lLFxuICAgICAgICAgICAgc2Vjb25kRmFjZXRJblhZUGxhbmUsXG4gICAgICAgICAgICB0aGlyZEZhY2V0SW5YWVBsYW5lXG4gICAgICAgICAgXTtcblxuICAgIHJldHVybiBmYWNldHNJblhZUGxhbmU7XG4gIH1cblxuICBwb3NzaWJseVNwbGl0V2l0aG91dE51bGxJbnRlcnNlY3Rpb24oaW50ZXJzZWN0aW9ucykge1xuXG4gIH1cblxuICBwZXJtdXRlVmVydGljZXMocGxhY2VzKSB7XG4gICAgbGV0IHZlcnRpY2VzID0gdGhpcy5nZXRWZXJ0aWNlcygpO1xuXG4gICAgdmVydGljZXMgPSBwZXJtdXRlKHZlcnRpY2VzLCBwbGFjZXMpO1xuXG4gICAgdGhpcy5zZXRWZXJ0aWNlcyh2ZXJ0aWNlcyk7XG4gIH1cblxuICBjYWxjdWxhdGVJbnRlcnNlY3Rpb25zV2l0aFZlcnRpY2FsTGluZUluWFlQbGFuZSh2ZXJ0aWNhbExpbmVJblhZUGxhbmUpIHtcbiAgICBjb25zdCBlZGdlTGluZXNJblhZUGxhbmUgPSB0aGlzLmdldEVkZ2VMaW5lc0luWFlQbGFuZSgpLFxuICAgICAgICAgIGludGVyc2VjdGlvbnMgPSBlZGdlTGluZXNJblhZUGxhbmUubWFwKGZ1bmN0aW9uKGVkZ2VMaW5lSW5YWVBsYW5lKSB7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSBlZGdlTGluZUluWFlQbGFuZS5jYWxjdWxhdGVJbnRlcnNlY3Rpb25XaXRoVmVydGljYWxMaW5lSW5YWVBsYW5lKHZlcnRpY2FsTGluZUluWFlQbGFuZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb247XG4gICAgICAgICAgfSk7XG5cbiAgICByZXR1cm4gaW50ZXJzZWN0aW9ucztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tRmFjZXQoZmFjZXQpIHtcbiAgICBsZXQgbm9ybWFsID0gZmFjZXQuZ2V0Tm9ybWFsKCk7XG4gICAgXG4gICAgY29uc3Qgcm90YXRpb25RdWF0ZXJuaW9uID0gY2FsY3VsYXRlUm90YXRpb25RdWF0ZXJuaW9uKG5vcm1hbCk7XG5cbiAgICBsZXQgdmVydGljZXMgPSBmYWNldC5nZXRWZXJ0aWNlcygpO1xuICAgIFxuICAgIHZlcnRpY2VzID0gcm90YXRlVmVydGljZXModmVydGljZXMsIHJvdGF0aW9uUXVhdGVybmlvbik7XG4gICAgXG4gICAgY29uc3QgdHJhbnNsYXRpb24gPSBjYWxjdWxhdGVUcmFuc2xhdGlvbih2ZXJ0aWNlcyk7XG4gICAgXG4gICAgdmVydGljZXMgPSB0cmFuc2xhdGVWZXJ0aWNlcyh2ZXJ0aWNlcywgdHJhbnNsYXRpb24pO1xuICAgICAgICBcbiAgICBub3JtYWwgPSBjYWxjdWxhdGVOb3JtYWwodmVydGljZXMpO1xuICAgIFxuICAgIGNvbnN0IGZhY2V0SW5YWVBsYW5lID0gbmV3IEZhY2V0SW5YWVBsYW5lKHZlcnRpY2VzLCBub3JtYWwsIHJvdGF0aW9uUXVhdGVybmlvbiwgdHJhbnNsYXRpb24pO1xuXG4gICAgcmV0dXJuIGZhY2V0SW5YWVBsYW5lO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRmFjZXRJblhZUGxhbmU7XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVRyYW5zbGF0aW9uKHZlcnRpY2VzKSB7XG4gIGNvbnN0IGZpcnN0VmVydGV4ID0gZmlyc3QodmVydGljZXMpLFxuICAgICAgICB2ZXJ0ZXggPSBmaXJzdFZlcnRleCwgLy8vXG4gICAgICAgIHZlcnRleENvbXBvbmVudHMgPSB2ZXJ0ZXgsICAvLy9cbiAgICAgICAgdGhpcmRWZXJ0ZXhDb21wb25lbnQgPSB0aGlyZCh2ZXJ0ZXhDb21wb25lbnRzKSxcbiAgICAgICAgeiA9IHRoaXJkVmVydGV4Q29tcG9uZW50LCAvLy9cbiAgICAgICAgdHJhbnNsYXRpb24gPSBbMCwgMCwgLXpdO1xuXG4gIHJldHVybiB0cmFuc2xhdGlvbjtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlSW50ZXJtZWRpYXRlVmVydGV4KHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgsIG5vbk51bGxJbnRlcnNlY3Rpb24pIHtcbiAgY29uc3QgZGlyZWN0aW9uID0gc3VidHJhY3QoZW5kVmVydGV4LCBzdGFydFZlcnRleCksXG4gICAgICAgIG9mZnNldCA9IHNjYWxlKGRpcmVjdGlvbiwgbm9uTnVsbEludGVyc2VjdGlvbiksXG4gICAgICAgIGludGVybWVkaWF0ZVZlcnRleCA9IGFkZChzdGFydFZlcnRleCwgb2Zmc2V0KTtcblxuICByZXR1cm4gaW50ZXJtZWRpYXRlVmVydGV4O1xufSJdfQ==