'use strict';

require('../jiggle');

var Canvas = require('../canvas'),
    Mask = require('../element/mask'),
    Part = require('../element/part'),
    Scene = require('../element/scene'),
    Camera = require('../element/camera'),
    ColouredCuboid = require('./common/coloured/cuboid'),
    imageMapUtilities = require('../utilities/imageMap');

var preloadImageMap = imageMapUtilities.preloadImageMap;


var masking = function masking() {
  var canvas = new Canvas();

  preloadImageMap(function (imageMap) {
    return React.createElement(
      Scene,
      { canvas: canvas },
      React.createElement(
        Part,
        { imageMap: imageMap, canvas: canvas },
        React.createElement(
          ColouredCuboid,
          { colour: [1, 1, 0, 1], position: [-0.5, -0.5, -0.5] },
          React.createElement(
            Mask,
            null,
            React.createElement(
              ColouredCuboid,
              { width: 0.5, height: 0.5, depth: 0.5, position: [0.25, 0.25, 0.25] },
              React.createElement(
                Mask,
                null,
                React.createElement(ColouredCuboid, { width: 0.5, height: 0.5, depth: 0.5, position: [0.25, 0.25, 0.25] })
              )
            )
          )
        )
      ),
      React.createElement(Camera, { initialDistance: 5, initialOffset: [0, 0, 0], canvas: canvas })
    );
  });
};

module.exports = masking;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9tYXNraW5nLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJDYW52YXMiLCJNYXNrIiwiUGFydCIsIlNjZW5lIiwiQ2FtZXJhIiwiQ29sb3VyZWRDdWJvaWQiLCJpbWFnZU1hcFV0aWxpdGllcyIsInByZWxvYWRJbWFnZU1hcCIsIm1hc2tpbmciLCJjYW52YXMiLCJpbWFnZU1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxRQUFRLFdBQVI7O0FBRUEsSUFBTUMsU0FBU0QsUUFBUSxXQUFSLENBQWY7QUFBQSxJQUNNRSxPQUFPRixRQUFRLGlCQUFSLENBRGI7QUFBQSxJQUVNRyxPQUFPSCxRQUFRLGlCQUFSLENBRmI7QUFBQSxJQUdNSSxRQUFRSixRQUFRLGtCQUFSLENBSGQ7QUFBQSxJQUlNSyxTQUFTTCxRQUFRLG1CQUFSLENBSmY7QUFBQSxJQUtNTSxpQkFBaUJOLFFBQVEsMEJBQVIsQ0FMdkI7QUFBQSxJQU1NTyxvQkFBb0JQLFFBQVEsdUJBQVIsQ0FOMUI7O0lBUVFRLGUsR0FBb0JELGlCLENBQXBCQyxlOzs7QUFFUixJQUFNQyxVQUFVLFNBQVZBLE9BQVUsR0FBTTtBQUNwQixNQUFNQyxTQUFTLElBQUlULE1BQUosRUFBZjs7QUFFQU8sa0JBQWdCLFVBQUNHLFFBQUQ7QUFBQSxXQUVkO0FBQUMsV0FBRDtBQUFBLFFBQU8sUUFBUUQsTUFBZjtBQUNFO0FBQUMsWUFBRDtBQUFBLFVBQU0sVUFBVUMsUUFBaEIsRUFBMEIsUUFBUUQsTUFBbEM7QUFDRTtBQUFDLHdCQUFEO0FBQUEsWUFBZ0IsUUFBUSxDQUFFLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixFQUFXLENBQVgsQ0FBeEIsRUFBd0MsVUFBVSxDQUFFLENBQUMsR0FBSCxFQUFRLENBQUMsR0FBVCxFQUFjLENBQUMsR0FBZixDQUFsRDtBQUNFO0FBQUMsZ0JBQUQ7QUFBQTtBQUNFO0FBQUMsNEJBQUQ7QUFBQSxnQkFBZ0IsT0FBTyxHQUF2QixFQUE0QixRQUFRLEdBQXBDLEVBQXlDLE9BQU8sR0FBaEQsRUFBcUQsVUFBVSxDQUFFLElBQUYsRUFBUSxJQUFSLEVBQWMsSUFBZCxDQUEvRDtBQUNFO0FBQUMsb0JBQUQ7QUFBQTtBQUNFLG9DQUFDLGNBQUQsSUFBZ0IsT0FBTyxHQUF2QixFQUE0QixRQUFRLEdBQXBDLEVBQXlDLE9BQU8sR0FBaEQsRUFBcUQsVUFBVSxDQUFFLElBQUYsRUFBUSxJQUFSLEVBQWMsSUFBZCxDQUEvRDtBQURGO0FBREY7QUFERjtBQURGO0FBREYsT0FERjtBQVlFLDBCQUFDLE1BQUQsSUFBUSxpQkFBaUIsQ0FBekIsRUFBNEIsZUFBZSxDQUFFLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixDQUEzQyxFQUF3RCxRQUFRQSxNQUFoRTtBQVpGLEtBRmM7QUFBQSxHQUFoQjtBQWtCRCxDQXJCRDs7QUF1QkFFLE9BQU9DLE9BQVAsR0FBaUJKLE9BQWpCIiwiZmlsZSI6Im1hc2tpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL2ppZ2dsZScpO1xuXG5jb25zdCBDYW52YXMgPSByZXF1aXJlKCcuLi9jYW52YXMnKSxcbiAgICAgIE1hc2sgPSByZXF1aXJlKCcuLi9lbGVtZW50L21hc2snKSxcbiAgICAgIFBhcnQgPSByZXF1aXJlKCcuLi9lbGVtZW50L3BhcnQnKSxcbiAgICAgIFNjZW5lID0gcmVxdWlyZSgnLi4vZWxlbWVudC9zY2VuZScpLFxuICAgICAgQ2FtZXJhID0gcmVxdWlyZSgnLi4vZWxlbWVudC9jYW1lcmEnKSxcbiAgICAgIENvbG91cmVkQ3Vib2lkID0gcmVxdWlyZSgnLi9jb21tb24vY29sb3VyZWQvY3Vib2lkJyksXG4gICAgICBpbWFnZU1hcFV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9pbWFnZU1hcCcpO1xuXG5jb25zdCB7IHByZWxvYWRJbWFnZU1hcCB9ID0gaW1hZ2VNYXBVdGlsaXRpZXM7XG5cbmNvbnN0IG1hc2tpbmcgPSAoKSA9PiB7XG4gIGNvbnN0IGNhbnZhcyA9IG5ldyBDYW52YXMoKTtcblxuICBwcmVsb2FkSW1hZ2VNYXAoKGltYWdlTWFwKSA9PlxuXG4gICAgPFNjZW5lIGNhbnZhcz17Y2FudmFzfT5cbiAgICAgIDxQYXJ0IGltYWdlTWFwPXtpbWFnZU1hcH0gY2FudmFzPXtjYW52YXN9PlxuICAgICAgICA8Q29sb3VyZWRDdWJvaWQgY29sb3VyPXtbIDEsIDEsIDAsIDEgXX0gcG9zaXRpb249e1sgLTAuNSwgLTAuNSwgLTAuNSBdfT5cbiAgICAgICAgICA8TWFzaz5cbiAgICAgICAgICAgIDxDb2xvdXJlZEN1Ym9pZCB3aWR0aD17MC41fSBoZWlnaHQ9ezAuNX0gZGVwdGg9ezAuNX0gcG9zaXRpb249e1sgMC4yNSwgMC4yNSwgMC4yNSBdfT5cbiAgICAgICAgICAgICAgPE1hc2s+XG4gICAgICAgICAgICAgICAgPENvbG91cmVkQ3Vib2lkIHdpZHRoPXswLjV9IGhlaWdodD17MC41fSBkZXB0aD17MC41fSBwb3NpdGlvbj17WyAwLjI1LCAwLjI1LCAwLjI1IF19IC8+XG4gICAgICAgICAgICAgIDwvTWFzaz5cbiAgICAgICAgICAgIDwvQ29sb3VyZWRDdWJvaWQ+XG4gICAgICAgICAgPC9NYXNrPlxuICAgICAgICA8L0NvbG91cmVkQ3Vib2lkPlxuICAgICAgPC9QYXJ0PlxuICAgICAgPENhbWVyYSBpbml0aWFsRGlzdGFuY2U9ezV9IGluaXRpYWxPZmZzZXQ9e1sgMCwgMCwgMCBdfSBjYW52YXM9e2NhbnZhc30gLz5cbiAgICA8L1NjZW5lPlxuXG4gICk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1hc2tpbmc7XG4iXX0=