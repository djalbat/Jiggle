'use strict';

var Canvas = require('../canvas'),
    Normal = require('../normal'),
    Rotation = require('../rotation'),
    Position = require('../position'),
    Perspective = require('../perspective'),
    ColourShader = require('../shader/colour'),
    TextureShader = require('../shader/texture');

var vertexColourData = [1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0],
    textureCoordinateData = [0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0],
    vertexPositionData = [-1.0, -1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, +1.0, -1.0, +1.0, +1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +1.0, +1.0, +1.0, +1.0, +1.0, +1.0, +1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +1.0, -1.0, +1.0, -1.0, -1.0, +1.0, +1.0, -1.0, -1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, +1.0, -1.0, +1.0, -1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0],
    vertexNormalData = [0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0],
    vertexIndexData = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];

var canvas = new Canvas(),
    clientWidth = canvas.getClientWidth(),
    clientHeight = canvas.getClientHeight(),
    zCoordinate = -5,
    ///
position = Position.fromZCoordinate(zCoordinate),
    perspective = Perspective.fromClientWidthAndClientHeight(clientWidth, clientHeight),
    count = canvas.createAndBindElementBuffer(vertexIndexData);

canvas.enableDepthTesting();
canvas.enableDepthFunction();

var intermediate = function intermediate() {
  var context = canvas.getContext();

  if (!context) {
    return;
  }

  // const imageURL = 'texture/bricks.jpg';
  //
  // textureCube(imageURL, canvas, function(textureShader) {
  //   shader = textureShader; ///
  //
  //   requestAnimationFrame(render);
  // });

  var colourShader = colourCube(canvas);

  shader = colourShader; ///

  requestAnimationFrame(render);
};

var textureCube = function textureCube(imageURL, canvas, callback) {
  var textureShader = TextureShader.fromNothing(canvas);

  textureShader.createAndBindVertexPositionBuffer(vertexPositionData, canvas);

  textureShader.createAndBindTextureCoordinateBuffer(textureCoordinateData, canvas);

  textureShader.createAndBindVertexNormalBuffer(vertexNormalData, canvas);

  canvas.useShader(textureShader);

  textureShader.createAndActivateTexture(imageURL, canvas, function () {
    callback(textureShader);
  });
};

var colourCube = function colourCube(canvas) {
  var colourShader = ColourShader.fromNothing(canvas);

  colourShader.createAndBindVertexPositionBuffer(vertexPositionData, canvas);

  colourShader.createAndBindVertexColourBuffer(vertexColourData, canvas);

  colourShader.createAndBindVertexNormalBuffer(vertexNormalData, canvas);

  canvas.useShader(colourShader);

  return colourShader;
};

var initialTime = null;

var shader = void 0;

var render = function render(time) {
  if (initialTime === null) {
    initialTime = time;
  }

  var elapsedTime = time - initialTime,
      xAngle = elapsedTime / 1000,
      yAngle = elapsedTime / 1000,
      rotation = Rotation.fromXAngleAndYAngle(xAngle, yAngle),
      normal = Normal.fromRotation(rotation);

  canvas.render(normal, rotation, position, perspective, shader);

  canvas.drawElements(count);

  requestAnimationFrame(render);
};

module.exports = intermediate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,