'use strict';

var necessary = require('necessary');

var App = require('./intermediate/app'),
    Canvas = require('../canvas'),
    MouseEvents = require('../mouseEvents'),
    ColourShader = require('../shader/colour'),
    TextureShader = require('../shader/texture'),
    imagesUtilities = require('../utilities/images'),
    ColourCube = require('./intermediate/cube/colour'),
    TextureCube = require('./intermediate/cube/texture');

var arrayUtilities = necessary.arrayUtilities,
    preload = imagesUtilities.preload,
    first = arrayUtilities.first;


function intermediate() {
  var canvas = new Canvas(),
      mouseEvents = MouseEvents.fromNothing(canvas),
      colourShader = ColourShader.fromNothing(canvas),
      textureShader = TextureShader.fromNothing(canvas);

  canvas.enableDepthTesting();
  canvas.enableDepthFunction();

  createColourCube(colourShader, canvas, function (colourCube) {
    createTextureCube(textureShader, canvas, function (textureCube) {
      var app = new App(canvas, colourCube, colourShader, textureCube, textureShader),
          mouseUpEventHandler = app.mouseUpEventHandler.bind(app),
          mouseDownEventHandler = app.mouseDownEventHandler.bind(app),
          mouseMoveEventHandler = app.mouseMoveEventHandler.bind(app),
          mouseWheelEventHandler = app.mouseWheelEventHandler.bind(app);

      mouseEvents.addMouseUpEventHandler(mouseUpEventHandler);
      mouseEvents.addMouseDownEventHandler(mouseDownEventHandler);
      mouseEvents.addMouseMoveEventHandler(mouseMoveEventHandler);
      mouseEvents.addMouseWheelEventHandler(mouseWheelEventHandler);

      window.onresize = function () {
        app.resize();
        app.render();
      };

      app.resize();
      app.render();
    });
  });
}

module.exports = intermediate;

function createColourCube(colourShader, canvas, callback) {
  var offsetPosition = [-2, 0, 0],
      colourCube = ColourCube.fromOffsetPosition(offsetPosition, colourShader, canvas);

  callback(colourCube);
}

function createTextureCube(textureShader, canvas, callback) {
  var sources = ['texture/bricks.jpg'];

  preload(sources, function (images) {
    var firstImage = first(images),
        offsetPosition = [+2, 0, 0],
        image = firstImage,
        ///
    textureCube = TextureCube.fromOffsetPositionAndImage(offsetPosition, image, textureShader, canvas);

    callback(textureCube);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkFwcCIsIkNhbnZhcyIsIk1vdXNlRXZlbnRzIiwiQ29sb3VyU2hhZGVyIiwiVGV4dHVyZVNoYWRlciIsImltYWdlc1V0aWxpdGllcyIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImFycmF5VXRpbGl0aWVzIiwicHJlbG9hZCIsImZpcnN0IiwiaW50ZXJtZWRpYXRlIiwiY2FudmFzIiwibW91c2VFdmVudHMiLCJmcm9tTm90aGluZyIsImNvbG91clNoYWRlciIsInRleHR1cmVTaGFkZXIiLCJlbmFibGVEZXB0aFRlc3RpbmciLCJlbmFibGVEZXB0aEZ1bmN0aW9uIiwiY3JlYXRlQ29sb3VyQ3ViZSIsImNvbG91ckN1YmUiLCJjcmVhdGVUZXh0dXJlQ3ViZSIsInRleHR1cmVDdWJlIiwiYXBwIiwibW91c2VVcEV2ZW50SGFuZGxlciIsImJpbmQiLCJtb3VzZURvd25FdmVudEhhbmRsZXIiLCJtb3VzZU1vdmVFdmVudEhhbmRsZXIiLCJtb3VzZVdoZWVsRXZlbnRIYW5kbGVyIiwiYWRkTW91c2VVcEV2ZW50SGFuZGxlciIsImFkZE1vdXNlRG93bkV2ZW50SGFuZGxlciIsImFkZE1vdXNlTW92ZUV2ZW50SGFuZGxlciIsImFkZE1vdXNlV2hlZWxFdmVudEhhbmRsZXIiLCJ3aW5kb3ciLCJvbnJlc2l6ZSIsInJlc2l6ZSIsInJlbmRlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJjYWxsYmFjayIsIm9mZnNldFBvc2l0aW9uIiwiZnJvbU9mZnNldFBvc2l0aW9uIiwic291cmNlcyIsImltYWdlcyIsImZpcnN0SW1hZ2UiLCJpbWFnZSIsImZyb21PZmZzZXRQb3NpdGlvbkFuZEltYWdlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRUEsSUFBTUMsTUFBTUQsUUFBUSxvQkFBUixDQUFa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RixFQUFLLENBQUwsRUFBUSxDQUFSLENBRHZCO0FBQUEsUUFFTUssUUFBUUQsVUFGZDtBQUFBLFFBRTBCO0FBQ3BCdEIsa0JBQWNmLFlBQVl1QywwQkFBWixDQUF1Q04sY0FBdkMsRUFBdURLLEtBQXZELEVBQThEN0IsYUFBOUQsRUFBNkVKLE1BQTdFLENBSHBCOztBQUtBMkIsYUFBU2pCLFdBQVQ7QUFDRCxHQVBEO0FBUUQiLCJmaWxlIjoiaW50ZXJtZWRpYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgQXBwID0gcmVxdWlyZSgnLi9pbnRlcm1lZGlhdGUvYXBwJyksXG4gICAgICBDYW52YXMgPSByZXF1aXJlKCcuLi9jYW52YXMnKSxcbiAgICAgIE1vdXNlRXZlbnRzID0gcmVxdWlyZSgnLi4vbW91c2VFdmVudHMnKSxcbiAgICAgIENvbG91clNoYWRlciA9IHJlcXVpcmUoJy4uL3NoYWRlci9jb2xvdXInKSxcbiAgICAgIFRleHR1cmVTaGFkZXIgPSByZXF1aXJlKCcuLi9zaGFkZXIvdGV4dHVyZScpLFxuICAgICAgaW1hZ2VzVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2ltYWdlcycpLFxuICAgICAgQ29sb3VyQ3ViZSA9IHJlcXVpcmUoJy4vaW50ZXJtZWRpYXRlL2N1YmUvY29sb3VyJyksXG4gICAgICBUZXh0dXJlQ3ViZSA9IHJlcXVpcmUoJy4vaW50ZXJtZWRpYXRlL2N1YmUvdGV4dHVyZScpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IHByZWxvYWQgfSA9IGltYWdlc1V0aWxpdGllcyxcbiAgICAgIHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBpbnRlcm1lZGlhdGUoKSB7XG4gIGNvbnN0IGNhbnZhcyA9IG5ldyBDYW52YXMoKSxcbiAgICAgICAgbW91c2VFdmVudHMgPSBNb3VzZUV2ZW50cy5mcm9tTm90aGluZyhjYW52YXMpLFxuICAgICAgICBjb2xvdXJTaGFkZXIgPSBDb2xvdXJTaGFkZXIuZnJvbU5vdGhpbmcoY2FudmFzKSxcbiAgICAgICAgdGV4dHVyZVNoYWRlciA9IFRleHR1cmVTaGFkZXIuZnJvbU5vdGhpbmcoY2FudmFzKTtcblxuICBjYW52YXMuZW5hYmxlRGVwdGhUZXN0aW5nKCk7XG4gIGNhbnZhcy5lbmFibGVEZXB0aEZ1bmN0aW9uKCk7XG5cbiAgY3JlYXRlQ29sb3VyQ3ViZShjb2xvdXJTaGFkZXIsIGNhbnZhcywgZnVuY3Rpb24oY29sb3VyQ3ViZSkge1xuICAgIGNyZWF0ZVRleHR1cmVDdWJlKHRleHR1cmVTaGFkZXIsIGNhbnZhcywgZnVuY3Rpb24odGV4dHVyZUN1YmUpIHtcbiAgICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoY2FudmFzLCBjb2xvdXJDdWJlLCBjb2xvdXJTaGFkZXIsIHRleHR1cmVDdWJlLCB0ZXh0dXJlU2hhZGVyKSxcbiAgICAgICAgICAgIG1vdXNlVXBFdmVudEhhbmRsZXIgPSBhcHAubW91c2VVcEV2ZW50SGFuZGxlci5iaW5kKGFwcCksXG4gICAgICAgICAgICBtb3VzZURvd25FdmVudEhhbmRsZXIgPSBhcHAubW91c2VEb3duRXZlbnRIYW5kbGVyLmJpbmQoYXBwKSxcbiAgICAgICAgICAgIG1vdXNlTW92ZUV2ZW50SGFuZGxlciA9IGFwcC5tb3VzZU1vdmVFdmVudEhhbmRsZXIuYmluZChhcHApLFxuICAgICAgICAgICAgbW91c2VXaGVlbEV2ZW50SGFuZGxlciA9IGFwcC5tb3VzZVdoZWVsRXZlbnRIYW5kbGVyLmJpbmQoYXBwKTtcblxuICAgICAgbW91c2VFdmVudHMuYWRkTW91c2VVcEV2ZW50SGFuZGxlcihtb3VzZVVwRXZlbnRIYW5kbGVyKTtcbiAgICAgIG1vdXNlRXZlbnRzLmFkZE1vdXNlRG93bkV2ZW50SGFuZGxlcihtb3VzZURvd25FdmVudEhhbmRsZXIpO1xuICAgICAgbW91c2VFdmVudHMuYWRkTW91c2VNb3ZlRXZlbnRIYW5kbGVyKG1vdXNlTW92ZUV2ZW50SGFuZGxlcik7XG4gICAgICBtb3VzZUV2ZW50cy5hZGRNb3VzZVdoZWVsRXZlbnRIYW5kbGVyKG1vdXNlV2hlZWxFdmVudEhhbmRsZXIpO1xuXG4gICAgICB3aW5kb3cub25yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgYXBwLnJlc2l6ZSgpO1xuICAgICAgICBhcHAucmVuZGVyKCk7XG4gICAgICB9O1xuXG4gICAgICBhcHAucmVzaXplKCk7XG4gICAgICBhcHAucmVuZGVyKCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludGVybWVkaWF0ZTtcblxuZnVuY3Rpb24gY3JlYXRlQ29sb3VyQ3ViZShjb2xvdXJTaGFkZXIsIGNhbnZhcywgY2FsbGJhY2spIHtcbiAgY29uc3Qgb2Zmc2V0UG9zaXRpb24gPSBbLTIsIDAsIDBdLFxuICAgICAgICBjb2xvdXJDdWJlID0gQ29sb3VyQ3ViZS5mcm9tT2Zmc2V0UG9zaXRpb24ob2Zmc2V0UG9zaXRpb24sIGNvbG91clNoYWRlciwgY2FudmFzKTtcblxuICBjYWxsYmFjayhjb2xvdXJDdWJlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dHVyZUN1YmUodGV4dHVyZVNoYWRlciwgY2FudmFzLCBjYWxsYmFjaykge1xuICBjb25zdCBzb3VyY2VzID0gW1xuICAgICAgICAgICd0ZXh0dXJlL2JyaWNrcy5qcGcnXG4gICAgICAgIF07XG5cbiAgcHJlbG9hZChzb3VyY2VzLCBmdW5jdGlvbihpbWFnZXMpIHtcbiAgICBjb25zdCBmaXJzdEltYWdlID0gZmlyc3QoaW1hZ2VzKSxcbiAgICAgICAgICBvZmZzZXRQb3NpdGlvbiA9IFsrMiwgMCwgMF0sXG4gICAgICAgICAgaW1hZ2UgPSBmaXJzdEltYWdlLCAvLy9cbiAgICAgICAgICB0ZXh0dXJlQ3ViZSA9IFRleHR1cmVDdWJlLmZyb21PZmZzZXRQb3NpdGlvbkFuZEltYWdlKG9mZnNldFBvc2l0aW9uLCBpbWFnZSwgdGV4dHVyZVNoYWRlciwgY2FudmFzKTtcblxuICAgIGNhbGxiYWNrKHRleHR1cmVDdWJlKTtcbiAgfSk7XG59XG4iXX0=