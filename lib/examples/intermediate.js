'use strict';

var Canvas = require('../canvas'),
    Normal = require('../normal'),
    Rotation = require('../rotation'),
    Position = require('../position'),
    Perspective = require('../perspective'),
    colourCube = require('./intermediate/colourCube'),
    textureCube = require('./intermediate/textureCube');

var intermediate = function intermediate() {
  var canvas = new Canvas(),
      context = canvas.getContext();

  if (!context) {
    return;
  }

  var callback = function callback(count, shader) {
    canvas.enableDepthTesting();
    canvas.enableDepthFunction();

    var render = createRender(canvas, count, shader);

    requestAnimationFrame(render);
  };

  var image = new Image();

  image.onload = function () {
    textureCube(image, canvas, callback);
  };

  image.src = 'texture/bricks.jpg';

  // colourCube(canvas, callback);
};

var createRender = function createRender(canvas, count, shader) {
  var initialTime = null;

  var clientWidth = canvas.getClientWidth(),
      clientHeight = canvas.getClientHeight(),
      zCoordinate = -5,
      ///
  position = Position.fromZCoordinate(zCoordinate),
      perspective = Perspective.fromClientWidthAndClientHeight(clientWidth, clientHeight);

  var render = function render(time) {
    if (initialTime === null) {
      initialTime = time;
    }

    var elapsedTime = time - initialTime,
        xAngle = elapsedTime / 1000,
        yAngle = elapsedTime / 1000,
        rotation = Rotation.fromXAngleAndYAngle(xAngle, yAngle),
        normal = Normal.fromRotation(rotation);

    canvas.render(normal, rotation, position, perspective, shader);

    canvas.drawElements(count);

    requestAnimationFrame(render);
  };

  return render;
};

module.exports = intermediate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUuanMiXSwibmFtZXMiOlsiQ2FudmFzIiwicmVxdWlyZSIsIk5vcm1hbCIsIlJvdGF0aW9uIiwiUG9zaXRpb24iLCJQZXJzcGVjdGl2ZSIsImNvbG91ckN1YmUiLCJ0ZXh0dXJlQ3ViZSIsImludGVybWVkaWF0ZSIsImNhbnZhcyIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiY2FsbGJhY2siLCJjb3VudCIsInNoYWRlciIsImVuYWJsZURlcHRoVGVzdGluZyIsImVuYWJsZURlcHRoRnVuY3Rpb24iLCJyZW5kZXIiLCJjcmVhdGVSZW5kZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbWFnZSIsIkltYWdlIiwib25sb2FkIiwic3JjIiwiaW5pdGlhbFRpbWUiLCJjbGllbnRXaWR0aCIsImdldENsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiZ2V0Q2xpZW50SGVpZ2h0IiwiekNvb3JkaW5hdGUiLCJwb3NpdGlvbiIsImZyb21aQ29vcmRpbmF0ZSIsInBlcnNwZWN0aXZlIiwiZnJvbUNsaWVudFdpZHRoQW5kQ2xpZW50SGVpZ2h0IiwidGltZSIsImVsYXBzZWRUaW1lIiwieEFuZ2xlIiwieUFuZ2xlIiwicm90YXRpb24iLCJmcm9tWEFuZ2xlQW5kWUFuZ2xlIiwibm9ybWFsIiwiZnJvbVJvdGF0aW9uIiwiZHJhd0VsZW1lbnRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsU0FBU0MsUUFBUSxXQUFSLENBQWY7QUFBQSxJQUNNQyxTQUFTRCxRQUFRLFdBQVIsQ0FEZjtBQUFBLElBRU1FLFdBQVdGLFFBQVEsYUFBUixDQUZqQjtBQUFBLElBR01HLFdBQVdILFFBQVEsYUFBUixDQUhqQjtBQUFBLElBSU1JLGNBQWNKLFFBQVEsZ0JBQVIsQ0FKcEI7QUFBQSxJQUtNSyxhQUFhTCxRQUFRLDJCQUFSLENBTG5CO0FBQUEsSUFNTU0sY0FBY04sUUFBUSw0QkFBUixDQU5wQjs7QUFRQSxJQUFNTyxlQUFlLFNBQWZBLFlBQWUsR0FBTTtBQUN6QixNQUFNQyxTQUFTLElBQUlULE1BQUosRUFBZjtBQUFBLE1BQ01VLFVBQVVELE9BQU9FLFVBQVAsRUFEaEI7O0FBR0EsTUFBSSxDQUFDRCxPQUFMLEVBQWM7QUFDWjtBQUNEOztBQUVELE1BQU1FLFdBQVcsU0FBWEEsUUFBVyxDQUFDQyxLQUFELEVBQVFDLE1BQVIsRUFBbUI7QUFDbENMLFdBQU9NLGtCQUFQO0FBQ0FOLFdBQU9PLG1CQUFQOztBQUVBLFFBQU1DLFNBQVNDLGFBQWFULE1BQWIsRUFBcUJJLEtBQXJCLEVBQTRCQyxNQUE1QixDQUFmOztBQUVBSywwQkFBc0JGLE1BQXRCO0FBQ0QsR0FQRDs7QUFTQSxNQUFNRyxRQUFRLElBQUlDLEtBQUosRUFBZDs7QUFFQUQsUUFBTUUsTUFBTixHQUFlLFlBQVc7QUFDeEJmLGdCQUFZYSxLQUFaLEVBQW1CWCxNQUFuQixFQUEyQkcsUUFBM0I7QUFDRCxHQUZEOztBQUlBUSxRQUFNRyxHQUFOLEdBQVksb0JBQVo7O0FBRUE7QUFDRCxDQTFCRDs7QUE0QkEsSUFBTUwsZUFBZSxTQUFmQSxZQUFlLENBQUNULE1BQUQsRUFBU0ksS0FBVCxFQUFnQkMsTUFBaEIsRUFBMkI7QUFDOUMsTUFBSVUsY0FBYyxJQUFsQjs7QUFFQSxNQUFNQyxjQUFjaEIsT0FBT2lCLGNBQVAsRUFBcEI7QUFBQSxNQUNNQyxlQUFlbEIsT0FBT21CLGVBQVAsRUFEckI7QUFBQSxNQUVNQyxjQUFjLENBQUMsQ0FGckI7QUFBQSxNQUV3QjtBQUNsQkMsYUFBVzFCLFNBQVMyQixlQUFULENBQXlCRixXQUF6QixDQUhqQjtBQUFBLE1BSU1HLGNBQWMzQixZQUFZNEIsOEJBQVosQ0FBMkNSLFdBQTNDLEVBQXdERSxZQUF4RCxDQUpwQjs7QUFNQSxNQUFNVixTQUFTLFNBQVRBLE1BQVMsQ0FBQ2lCLElBQUQsRUFBVTtBQUN2QixRQUFJVixnQkFBZ0IsSUFBcEIsRUFBMEI7QUFDeEJBLG9CQUFjVSxJQUFkO0FBQ0Q7O0FBRUQsUUFBTUMsY0FBY0QsT0FBT1YsV0FBM0I7QUFBQSxRQUNNWSxTQUFTRCxjQUFjLElBRDdCO0FBQUEsUUFFTUUsU0FBU0YsY0FBYyxJQUY3QjtBQUFBLFFBR01HLFdBQVduQyxTQUFTb0MsbUJBQVQsQ0FBNkJILE1BQTdCLEVBQXFDQyxNQUFyQyxDQUhqQjtBQUFBLFFBSU1HLFNBQVN0QyxPQUFPdUMsWUFBUCxDQUFvQkgsUUFBcEIsQ0FKZjs7QUFNQTdCLFdBQU9RLE1BQVAsQ0FBY3VCLE1BQWQsRUFBc0JGLFFBQXRCLEVBQWdDUixRQUFoQyxFQUEwQ0UsV0FBMUMsRUFBdURsQixNQUF2RDs7QUFFQUwsV0FBT2lDLFlBQVAsQ0FBb0I3QixLQUFwQjs7QUFFQU0sMEJBQXNCRixNQUF0QjtBQUNELEdBaEJEOztBQWtCQSxTQUFPQSxNQUFQO0FBQ0QsQ0E1QkQ7O0FBOEJBMEIsT0FBT0MsT0FBUCxHQUFpQnBDLFlBQWpCIiwiZmlsZSI6ImludGVybWVkaWF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQ2FudmFzID0gcmVxdWlyZSgnLi4vY2FudmFzJyksXG4gICAgICBOb3JtYWwgPSByZXF1aXJlKCcuLi9ub3JtYWwnKSxcbiAgICAgIFJvdGF0aW9uID0gcmVxdWlyZSgnLi4vcm90YXRpb24nKSxcbiAgICAgIFBvc2l0aW9uID0gcmVxdWlyZSgnLi4vcG9zaXRpb24nKSxcbiAgICAgIFBlcnNwZWN0aXZlID0gcmVxdWlyZSgnLi4vcGVyc3BlY3RpdmUnKSxcbiAgICAgIGNvbG91ckN1YmUgPSByZXF1aXJlKCcuL2ludGVybWVkaWF0ZS9jb2xvdXJDdWJlJyksXG4gICAgICB0ZXh0dXJlQ3ViZSA9IHJlcXVpcmUoJy4vaW50ZXJtZWRpYXRlL3RleHR1cmVDdWJlJyk7XG5cbmNvbnN0IGludGVybWVkaWF0ZSA9ICgpID0+IHtcbiAgY29uc3QgY2FudmFzID0gbmV3IENhbnZhcygpLFxuICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoKTtcblxuICBpZiAoIWNvbnRleHQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBjYWxsYmFjayA9IChjb3VudCwgc2hhZGVyKSA9PiB7XG4gICAgY2FudmFzLmVuYWJsZURlcHRoVGVzdGluZygpO1xuICAgIGNhbnZhcy5lbmFibGVEZXB0aEZ1bmN0aW9uKCk7XG5cbiAgICBjb25zdCByZW5kZXIgPSBjcmVhdGVSZW5kZXIoY2FudmFzLCBjb3VudCwgc2hhZGVyKTtcblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICB9O1xuICBcbiAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgXG4gIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIHRleHR1cmVDdWJlKGltYWdlLCBjYW52YXMsIGNhbGxiYWNrKTtcbiAgfTtcbiAgXG4gIGltYWdlLnNyYyA9ICd0ZXh0dXJlL2JyaWNrcy5qcGcnO1xuXG4gIC8vIGNvbG91ckN1YmUoY2FudmFzLCBjYWxsYmFjayk7XG59O1xuXG5jb25zdCBjcmVhdGVSZW5kZXIgPSAoY2FudmFzLCBjb3VudCwgc2hhZGVyKSA9PiB7XG4gIGxldCBpbml0aWFsVGltZSA9IG51bGw7XG5cbiAgY29uc3QgY2xpZW50V2lkdGggPSBjYW52YXMuZ2V0Q2xpZW50V2lkdGgoKSxcbiAgICAgICAgY2xpZW50SGVpZ2h0ID0gY2FudmFzLmdldENsaWVudEhlaWdodCgpLFxuICAgICAgICB6Q29vcmRpbmF0ZSA9IC01LCAvLy9cbiAgICAgICAgcG9zaXRpb24gPSBQb3NpdGlvbi5mcm9tWkNvb3JkaW5hdGUoekNvb3JkaW5hdGUpLFxuICAgICAgICBwZXJzcGVjdGl2ZSA9IFBlcnNwZWN0aXZlLmZyb21DbGllbnRXaWR0aEFuZENsaWVudEhlaWdodChjbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0KTtcblxuICBjb25zdCByZW5kZXIgPSAodGltZSkgPT4ge1xuICAgIGlmIChpbml0aWFsVGltZSA9PT0gbnVsbCkge1xuICAgICAgaW5pdGlhbFRpbWUgPSB0aW1lO1xuICAgIH1cblxuICAgIGNvbnN0IGVsYXBzZWRUaW1lID0gdGltZSAtIGluaXRpYWxUaW1lLFxuICAgICAgICAgIHhBbmdsZSA9IGVsYXBzZWRUaW1lIC8gMTAwMCxcbiAgICAgICAgICB5QW5nbGUgPSBlbGFwc2VkVGltZSAvIDEwMDAsXG4gICAgICAgICAgcm90YXRpb24gPSBSb3RhdGlvbi5mcm9tWEFuZ2xlQW5kWUFuZ2xlKHhBbmdsZSwgeUFuZ2xlKSxcbiAgICAgICAgICBub3JtYWwgPSBOb3JtYWwuZnJvbVJvdGF0aW9uKHJvdGF0aW9uKTtcblxuICAgIGNhbnZhcy5yZW5kZXIobm9ybWFsLCByb3RhdGlvbiwgcG9zaXRpb24sIHBlcnNwZWN0aXZlLCBzaGFkZXIpO1xuXG4gICAgY2FudmFzLmRyYXdFbGVtZW50cyhjb3VudCk7XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgfTtcblxuICByZXR1cm4gcmVuZGVyO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnRlcm1lZGlhdGU7XG4iXX0=