'use strict';

var Canvas = require('../canvas'),
    Normal = require('../normal'),
    Rotation = require('../rotation'),
    Position = require('../position'),
    Perspective = require('../perspective'),
    ColourShader = require('../shader/colour'),
    TextureShader = require('../shader/texture');

var intermediate = function intermediate() {
  var canvas = new Canvas(),
      context = canvas.getContext();

  if (!context) {
    return;
  }

  var colourShaderProgram = ColourShader.createShaderProgram(context),
      clientWidth = canvas.getClientWidth(),
      clientHeight = canvas.getClientHeight(),
      zCoordinate = -5,
      ///
  position = Position.fromZCoordinate(zCoordinate),
      perspective = Perspective.fromClientWidthAndClientHeight(clientWidth, clientHeight);

  createAndBindVertexPositionBuffer(canvas, colourShaderProgram);

  createAndBindVertexColourBuffer(canvas, colourShaderProgram);

  //createAndBindTextureCoordinateBuffer(canvas, colourShaderProgram);

  //createAndBindVertexNormalBuffer(canvas, colourShaderProgram);

  var count = createVertexIndexElementBuffer(canvas);

  canvas.useProgram(colourShaderProgram);

  canvas.enableDepthTesting();
  canvas.enableDepthFunction();

  var initialTime = null;

  var image = new Image();

  image.onload = function () {
    var context = canvas.getContext(),
        TEXTURE0 = context.TEXTURE0,
        target = TEXTURE0,
        uSamplerUniformLocationIntegerValue = 0,
        uSamplerUniformLocation = canvas.getUniformLocation(colourShaderProgram, 'uSampler');


    canvas.createTexture(image);

    canvas.activateTexture(target);

    canvas.setUniformLocationIntegerValue(uSamplerUniformLocation, uSamplerUniformLocationIntegerValue);

    requestAnimationFrame(render);
  };

  image.src = 'texture/bricks.jpg';

  function render(time) {
    if (initialTime === null) {
      initialTime = time;
    }

    var elapsedTime = time - initialTime,
        xAngle = elapsedTime / 1000,
        yAngle = elapsedTime / 1000,
        rotation = Rotation.fromXAngleAndYAngle(xAngle, yAngle),
        normal = Normal.fromRotation(rotation);

    canvas.render(normal, rotation, position, perspective, colourShaderProgram);

    canvas.drawElements(count);

    requestAnimationFrame(render);
  }
};

module.exports = intermediate;

function createAndBindVertexPositionBuffer(canvas, shaderProgram) {
  var vertexPositionData = [-1.0, -1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, +1.0, -1.0, +1.0, +1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +1.0, +1.0, +1.0, +1.0, +1.0, +1.0, +1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +1.0, -1.0, +1.0, -1.0, -1.0, +1.0, +1.0, -1.0, -1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, +1.0, -1.0, +1.0, -1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0],
      vertexPositionBuffer = canvas.createBuffer(vertexPositionData),
      vertexPositionAttributeLocation = canvas.getAttributeLocation(shaderProgram, 'aVertexPosition'),
      vertexPositionComponents = 3;

  canvas.bindBuffer(vertexPositionBuffer, vertexPositionAttributeLocation, vertexPositionComponents);

  var vertexPositionDataLength = vertexPositionData.length,
      count = vertexPositionDataLength / vertexPositionComponents;

  return count;
}

function createAndBindVertexColourBuffer(canvas, shaderProgram) {
  var vertexColourData = [1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0],
      vertexColourBuffer = canvas.createBuffer(vertexColourData),
      vertexColourAttributeLocation = canvas.getAttributeLocation(shaderProgram, 'aVertexColour'),
      vertexColourComponents = 4;

  canvas.bindBuffer(vertexColourBuffer, vertexColourAttributeLocation, vertexColourComponents);
}

function createAndBindTextureCoordinateBuffer(canvas, shaderProgram) {
  var textureCoordinateData = [0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0],
      textureCoordinateBuffer = canvas.createBuffer(textureCoordinateData),
      textureCoordinateAttributeLocation = canvas.getAttributeLocation(shaderProgram, 'aTextureCoordinate'),
      textureCoordinateComponents = 2;

  canvas.bindBuffer(textureCoordinateBuffer, textureCoordinateAttributeLocation, textureCoordinateComponents);
}

function createAndBindVertexNormalBuffer(canvas, shaderProgram) {
  var vertexNormalData = [0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0],
      vertexNormalBuffer = canvas.createBuffer(vertexNormalData),
      vertexNormalAttributeLocation = canvas.getAttributeLocation(shaderProgram, 'aVertexNormal'),
      vertexNormalComponents = 3;

  canvas.bindBuffer(vertexNormalBuffer, vertexNormalAttributeLocation, vertexNormalComponents);
}

function createVertexIndexElementBuffer(canvas) {
  var vertexIndexData = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23],
      vertexIndexElementBuffer = canvas.createElementBuffer(vertexIndexData),
      vertexIndexDataLength = vertexIndexData.length,
      count = vertexIndexDataLength; ///

  canvas.bindElementBuffer(vertexIndexElementBuffer);

  return count;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUuanMiXSwibmFtZXMiOlsiQ2FudmFzIiwicmVxdWlyZSIsIk5vcm1hbCIsIlJvdGF0aW9uIiwiUG9zaXRpb24iLCJQZXJzcGVjdGl2ZSIsIkNvbG91clNoYWRlciIsIlRleHR1cmVTaGFkZXIiLCJpbnRlcm1lZGlhdGUiLCJjYW52YXMiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsImNvbG91clNoYWRlclByb2dyYW0iLCJjcmVhdGVTaGFkZXJQcm9ncmFtIiwiY2xpZW50V2lkdGgiLCJnZXRDbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldENsaWVudEhlaWdodCIsInpDb29yZGluYXRlIiwicG9zaXRpb24iLCJmcm9tWkNvb3JkaW5hdGUiLCJwZXJzcGVjdGl2ZSIsImZyb21DbGllbnRXaWR0aEFuZENsaWVudEhlaWdodCIsImNyZWF0ZUFuZEJpbmRWZXJ0ZXhQb3NpdGlvbkJ1ZmZlciIsImNyZWF0ZUFuZEJpbmRWZXJ0ZXhDb2xvdXJCdWZmZXIiLCJjb3VudCIsImNyZWF0ZVZlcnRleEluZGV4RWxlbWVudEJ1ZmZlciIsInVzZVByb2dyYW0iLCJlbmFibGVEZXB0aFRlc3RpbmciLCJlbmFibGVEZXB0aEZ1bmN0aW9uIiwiaW5pdGlhbFRpbWUiLCJpbWFnZSIsIkltYWdlIiwib25sb2FkIiwiVEVYVFVSRTAiLCJ0YXJnZXQiLCJ1U2FtcGxlclVuaWZvcm1Mb2NhdGlvbkludGVnZXJWYWx1ZSIsInVTYW1wbGVyVW5pZm9ybUxvY2F0aW9uIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwiY3JlYXRlVGV4dHVyZSIsImFjdGl2YXRlVGV4dHVyZSIsInNldFVuaWZvcm1Mb2NhdGlvbkludGVnZXJWYWx1ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJlbmRlciIsInNyYyIsInRpbWUiLCJlbGFwc2VkVGltZSIsInhBbmdsZSIsInlBbmdsZSIsInJvdGF0aW9uIiwiZnJvbVhBbmdsZUFuZFlBbmdsZSIsIm5vcm1hbCIsImZyb21Sb3RhdGlvbiIsImRyYXdFbGVtZW50cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJzaGFkZXJQcm9ncmFtIiwidmVydGV4UG9zaXRpb25EYXRhIiwidmVydGV4UG9zaXRpb25CdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJ2ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZUxvY2F0aW9uIiwiZ2V0QXR0cmlidXRlTG9jYXRpb24iLCJ2ZXJ0ZXhQb3NpdGlvbkNvbXBvbmVudHMiLCJiaW5kQnVmZmVyIiwidmVydGV4UG9zaXRpb25EYXRhTGVuZ3RoIiwibGVuZ3RoIiwidmVydGV4Q29sb3VyRGF0YSIsInZlcnRleENvbG91ckJ1ZmZlciIsInZlcnRleENvbG91ckF0dHJpYnV0ZUxvY2F0aW9uIiwidmVydGV4Q29sb3VyQ29tcG9uZW50cyIsImNyZWF0ZUFuZEJpbmRUZXh0dXJlQ29vcmRpbmF0ZUJ1ZmZlciIsInRleHR1cmVDb29yZGluYXRlRGF0YSIsInRleHR1cmVDb29yZGluYXRlQnVmZmVyIiwidGV4dHVyZUNvb3JkaW5hdGVBdHRyaWJ1dGVMb2NhdGlvbiIsInRleHR1cmVDb29yZGluYXRlQ29tcG9uZW50cyIsImNyZWF0ZUFuZEJpbmRWZXJ0ZXhOb3JtYWxCdWZmZXIiLCJ2ZXJ0ZXhOb3JtYWxEYXRhIiwidmVydGV4Tm9ybWFsQnVmZmVyIiwidmVydGV4Tm9ybWFsQXR0cmlidXRlTG9jYXRpb24iLCJ2ZXJ0ZXhOb3JtYWxDb21wb25lbnRzIiwidmVydGV4SW5kZXhEYXRhIiwidmVydGV4SW5kZXhFbGVtZW50QnVmZmVyIiwiY3JlYXRlRWxlbWVudEJ1ZmZlciIsInZlcnRleEluZGV4RGF0YUxlbmd0aCIsImJpbmRFbGVtZW50QnVmZmVyIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLFdBQVIsQ0FBZjtBQUFBLElBQ01DLFNBQVNELFFBQVEsV0FBUixDQURmO0FBQUEsSUFFTUUsV0FBV0YsUUFBUSxhQUFSLENBRmpCO0FBQUEsSUFHTUcsV0FBV0gsUUFBUSxh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akJnQixFQWlCWixFQWpCWSxFQWlCUixFQWpCUSxDQUF4QjtBQUFBLE1BbUJNQywyQkFBMkJ4RSxPQUFPeUUsbUJBQVAsQ0FBMkJGLGVBQTNCLENBbkJqQztBQUFBLE1Bb0JNRyx3QkFBd0JILGdCQUFnQmYsTUFwQjlDO0FBQUEsTUFxQk14QyxRQUFRMEQscUJBckJkLENBRDhDLENBc0JSOztBQUV0QzFFLFNBQU8yRSxpQkFBUCxDQUF5Qkgsd0JBQXpCOztBQUVBLFNBQU94RCxLQUFQO0FBQ0QiLCJmaWxlIjoiaW50ZXJtZWRpYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDYW52YXMgPSByZXF1aXJlKCcuLi9jYW52YXMnKSxcbiAgICAgIE5vcm1hbCA9IHJlcXVpcmUoJy4uL25vcm1hbCcpLFxuICAgICAgUm90YXRpb24gPSByZXF1aXJlKCcuLi9yb3RhdGlvbicpLFxuICAgICAgUG9zaXRpb24gPSByZXF1aXJlKCcuLi9wb3NpdGlvbicpLFxuICAgICAgUGVyc3BlY3RpdmUgPSByZXF1aXJlKCcuLi9wZXJzcGVjdGl2ZScpLFxuICAgICAgQ29sb3VyU2hhZGVyID0gcmVxdWlyZSgnLi4vc2hhZGVyL2NvbG91cicpLFxuICAgICAgVGV4dHVyZVNoYWRlciA9IHJlcXVpcmUoJy4uL3NoYWRlci90ZXh0dXJlJyk7XG5cbmNvbnN0IGludGVybWVkaWF0ZSA9ICgpID0+IHtcbiAgY29uc3QgY2FudmFzID0gbmV3IENhbnZhcygpLFxuICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoKTtcblxuICBpZiAoIWNvbnRleHQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBjb2xvdXJTaGFkZXJQcm9ncmFtID0gQ29sb3VyU2hhZGVyLmNyZWF0ZVNoYWRlclByb2dyYW0oY29udGV4dCksXG4gICAgICAgIGNsaWVudFdpZHRoID0gY2FudmFzLmdldENsaWVudFdpZHRoKCksXG4gICAgICAgIGNsaWVudEhlaWdodCA9IGNhbnZhcy5nZXRDbGllbnRIZWlnaHQoKSxcbiAgICAgICAgekNvb3JkaW5hdGUgPSAtNSwgLy8vXG4gICAgICAgIHBvc2l0aW9uID0gUG9zaXRpb24uZnJvbVpDb29yZGluYXRlKHpDb29yZGluYXRlKSxcbiAgICAgICAgcGVyc3BlY3RpdmUgPSBQZXJzcGVjdGl2ZS5mcm9tQ2xpZW50V2lkdGhBbmRDbGllbnRIZWlnaHQoY2xpZW50V2lkdGgsIGNsaWVudEhlaWdodCk7XG5cbiAgY3JlYXRlQW5kQmluZFZlcnRleFBvc2l0aW9uQnVmZmVyKGNhbnZhcywgY29sb3VyU2hhZGVyUHJvZ3JhbSk7XG5cbiAgY3JlYXRlQW5kQmluZFZlcnRleENvbG91ckJ1ZmZlcihjYW52YXMsIGNvbG91clNoYWRlclByb2dyYW0pO1xuXG4gIC8vY3JlYXRlQW5kQmluZFRleHR1cmVDb29yZGluYXRlQnVmZmVyKGNhbnZhcywgY29sb3VyU2hhZGVyUHJvZ3JhbSk7XG4gIFxuICAvL2NyZWF0ZUFuZEJpbmRWZXJ0ZXhOb3JtYWxCdWZmZXIoY2FudmFzLCBjb2xvdXJTaGFkZXJQcm9ncmFtKTtcblxuICBjb25zdCBjb3VudCA9IGNyZWF0ZVZlcnRleEluZGV4RWxlbWVudEJ1ZmZlcihjYW52YXMpO1xuXG4gIGNhbnZhcy51c2VQcm9ncmFtKGNvbG91clNoYWRlclByb2dyYW0pO1xuXG4gIGNhbnZhcy5lbmFibGVEZXB0aFRlc3RpbmcoKTtcbiAgY2FudmFzLmVuYWJsZURlcHRoRnVuY3Rpb24oKTtcblxuICBsZXQgaW5pdGlhbFRpbWUgPSBudWxsO1xuXG4gIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XG5cbiAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCksXG4gICAgICAgICAgeyBURVhUVVJFMCB9ID0gY29udGV4dCxcbiAgICAgICAgICB0YXJnZXQgPSBURVhUVVJFMCxcbiAgICAgICAgICB1U2FtcGxlclVuaWZvcm1Mb2NhdGlvbkludGVnZXJWYWx1ZSA9IDAsXG4gICAgICAgICAgdVNhbXBsZXJVbmlmb3JtTG9jYXRpb24gPSBjYW52YXMuZ2V0VW5pZm9ybUxvY2F0aW9uKGNvbG91clNoYWRlclByb2dyYW0sICd1U2FtcGxlcicpO1xuXG4gICAgY2FudmFzLmNyZWF0ZVRleHR1cmUoaW1hZ2UpO1xuXG4gICAgY2FudmFzLmFjdGl2YXRlVGV4dHVyZSh0YXJnZXQpO1xuXG4gICAgY2FudmFzLnNldFVuaWZvcm1Mb2NhdGlvbkludGVnZXJWYWx1ZSh1U2FtcGxlclVuaWZvcm1Mb2NhdGlvbiwgdVNhbXBsZXJVbmlmb3JtTG9jYXRpb25JbnRlZ2VyVmFsdWUpO1xuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gIH07XG5cbiAgaW1hZ2Uuc3JjID0gJ3RleHR1cmUvYnJpY2tzLmpwZyc7XG5cbiAgZnVuY3Rpb24gcmVuZGVyKHRpbWUpIHtcbiAgICBpZiAoaW5pdGlhbFRpbWUgPT09IG51bGwpIHtcbiAgICAgIGluaXRpYWxUaW1lID0gdGltZTtcbiAgICB9XG5cbiAgICBjb25zdCBlbGFwc2VkVGltZSA9IHRpbWUgLSBpbml0aWFsVGltZSxcbiAgICAgICAgICB4QW5nbGUgPSBlbGFwc2VkVGltZSAvIDEwMDAsXG4gICAgICAgICAgeUFuZ2xlID0gZWxhcHNlZFRpbWUgLyAxMDAwLFxuICAgICAgICAgIHJvdGF0aW9uID0gUm90YXRpb24uZnJvbVhBbmdsZUFuZFlBbmdsZSh4QW5nbGUsIHlBbmdsZSksXG4gICAgICAgICAgbm9ybWFsID0gTm9ybWFsLmZyb21Sb3RhdGlvbihyb3RhdGlvbik7XG5cbiAgICBjYW52YXMucmVuZGVyKG5vcm1hbCwgcm90YXRpb24sIHBvc2l0aW9uLCBwZXJzcGVjdGl2ZSwgY29sb3VyU2hhZGVyUHJvZ3JhbSk7XG5cbiAgICBjYW52YXMuZHJhd0VsZW1lbnRzKGNvdW50KTtcblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludGVybWVkaWF0ZTtcblxuZnVuY3Rpb24gY3JlYXRlQW5kQmluZFZlcnRleFBvc2l0aW9uQnVmZmVyKGNhbnZhcywgc2hhZGVyUHJvZ3JhbSkge1xuICBjb25zdCB2ZXJ0ZXhQb3NpdGlvbkRhdGEgPSBbXG4gICAgICAgICAgLTEuMCwgLTEuMCwgKzEuMCxcbiAgICAgICAgICArMS4wLCAtMS4wLCArMS4wLFxuICAgICAgICAgICsxLjAsICsxLjAsICsxLjAsXG4gICAgICAgICAgLTEuMCwgKzEuMCwgKzEuMCxcblxuICAgICAgICAgIC0xLjAsIC0xLjAsIC0xLjAsXG4gICAgICAgICAgLTEuMCwgKzEuMCwgLTEuMCxcbiAgICAgICAgICArMS4wLCArMS4wLCAtMS4wLFxuICAgICAgICAgICsxLjAsIC0xLjAsIC0xLjAsXG5cbiAgICAgICAgICAtMS4wLCArMS4wLCAtMS4wLFxuICAgICAgICAgIC0xLjAsICsxLjAsICsxLjAsXG4gICAgICAgICAgKzEuMCwgKzEuMCwgKzEuMCxcbiAgICAgICAgICArMS4wLCArMS4wLCAtMS4wLFxuXG4gICAgICAgICAgLTEuMCwgLTEuMCwgLTEuMCxcbiAgICAgICAgICArMS4wLCAtMS4wLCAtMS4wLFxuICAgICAgICAgICsxLjAsIC0xLjAsICsxLjAsXG4gICAgICAgICAgLTEuMCwgLTEuMCwgKzEuMCxcblxuICAgICAgICAgICsxLjAsIC0xLjAsIC0xLjAsXG4gICAgICAgICAgKzEuMCwgKzEuMCwgLTEuMCxcbiAgICAgICAgICArMS4wLCArMS4wLCArMS4wLFxuICAgICAgICAgICsxLjAsIC0xLjAsICsxLjAsXG5cbiAgICAgICAgICAtMS4wLCAtMS4wLCAtMS4wLFxuICAgICAgICAgIC0xLjAsIC0xLjAsICsxLjAsXG4gICAgICAgICAgLTEuMCwgKzEuMCwgKzEuMCxcbiAgICAgICAgICAtMS4wLCArMS4wLCAtMS4wXG4gICAgICAgIF0sXG4gICAgICAgIHZlcnRleFBvc2l0aW9uQnVmZmVyID0gY2FudmFzLmNyZWF0ZUJ1ZmZlcih2ZXJ0ZXhQb3NpdGlvbkRhdGEpLFxuICAgICAgICB2ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZUxvY2F0aW9uID0gY2FudmFzLmdldEF0dHJpYnV0ZUxvY2F0aW9uKHNoYWRlclByb2dyYW0sICdhVmVydGV4UG9zaXRpb24nKSxcbiAgICAgICAgdmVydGV4UG9zaXRpb25Db21wb25lbnRzID0gMztcblxuICBjYW52YXMuYmluZEJ1ZmZlcih2ZXJ0ZXhQb3NpdGlvbkJ1ZmZlciwgdmVydGV4UG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiwgdmVydGV4UG9zaXRpb25Db21wb25lbnRzKTtcblxuICBjb25zdCB2ZXJ0ZXhQb3NpdGlvbkRhdGFMZW5ndGggPSB2ZXJ0ZXhQb3NpdGlvbkRhdGEubGVuZ3RoLFxuICAgICAgICBjb3VudCA9IHZlcnRleFBvc2l0aW9uRGF0YUxlbmd0aCAvIHZlcnRleFBvc2l0aW9uQ29tcG9uZW50cztcblxuICByZXR1cm4gY291bnQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFuZEJpbmRWZXJ0ZXhDb2xvdXJCdWZmZXIoY2FudmFzLCBzaGFkZXJQcm9ncmFtKSB7XG4gIGNvbnN0IHZlcnRleENvbG91ckRhdGEgPSBbXG4gICAgICAgICAgMS4wLCAgMC4wLCAgMC4wLCAgMS4wLFxuICAgICAgICAgIDEuMCwgIDAuMCwgIDAuMCwgIDEuMCxcbiAgICAgICAgICAxLjAsICAwLjAsICAwLjAsICAxLjAsXG4gICAgICAgICAgMS4wLCAgMC4wLCAgMC4wLCAgMS4wLFxuXG4gICAgICAgICAgMC4wLCAgMS4wLCAgMS4wLCAgMS4wLFxuICAgICAgICAgIDAuMCwgIDEuMCwgIDEuMCwgIDEuMCxcbiAgICAgICAgICAwLjAsICAxLjAsICAxLjAsICAxLjAsXG4gICAgICAgICAgMC4wLCAgMS4wLCAgMS4wLCAgMS4wLFxuXG4gICAgICAgICAgMC4wLCAgMS4wLCAgMC4wLCAgMS4wLFxuICAgICAgICAgIDAuMCwgIDEuMCwgIDAuMCwgIDEuMCxcbiAgICAgICAgICAwLjAsICAxLjAsICAwLjAsICAxLjAsXG4gICAgICAgICAgMC4wLCAgMS4wLCAgMC4wLCAgMS4wLFxuXG4gICAgICAgICAgMS4wLCAgMC4wLCAgMS4wLCAgMS4wLFxuICAgICAgICAgIDEuMCwgIDAuMCwgIDEuMCwgIDEuMCxcbiAgICAgICAgICAxLjAsICAwLjAsICAxLjAsICAxLjAsXG4gICAgICAgICAgMS4wLCAgMC4wLCAgMS4wLCAgMS4wLFxuXG4gICAgICAgICAgMC4wLCAgMC4wLCAgMS4wLCAgMS4wLFxuICAgICAgICAgIDAuMCwgIDAuMCwgIDEuMCwgIDEuMCxcbiAgICAgICAgICAwLjAsICAwLjAsICAxLjAsICAxLjAsXG4gICAgICAgICAgMC4wLCAgMC4wLCAgMS4wLCAgMS4wLFxuXG4gICAgICAgICAgMS4wLCAgMS4wLCAgMC4wLCAgMS4wLFxuICAgICAgICAgIDEuMCwgIDEuMCwgIDAuMCwgIDEuMCxcbiAgICAgICAgICAxLjAsICAxLjAsICAwLjAsICAxLjAsXG4gICAgICAgICAgMS4wLCAgMS4wLCAgMC4wLCAgMS4wXG4gICAgICAgIF0sXG4gICAgICAgIHZlcnRleENvbG91ckJ1ZmZlciA9IGNhbnZhcy5jcmVhdGVCdWZmZXIodmVydGV4Q29sb3VyRGF0YSksXG4gICAgICAgIHZlcnRleENvbG91ckF0dHJpYnV0ZUxvY2F0aW9uID0gY2FudmFzLmdldEF0dHJpYnV0ZUxvY2F0aW9uKHNoYWRlclByb2dyYW0sICdhVmVydGV4Q29sb3VyJyksXG4gICAgICAgIHZlcnRleENvbG91ckNvbXBvbmVudHMgPSA0O1xuXG4gIGNhbnZhcy5iaW5kQnVmZmVyKHZlcnRleENvbG91ckJ1ZmZlciwgdmVydGV4Q29sb3VyQXR0cmlidXRlTG9jYXRpb24sIHZlcnRleENvbG91ckNvbXBvbmVudHMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBbmRCaW5kVGV4dHVyZUNvb3JkaW5hdGVCdWZmZXIoY2FudmFzLCBzaGFkZXJQcm9ncmFtKSB7XG4gIGNvbnN0IHRleHR1cmVDb29yZGluYXRlRGF0YSA9IFtcbiAgICAgICAgICAwLjAsICAwLjAsXG4gICAgICAgICAgMS4wLCAgMC4wLFxuICAgICAgICAgIDEuMCwgIDEuMCxcbiAgICAgICAgICAwLjAsICAxLjAsXG5cbiAgICAgICAgICAwLjAsICAwLjAsXG4gICAgICAgICAgMS4wLCAgMC4wLFxuICAgICAgICAgIDEuMCwgIDEuMCxcbiAgICAgICAgICAwLjAsICAxLjAsXG5cbiAgICAgICAgICAwLjAsICAwLjAsXG4gICAgICAgICAgMS4wLCAgMC4wLFxuICAgICAgICAgIDEuMCwgIDEuMCxcbiAgICAgICAgICAwLjAsICAxLjAsXG5cbiAgICAgICAgICAwLjAsICAwLjAsXG4gICAgICAgICAgMS4wLCAgMC4wLFxuICAgICAgICAgIDEuMCwgIDEuMCxcbiAgICAgICAgICAwLjAsICAxLjAsXG5cbiAgICAgICAgICAwLjAsICAwLjAsXG4gICAgICAgICAgMS4wLCAgMC4wLFxuICAgICAgICAgIDEuMCwgIDEuMCxcbiAgICAgICAgICAwLjAsICAxLjAsXG5cbiAgICAgICAgICAwLjAsICAwLjAsXG4gICAgICAgICAgMS4wLCAgMC4wLFxuICAgICAgICAgIDEuMCwgIDEuMCxcbiAgICAgICAgICAwLjAsICAxLjBcbiAgICAgICAgXSxcbiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVCdWZmZXIgPSBjYW52YXMuY3JlYXRlQnVmZmVyKHRleHR1cmVDb29yZGluYXRlRGF0YSksXG4gICAgICAgIHRleHR1cmVDb29yZGluYXRlQXR0cmlidXRlTG9jYXRpb24gPSBjYW52YXMuZ2V0QXR0cmlidXRlTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgJ2FUZXh0dXJlQ29vcmRpbmF0ZScpLFxuICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZUNvbXBvbmVudHMgPSAyO1xuXG4gIGNhbnZhcy5iaW5kQnVmZmVyKHRleHR1cmVDb29yZGluYXRlQnVmZmVyLCB0ZXh0dXJlQ29vcmRpbmF0ZUF0dHJpYnV0ZUxvY2F0aW9uLCB0ZXh0dXJlQ29vcmRpbmF0ZUNvbXBvbmVudHMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBbmRCaW5kVmVydGV4Tm9ybWFsQnVmZmVyKGNhbnZhcywgc2hhZGVyUHJvZ3JhbSkge1xuICBjb25zdCB2ZXJ0ZXhOb3JtYWxEYXRhID0gW1xuICAgICAgICAgICAwLjAsICAwLjAsICsxLjAsXG4gICAgICAgICAgIDAuMCwgIDAuMCwgKzEuMCxcbiAgICAgICAgICAgMC4wLCAgMC4wLCArMS4wLFxuICAgICAgICAgICAwLjAsICAwLjAsICsxLjAsXG5cbiAgICAgICAgICAgMC4wLCAgMC4wLCAtMS4wLFxuICAgICAgICAgICAwLjAsICAwLjAsIC0xLjAsXG4gICAgICAgICAgIDAuMCwgIDAuMCwgLTEuMCxcbiAgICAgICAgICAgMC4wLCAgMC4wLCAtMS4wLFxuXG4gICAgICAgICAgIDAuMCwgKzEuMCwgIDAuMCxcbiAgICAgICAgICAgMC4wLCArMS4wLCAgMC4wLFxuICAgICAgICAgICAwLjAsICsxLjAsICAwLjAsXG4gICAgICAgICAgIDAuMCwgKzEuMCwgIDAuMCxcblxuICAgICAgICAgICAwLjAsIC0xLjAsICAwLjAsXG4gICAgICAgICAgIDAuMCwgLTEuMCwgIDAuMCxcbiAgICAgICAgICAgMC4wLCAtMS4wLCAgMC4wLFxuICAgICAgICAgICAwLjAsIC0xLjAsICAwLjAsXG5cbiAgICAgICAgICArMS4wLCAgMC4wLCAgMC4wLFxuICAgICAgICAgICsxLjAsICAwLjAsICAwLjAsXG4gICAgICAgICAgKzEuMCwgIDAuMCwgIDAuMCxcbiAgICAgICAgICArMS4wLCAgMC4wLCAgMC4wLFxuXG4gICAgICAgICAgLTEuMCwgIDAuMCwgIDAuMCxcbiAgICAgICAgICAtMS4wLCAgMC4wLCAgMC4wLFxuICAgICAgICAgIC0xLjAsICAwLjAsICAwLjAsXG4gICAgICAgICAgLTEuMCwgIDAuMCwgIDAuMFxuICAgICAgICBdLFxuICAgICAgICB2ZXJ0ZXhOb3JtYWxCdWZmZXIgPSBjYW52YXMuY3JlYXRlQnVmZmVyKHZlcnRleE5vcm1hbERhdGEpLFxuICAgICAgICB2ZXJ0ZXhOb3JtYWxBdHRyaWJ1dGVMb2NhdGlvbiA9IGNhbnZhcy5nZXRBdHRyaWJ1dGVMb2NhdGlvbihzaGFkZXJQcm9ncmFtLCAnYVZlcnRleE5vcm1hbCcpLFxuICAgICAgICB2ZXJ0ZXhOb3JtYWxDb21wb25lbnRzID0gMztcblxuICBjYW52YXMuYmluZEJ1ZmZlcih2ZXJ0ZXhOb3JtYWxCdWZmZXIsIHZlcnRleE5vcm1hbEF0dHJpYnV0ZUxvY2F0aW9uLCB2ZXJ0ZXhOb3JtYWxDb21wb25lbnRzKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVmVydGV4SW5kZXhFbGVtZW50QnVmZmVyKGNhbnZhcykge1xuICBjb25zdCB2ZXJ0ZXhJbmRleERhdGEgPSBbXG4gICAgICAgICAgIDAsICAxLCAgMixcbiAgICAgICAgICAgMCwgIDIsICAzLFxuXG4gICAgICAgICAgIDQsICA1LCAgNixcbiAgICAgICAgICAgNCwgIDYsICA3LFxuXG4gICAgICAgICAgIDgsICA5LCAxMCxcbiAgICAgICAgICAgOCwgMTAsIDExLFxuXG4gICAgICAgICAgMTIsIDEzLCAxNCxcbiAgICAgICAgICAxMiwgMTQsIDE1LFxuXG4gICAgICAgICAgMTYsIDE3LCAxOCxcbiAgICAgICAgICAxNiwgMTgsIDE5LFxuXG4gICAgICAgICAgMjAsIDIxLCAyMixcbiAgICAgICAgICAyMCwgMjIsIDIzXG4gICAgICAgIF0sXG4gICAgICAgIHZlcnRleEluZGV4RWxlbWVudEJ1ZmZlciA9IGNhbnZhcy5jcmVhdGVFbGVtZW50QnVmZmVyKHZlcnRleEluZGV4RGF0YSksXG4gICAgICAgIHZlcnRleEluZGV4RGF0YUxlbmd0aCA9IHZlcnRleEluZGV4RGF0YS5sZW5ndGgsXG4gICAgICAgIGNvdW50ID0gdmVydGV4SW5kZXhEYXRhTGVuZ3RoOyAgLy8vXG5cbiAgY2FudmFzLmJpbmRFbGVtZW50QnVmZmVyKHZlcnRleEluZGV4RWxlbWVudEJ1ZmZlcik7XG5cbiAgcmV0dXJuIGNvdW50O1xufVxuIl19