'use strict';

var necessary = require('necessary');

var Canvas = require('../canvas'),
    Normal = require('../normal'),
    Rotation = require('../rotation'),
    Position = require('../position'),
    Perspective = require('../perspective'),
    ColourShader = require('../shader/colour'),
    TextureShader = require('../shader/texture'),
    ColourCube = require('./intermediate/cube/colour'),
    TextureCube = require('./intermediate/cube/texture');

var arrayUtilities = necessary.arrayUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    first = arrayUtilities.first,
    repeatedly = asynchronousUtilities.repeatedly;


function intermediate() {
  var canvas = new Canvas(),
      colourShader = ColourShader.fromNothing(canvas),
      textureShader = TextureShader.fromNothing(canvas);

  canvas.enableDepthTesting();
  canvas.enableDepthFunction();

  createColourCube(colourShader, canvas, function (colourCube) {
    createTextureCube(textureShader, canvas, function (textureCube) {
      var render = createRender(canvas, colourCube, colourShader, textureCube, textureShader);

      requestAnimationFrame(render);
    });
  });
}

module.exports = intermediate;

function createColourCube(colourShader, canvas, callback) {
  var offsetPosition = [-2, 0, 0],
      colourCube = ColourCube.fromOffsetPosition(offsetPosition, colourShader, canvas);

  callback(colourCube);
}

function createTextureCube(textureShader, canvas, callback) {
  loadImages(function (images) {
    var firstImage = first(images),
        offsetPosition = [+2, 0, 0],
        image = firstImage,
        textureCube = TextureCube.fromOffsetPositionAndImage(offsetPosition, image, textureShader, canvas);

    callback(textureCube);
  });
}

function loadImages(callback) {
  var imageSources = ['texture/bricks.jpg'],
      images = [],
      context = {
    imageSources: imageSources,
    images: images
  },
      length = imageSources.length; ///

  repeatedly(loadImageCallback, length, function () {
    var images = context.images;


    callback(images);
  }, context);
}

function createRender(canvas, colourCube, colourShader, textureCube, textureShader) {
  var initialTime = null;

  var clientWidth = canvas.getClientWidth(),
      clientHeight = canvas.getClientHeight(),
      zCoordinate = -10,
      ///
  position = Position.fromZCoordinate(zCoordinate),
      perspective = Perspective.fromClientWidthAndClientHeight(clientWidth, clientHeight),
      colourCubeCount = colourCube.getCount(),
      textureCubeCount = textureCube.getCount();

  var render = function render(time) {
    if (initialTime === null) {
      initialTime = time;
    }

    var elapsedTime = time - initialTime,
        xAngle = elapsedTime / 573,
        yAngle = elapsedTime / 892,
        rotation = Rotation.fromXAngleAndYAngle(xAngle, yAngle),
        normal = Normal.fromRotation(rotation);

    canvas.clear();

    colourCube.bind(colourShader, canvas);

    canvas.useShader(colourShader);

    colourShader.activateTexture(canvas);

    canvas.render(colourShader, normal, rotation, position, perspective);

    canvas.drawElements(colourCubeCount);

    textureCube.bind(textureShader, canvas);

    canvas.useShader(textureShader);

    textureShader.activateTexture(canvas);

    canvas.render(textureShader, normal, rotation, position, perspective);

    canvas.drawElements(textureCubeCount);

    requestAnimationFrame(render);
  };

  return render;
}

function loadImageCallback(next, done, context, index) {
  var imageSources = context.imageSources,
      images = context.images,
      imageSource = imageSources[index],
      image = new Image();


  images[index] = image;

  image.onload = next; ///

  image.src = imageSource; ///
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,