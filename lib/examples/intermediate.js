'use strict';

var Canvas = require('../canvas'),
    ModelView = require('../modelView'),
    Projection = require('../projection');

var intermediate = function intermediate() {
  var canvas = new Canvas(),
      context = canvas.getContext();

  if (!context) {
    return;
  }

  var vertexShaderSource = '\n          attribute vec4 aVertexPosition;\n          attribute vec4 aVertexColour;\n          \n          uniform mat4 uModelViewMatrix;\n          uniform mat4 uProjectionMatrix;\n          \n          varying lowp vec4 vColour;\n      \n          void main() {\n            gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n            vColour = aVertexColour;\n          }\n        ',
      fragmentShaderSource = '\n          varying lowp vec4 vColour;\n\n          void main() {\n            gl_FragColor = vColour;\n          }\n        ',
      shaderProgram = canvas.createShaderProgram(vertexShaderSource, fragmentShaderSource),
      clientWidth = canvas.getClientWidth(),
      clientHeight = canvas.getClientHeight(),
      projection = new Projection(clientWidth, clientHeight),
      modelView = new ModelView();

  var vertexCount = createAndBindVertexPositionBuffer(canvas, shaderProgram);

  createAndBindVertexColourBuffer(canvas, shaderProgram);

  canvas.useProgram(shaderProgram);

  var initialTime = null;

  function render(time) {
    if (initialTime === null) {
      initialTime = time;
    }

    var elapsedTime = time - initialTime;

    canvas.render(shaderProgram, projection, modelView, elapsedTime);

    canvas.draw(vertexCount);

    requestAnimationFrame(render);
  }

  requestAnimationFrame(render);
};

module.exports = intermediate;

function createAndBindVertexPositionBuffer(canvas, shaderProgram) {
  var vertexPositionData = [+1.0, +1.0, -1.0, +1.0, +1.0, -1.0, -1.0, -1.0],
      vertexPositionBuffer = canvas.createBuffer(vertexPositionData),
      vertexPositionAttributeLocation = canvas.getAttributeLocation(shaderProgram, 'aVertexPosition'),
      vertexPositionComponents = 2;

  canvas.bindBuffer(vertexPositionBuffer, vertexPositionAttributeLocation, vertexPositionComponents);

  var vertexPositionDataLength = vertexPositionData.length,
      vertexCount = vertexPositionDataLength / vertexPositionComponents;

  return vertexCount;
}

function createAndBindVertexColourBuffer(canvas, shaderProgram) {
  var vertexColourData = [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0],
      vertexColourBuffer = canvas.createBuffer(vertexColourData),
      vertexColourAttributeLocation = canvas.getAttributeLocation(shaderProgram, 'aVertexColour'),
      vertexColourComponents = 4;

  canvas.bindBuffer(vertexColourBuffer, vertexColourAttributeLocation, vertexColourComponents);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUuanMiXSwibmFtZXMiOlsiQ2FudmFzIiwicmVxdWlyZSIsIk1vZGVsVmlldyIsIlByb2plY3Rpb24iLCJpbnRlcm1lZGlhdGUiLCJjYW52YXMiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInZlcnRleFNoYWRlclNvdXJjZSIsImZyYWdtZW50U2hhZGVyU291cmNlIiwic2hhZGVyUHJvZ3JhbSIsImNyZWF0ZVNoYWRlclByb2dyYW0iLCJjbGllbnRXaWR0aCIsImdldENsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiZ2V0Q2xpZW50SGVpZ2h0IiwicHJvamVjdGlvbiIsIm1vZGVsVmlldyIsInZlcnRleENvdW50IiwiY3JlYXRlQW5kQmluZFZlcnRleFBvc2l0aW9uQnVmZmVyIiwiY3JlYXRlQW5kQmluZFZlcnRleENvbG91ckJ1ZmZlciIsInVzZVByb2dyYW0iLCJpbml0aWFsVGltZSIsInJlbmRlciIsInRpbWUiLCJlbGFwc2VkVGltZSIsImRyYXciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb2R1bGUiLCJleHBvcnRzIiwidmVydGV4UG9zaXRpb25EYXRhIiwidmVydGV4UG9zaXRpb25CdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJ2ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZUxvY2F0aW9uIiwiZ2V0QXR0cmlidXRlTG9jYXRpb24iLCJ2ZXJ0ZXhQb3NpdGlvbkNvbXBvbmVudHMiLCJiaW5kQnVmZmVyIiwidmVydGV4UG9zaXRpb25EYXRhTGVuZ3RoIiwibGVuZ3RoIiwidmVydGV4Q29sb3VyRGF0YSIsInZlcnRleENvbG91ckJ1ZmZlciIsInZlcnRleENvbG91ckF0dHJpYnV0ZUxvY2F0aW9uIiwidmVydGV4Q29sb3VyQ29tcG9uZW50cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsU0FBU0MsUUFBUSxXQUFSLENBQWY7QUFBQSxJQUNNQyxZQUFZRCxRQUFRLGNBQVIsQ0FEbEI7QUFB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Qkksa0JBQWxCLEVBQXNDQyw2QkFBdEMsRUFBcUVDLHNCQUFyRTtBQUNEIiwiZmlsZSI6ImludGVybWVkaWF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQ2FudmFzID0gcmVxdWlyZSgnLi4vY2FudmFzJyksXG4gICAgICBNb2RlbFZpZXcgPSByZXF1aXJlKCcuLi9tb2RlbFZpZXcnKSxcbiAgICAgIFByb2plY3Rpb24gPSByZXF1aXJlKCcuLi9wcm9qZWN0aW9uJyk7XG5cbmNvbnN0IGludGVybWVkaWF0ZSA9ICgpID0+IHtcbiAgY29uc3QgY2FudmFzID0gbmV3IENhbnZhcygpLFxuICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoKTtcblxuICBpZiAoIWNvbnRleHQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB2ZXJ0ZXhTaGFkZXJTb3VyY2UgPSBgXG4gICAgICAgICAgYXR0cmlidXRlIHZlYzQgYVZlcnRleFBvc2l0aW9uO1xuICAgICAgICAgIGF0dHJpYnV0ZSB2ZWM0IGFWZXJ0ZXhDb2xvdXI7XG4gICAgICAgICAgXG4gICAgICAgICAgdW5pZm9ybSBtYXQ0IHVNb2RlbFZpZXdNYXRyaXg7XG4gICAgICAgICAgdW5pZm9ybSBtYXQ0IHVQcm9qZWN0aW9uTWF0cml4O1xuICAgICAgICAgIFxuICAgICAgICAgIHZhcnlpbmcgbG93cCB2ZWM0IHZDb2xvdXI7XG4gICAgICBcbiAgICAgICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgICBnbF9Qb3NpdGlvbiA9IHVQcm9qZWN0aW9uTWF0cml4ICogdU1vZGVsVmlld01hdHJpeCAqIGFWZXJ0ZXhQb3NpdGlvbjtcbiAgICAgICAgICAgIHZDb2xvdXIgPSBhVmVydGV4Q29sb3VyO1xuICAgICAgICAgIH1cbiAgICAgICAgYCxcbiAgICAgICAgZnJhZ21lbnRTaGFkZXJTb3VyY2UgPSBgXG4gICAgICAgICAgdmFyeWluZyBsb3dwIHZlYzQgdkNvbG91cjtcblxuICAgICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZDb2xvdXI7XG4gICAgICAgICAgfVxuICAgICAgICBgLFxuICAgICAgICBzaGFkZXJQcm9ncmFtID0gY2FudmFzLmNyZWF0ZVNoYWRlclByb2dyYW0odmVydGV4U2hhZGVyU291cmNlLCBmcmFnbWVudFNoYWRlclNvdXJjZSksXG4gICAgICAgIGNsaWVudFdpZHRoID0gY2FudmFzLmdldENsaWVudFdpZHRoKCksXG4gICAgICAgIGNsaWVudEhlaWdodCA9IGNhbnZhcy5nZXRDbGllbnRIZWlnaHQoKSxcbiAgICAgICAgcHJvamVjdGlvbiA9IG5ldyBQcm9qZWN0aW9uKGNsaWVudFdpZHRoLCBjbGllbnRIZWlnaHQpLFxuICAgICAgICBtb2RlbFZpZXcgPSBuZXcgTW9kZWxWaWV3KCk7XG5cbiAgY29uc3QgdmVydGV4Q291bnQgPSBjcmVhdGVBbmRCaW5kVmVydGV4UG9zaXRpb25CdWZmZXIoY2FudmFzLCBzaGFkZXJQcm9ncmFtKTtcblxuICBjcmVhdGVBbmRCaW5kVmVydGV4Q29sb3VyQnVmZmVyKGNhbnZhcywgc2hhZGVyUHJvZ3JhbSk7XG5cbiAgY2FudmFzLnVzZVByb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XG5cbiAgbGV0IGluaXRpYWxUaW1lID0gbnVsbDtcblxuICBmdW5jdGlvbiByZW5kZXIodGltZSkge1xuICAgIGlmIChpbml0aWFsVGltZSA9PT0gbnVsbCkge1xuICAgICAgaW5pdGlhbFRpbWUgPSB0aW1lO1xuICAgIH1cblxuICAgIGNvbnN0IGVsYXBzZWRUaW1lID0gdGltZSAtIGluaXRpYWxUaW1lO1xuXG4gICAgY2FudmFzLnJlbmRlcihzaGFkZXJQcm9ncmFtLCBwcm9qZWN0aW9uLCBtb2RlbFZpZXcsIGVsYXBzZWRUaW1lKTtcblxuICAgIGNhbnZhcy5kcmF3KHZlcnRleENvdW50KTtcblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICB9XG5cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludGVybWVkaWF0ZTtcblxuZnVuY3Rpb24gY3JlYXRlQW5kQmluZFZlcnRleFBvc2l0aW9uQnVmZmVyKGNhbnZhcywgc2hhZGVyUHJvZ3JhbSkge1xuICBjb25zdCB2ZXJ0ZXhQb3NpdGlvbkRhdGEgPSBbXG4gICAgICAgICAgKzEuMCwgKzEuMCxcbiAgICAgICAgICAtMS4wLCArMS4wLFxuICAgICAgICAgICsxLjAsIC0xLjAsXG4gICAgICAgICAgLTEuMCwgLTEuMFxuICAgICAgICBdLFxuICAgICAgICB2ZXJ0ZXhQb3NpdGlvbkJ1ZmZlciA9IGNhbnZhcy5jcmVhdGVCdWZmZXIodmVydGV4UG9zaXRpb25EYXRhKSxcbiAgICAgICAgdmVydGV4UG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiA9IGNhbnZhcy5nZXRBdHRyaWJ1dGVMb2NhdGlvbihzaGFkZXJQcm9ncmFtLCAnYVZlcnRleFBvc2l0aW9uJyksXG4gICAgICAgIHZlcnRleFBvc2l0aW9uQ29tcG9uZW50cyA9IDI7XG5cbiAgY2FudmFzLmJpbmRCdWZmZXIodmVydGV4UG9zaXRpb25CdWZmZXIsIHZlcnRleFBvc2l0aW9uQXR0cmlidXRlTG9jYXRpb24sIHZlcnRleFBvc2l0aW9uQ29tcG9uZW50cyk7XG5cbiAgY29uc3QgdmVydGV4UG9zaXRpb25EYXRhTGVuZ3RoID0gdmVydGV4UG9zaXRpb25EYXRhLmxlbmd0aCxcbiAgICAgICAgdmVydGV4Q291bnQgPSB2ZXJ0ZXhQb3NpdGlvbkRhdGFMZW5ndGggLyB2ZXJ0ZXhQb3NpdGlvbkNvbXBvbmVudHM7XG5cbiAgcmV0dXJuIHZlcnRleENvdW50O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBbmRCaW5kVmVydGV4Q29sb3VyQnVmZmVyKGNhbnZhcywgc2hhZGVyUHJvZ3JhbSkge1xuICBjb25zdCB2ZXJ0ZXhDb2xvdXJEYXRhID0gW1xuICAgICAgICAgIDEuMCwgIDEuMCwgIDEuMCwgIDEuMCxcbiAgICAgICAgICAxLjAsICAwLjAsICAwLjAsICAxLjAsXG4gICAgICAgICAgMC4wLCAgMS4wLCAgMC4wLCAgMS4wLFxuICAgICAgICAgIDAuMCwgIDAuMCwgIDEuMCwgIDEuMFxuICAgICAgICBdLFxuICAgICAgICB2ZXJ0ZXhDb2xvdXJCdWZmZXIgPSBjYW52YXMuY3JlYXRlQnVmZmVyKHZlcnRleENvbG91ckRhdGEpLFxuICAgICAgICB2ZXJ0ZXhDb2xvdXJBdHRyaWJ1dGVMb2NhdGlvbiA9IGNhbnZhcy5nZXRBdHRyaWJ1dGVMb2NhdGlvbihzaGFkZXJQcm9ncmFtLCAnYVZlcnRleENvbG91cicpLFxuICAgICAgICB2ZXJ0ZXhDb2xvdXJDb21wb25lbnRzID0gNDtcblxuICBjYW52YXMuYmluZEJ1ZmZlcih2ZXJ0ZXhDb2xvdXJCdWZmZXIsIHZlcnRleENvbG91ckF0dHJpYnV0ZUxvY2F0aW9uLCB2ZXJ0ZXhDb2xvdXJDb21wb25lbnRzKTtcbn1cbiJdfQ==