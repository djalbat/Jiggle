'use strict';

var necessary = require('necessary');

var Canvas = require('../canvas'),
    Normal = require('../normal'),
    Rotation = require('../rotation'),
    Position = require('../position'),
    Perspective = require('../perspective'),
    colourCube = require('./intermediate/colourCube'),
    textureCube = require('./intermediate/textureCube');

var asynchronousUtilities = necessary.asynchronousUtilities,
    repeatedly = asynchronousUtilities.repeatedly;


function intermediate() {
  var canvas = new Canvas(),
      imageSources = ['texture/bricks.jpg'],
      imageSourcesLength = imageSources.length,
      callback = loadImageCallback,
      length = imageSourcesLength,
      ///
  context = {
    imageSources: imageSources,
    images: []
  };

  repeatedly(callback, length, function () {
    var images = context.images,
        image = images[0];


    textureCube(image, canvas, function (count, shader) {
      canvas.enableDepthTesting();
      canvas.enableDepthFunction();

      var render = createRender(canvas, count, shader);

      requestAnimationFrame(render);
    });
  }, context);

  // colourCube(canvas, callback);
}

function createRender(canvas, count, shader) {
  var initialTime = null;

  var clientWidth = canvas.getClientWidth(),
      clientHeight = canvas.getClientHeight(),
      zCoordinate = -5,
      ///
  position = Position.fromZCoordinate(zCoordinate),
      perspective = Perspective.fromClientWidthAndClientHeight(clientWidth, clientHeight);

  var render = function render(time) {
    if (initialTime === null) {
      initialTime = time;
    }

    var elapsedTime = time - initialTime,
        xAngle = elapsedTime / 1000,
        yAngle = elapsedTime / 1000,
        rotation = Rotation.fromXAngleAndYAngle(xAngle, yAngle),
        normal = Normal.fromRotation(rotation);

    canvas.render(normal, rotation, position, perspective, shader);

    canvas.drawElements(count);

    requestAnimationFrame(render);
  };

  return render;
}

module.exports = intermediate;

function loadImageCallback(next, done, context, index) {
  var imageSources = context.imageSources,
      images = context.images,
      imageSource = imageSources[index],
      image = new Image();


  images[index] = image;

  image.onload = next;

  image.src = imageSource; ///
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNhbnZhcyIsIk5vcm1hbCIsIlJvdGF0aW9uIiwiUG9zaXRpb24iLCJQZXJzcGVjdGl2ZSIsImNvbG91ckN1YmUiLCJ0ZXh0dXJlQ3ViZSIsImFzeW5jaHJvbm91c1V0aWxpdGllcyIsInJlcGVhdGVkbHkiLCJpbnRlcm1lZGlhdGUiLCJjYW52YXMiLCJpbWFnZVNvdXJjZXMiLCJpbWFnZVNvdXJjZXNMZW5ndGgiLCJsZW5ndGgiLCJjYWxsYmFjayIsImxvYWRJbWFnZUNhbGxiYWNrIiwiY29udGV4dCIsImltYWdlcyIsImltYWdlIiwiY291bnQiLCJzaGFkZXIiLCJlbmFibGVEZXB0aFRlc3RpbmciLCJlbmFibGVEZXB0aEZ1bmN0aW9uIiwicmVuZGVyIiwiY3JlYXRlUmVuZGVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW5pdGlhbFRpbWUiLCJjbGllbnRXaWR0aCIsImdldENsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiZ2V0Q2xpZW50SGVpZ2h0IiwiekNvb3JkaW5hdGUiLCJwb3NpdGlvbiIsImZyb21aQ29vcmRpbmF0ZSIsInBlcnNwZWN0aXZlIiwiZnJvbUNsaWVudFdpZHRoQW5kQ2xpZW50SGVpZ2h0IiwidGltZSIsImVsYXBzZWRUaW1lIiwieEFuZ2xlIiwieUFuZ2xlIiwicm90YXRpb24iLCJmcm9tWEFuZ2xlQW5kWUFuZ2xlIiwibm9ybWFsIiwiZnJvbVJvdGF0aW9uIiwiZHJhd0VsZW1lbnRzIiwibW9kdWxlIiwiZXhwb3J0cyIsIm5leHQiLCJkb25lIiwiaW5kZXgiLCJpbWFnZVNvdXJjZSIsIkltYWdlIiwib25sb2FkIiwic3JjIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRUEsSUFBTUMsU0FBU0QsUUFBUSxXQUFSLENBQWY7QUFBQSxJQUNNRSxT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QkQsT0FEb0IsQ0FDL0JDLE1BRCtCO0FBQUEsTUFFL0NpQyxXQUYrQyxHQUVqQ3ZDLGFBQWFzQyxLQUFiLENBRmlDO0FBQUEsTUFHL0MvQixLQUgrQyxHQUd2QyxJQUFJaUMsS0FBSixFQUh1Qzs7O0FBS3JEbEMsU0FBT2dDLEtBQVAsSUFBZ0IvQixLQUFoQjs7QUFFQUEsUUFBTWtDLE1BQU4sR0FBZUwsSUFBZjs7QUFFQTdCLFFBQU1tQyxHQUFOLEdBQVlILFdBQVosQ0FUcUQsQ0FTM0I7QUFDM0IiLCJmaWxlIjoiaW50ZXJtZWRpYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgQ2FudmFzID0gcmVxdWlyZSgnLi4vY2FudmFzJyksXG4gICAgICBOb3JtYWwgPSByZXF1aXJlKCcuLi9ub3JtYWwnKSxcbiAgICAgIFJvdGF0aW9uID0gcmVxdWlyZSgnLi4vcm90YXRpb24nKSxcbiAgICAgIFBvc2l0aW9uID0gcmVxdWlyZSgnLi4vcG9zaXRpb24nKSxcbiAgICAgIFBlcnNwZWN0aXZlID0gcmVxdWlyZSgnLi4vcGVyc3BlY3RpdmUnKSxcbiAgICAgIGNvbG91ckN1YmUgPSByZXF1aXJlKCcuL2ludGVybWVkaWF0ZS9jb2xvdXJDdWJlJyksXG4gICAgICB0ZXh0dXJlQ3ViZSA9IHJlcXVpcmUoJy4vaW50ZXJtZWRpYXRlL3RleHR1cmVDdWJlJyk7XG5cbmNvbnN0IHsgYXN5bmNocm9ub3VzVXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IHJlcGVhdGVkbHkgfSA9IGFzeW5jaHJvbm91c1V0aWxpdGllcztcblxuZnVuY3Rpb24gaW50ZXJtZWRpYXRlKCkge1xuICBjb25zdCBjYW52YXMgPSBuZXcgQ2FudmFzKCksXG4gICAgICAgIGltYWdlU291cmNlcyA9IFtcbiAgICAgICAgICAndGV4dHVyZS9icmlja3MuanBnJ1xuICAgICAgICBdLFxuICAgICAgICBpbWFnZVNvdXJjZXNMZW5ndGggPSBpbWFnZVNvdXJjZXMubGVuZ3RoLFxuICAgICAgICBjYWxsYmFjayA9IGxvYWRJbWFnZUNhbGxiYWNrLFxuICAgICAgICBsZW5ndGggPSBpbWFnZVNvdXJjZXNMZW5ndGgsICAvLy9cbiAgICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgICBpbWFnZVNvdXJjZXM6IGltYWdlU291cmNlcyxcbiAgICAgICAgICBpbWFnZXM6IFtdXG4gICAgICAgIH07XG5cbiAgcmVwZWF0ZWRseShjYWxsYmFjaywgbGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCB7IGltYWdlcyB9ID0gY29udGV4dCxcbiAgICAgICAgICBpbWFnZSA9IGltYWdlc1swXTtcblxuICAgIHRleHR1cmVDdWJlKGltYWdlLCBjYW52YXMsIGZ1bmN0aW9uKGNvdW50LCBzaGFkZXIpIHtcbiAgICAgIGNhbnZhcy5lbmFibGVEZXB0aFRlc3RpbmcoKTtcbiAgICAgIGNhbnZhcy5lbmFibGVEZXB0aEZ1bmN0aW9uKCk7XG5cbiAgICAgIGNvbnN0IHJlbmRlciA9IGNyZWF0ZVJlbmRlcihjYW52YXMsIGNvdW50LCBzaGFkZXIpO1xuXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICB9KTtcbiAgfSwgY29udGV4dCk7XG5cbiAgLy8gY29sb3VyQ3ViZShjYW52YXMsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVuZGVyKGNhbnZhcywgY291bnQsIHNoYWRlcikge1xuICBsZXQgaW5pdGlhbFRpbWUgPSBudWxsO1xuXG4gIGNvbnN0IGNsaWVudFdpZHRoID0gY2FudmFzLmdldENsaWVudFdpZHRoKCksXG4gICAgICAgIGNsaWVudEhlaWdodCA9IGNhbnZhcy5nZXRDbGllbnRIZWlnaHQoKSxcbiAgICAgICAgekNvb3JkaW5hdGUgPSAtNSwgLy8vXG4gICAgICAgIHBvc2l0aW9uID0gUG9zaXRpb24uZnJvbVpDb29yZGluYXRlKHpDb29yZGluYXRlKSxcbiAgICAgICAgcGVyc3BlY3RpdmUgPSBQZXJzcGVjdGl2ZS5mcm9tQ2xpZW50V2lkdGhBbmRDbGllbnRIZWlnaHQoY2xpZW50V2lkdGgsIGNsaWVudEhlaWdodCk7XG5cbiAgY29uc3QgcmVuZGVyID0gKHRpbWUpID0+IHtcbiAgICBpZiAoaW5pdGlhbFRpbWUgPT09IG51bGwpIHtcbiAgICAgIGluaXRpYWxUaW1lID0gdGltZTtcbiAgICB9XG5cbiAgICBjb25zdCBlbGFwc2VkVGltZSA9IHRpbWUgLSBpbml0aWFsVGltZSxcbiAgICAgICAgICB4QW5nbGUgPSBlbGFwc2VkVGltZSAvIDEwMDAsXG4gICAgICAgICAgeUFuZ2xlID0gZWxhcHNlZFRpbWUgLyAxMDAwLFxuICAgICAgICAgIHJvdGF0aW9uID0gUm90YXRpb24uZnJvbVhBbmdsZUFuZFlBbmdsZSh4QW5nbGUsIHlBbmdsZSksXG4gICAgICAgICAgbm9ybWFsID0gTm9ybWFsLmZyb21Sb3RhdGlvbihyb3RhdGlvbik7XG5cbiAgICBjYW52YXMucmVuZGVyKG5vcm1hbCwgcm90YXRpb24sIHBvc2l0aW9uLCBwZXJzcGVjdGl2ZSwgc2hhZGVyKTtcblxuICAgIGNhbnZhcy5kcmF3RWxlbWVudHMoY291bnQpO1xuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gIH07XG5cbiAgcmV0dXJuIHJlbmRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnRlcm1lZGlhdGU7XG5cbmZ1bmN0aW9uIGxvYWRJbWFnZUNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQsIGluZGV4KSB7XG4gIGNvbnN0IHsgaW1hZ2VTb3VyY2VzLCBpbWFnZXMgfSA9IGNvbnRleHQsXG4gICAgICAgIGltYWdlU291cmNlID0gaW1hZ2VTb3VyY2VzW2luZGV4XSxcbiAgICAgICAgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcblxuICBpbWFnZXNbaW5kZXhdID0gaW1hZ2U7XG5cbiAgaW1hZ2Uub25sb2FkID0gbmV4dDtcblxuICBpbWFnZS5zcmMgPSBpbWFnZVNvdXJjZTsgIC8vL1xufVxuIl19