'use strict';

var Canvas = require('../canvas'),
    Normal = require('../normal'),
    Rotation = require('../rotation'),
    Position = require('../position'),
    Perspective = require('../perspective'),
    colourCube = require('./intermediate/colourCube'),
    textureCube = require('./intermediate/textureCube');

var vertexIndexData = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];

var canvas = new Canvas(),
    clientWidth = canvas.getClientWidth(),
    clientHeight = canvas.getClientHeight(),
    zCoordinate = -5,
    ///
position = Position.fromZCoordinate(zCoordinate),
    perspective = Perspective.fromClientWidthAndClientHeight(clientWidth, clientHeight),
    count = canvas.createAndBindElementBuffer(vertexIndexData);

canvas.enableDepthTesting();
canvas.enableDepthFunction();

var intermediate = function intermediate() {
  var context = canvas.getContext();

  if (!context) {
    return;
  }

  var imageURL = 'texture/bricks.jpg';

  textureCube(imageURL, canvas, function (textureShader) {
    shader = textureShader; ///

    requestAnimationFrame(render);
  });

  // const colourShader = colourCube(canvas);
  //
  // shader = colourShader;  ///
  //
  // requestAnimationFrame(render);
};

var initialTime = null;

var shader = void 0;

var render = function render(time) {
  if (initialTime === null) {
    initialTime = time;
  }

  var elapsedTime = time - initialTime,
      xAngle = elapsedTime / 1000,
      yAngle = elapsedTime / 1000,
      rotation = Rotation.fromXAngleAndYAngle(xAngle, yAngle),
      normal = Normal.fromRotation(rotation);

  canvas.render(normal, rotation, position, perspective, shader);

  canvas.drawElements(count);

  requestAnimationFrame(render);
};

module.exports = intermediate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUuanMiXSwibmFtZXMiOlsiQ2FudmFzIiwicmVxdWlyZSIsIk5vcm1hbCIsIlJvdGF0aW9uIiwiUG9zaXRpb24iLCJQZXJzcGVjdGl2ZSIsImNvbG91ckN1YmUiLCJ0ZXh0dXJlQ3ViZSIsInZlcnRleEluZGV4RGF0YSIsImNhbnZhcyIsImNsaWVudFdpZHRoIiwiZ2V0Q2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJnZXRDbGllbnRIZWlnaHQiLCJ6Q29vcmRpbmF0ZSIsInBvc2l0aW9uIiwiZnJvbVpDb29yZGluYXRlIiwicGVyc3BlY3RpdmUiLCJmcm9tQ2xpZW50V2lkdGhBbmRDbGllbnRIZWlnaHQiLCJjb3VudCIsImNyZWF0ZUFuZEJpbmRFbGVtZW50QnVmZmVyIiwiZW5hYmxlRGVwdGhUZXN0aW5nIiwiZW5hYmxlRGVwdGhGdW5jdGlvbiIsImludGVybWVkaWF0ZSIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiaW1hZ2VVUkwiLCJ0ZXh0dXJlU2hhZGVyIiwic2hhZGVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmVuZGVyIiwiaW5pdGlhbFRpbWUiLCJ0aW1lIiwiZWxhcHNlZFRpbWUiLCJ4QW5nbGUiLCJ5QW5nbGUiLCJyb3RhdGlvbiIsImZyb21YQW5nbGVBbmRZQW5nbGUiLCJub3JtYWwiLCJmcm9tUm90YXRpb24iLCJkcmF3RWxlbWVudHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLFdBQVIsQ0FBZjtBQUFBLElBQ01DLFNBQVNELFFBQVEsV0FBUixDQURmO0FBQUEsSUFFTUUsV0FBV0YsUUFBUSxhQUFSLENBRmpCO0FBQUEsSUFHTUcsV0FBV0gsUUFBUSxhQUFSLENBSGpCO0FBQUEsSUFJTUksY0FBY0osUUFBUSxnQkFBUixDQUpwQjtBQUFBLElBS01LLGFBQWFMLFFBQVEsMkJBQVIsQ0FMbkI7QUFBQSxJQU1NTSxjQUFjTixRQUFRLDRCQUFSLENBTnBCOztBQVFBLElBQU1PLGtCQUFrQixDQUNoQixDQURnQixFQUNaLENBRFksRUFDUixDQURRLEVBRWhCLENBRmdCLEVBRVosQ0FGWSxFQUVSLENBRlEsRUFJaEIsQ0FKZ0IsRUFJWixDQUpZLEVBSVIsQ0FKUSxFQUtoQixDQUxnQixFQUtaLENBTFksRUFLUixDQUxRLEVBT2hCLENBUGdCLEVBT1osQ0FQWSxFQU9ULEVBUFMsRUFRaEIsQ0FSZ0IsRUFRYixFQVJhLEVBUVQsRUFSUyxFQVVoQixFQVZnQixFQVVaLEVBVlksRUFVUixFQVZRLEVBV2hCLEVBWGdCLEVBV1osRUFYWSxFQVdSLEVBWFEsRUFhaEIsRUFiZ0IsRUFhWixFQWJZLEVBYVIsRUFiUSxFQWNoQixFQWRnQixFQWNaLEVBZFksRUFjUixFQWRRLEVBZ0JoQixFQWhCZ0IsRUFnQlosRUFoQlksRUFnQlIsRUFoQlEsRUFpQmhCLEVBakJnQixFQWlCWixFQWpCWSxFQWlCUixFQWpCUSxDQUF4Qjs7QUFvQkEsSUFBTUMsU0FBUyxJQUFJVCxNQUFKLEVBQWY7QUFBQSxJQUNNVSxjQUFjRCxPQUFPRSxjQUFQLEVBRHBCO0FBQUEsSUFFTUMsZUFBZUgsT0FBT0ksZUFBUCxFQUZyQjtBQUFBLElBR01DLGNBQWMsQ0FBQyxDQUhyQjtBQUFBLElBR3dCO0FBQ2xCQyxXQUFXWCxTQUFTWSxlQUFULENBQXlCRixXQUF6QixDQUpqQjtBQUFBLElBS01HLGNBQWNaLFlBQVlhLDhCQUFaLENBQTJDUixXQUEzQyxFQUF3REUsWUFBeEQsQ0FMcEI7QUFBQSxJQU1NTyxRQUFRVixPQUFPVywwQkFBUCxDQUFrQ1osZUFBbEMsQ0FOZDs7QUFRQUMsT0FBT1ksa0JBQVA7QUFDQVosT0FBT2EsbUJBQVA7O0FBRUEsSUFBTUMsZUFBZSxTQUFmQSxZQUFlLEdBQU07QUFDekIsTUFBTUMsVUFBVWYsT0FBT2dCLFVBQVAsRUFBaEI7O0FBRUEsTUFBSSxDQUFDRCxPQUFMLEVBQWM7QUFDWjtBQUNEOztBQUVELE1BQU1FLFdBQVcsb0JBQWpCOztBQUVBbkIsY0FBWW1CLFFBQVosRUFBc0JqQixNQUF0QixFQUE4QixVQUFTa0IsYUFBVCxFQUF3QjtBQUNwREMsYUFBU0QsYUFBVCxDQURvRCxDQUM1Qjs7QUFFeEJFLDBCQUFzQkMsTUFBdEI7QUFDRCxHQUpEOztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRCxDQXBCRDs7QUFzQkEsSUFBSUMsY0FBYyxJQUFsQjs7QUFFQSxJQUFJSCxlQUFKOztBQUVBLElBQU1FLFNBQVMsU0FBVEEsTUFBUyxDQUFDRSxJQUFELEVBQVU7QUFDdkIsTUFBSUQsZ0JBQWdCLElBQXBCLEVBQTBCO0FBQ3hCQSxrQkFBY0MsSUFBZDtBQUNEOztBQUVELE1BQU1DLGNBQWNELE9BQU9ELFdBQTNCO0FBQUEsTUFDTUcsU0FBU0QsY0FBYyxJQUQ3QjtBQUFBLE1BRU1FLFNBQVNGLGNBQWMsSUFGN0I7QUFBQSxNQUdNRyxXQUFXakMsU0FBU2tDLG1CQUFULENBQTZCSCxNQUE3QixFQUFxQ0MsTUFBckMsQ0FIakI7QUFBQSxNQUlNRyxTQUFTcEMsT0FBT3FDLFlBQVAsQ0FBb0JILFFBQXBCLENBSmY7O0FBTUEzQixTQUFPcUIsTUFBUCxDQUFjUSxNQUFkLEVBQXNCRixRQUF0QixFQUFnQ3JCLFFBQWhDLEVBQTBDRSxXQUExQyxFQUF1RFcsTUFBdkQ7O0FBRUFuQixTQUFPK0IsWUFBUCxDQUFvQnJCLEtBQXBCOztBQUVBVSx3QkFBc0JDLE1BQXRCO0FBQ0QsQ0FoQkQ7O0FBa0JBVyxPQUFPQyxPQUFQLEdBQWlCbkIsWUFBakIiLCJmaWxlIjoiaW50ZXJtZWRpYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDYW52YXMgPSByZXF1aXJlKCcuLi9jYW52YXMnKSxcbiAgICAgIE5vcm1hbCA9IHJlcXVpcmUoJy4uL25vcm1hbCcpLFxuICAgICAgUm90YXRpb24gPSByZXF1aXJlKCcuLi9yb3RhdGlvbicpLFxuICAgICAgUG9zaXRpb24gPSByZXF1aXJlKCcuLi9wb3NpdGlvbicpLFxuICAgICAgUGVyc3BlY3RpdmUgPSByZXF1aXJlKCcuLi9wZXJzcGVjdGl2ZScpLFxuICAgICAgY29sb3VyQ3ViZSA9IHJlcXVpcmUoJy4vaW50ZXJtZWRpYXRlL2NvbG91ckN1YmUnKSxcbiAgICAgIHRleHR1cmVDdWJlID0gcmVxdWlyZSgnLi9pbnRlcm1lZGlhdGUvdGV4dHVyZUN1YmUnKTtcblxuY29uc3QgdmVydGV4SW5kZXhEYXRhID0gW1xuICAgICAgICAwLCAgMSwgIDIsXG4gICAgICAgIDAsICAyLCAgMyxcblxuICAgICAgICA0LCAgNSwgIDYsXG4gICAgICAgIDQsICA2LCAgNyxcblxuICAgICAgICA4LCAgOSwgMTAsXG4gICAgICAgIDgsIDEwLCAxMSxcblxuICAgICAgICAxMiwgMTMsIDE0LFxuICAgICAgICAxMiwgMTQsIDE1LFxuXG4gICAgICAgIDE2LCAxNywgMTgsXG4gICAgICAgIDE2LCAxOCwgMTksXG5cbiAgICAgICAgMjAsIDIxLCAyMixcbiAgICAgICAgMjAsIDIyLCAyM1xuICAgICAgXTtcblxuY29uc3QgY2FudmFzID0gbmV3IENhbnZhcygpLFxuICAgICAgY2xpZW50V2lkdGggPSBjYW52YXMuZ2V0Q2xpZW50V2lkdGgoKSxcbiAgICAgIGNsaWVudEhlaWdodCA9IGNhbnZhcy5nZXRDbGllbnRIZWlnaHQoKSxcbiAgICAgIHpDb29yZGluYXRlID0gLTUsIC8vL1xuICAgICAgcG9zaXRpb24gPSBQb3NpdGlvbi5mcm9tWkNvb3JkaW5hdGUoekNvb3JkaW5hdGUpLFxuICAgICAgcGVyc3BlY3RpdmUgPSBQZXJzcGVjdGl2ZS5mcm9tQ2xpZW50V2lkdGhBbmRDbGllbnRIZWlnaHQoY2xpZW50V2lkdGgsIGNsaWVudEhlaWdodCksXG4gICAgICBjb3VudCA9IGNhbnZhcy5jcmVhdGVBbmRCaW5kRWxlbWVudEJ1ZmZlcih2ZXJ0ZXhJbmRleERhdGEpO1xuXG5jYW52YXMuZW5hYmxlRGVwdGhUZXN0aW5nKCk7XG5jYW52YXMuZW5hYmxlRGVwdGhGdW5jdGlvbigpO1xuXG5jb25zdCBpbnRlcm1lZGlhdGUgPSAoKSA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgpO1xuXG4gIGlmICghY29udGV4dCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGltYWdlVVJMID0gJ3RleHR1cmUvYnJpY2tzLmpwZyc7XG5cbiAgdGV4dHVyZUN1YmUoaW1hZ2VVUkwsIGNhbnZhcywgZnVuY3Rpb24odGV4dHVyZVNoYWRlcikge1xuICAgIHNoYWRlciA9IHRleHR1cmVTaGFkZXI7IC8vL1xuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gIH0pO1xuXG4gIC8vIGNvbnN0IGNvbG91clNoYWRlciA9IGNvbG91ckN1YmUoY2FudmFzKTtcbiAgLy9cbiAgLy8gc2hhZGVyID0gY29sb3VyU2hhZGVyOyAgLy8vXG4gIC8vXG4gIC8vIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xufTtcblxubGV0IGluaXRpYWxUaW1lID0gbnVsbDtcblxubGV0IHNoYWRlcjtcblxuY29uc3QgcmVuZGVyID0gKHRpbWUpID0+IHtcbiAgaWYgKGluaXRpYWxUaW1lID09PSBudWxsKSB7XG4gICAgaW5pdGlhbFRpbWUgPSB0aW1lO1xuICB9XG5cbiAgY29uc3QgZWxhcHNlZFRpbWUgPSB0aW1lIC0gaW5pdGlhbFRpbWUsXG4gICAgICAgIHhBbmdsZSA9IGVsYXBzZWRUaW1lIC8gMTAwMCxcbiAgICAgICAgeUFuZ2xlID0gZWxhcHNlZFRpbWUgLyAxMDAwLFxuICAgICAgICByb3RhdGlvbiA9IFJvdGF0aW9uLmZyb21YQW5nbGVBbmRZQW5nbGUoeEFuZ2xlLCB5QW5nbGUpLFxuICAgICAgICBub3JtYWwgPSBOb3JtYWwuZnJvbVJvdGF0aW9uKHJvdGF0aW9uKTtcblxuICBjYW52YXMucmVuZGVyKG5vcm1hbCwgcm90YXRpb24sIHBvc2l0aW9uLCBwZXJzcGVjdGl2ZSwgc2hhZGVyKTtcblxuICBjYW52YXMuZHJhd0VsZW1lbnRzKGNvdW50KTtcblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJtZWRpYXRlO1xuIl19