'use strict';

var Canvas = require('../canvas'),
    ModelView = require('../modelView'),
    Projection = require('../projection');

var intermediate = function intermediate() {
  var canvas = new Canvas(),
      context = canvas.getContext();

  if (!context) {
    return;
  }

  var vertexShaderSource = '\n          attribute vec4 aVertexPosition;\n          attribute vec4 aVertexColour;\n          \n          uniform mat4 uModelViewMatrix;\n          uniform mat4 uProjectionMatrix;\n          \n          varying lowp vec4 vColour;\n      \n          void main() {\n            gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n            vColour = aVertexColour;\n          }\n        ',
      fragmentShaderSource = '\n          varying lowp vec4 vColour;\n\n          void main() {\n            gl_FragColor = vColour;\n          }\n        ',
      shaderProgram = canvas.createShaderProgram(vertexShaderSource, fragmentShaderSource),
      clientWidth = canvas.getClientWidth(),
      clientHeight = canvas.getClientHeight(),
      projection = new Projection(clientWidth, clientHeight),
      modelView = new ModelView();

  var count = createAndBindVertexPositionBuffer(canvas, shaderProgram);

  createAndBindVertexColourBuffer(canvas, shaderProgram);

  createVertexIndexElementBuffer(canvas);

  canvas.useProgram(shaderProgram);

  var initialTime = null;

  function render(time) {
    if (initialTime === null) {
      initialTime = time;
    }

    var elapsedTime = time - initialTime;

    canvas.render(shaderProgram, projection, modelView, elapsedTime);

    canvas.draw(count);

    ///    requestAnimationFrame(render);
  }

  requestAnimationFrame(render);
};

module.exports = intermediate;

function createAndBindVertexPositionBuffer(canvas, shaderProgram) {
  var vertexPositionData = [+1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, -1.0, +1.0],
      vertexPositionBuffer = canvas.createBuffer(vertexPositionData),
      vertexPositionAttributeLocation = canvas.getAttributeLocation(shaderProgram, 'aVertexPosition'),
      vertexPositionComponents = 3;

  canvas.bindBuffer(vertexPositionBuffer, vertexPositionAttributeLocation, vertexPositionComponents);

  var vertexPositionDataLength = vertexPositionData.length,
      count = vertexPositionDataLength / vertexPositionComponents;

  return count;
}

function createAndBindVertexColourBuffer(canvas, shaderProgram) {
  var vertexColourData = [1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0],
      vertexColourBuffer = canvas.createBuffer(vertexColourData),
      vertexColourAttributeLocation = canvas.getAttributeLocation(shaderProgram, 'aVertexColour'),
      vertexColourComponents = 4;

  canvas.bindBuffer(vertexColourBuffer, vertexColourAttributeLocation, vertexColourComponents);
}

function createVertexIndexElementBuffer(canvas) {
  var vertexIndexData = [0, 1, 2],
      vertexIndexElementBuffer = canvas.createElementBuffer(vertexIndexData);

  canvas.bindElementBuffer(vertexIndexElementBuffer);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,