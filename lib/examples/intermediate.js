'use strict';

var Canvas = require('../canvas'),
    Normal = require('../normal'),
    Rotation = require('../rotation'),
    Position = require('../position'),
    Perspective = require('../perspective'),
    colourCube = require('./intermediate/colourCube'),
    textureCube = require('./intermediate/textureCube');

var intermediate = function intermediate() {
  var canvas = new Canvas(),
      context = canvas.getContext();

  if (!context) {
    return;
  }

  var callback = function callback(count, shader) {
    canvas.useShader(shader);

    canvas.enableDepthTesting();
    canvas.enableDepthFunction();

    var render = createRender(canvas, count, shader);

    requestAnimationFrame(render);
  };

  // const imageURL = 'texture/bricks.jpg';
  //
  // textureCube(imageURL, canvas, callback);

  colourCube(canvas, callback);
};

var createRender = function createRender(canvas, count, shader) {
  var initialTime = null;

  var clientWidth = canvas.getClientWidth(),
      clientHeight = canvas.getClientHeight(),
      zCoordinate = -5,
      ///
  position = Position.fromZCoordinate(zCoordinate),
      perspective = Perspective.fromClientWidthAndClientHeight(clientWidth, clientHeight);

  var render = function render(time) {
    if (initialTime === null) {
      initialTime = time;
    }

    var elapsedTime = time - initialTime,
        xAngle = elapsedTime / 1000,
        yAngle = elapsedTime / 1000,
        rotation = Rotation.fromXAngleAndYAngle(xAngle, yAngle),
        normal = Normal.fromRotation(rotation);

    canvas.render(normal, rotation, position, perspective, shader);

    canvas.drawElements(count);

    requestAnimationFrame(render);
  };

  return render;
};

module.exports = intermediate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUuanMiXSwibmFtZXMiOlsiQ2FudmFzIiwicmVxdWlyZSIsIk5vcm1hbCIsIlJvdGF0aW9uIiwiUG9zaXRpb24iLCJQZXJzcGVjdGl2ZSIsImNvbG91ckN1YmUiLCJ0ZXh0dXJlQ3ViZSIsImludGVybWVkaWF0ZSIsImNhbnZhcyIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiY2FsbGJhY2siLCJjb3VudCIsInNoYWRlciIsInVzZVNoYWRlciIsImVuYWJsZURlcHRoVGVzdGluZyIsImVuYWJsZURlcHRoRnVuY3Rpb24iLCJyZW5kZXIiLCJjcmVhdGVSZW5kZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbml0aWFsVGltZSIsImNsaWVudFdpZHRoIiwiZ2V0Q2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJnZXRDbGllbnRIZWlnaHQiLCJ6Q29vcmRpbmF0ZSIsInBvc2l0aW9uIiwiZnJvbVpDb29yZGluYXRlIiwicGVyc3BlY3RpdmUiLCJmcm9tQ2xpZW50V2lkdGhBbmRDbGllbnRIZWlnaHQiLCJ0aW1lIiwiZWxhcHNlZFRpbWUiLCJ4QW5nbGUiLCJ5QW5nbGUiLCJyb3RhdGlvbiIsImZyb21YQW5nbGVBbmRZQW5nbGUiLCJub3JtYWwiLCJmcm9tUm90YXRpb24iLCJkcmF3RWxlbWVudHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLFdBQVIsQ0FBZjtBQUFBLElBQ01DLFNBQVNELFFBQVEsV0FBUixDQURmO0FBQUEsSUFFTUUsV0FBV0YsUUFBUSxhQUFSLENBRmpCO0FBQUEsSUFHTUcsV0FBV0gsUUFBUSxhQUFSLENBSGpCO0FBQUEsSUFJTUksY0FBY0osUUFBUSxnQkFBUixDQUpwQjtBQUFBLElBS01LLGFBQWFMLFFBQVEsMkJBQVIsQ0FMbkI7QUFBQSxJQU1NTSxjQUFjTixRQUFRLDRCQUFSLENBTnBCOztBQVFBLElBQU1PLGVBQWUsU0FBZkEsWUFBZSxHQUFNO0FBQ3pCLE1BQU1DLFNBQVMsSUFBSVQsTUFBSixFQUFmO0FBQUEsTUFDTVUsVUFBVUQsT0FBT0UsVUFBUCxFQURoQjs7QUFHQSxNQUFJLENBQUNELE9BQUwsRUFBYztBQUNaO0FBQ0Q7O0FBRUQsTUFBTUUsV0FBVyxTQUFYQSxRQUFXLENBQUNDLEtBQUQsRUFBUUMsTUFBUixFQUFtQjtBQUNsQ0wsV0FBT00sU0FBUCxDQUFpQkQsTUFBakI7O0FBRUFMLFdBQU9PLGtCQUFQO0FBQ0FQLFdBQU9RLG1CQUFQOztBQUVBLFFBQU1DLFNBQVNDLGFBQWFWLE1BQWIsRUFBcUJJLEtBQXJCLEVBQTRCQyxNQUE1QixDQUFmOztBQUVBTSwwQkFBc0JGLE1BQXRCO0FBQ0QsR0FURDs7QUFXQTtBQUNBO0FBQ0E7O0FBRUFaLGFBQVdHLE1BQVgsRUFBbUJHLFFBQW5CO0FBQ0QsQ0F4QkQ7O0FBMEJBLElBQU1PLGVBQWUsU0FBZkEsWUFBZSxDQUFDVixNQUFELEVBQVNJLEtBQVQsRUFBZ0JDLE1BQWhCLEVBQTJCO0FBQzlDLE1BQUlPLGNBQWMsSUFBbEI7O0FBRUEsTUFBTUMsY0FBY2IsT0FBT2MsY0FBUCxFQUFwQjtBQUFBLE1BQ01DLGVBQWVmLE9BQU9nQixlQUFQLEVBRHJCO0FBQUEsTUFFTUMsY0FBYyxDQUFDLENBRnJCO0FBQUEsTUFFd0I7QUFDbEJDLGFBQVd2QixTQUFTd0IsZUFBVCxDQUF5QkYsV0FBekIsQ0FIakI7QUFBQSxNQUlNRyxjQUFjeEIsWUFBWXlCLDhCQUFaLENBQTJDUixXQUEzQyxFQUF3REUsWUFBeEQsQ0FKcEI7O0FBTUEsTUFBTU4sU0FBUyxTQUFUQSxNQUFTLENBQUNhLElBQUQsRUFBVTtBQUN2QixRQUFJVixnQkFBZ0IsSUFBcEIsRUFBMEI7QUFDeEJBLG9CQUFjVSxJQUFkO0FBQ0Q7O0FBRUQsUUFBTUMsY0FBY0QsT0FBT1YsV0FBM0I7QUFBQSxRQUNNWSxTQUFTRCxjQUFjLElBRDdCO0FBQUEsUUFFTUUsU0FBU0YsY0FBYyxJQUY3QjtBQUFBLFFBR01HLFdBQVdoQyxTQUFTaUMsbUJBQVQsQ0FBNkJILE1BQTdCLEVBQXFDQyxNQUFyQyxDQUhqQjtBQUFBLFFBSU1HLFNBQVNuQyxPQUFPb0MsWUFBUCxDQUFvQkgsUUFBcEIsQ0FKZjs7QUFNQTFCLFdBQU9TLE1BQVAsQ0FBY21CLE1BQWQsRUFBc0JGLFFBQXRCLEVBQWdDUixRQUFoQyxFQUEwQ0UsV0FBMUMsRUFBdURmLE1BQXZEOztBQUVBTCxXQUFPOEIsWUFBUCxDQUFvQjFCLEtBQXBCOztBQUVBTywwQkFBc0JGLE1BQXRCO0FBQ0QsR0FoQkQ7O0FBa0JBLFNBQU9BLE1BQVA7QUFDRCxDQTVCRDs7QUE4QkFzQixPQUFPQyxPQUFQLEdBQWlCakMsWUFBakIiLCJmaWxlIjoiaW50ZXJtZWRpYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDYW52YXMgPSByZXF1aXJlKCcuLi9jYW52YXMnKSxcbiAgICAgIE5vcm1hbCA9IHJlcXVpcmUoJy4uL25vcm1hbCcpLFxuICAgICAgUm90YXRpb24gPSByZXF1aXJlKCcuLi9yb3RhdGlvbicpLFxuICAgICAgUG9zaXRpb24gPSByZXF1aXJlKCcuLi9wb3NpdGlvbicpLFxuICAgICAgUGVyc3BlY3RpdmUgPSByZXF1aXJlKCcuLi9wZXJzcGVjdGl2ZScpLFxuICAgICAgY29sb3VyQ3ViZSA9IHJlcXVpcmUoJy4vaW50ZXJtZWRpYXRlL2NvbG91ckN1YmUnKSxcbiAgICAgIHRleHR1cmVDdWJlID0gcmVxdWlyZSgnLi9pbnRlcm1lZGlhdGUvdGV4dHVyZUN1YmUnKTtcblxuY29uc3QgaW50ZXJtZWRpYXRlID0gKCkgPT4ge1xuICBjb25zdCBjYW52YXMgPSBuZXcgQ2FudmFzKCksXG4gICAgICAgIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgpO1xuXG4gIGlmICghY29udGV4dCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGNhbGxiYWNrID0gKGNvdW50LCBzaGFkZXIpID0+IHtcbiAgICBjYW52YXMudXNlU2hhZGVyKHNoYWRlcik7XG5cbiAgICBjYW52YXMuZW5hYmxlRGVwdGhUZXN0aW5nKCk7XG4gICAgY2FudmFzLmVuYWJsZURlcHRoRnVuY3Rpb24oKTtcblxuICAgIGNvbnN0IHJlbmRlciA9IGNyZWF0ZVJlbmRlcihjYW52YXMsIGNvdW50LCBzaGFkZXIpO1xuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gIH07XG5cbiAgLy8gY29uc3QgaW1hZ2VVUkwgPSAndGV4dHVyZS9icmlja3MuanBnJztcbiAgLy9cbiAgLy8gdGV4dHVyZUN1YmUoaW1hZ2VVUkwsIGNhbnZhcywgY2FsbGJhY2spO1xuXG4gIGNvbG91ckN1YmUoY2FudmFzLCBjYWxsYmFjayk7XG59O1xuXG5jb25zdCBjcmVhdGVSZW5kZXIgPSAoY2FudmFzLCBjb3VudCwgc2hhZGVyKSA9PiB7XG4gIGxldCBpbml0aWFsVGltZSA9IG51bGw7XG5cbiAgY29uc3QgY2xpZW50V2lkdGggPSBjYW52YXMuZ2V0Q2xpZW50V2lkdGgoKSxcbiAgICAgICAgY2xpZW50SGVpZ2h0ID0gY2FudmFzLmdldENsaWVudEhlaWdodCgpLFxuICAgICAgICB6Q29vcmRpbmF0ZSA9IC01LCAvLy9cbiAgICAgICAgcG9zaXRpb24gPSBQb3NpdGlvbi5mcm9tWkNvb3JkaW5hdGUoekNvb3JkaW5hdGUpLFxuICAgICAgICBwZXJzcGVjdGl2ZSA9IFBlcnNwZWN0aXZlLmZyb21DbGllbnRXaWR0aEFuZENsaWVudEhlaWdodChjbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0KTtcblxuICBjb25zdCByZW5kZXIgPSAodGltZSkgPT4ge1xuICAgIGlmIChpbml0aWFsVGltZSA9PT0gbnVsbCkge1xuICAgICAgaW5pdGlhbFRpbWUgPSB0aW1lO1xuICAgIH1cblxuICAgIGNvbnN0IGVsYXBzZWRUaW1lID0gdGltZSAtIGluaXRpYWxUaW1lLFxuICAgICAgICAgIHhBbmdsZSA9IGVsYXBzZWRUaW1lIC8gMTAwMCxcbiAgICAgICAgICB5QW5nbGUgPSBlbGFwc2VkVGltZSAvIDEwMDAsXG4gICAgICAgICAgcm90YXRpb24gPSBSb3RhdGlvbi5mcm9tWEFuZ2xlQW5kWUFuZ2xlKHhBbmdsZSwgeUFuZ2xlKSxcbiAgICAgICAgICBub3JtYWwgPSBOb3JtYWwuZnJvbVJvdGF0aW9uKHJvdGF0aW9uKTtcblxuICAgIGNhbnZhcy5yZW5kZXIobm9ybWFsLCByb3RhdGlvbiwgcG9zaXRpb24sIHBlcnNwZWN0aXZlLCBzaGFkZXIpO1xuXG4gICAgY2FudmFzLmRyYXdFbGVtZW50cyhjb3VudCk7XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgfTtcblxuICByZXR1cm4gcmVuZGVyO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnRlcm1lZGlhdGU7XG4iXX0=