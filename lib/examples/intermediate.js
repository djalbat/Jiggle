'use strict';

var Canvas = require('../canvas'),
    Normal = require('../normal'),
    Rotation = require('../rotation'),
    Position = require('../position'),
    Perspective = require('../perspective');

var intermediate = function intermediate() {
  var canvas = new Canvas(),
      context = canvas.getContext();

  if (!context) {
    return;
  }

  var vertexShaderSource = '\n  \n          attribute vec4 aVertexPosition;\n          attribute vec4 aVertexColour;\n          attribute vec3 aVertexNormal;\n          attribute vec2 aTextureCoordinate;\n          \n          uniform mat4 uNormalMatrix;\n          uniform mat4 uRotationMatrix;\n          uniform mat4 uPositionMatrix;\n          uniform mat4 uPerspectiveMatrix;\n          \n          varying lowp vec4 vColour;\n          varying highp vec2 vTextureCoordinate;\n          varying highp vec3 vLighting;\n          \n          void main() {\n            gl_Position = uPerspectiveMatrix * uPositionMatrix * uRotationMatrix * aVertexPosition;\n            vColour = aVertexColour;\n            vTextureCoordinate = aTextureCoordinate;\n            \n            highp vec3 ambientLight = vec3(0.3, 0.3, 0.3);\n            highp vec3 directionalLightColour = vec3(1, 1, 1);\n            highp vec3 directionalVector = normalize(vec3(0.85, 0.8, 0.75));\n            \n            highp vec4 transformedNormal = uNormalMatrix * vec4(aVertexNormal, 1.0);            \n            highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);\n            \n            vLighting = ambientLight + (directionalLightColour * directional);\n          }\n          \n        ',
      fragmentShaderSource = '\n        \n          varying lowp vec4 vColour;\n          varying highp vec2 vTextureCoordinate;\n          varying highp vec3 vLighting;\n          \n          uniform sampler2D uSampler;\n\n          void main() {\n            highp vec4 texelColour = texture2D(uSampler, vTextureCoordinate);\n            \n            // gl_FragColor = vColour;\n            // gl_FragColor = texture2D(uSampler, vTextureCoordinate);\n            \n            gl_FragColor = vec4(texelColour.rgb * vLighting, texelColour.a);\n          }\n          \n        ',
      shaderProgram = canvas.createShaderProgram(vertexShaderSource, fragmentShaderSource),
      clientWidth = canvas.getClientWidth(),
      clientHeight = canvas.getClientHeight(),
      zCoordinate = -5,
      ///
  position = Position.fromZCoordinate(zCoordinate),
      perspective = Perspective.fromClientWidthAndClientHeight(clientWidth, clientHeight);

  createAndBindVertexPositionBuffer(canvas, shaderProgram);

  // createAndBindVertexColourBuffer(canvas, shaderProgram);

  createAndBindTextureCoordinateBuffer(canvas, shaderProgram);

  createAndBindVertexNormalBuffer(canvas, shaderProgram);

  var count = createVertexIndexElementBuffer(canvas);

  canvas.useProgram(shaderProgram);

  canvas.enableDepthTesting();
  canvas.enableDepthFunction();

  var initialTime = null;

  var image = new Image();

  image.onload = function () {
    var context = canvas.getContext(),
        TEXTURE0 = context.TEXTURE0,
        target = TEXTURE0,
        uSamplerUniformLocationIntegerValue = 0,
        uSamplerUniformLocation = canvas.getUniformLocation(shaderProgram, 'uSampler');


    canvas.createTexture(image);

    canvas.activateTexture(target);

    canvas.setUniformLocationIntegerValue(uSamplerUniformLocation, uSamplerUniformLocationIntegerValue);

    requestAnimationFrame(render);
  };

  image.src = 'texture/bricks.jpg';

  function render(time) {
    if (initialTime === null) {
      initialTime = time;
    }

    var elapsedTime = time - initialTime,
        xAngle = elapsedTime / 1000,
        yAngle = elapsedTime / 1000,
        rotation = Rotation.fromXAngleAndYAngle(xAngle, yAngle),
        normal = Normal.fromRotation(rotation);

    canvas.render(normal, rotation, position, perspective, shaderProgram);

    canvas.drawElements(count);

    requestAnimationFrame(render);
  }
};

module.exports = intermediate;

function createAndBindVertexPositionBuffer(canvas, shaderProgram) {
  var vertexPositionData = [-1.0, -1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, +1.0, -1.0, +1.0, +1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +1.0, +1.0, +1.0, +1.0, +1.0, +1.0, +1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +1.0, -1.0, +1.0, -1.0, -1.0, +1.0, +1.0, -1.0, -1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, +1.0, -1.0, +1.0, -1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0],
      vertexPositionBuffer = canvas.createBuffer(vertexPositionData),
      vertexPositionAttributeLocation = canvas.getAttributeLocation(shaderProgram, 'aVertexPosition'),
      vertexPositionComponents = 3;

  canvas.bindBuffer(vertexPositionBuffer, vertexPositionAttributeLocation, vertexPositionComponents);

  var vertexPositionDataLength = vertexPositionData.length,
      count = vertexPositionDataLength / vertexPositionComponents;

  return count;
}

function createAndBindVertexColourBuffer(canvas, shaderProgram) {
  var vertexColourData = [1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0],
      vertexColourBuffer = canvas.createBuffer(vertexColourData),
      vertexColourAttributeLocation = canvas.getAttributeLocation(shaderProgram, 'aVertexColour'),
      vertexColourComponents = 4;

  canvas.bindBuffer(vertexColourBuffer, vertexColourAttributeLocation, vertexColourComponents);
}

function createAndBindTextureCoordinateBuffer(canvas, shaderProgram) {
  var textureCoordinateData = [0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0],
      textureCoordinateBuffer = canvas.createBuffer(textureCoordinateData),
      textureCoordinateAttributeLocation = canvas.getAttributeLocation(shaderProgram, 'aTextureCoordinate'),
      textureCoordinateComponents = 2;

  canvas.bindBuffer(textureCoordinateBuffer, textureCoordinateAttributeLocation, textureCoordinateComponents);
}

function createAndBindVertexNormalBuffer(canvas, shaderProgram) {
  var vertexNormalData = [0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0],
      vertexNormalBuffer = canvas.createBuffer(vertexNormalData),
      vertexNormalAttributeLocation = canvas.getAttributeLocation(shaderProgram, 'aVertexNormal'),
      vertexNormalComponents = 3;

  canvas.bindBuffer(vertexNormalBuffer, vertexNormalAttributeLocation, vertexNormalComponents);
}

function createVertexIndexElementBuffer(canvas) {
  var vertexIndexData = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23],
      vertexIndexElementBuffer = canvas.createElementBuffer(vertexIndexData),
      vertexIndexDataLength = vertexIndexData.length,
      count = vertexIndexDataLength; ///

  canvas.bindElementBuffer(vertexIndexElementBuffer);

  return count;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,