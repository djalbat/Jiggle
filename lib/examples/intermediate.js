'use strict';

var necessary = require('necessary');

var Canvas = require('../canvas'),
    Normal = require('../normal'),
    Rotation = require('../rotation'),
    Position = require('../position'),
    Perspective = require('../perspective'),
    colourCube = require('./intermediate/colourCube'),
    textureCube = require('./intermediate/textureCube');

var arrayUtilities = necessary.arrayUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    first = arrayUtilities.first,
    repeatedly = asynchronousUtilities.repeatedly;


function intermediate() {
  var canvas = new Canvas();

  canvas.enableDepthTesting();
  canvas.enableDepthFunction();

  // loadImages(function(images) {
  //   const firstImage = first(images),
  //         offsetPosition = [+1, 0, 0],
  //         image = firstImage; ///
  //
  //   textureCube(offsetPosition, image, canvas, function(count, shader) {
  //     const render = createRender(canvas, count, shader);
  //
  //     requestAnimationFrame(render);
  //   });
  // });

  var offsetPosition = [-1, 0, 0];

  colourCube(offsetPosition, canvas, function (count, shader) {
    var render = createRender(canvas, count, shader);

    requestAnimationFrame(render);
  });
}

module.exports = intermediate;

function loadImages(callback) {
  var imageSources = ['texture/bricks.jpg'],
      images = [],
      context = {
    imageSources: imageSources,
    images: images
  },
      length = imageSources.length; ///

  repeatedly(loadImageCallback, length, function () {
    var images = context.images;


    callback(images);
  }, context);
}

function createRender(canvas, count, shader) {
  var initialTime = null;

  var clientWidth = canvas.getClientWidth(),
      clientHeight = canvas.getClientHeight(),
      zCoordinate = -10,
      ///
  position = Position.fromZCoordinate(zCoordinate),
      perspective = Perspective.fromClientWidthAndClientHeight(clientWidth, clientHeight);

  var render = function render(time) {
    if (initialTime === null) {
      initialTime = time;
    }

    var elapsedTime = time - initialTime,

    // xAngle = elapsedTime / 1000,
    // yAngle = elapsedTime / 1000,
    // rotation = Rotation.fromXAngleAndYAngle(xAngle, yAngle),
    rotation = Rotation.fromNothing(),
        normal = Normal.fromRotation(rotation);

    canvas.render(normal, rotation, position, perspective, shader);

    canvas.drawElements(count);

    requestAnimationFrame(render);
  };

  return render;
}

function loadImageCallback(next, done, context, index) {
  var imageSources = context.imageSources,
      images = context.images,
      imageSource = imageSources[index],
      image = new Image();


  images[index] = image;

  image.onload = next; ///

  image.src = imageSource; ///
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNhbnZhcyIsIk5vcm1hbCIsIlJvdGF0aW9uIiwiUG9zaXRpb24iLCJQZXJzcGVjdGl2ZSIsImNvbG91ckN1YmUiLCJ0ZXh0dXJlQ3ViZSIsImFycmF5VXRpbGl0aWVzIiwiYXN5bmNocm9ub3VzVXRpbGl0aWVzIiwiZmlyc3QiLCJyZXBlYXRlZGx5IiwiaW50ZXJtZWRpYXRlIiwiY2FudmFzIiwiZW5hYmxlRGVwdGhUZXN0aW5nIiwiZW5hYmxlRGVwdGhGdW5jdGlvbiIsIm9mZnNldFBvc2l0aW9uIiwiY291bnQiLCJzaGFkZXIiLCJyZW5kZXIiLCJjcmVhdGVSZW5kZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb2R1bGUiLCJleHBvcnRzIiwibG9hZEltYWdlcyIsImNhbGxiYWNrIiwiaW1hZ2VTb3VyY2VzIiwiaW1hZ2VzIiwiY29udGV4dCIsImxlbmd0aCIsImxvYWRJbWFnZUNhbGxiYWNrIiwiaW5pdGlhbFRpbWUiLCJjbGllbnRXaWR0aCIsImdldENsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiZ2V0Q2xpZW50SGVpZ2h0IiwiekNvb3JkaW5hdGUiLCJwb3NpdGlvbiIsImZyb21aQ29vcmRpbmF0ZSIsInBlcnNwZWN0aXZlIiwiZnJvbUNsaWVudFdpZHRoQW5kQ2xpZW50SGVpZ2h0IiwidGltZSIsImVsYXBzZWRUaW1lIiwicm90YXRpb24iLCJmcm9tTm90aGluZyIsIm5vcm1hbCIsImZyb21Sb3RhdGlvbiIsImRyYXdFbGVtZW50cyIsIm5leHQiLCJkb25lIiwiaW5kZXgiLCJpbWFnZVNvdXJjZSIsImltYWdlIiwiSW1hZ2UiLCJvbmxvYWQiLCJzcmMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjs7QUFFQSxJQUFNQyxTQUFTRCxRQUFRLFdBQVIsQ0FBZjtBQUFB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QWhELEVBQXVEO0FBQUEsTUFDN0N4QixZQUQ2QyxHQUNwQkUsT0FEb0IsQ0FDN0NGLFlBRDZDO0FBQUEsTUFDL0JDLE1BRCtCLEdBQ3BCQyxPQURvQixDQUMvQkQsTUFEK0I7QUFBQSxNQUUvQ3dCLFdBRitDLEdBRWpDekIsYUFBYXdCLEtBQWIsQ0FGaUM7QUFBQSxNQUcvQ0UsS0FIK0MsR0FHdkMsSUFBSUMsS0FBSixFQUh1Qzs7O0FBS3JEMUIsU0FBT3VCLEtBQVAsSUFBZ0JFLEtBQWhCOztBQUVBQSxRQUFNRSxNQUFOLEdBQWVOLElBQWYsQ0FQcUQsQ0FPL0I7O0FBRXRCSSxRQUFNRyxHQUFOLEdBQVlKLFdBQVosQ0FUcUQsQ0FTM0I7QUFDM0IiLCJmaWxlIjoiaW50ZXJtZWRpYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgQ2FudmFzID0gcmVxdWlyZSgnLi4vY2FudmFzJyksXG4gICAgICBOb3JtYWwgPSByZXF1aXJlKCcuLi9ub3JtYWwnKSxcbiAgICAgIFJvdGF0aW9uID0gcmVxdWlyZSgnLi4vcm90YXRpb24nKSxcbiAgICAgIFBvc2l0aW9uID0gcmVxdWlyZSgnLi4vcG9zaXRpb24nKSxcbiAgICAgIFBlcnNwZWN0aXZlID0gcmVxdWlyZSgnLi4vcGVyc3BlY3RpdmUnKSxcbiAgICAgIGNvbG91ckN1YmUgPSByZXF1aXJlKCcuL2ludGVybWVkaWF0ZS9jb2xvdXJDdWJlJyksXG4gICAgICB0ZXh0dXJlQ3ViZSA9IHJlcXVpcmUoJy4vaW50ZXJtZWRpYXRlL3RleHR1cmVDdWJlJyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMsIGFzeW5jaHJvbm91c1V0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHJlcGVhdGVkbHkgfSA9IGFzeW5jaHJvbm91c1V0aWxpdGllcztcblxuZnVuY3Rpb24gaW50ZXJtZWRpYXRlKCkge1xuICBjb25zdCBjYW52YXMgPSBuZXcgQ2FudmFzKCk7XG5cbiAgY2FudmFzLmVuYWJsZURlcHRoVGVzdGluZygpO1xuICBjYW52YXMuZW5hYmxlRGVwdGhGdW5jdGlvbigpO1xuXG4gIC8vIGxvYWRJbWFnZXMoZnVuY3Rpb24oaW1hZ2VzKSB7XG4gIC8vICAgY29uc3QgZmlyc3RJbWFnZSA9IGZpcnN0KGltYWdlcyksXG4gIC8vICAgICAgICAgb2Zmc2V0UG9zaXRpb24gPSBbKzEsIDAsIDBdLFxuICAvLyAgICAgICAgIGltYWdlID0gZmlyc3RJbWFnZTsgLy8vXG4gIC8vXG4gIC8vICAgdGV4dHVyZUN1YmUob2Zmc2V0UG9zaXRpb24sIGltYWdlLCBjYW52YXMsIGZ1bmN0aW9uKGNvdW50LCBzaGFkZXIpIHtcbiAgLy8gICAgIGNvbnN0IHJlbmRlciA9IGNyZWF0ZVJlbmRlcihjYW52YXMsIGNvdW50LCBzaGFkZXIpO1xuICAvL1xuICAvLyAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gIC8vICAgfSk7XG4gIC8vIH0pO1xuXG4gIGNvbnN0IG9mZnNldFBvc2l0aW9uID0gWy0xLCAwLCAwXTtcblxuICBjb2xvdXJDdWJlKG9mZnNldFBvc2l0aW9uLCBjYW52YXMsIGZ1bmN0aW9uKGNvdW50LCBzaGFkZXIpIHtcbiAgICBjb25zdCByZW5kZXIgPSBjcmVhdGVSZW5kZXIoY2FudmFzLCBjb3VudCwgc2hhZGVyKTtcblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnRlcm1lZGlhdGU7XG5cbmZ1bmN0aW9uIGxvYWRJbWFnZXMoY2FsbGJhY2spIHtcbiAgY29uc3QgaW1hZ2VTb3VyY2VzID0gW1xuICAgICAgICAgICd0ZXh0dXJlL2JyaWNrcy5qcGcnXG4gICAgICAgIF0sXG4gICAgICAgIGltYWdlcyA9IFtdLFxuICAgICAgICBjb250ZXh0ID0ge1xuICAgICAgICAgIGltYWdlU291cmNlczogaW1hZ2VTb3VyY2VzLFxuICAgICAgICAgIGltYWdlczogaW1hZ2VzXG4gICAgICAgIH0sXG4gICAgICAgIGxlbmd0aCA9IGltYWdlU291cmNlcy5sZW5ndGg7IC8vL1xuXG4gIHJlcGVhdGVkbHkobG9hZEltYWdlQ2FsbGJhY2ssIGxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgeyBpbWFnZXMgfSA9IGNvbnRleHQ7XG5cbiAgICBjYWxsYmFjayhpbWFnZXMpXG4gIH0sIGNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZW5kZXIoY2FudmFzLCBjb3VudCwgc2hhZGVyKSB7XG4gIGxldCBpbml0aWFsVGltZSA9IG51bGw7XG5cbiAgY29uc3QgY2xpZW50V2lkdGggPSBjYW52YXMuZ2V0Q2xpZW50V2lkdGgoKSxcbiAgICAgICAgY2xpZW50SGVpZ2h0ID0gY2FudmFzLmdldENsaWVudEhlaWdodCgpLFxuICAgICAgICB6Q29vcmRpbmF0ZSA9IC0xMCwgLy8vXG4gICAgICAgIHBvc2l0aW9uID0gUG9zaXRpb24uZnJvbVpDb29yZGluYXRlKHpDb29yZGluYXRlKSxcbiAgICAgICAgcGVyc3BlY3RpdmUgPSBQZXJzcGVjdGl2ZS5mcm9tQ2xpZW50V2lkdGhBbmRDbGllbnRIZWlnaHQoY2xpZW50V2lkdGgsIGNsaWVudEhlaWdodCk7XG5cbiAgY29uc3QgcmVuZGVyID0gKHRpbWUpID0+IHtcbiAgICBpZiAoaW5pdGlhbFRpbWUgPT09IG51bGwpIHtcbiAgICAgIGluaXRpYWxUaW1lID0gdGltZTtcbiAgICB9XG5cbiAgICBjb25zdCBlbGFwc2VkVGltZSA9IHRpbWUgLSBpbml0aWFsVGltZSxcbiAgICAgICAgICAvLyB4QW5nbGUgPSBlbGFwc2VkVGltZSAvIDEwMDAsXG4gICAgICAgICAgLy8geUFuZ2xlID0gZWxhcHNlZFRpbWUgLyAxMDAwLFxuICAgICAgICAgIC8vIHJvdGF0aW9uID0gUm90YXRpb24uZnJvbVhBbmdsZUFuZFlBbmdsZSh4QW5nbGUsIHlBbmdsZSksXG4gICAgICAgICAgcm90YXRpb24gPSBSb3RhdGlvbi5mcm9tTm90aGluZygpLFxuICAgICAgICAgIG5vcm1hbCA9IE5vcm1hbC5mcm9tUm90YXRpb24ocm90YXRpb24pO1xuXG4gICAgY2FudmFzLnJlbmRlcihub3JtYWwsIHJvdGF0aW9uLCBwb3NpdGlvbiwgcGVyc3BlY3RpdmUsIHNoYWRlcik7XG5cbiAgICBjYW52YXMuZHJhd0VsZW1lbnRzKGNvdW50KTtcblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICB9O1xuXG4gIHJldHVybiByZW5kZXI7XG59XG5cbmZ1bmN0aW9uIGxvYWRJbWFnZUNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQsIGluZGV4KSB7XG4gIGNvbnN0IHsgaW1hZ2VTb3VyY2VzLCBpbWFnZXMgfSA9IGNvbnRleHQsXG4gICAgICAgIGltYWdlU291cmNlID0gaW1hZ2VTb3VyY2VzW2luZGV4XSxcbiAgICAgICAgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcblxuICBpbWFnZXNbaW5kZXhdID0gaW1hZ2U7XG5cbiAgaW1hZ2Uub25sb2FkID0gbmV4dDsgIC8vL1xuXG4gIGltYWdlLnNyYyA9IGltYWdlU291cmNlOyAgLy8vXG59XG4iXX0=