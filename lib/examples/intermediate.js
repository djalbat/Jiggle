'use strict';

var React = require('../react'),
    Scene = require('../scene'),
    Canvas = require('../canvas'),
    ColourShader = require('../shader/colour'),
    TextureShader = require('../shader/texture'),
    ColourCube = require('./intermediate/cube/colour'),
    TextureCube = require('./intermediate/cube/texture'),
    imageMapUtilities = require('../utilities/imageMap');

var preloadImageMap = imageMapUtilities.preloadImageMap;


function intermediate() {
      var canvas = new Canvas(),
          colourShader = ColourShader.fromNothing(canvas),
          textureShader = TextureShader.fromNothing(canvas);

      preloadImageMap(canvas, textureShader, function () {
            var colourCube = React.createElement(ColourCube, { offsetPosition: [0, 0, 0] }),
                textureCube = React.createElement(TextureCube, { offsetPosition: [+2, +2, +2] });

            colourCube.createElement(colourShader, textureShader);
            textureCube.createElement(colourShader, textureShader);

            canvas.enableDepthTesting();
            canvas.enableDepthFunction();

            colourShader.createBuffers(canvas);
            textureShader.createBuffers(canvas);

            Scene.fromCanvasAndShaders(canvas, colourShader, textureShader);
      });
}

module.exports = intermediate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiU2NlbmUiLCJDYW52YXMiLCJDb2xvdXJTaGFkZXIiLCJUZXh0dXJlU2hhZGVyIiwiQ29sb3VyQ3ViZSIsIlRleHR1cmVDdWJlIiwiaW1hZ2VNYXBVdGlsaXRpZXMiLCJwcmVsb2FkSW1hZ2VNYXAiLCJpbnRlcm1lZGlhdGUiLCJjYW52YXMiLCJjb2xvdXJTaGFkZXIiLCJmcm9tTm90aGluZyIsInRleHR1cmVTaGFkZXIiLCJjb2xvdXJDdWJlIiwidGV4dHVyZUN1YmUiLCJjcmVhdGVFbGVtZW50IiwiZW5hYmxlRGVwdGhUZXN0aW5nIiwiZW5hYmxlRGVwdGhGdW5jdGlvbiIsImNyZWF0ZUJ1ZmZlcnMiLCJmcm9tQ2FudmFzQW5kU2hhZGVycyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFFBQVFDLFFBQVEsVUFBUixDQUFkO0FBQUEsSUFDTUMsUUFBUUQsUUFBUSxVQUFSLENBRGQ7QUFBQSxJQUVNRSxTQUFTRixRQUFRLFdBQVIsQ0FGZjtBQUFBLElBR01HLGVBQWVILFFBQVEsa0JBQVIsQ0FIckI7QUFBQSxJQUlNSSxnQkFBZ0JKLFFBQVEsbUJBQVIsQ0FKdEI7QUFBQSxJQUtNSyxhQUFhTCxRQUFRLDRCQUFSLENBTG5CO0FBQUEsSUFNTU0sY0FBY04sUUFBUSw2QkFBUixDQU5wQjtBQUFBLElBT01PLG9CQUFvQlAsUUFBUSx1QkFBUixDQVAxQjs7SUFTUVEsZSxHQUFvQkQsaUIsQ0FBcEJDLGU7OztBQUVSLFNBQVNDLFlBQVQsR0FBd0I7QUFDdEIsVUFBTUMsU0FBUyxJQUFJUixNQUFKLEVBQWY7QUFBQSxVQUNNUyxlQUFlUixhQUFhUyxXQUFiLENBQXlCRixNQUF6QixDQURyQjtBQUFBLFVBRU1HLGdCQUFnQlQsY0FBY1EsV0FBZCxDQUEwQkYsTUFBMUIsQ0FGdEI7O0FBSUFGLHNCQUFnQkUsTUFBaEIsRUFBd0JHLGFBQXhCLEVBQXVDLFlBQVc7QUFDaEQsZ0JBQU1DLGFBQWEsb0JBQUMsVUFBRCxJQUFZLGdCQUFnQixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUE1QixHQUFuQjtBQUFBLGdCQUNNQyxjQUFjLG9CQUFDLFdBQUQsSUFBYSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUYsRUFBSyxDQUFDLENBQU4sRUFBUyxDQUFDLENBQVYsQ0FBN0IsR0FEcEI7O0FBR0FELHVCQUFXRSxhQUFYLENBQXlCTCxZQUF6QixFQUF1Q0UsYUFBdkM7QUFDQUUsd0JBQVlDLGFBQVosQ0FBMEJMLFlBQTFCLEVBQXdDRSxhQUF4Qzs7QUFFQUgsbUJBQU9PLGtCQUFQO0FBQ0FQLG1CQUFPUSxtQkFBUDs7QUFFQVAseUJBQWFRLGFBQWIsQ0FBMkJULE1BQTNCO0FBQ0FHLDBCQUFjTSxhQUFkLENBQTRCVCxNQUE1Qjs7QUFFQVQsa0JBQU1tQixvQkFBTixDQUEyQlYsTUFBM0IsRUFBbUNDLFlBQW5DLEVBQWlERSxhQUFqRDtBQUNELE9BZEQ7QUFlRDs7QUFFRFEsT0FBT0MsT0FBUCxHQUFpQmIsWUFBakIiLCJmaWxlIjoiaW50ZXJtZWRpYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJy4uL3JlYWN0JyksXG4gICAgICBTY2VuZSA9IHJlcXVpcmUoJy4uL3NjZW5lJyksXG4gICAgICBDYW52YXMgPSByZXF1aXJlKCcuLi9jYW52YXMnKSxcbiAgICAgIENvbG91clNoYWRlciA9IHJlcXVpcmUoJy4uL3NoYWRlci9jb2xvdXInKSxcbiAgICAgIFRleHR1cmVTaGFkZXIgPSByZXF1aXJlKCcuLi9zaGFkZXIvdGV4dHVyZScpLFxuICAgICAgQ29sb3VyQ3ViZSA9IHJlcXVpcmUoJy4vaW50ZXJtZWRpYXRlL2N1YmUvY29sb3VyJyksXG4gICAgICBUZXh0dXJlQ3ViZSA9IHJlcXVpcmUoJy4vaW50ZXJtZWRpYXRlL2N1YmUvdGV4dHVyZScpLFxuICAgICAgaW1hZ2VNYXBVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvaW1hZ2VNYXAnKTtcblxuY29uc3QgeyBwcmVsb2FkSW1hZ2VNYXAgfSA9IGltYWdlTWFwVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBpbnRlcm1lZGlhdGUoKSB7XG4gIGNvbnN0IGNhbnZhcyA9IG5ldyBDYW52YXMoKSxcbiAgICAgICAgY29sb3VyU2hhZGVyID0gQ29sb3VyU2hhZGVyLmZyb21Ob3RoaW5nKGNhbnZhcyksXG4gICAgICAgIHRleHR1cmVTaGFkZXIgPSBUZXh0dXJlU2hhZGVyLmZyb21Ob3RoaW5nKGNhbnZhcyk7XG5cbiAgcHJlbG9hZEltYWdlTWFwKGNhbnZhcywgdGV4dHVyZVNoYWRlciwgZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgY29sb3VyQ3ViZSA9IDxDb2xvdXJDdWJlIG9mZnNldFBvc2l0aW9uPXtbMCwgMCwgMF19IC8+LFxuICAgICAgICAgIHRleHR1cmVDdWJlID0gPFRleHR1cmVDdWJlIG9mZnNldFBvc2l0aW9uPXtbKzIsICsyLCArMl19IC8+O1xuXG4gICAgY29sb3VyQ3ViZS5jcmVhdGVFbGVtZW50KGNvbG91clNoYWRlciwgdGV4dHVyZVNoYWRlcik7XG4gICAgdGV4dHVyZUN1YmUuY3JlYXRlRWxlbWVudChjb2xvdXJTaGFkZXIsIHRleHR1cmVTaGFkZXIpO1xuICAgIFxuICAgIGNhbnZhcy5lbmFibGVEZXB0aFRlc3RpbmcoKTtcbiAgICBjYW52YXMuZW5hYmxlRGVwdGhGdW5jdGlvbigpO1xuXG4gICAgY29sb3VyU2hhZGVyLmNyZWF0ZUJ1ZmZlcnMoY2FudmFzKTtcbiAgICB0ZXh0dXJlU2hhZGVyLmNyZWF0ZUJ1ZmZlcnMoY2FudmFzKTtcblxuICAgIFNjZW5lLmZyb21DYW52YXNBbmRTaGFkZXJzKGNhbnZhcywgY29sb3VyU2hhZGVyLCB0ZXh0dXJlU2hhZGVyKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJtZWRpYXRlO1xuIl19