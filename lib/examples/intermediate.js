'use strict';

var Canvas = require('../canvas'),
    ModelView = require('../modelView'),
    Projection = require('../projection');

var intermediate = function intermediate() {
  var canvas = new Canvas(),
      context = canvas.getContext();

  if (!context) {
    return;
  }

  var vertexShaderSource = '\n          attribute vec4 aVertexPosition;\n          attribute vec4 aVertexColour;\n          \n          uniform mat4 uModelViewMatrix;\n          uniform mat4 uProjectionMatrix;\n          \n          varying lowp vec4 vColour;\n      \n          void main() {\n            gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n            vColour = aVertexColour;\n          }\n        ',
      fragmentShaderSource = '\n          varying lowp vec4 vColour;\n\n          void main() {\n            gl_FragColor = vColour;\n          }\n        ',
      shaderProgram = canvas.createShaderProgram(vertexShaderSource, fragmentShaderSource),
      clientWidth = canvas.getClientWidth(),
      clientHeight = canvas.getClientHeight(),
      projection = new Projection(clientWidth, clientHeight),
      modelView = new ModelView();

  var vertexCount = createAndBindVertexPositionBuffer(canvas, shaderProgram);

  createAndBindVertexColourBuffer(canvas, shaderProgram);

  canvas.render(shaderProgram, projection, modelView);

  canvas.draw(vertexCount);
};

module.exports = intermediate;

function createAndBindVertexPositionBuffer(canvas, shaderProgram) {
  var vertexPositionData = [+1.0, +1.0, -1.0, +1.0, +1.0, -1.0, -1.0, -1.0],
      vertexPositionBuffer = canvas.createBuffer(vertexPositionData),
      vertexPositionAttributeLocation = canvas.getAttributeLocation(shaderProgram, 'aVertexPosition'),
      vertexPositionComponents = 2;

  canvas.bindBuffer(vertexPositionBuffer, vertexPositionAttributeLocation, vertexPositionComponents);

  var vertexPositionDataLength = vertexPositionData.length,
      vertexCount = vertexPositionDataLength / vertexPositionComponents;

  return vertexCount;
}

function createAndBindVertexColourBuffer(canvas, shaderProgram) {
  var vertexColourData = [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0],
      vertexColourBuffer = canvas.createBuffer(vertexColourData),
      vertexColourAttributeLocation = canvas.getAttributeLocation(shaderProgram, 'aVertexColour'),
      vertexColourComponents = 4;

  canvas.bindBuffer(vertexColourBuffer, vertexColourAttributeLocation, vertexColourComponents);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUuanMiXSwibmFtZXMiOlsiQ2FudmFzIiwicmVxdWlyZSIsIk1vZGVsVmlldyIsIlByb2plY3Rpb24iLCJpbnRlcm1lZGlhdGUiLCJjYW52YXMiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInZlcnRleFNoYWRlclNvdXJjZSIsImZyYWdtZW50U2hhZGVyU291cmNlIiwic2hhZGVyUHJvZ3JhbSIsImNyZWF0ZVNoYWRlclByb2dyYW0iLCJjbGllbnRXaWR0aCIsImdldENsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiZ2V0Q2xpZW50SGVpZ2h0IiwicHJvamVjdGlvbiIsIm1vZGVsVmlldyIsInZlcnRleENvdW50IiwiY3JlYXRlQW5kQmluZFZlcnRleFBvc2l0aW9uQnVmZmVyIiwiY3JlYXRlQW5kQmluZFZlcnRleENvbG91ckJ1ZmZlciIsInJlbmRlciIsImRyYXciLCJtb2R1bGUiLCJleHBvcnRzIiwidmVydGV4UG9zaXRpb25EYXRhIiwidmVydGV4UG9zaXRpb25CdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJ2ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZUxvY2F0aW9uIiwiZ2V0QXR0cmlidXRlTG9jYXRpb24iLCJ2ZXJ0ZXhQb3NpdGlvbkNvbXBvbmVudHMiLCJiaW5kQnVmZmVyIiwidmVydGV4UG9zaXRpb25EYXRhTGVuZ3RoIiwibGVuZ3RoIiwidmVydGV4Q29sb3VyRGF0YSIsInZlcnRleENvbG91ckJ1ZmZlciIsInZlcnRleENvbG91ckF0dHJpYnV0ZUxvY2F0aW9uIiwidmVydGV4Q29sb3VyQ29tcG9uZW50cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsU0FBU0MsUUFBUSxXQUFSLENBQWY7QUFBQSxJQUNNQyxZQUFZRCxRQUFRLGNBQVIsQ0FEbEI7QUFBQSxJQUVNRSxhQUFhRixRQUFRLGVBQVIsQ0FGbkI7O0FBSUEsSUFBTUcsZUFBZSxTQUFmQSxZQUFlLEdBQU07QUFDekIsTUFBTUMsU0FBUyxJQUFJTCxNQUFKLEVBQWY7QUFBQSxNQUNNTSxVQUFVRCxPQUFPRSxVQUFQLEVBRGhCOztBQUdBLE1BQUksQ0FBQ0QsT0FBTCxFQUFjO0FBQ1o7QUFDRDs7QUFFRCxNQUFNRSwrYUFBTjtBQUFBLE1BY01DLHNKQWROO0FBQUEsTUFxQk1DLGdCQUFnQkwsT0FBT00sbUJBQVAsQ0FBMkJILGtCQUEzQixFQUErQ0Msb0JBQS9DLENBckJ0QjtBQUFBLE1Bc0JNRyxjQUFjUCxPQUFPUSxjQUFQLEVBdEJwQjtBQUFBLE1BdUJNQyxlQUFlVCxPQUFPVSxlQUFQLEVBdkJyQjtBQUFBLE1Bd0JNQyxhQUFhLElBQUliLFVBQUosQ0FBZVMsV0FBZixFQUE0QkUsWUFBNUIsQ0F4Qm5CO0FBQUEsTUF5Qk1HLFlBQVksSUFBSWYsU0FBSixFQXpCbEI7O0FBMkJBLE1BQU1nQixjQUFjQyxrQ0FBa0NkLE1BQWxDLEVBQTBDSyxhQUExQyxDQUFwQjs7QUFFQVUsa0NBQWdDZixNQUFoQyxFQUF3Q0ssYUFBeEM7O0FBRUFMLFNBQU9nQixNQUFQLENBQWNYLGFBQWQsRUFBNkJNLFVBQTdCLEVBQXlDQyxTQUF6Qzs7QUFFQVosU0FBT2lCLElBQVAsQ0FBWUosV0FBWjtBQUNELENBMUNEOztBQTRDQUssT0FBT0MsT0FBUCxHQUFpQnBCLFlBQWpCOztBQUVBLFNBQVNlLGlDQUFULENBQTJDZCxNQUEzQyxFQUFtREssYUFBbkQsRUFBa0U7QUFDaEUsTUFBTWUscUJBQXFCLENBQ25CLENBQUMsR0FEa0IsRUFDYixDQUFDLEdBRFksRUFFbkIsQ0FBQyxHQUZrQixFQUViLENBQUMsR0FGWSxFQUduQixDQUFDLEdBSGtCLEVBR2IsQ0FBQyxHQUhZLEVBSW5CLENBQUMsR0FKa0IsRUFJYixDQUFDLEdBSlksQ0FBM0I7QUFBQSxNQU1NQyx1QkFBdUJyQixPQUFPc0IsWUFBUCxDQUFvQkYsa0JBQXBCLENBTjdCO0FBQUEsTUFPTUcsa0NBQWtDdkIsT0FBT3dCLG9CQUFQLENBQTRCbkIsYUFBNUIsRUFBMkMsaUJBQTNDLENBUHhDO0FBQUEsTUFRTW9CLDJCQUEyQixDQVJqQzs7QUFVQXpCLFNBQU8wQixVQUFQLENBQWtCTCxvQkFBbEIsRUFBd0NFLCtCQUF4QyxFQUF5RUUsd0JBQXpFOztBQUVBLE1BQU1FLDJCQUEyQlAsbUJBQW1CUSxNQUFwRDtBQUFBLE1BQ01mLGNBQWNjLDJCQUEyQkYsd0JBRC9DOztBQUdBLFNBQU9aLFdBQVA7QUFDRDs7QUFFRCxTQUFTRSwrQkFBVCxDQUF5Q2YsTUFBekMsRUFBaURLLGFBQWpELEVBQWdFO0FBQzlELE1BQU13QixtQkFBbUIsQ0FDakIsR0FEaUIsRUFDWCxHQURXLEVBQ0wsR0FESyxFQUNDLEdBREQsRUFFakIsR0FGaUIsRUFFWCxHQUZXLEVBRUwsR0FGSyxFQUVDLEdBRkQsRUFHakIsR0FIaUIsRUFHWCxHQUhXLEVBR0wsR0FISyxFQUdDLEdBSEQsRUFJakIsR0FKaUIsRUFJWCxHQUpXLEVBSUwsR0FKSyxFQUlDLEdBSkQsQ0FBekI7QUFBQSxNQU1NQyxxQkFBcUI5QixPQUFPc0IsWUFBUCxDQUFvQk8sZ0JBQXBCLENBTjNCO0FBQUEsTUFPTUUsZ0NBQWdDL0IsT0FBT3dCLG9CQUFQLENBQTRCbkIsYUFBNUIsRUFBMkMsZUFBM0MsQ0FQdEM7QUFBQSxNQVFNMkIseUJBQXlCLENBUi9COztBQVVBaEMsU0FBTzBCLFVBQVAsQ0FBa0JJLGtCQUFsQixFQUFzQ0MsNkJBQXRDLEVBQXFFQyxzQkFBckU7QUFDRCIsImZpbGUiOiJpbnRlcm1lZGlhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IENhbnZhcyA9IHJlcXVpcmUoJy4uL2NhbnZhcycpLFxuICAgICAgTW9kZWxWaWV3ID0gcmVxdWlyZSgnLi4vbW9kZWxWaWV3JyksXG4gICAgICBQcm9qZWN0aW9uID0gcmVxdWlyZSgnLi4vcHJvamVjdGlvbicpO1xuXG5jb25zdCBpbnRlcm1lZGlhdGUgPSAoKSA9PiB7XG4gIGNvbnN0IGNhbnZhcyA9IG5ldyBDYW52YXMoKSxcbiAgICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCk7XG5cbiAgaWYgKCFjb250ZXh0KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgdmVydGV4U2hhZGVyU291cmNlID0gYFxuICAgICAgICAgIGF0dHJpYnV0ZSB2ZWM0IGFWZXJ0ZXhQb3NpdGlvbjtcbiAgICAgICAgICBhdHRyaWJ1dGUgdmVjNCBhVmVydGV4Q29sb3VyO1xuICAgICAgICAgIFxuICAgICAgICAgIHVuaWZvcm0gbWF0NCB1TW9kZWxWaWV3TWF0cml4O1xuICAgICAgICAgIHVuaWZvcm0gbWF0NCB1UHJvamVjdGlvbk1hdHJpeDtcbiAgICAgICAgICBcbiAgICAgICAgICB2YXJ5aW5nIGxvd3AgdmVjNCB2Q29sb3VyO1xuICAgICAgXG4gICAgICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAgICAgZ2xfUG9zaXRpb24gPSB1UHJvamVjdGlvbk1hdHJpeCAqIHVNb2RlbFZpZXdNYXRyaXggKiBhVmVydGV4UG9zaXRpb247XG4gICAgICAgICAgICB2Q29sb3VyID0gYVZlcnRleENvbG91cjtcbiAgICAgICAgICB9XG4gICAgICAgIGAsXG4gICAgICAgIGZyYWdtZW50U2hhZGVyU291cmNlID0gYFxuICAgICAgICAgIHZhcnlpbmcgbG93cCB2ZWM0IHZDb2xvdXI7XG5cbiAgICAgICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB2Q29sb3VyO1xuICAgICAgICAgIH1cbiAgICAgICAgYCxcbiAgICAgICAgc2hhZGVyUHJvZ3JhbSA9IGNhbnZhcy5jcmVhdGVTaGFkZXJQcm9ncmFtKHZlcnRleFNoYWRlclNvdXJjZSwgZnJhZ21lbnRTaGFkZXJTb3VyY2UpLFxuICAgICAgICBjbGllbnRXaWR0aCA9IGNhbnZhcy5nZXRDbGllbnRXaWR0aCgpLFxuICAgICAgICBjbGllbnRIZWlnaHQgPSBjYW52YXMuZ2V0Q2xpZW50SGVpZ2h0KCksXG4gICAgICAgIHByb2plY3Rpb24gPSBuZXcgUHJvamVjdGlvbihjbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0KSxcbiAgICAgICAgbW9kZWxWaWV3ID0gbmV3IE1vZGVsVmlldygpO1xuXG4gIGNvbnN0IHZlcnRleENvdW50ID0gY3JlYXRlQW5kQmluZFZlcnRleFBvc2l0aW9uQnVmZmVyKGNhbnZhcywgc2hhZGVyUHJvZ3JhbSk7XG5cbiAgY3JlYXRlQW5kQmluZFZlcnRleENvbG91ckJ1ZmZlcihjYW52YXMsIHNoYWRlclByb2dyYW0pO1xuXG4gIGNhbnZhcy5yZW5kZXIoc2hhZGVyUHJvZ3JhbSwgcHJvamVjdGlvbiwgbW9kZWxWaWV3KTtcblxuICBjYW52YXMuZHJhdyh2ZXJ0ZXhDb3VudCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludGVybWVkaWF0ZTtcblxuZnVuY3Rpb24gY3JlYXRlQW5kQmluZFZlcnRleFBvc2l0aW9uQnVmZmVyKGNhbnZhcywgc2hhZGVyUHJvZ3JhbSkge1xuICBjb25zdCB2ZXJ0ZXhQb3NpdGlvbkRhdGEgPSBbXG4gICAgICAgICAgKzEuMCwgKzEuMCxcbiAgICAgICAgICAtMS4wLCArMS4wLFxuICAgICAgICAgICsxLjAsIC0xLjAsXG4gICAgICAgICAgLTEuMCwgLTEuMFxuICAgICAgICBdLFxuICAgICAgICB2ZXJ0ZXhQb3NpdGlvbkJ1ZmZlciA9IGNhbnZhcy5jcmVhdGVCdWZmZXIodmVydGV4UG9zaXRpb25EYXRhKSxcbiAgICAgICAgdmVydGV4UG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiA9IGNhbnZhcy5nZXRBdHRyaWJ1dGVMb2NhdGlvbihzaGFkZXJQcm9ncmFtLCAnYVZlcnRleFBvc2l0aW9uJyksXG4gICAgICAgIHZlcnRleFBvc2l0aW9uQ29tcG9uZW50cyA9IDI7XG5cbiAgY2FudmFzLmJpbmRCdWZmZXIodmVydGV4UG9zaXRpb25CdWZmZXIsIHZlcnRleFBvc2l0aW9uQXR0cmlidXRlTG9jYXRpb24sIHZlcnRleFBvc2l0aW9uQ29tcG9uZW50cyk7XG5cbiAgY29uc3QgdmVydGV4UG9zaXRpb25EYXRhTGVuZ3RoID0gdmVydGV4UG9zaXRpb25EYXRhLmxlbmd0aCxcbiAgICAgICAgdmVydGV4Q291bnQgPSB2ZXJ0ZXhQb3NpdGlvbkRhdGFMZW5ndGggLyB2ZXJ0ZXhQb3NpdGlvbkNvbXBvbmVudHM7XG5cbiAgcmV0dXJuIHZlcnRleENvdW50O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBbmRCaW5kVmVydGV4Q29sb3VyQnVmZmVyKGNhbnZhcywgc2hhZGVyUHJvZ3JhbSkge1xuICBjb25zdCB2ZXJ0ZXhDb2xvdXJEYXRhID0gW1xuICAgICAgICAgIDEuMCwgIDEuMCwgIDEuMCwgIDEuMCxcbiAgICAgICAgICAxLjAsICAwLjAsICAwLjAsICAxLjAsXG4gICAgICAgICAgMC4wLCAgMS4wLCAgMC4wLCAgMS4wLFxuICAgICAgICAgIDAuMCwgIDAuMCwgIDEuMCwgIDEuMFxuICAgICAgICBdLFxuICAgICAgICB2ZXJ0ZXhDb2xvdXJCdWZmZXIgPSBjYW52YXMuY3JlYXRlQnVmZmVyKHZlcnRleENvbG91ckRhdGEpLFxuICAgICAgICB2ZXJ0ZXhDb2xvdXJBdHRyaWJ1dGVMb2NhdGlvbiA9IGNhbnZhcy5nZXRBdHRyaWJ1dGVMb2NhdGlvbihzaGFkZXJQcm9ncmFtLCAnYVZlcnRleENvbG91cicpLFxuICAgICAgICB2ZXJ0ZXhDb2xvdXJDb21wb25lbnRzID0gNDtcblxuICBjYW52YXMuYmluZEJ1ZmZlcih2ZXJ0ZXhDb2xvdXJCdWZmZXIsIHZlcnRleENvbG91ckF0dHJpYnV0ZUxvY2F0aW9uLCB2ZXJ0ZXhDb2xvdXJDb21wb25lbnRzKTtcbn1cbiJdfQ==