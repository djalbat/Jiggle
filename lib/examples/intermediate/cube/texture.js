'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var vec3 = require('../../../vec3'),
    arrayUtilities = require('../../../utilities/array');

var divide = arrayUtilities.divide,
    flatten = arrayUtilities.flatten;
var _runtimeConfiguration = runtimeConfiguration,
    imageMapJSON = _runtimeConfiguration.imageMapJSON,
    textureNames = ['ivy.jpg', 'steel.jpg', 'grass.jpg', 'bricks.jpg', 'carpet.jpg', 'concrete.jpg'],
    textureCoordinates = textureNames.reduce(function (textureCoordinates, textureName) {
  textureCoordinates = textureCoordinates.concat(imageMapJSON[textureName]);

  return textureCoordinates;
}, []),
    textureCoordinateData = flatten(textureCoordinates),
    vertexPositionData = [-1.0, -1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, +1.0, -1.0, +1.0, +1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +1.0, +1.0, +1.0, +1.0, +1.0, +1.0, +1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +1.0, -1.0, +1.0, -1.0, -1.0, +1.0, +1.0, -1.0, -1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, +1.0, -1.0, +1.0, -1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0],
    vertexNormalData = [0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0],
    vertexIndexData = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];

var TextureCube = function () {
  function TextureCube() {
    _classCallCheck(this, TextureCube);
  }

  _createClass(TextureCube, null, [{
    key: 'getVertexPositionData',
    value: function getVertexPositionData(offsetPosition) {
      var vertexPositions = divide(vertexPositionData, 3); ///

      vertexPositions = vertexPositions.map(function (vertexPosition) {
        var offsetVertexPosition = vec3.add(vertexPosition, offsetPosition);

        return offsetVertexPosition;
      });

      return flatten(vertexPositions);
    }
  }, {
    key: 'getVertexNormalData',
    value: function getVertexNormalData() {
      return vertexNormalData;
    }
  }, {
    key: 'getTextureCoordinateData',
    value: function getTextureCoordinateData() {
      return textureCoordinateData;
    }
  }, {
    key: 'getVertexIndexData',
    value: function getVertexIndexData() {
      return vertexIndexData;
    }
  }, {
    key: 'createElement',
    value: function createElement(colourShader, textureShader) {
      var offsetPosition = [+2, +2, +2],
          vertexPositionData = TextureCube.getVertexPositionData(offsetPosition),
          vertexNormalData = TextureCube.getVertexNormalData(),
          vertexIndexData = TextureCube.getVertexIndexData(),
          textureCoordinateData = TextureCube.getTextureCoordinateData();

      textureShader.addVertexPositionData(vertexPositionData);
      textureShader.addVertexNormalData(vertexNormalData);
      textureShader.addVertexIndexData(vertexIndexData);
      textureShader.addTextureCoordinateData(textureCoordinateData);
    }
  }]);

  return TextureCube;
}();

module.exports = TextureCube;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,