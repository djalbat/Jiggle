'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var vec3 = require('../../../vec3'),
    arrayUtilities = require('../../../utilities/array');

var divide = arrayUtilities.divide,
    flatten = arrayUtilities.flatten;


var textureCoordinateData = [0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0],
    vertexPositionData = [-1.0, -1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, +1.0, -1.0, +1.0, +1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +1.0, +1.0, +1.0, +1.0, +1.0, +1.0, +1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +1.0, -1.0, +1.0, -1.0, -1.0, +1.0, +1.0, -1.0, -1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, +1.0, -1.0, +1.0, -1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0],
    vertexNormalData = [0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0],
    vertexIndexData = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];

var TextureCube = function () {
  function TextureCube(vertexPositionBuffer, vertexNormalBuffer, textureCoordinateBuffer, count) {
    _classCallCheck(this, TextureCube);

    this.vertexPositionBuffer = vertexPositionBuffer;
    this.vertexNormalBuffer = vertexNormalBuffer;
    this.textureCoordinateBuffer = textureCoordinateBuffer;
    this.count = count;
  }

  _createClass(TextureCube, [{
    key: 'getCount',
    value: function getCount() {
      return this.count;
    }
  }, {
    key: 'bind',
    value: function bind(textureShader, canvas) {
      textureShader.bindVertexPositionBuffer(this.vertexPositionBuffer, canvas);

      textureShader.bindVertexNormalBuffer(this.vertexNormalBuffer, canvas);

      textureShader.bindTextureCoordinateBuffer(this.textureCoordinateBuffer, canvas);
    }
  }], [{
    key: 'fromOffsetPositionAndImage',
    value: function fromOffsetPositionAndImage(offsetPosition, image, textureShader, canvas) {
      var vertexPositions = divide(vertexPositionData, 3),
          ///
      offsetVertexPositions = vertexPositions.map(function (vertexPosition) {
        var offsetVertexPosition = vec3.add(vertexPosition, offsetPosition);

        return offsetVertexPosition;
      }),
          offsetVertexPositionData = flatten(offsetVertexPositions);

      textureShader.createTexture(image, canvas);

      var vertexPositionBuffer = textureShader.createVertexPositionBuffer(offsetVertexPositionData, canvas),
          vertexNormalBuffer = textureShader.createVertexNormalBuffer(vertexNormalData, canvas),
          textureCoordinateBuffer = textureShader.createTextureCoordinateBuffer(textureCoordinateData, canvas),
          count = canvas.createAndBindElementBuffer(vertexIndexData),
          textureCube = new TextureCube(vertexPositionBuffer, vertexNormalBuffer, textureCoordinateBuffer, count);

      return textureCube;
    }
  }]);

  return TextureCube;
}();

module.exports = TextureCube;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,