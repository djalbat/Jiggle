'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imagesUtilities = require('../../utilities/images');

var arrayUtilities = necessary.arrayUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    preload = imagesUtilities.preload,
    first = arrayUtilities.first;


function create(colourShader, textureShader, canvas, callback) {
  var cubes = [],
      callbacks = [createColourCubeCallback, createTextureCubeCallback],
      context = {
    colourShader: colourShader,
    textureShader: textureShader,
    canvas: canvas,
    cubes: cubes
  };

  sequence(callbacks, function () {
    callback(cubes);
  }, context);
}

module.exports = {
  create: create
};

function createColourCubeCallback(next, done, context) {
  var cubes = context.cubes,
      colourShader = context.colourShader,
      canvas = context.canvas,
      offsetPosition = [-2, 0, 0],
      colourCube = ColourCube.fromOffsetPosition(offsetPosition, colourShader, canvas);


  cubes.push(colourCube);

  next();
}

function createTextureCubeCallback(next, done, context) {
  var cubes = context.cubes,
      textureShader = context.textureShader,
      canvas = context.canvas,
      sources = ['texture/bricks.jpg'];


  preload(sources, function (images) {
    var firstImage = first(images),
        offsetPosition = [+2, 0, 0],
        image = firstImage,
        ///
    textureCube = TextureCube.fromOffsetPositionAndImage(offsetPosition, image, textureShader, canvas);

    cubes.push(textureCube);

    next();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImltYWdlc1V0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwiYXN5bmNocm9ub3VzVXRpbGl0aWVzIiwic2VxdWVuY2UiLCJwcmVsb2FkIiwiZmlyc3QiLCJjcmVhdGUiLCJjb2xvdXJTaGFkZXIiLCJ0ZXh0dXJlU2hhZGVyIiwiY2FudmFzIiwiY2FsbGJhY2siLCJjdWJlcyIsImNhbGxiYWNrcyIsImNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayIsImNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2siLCJjb250ZXh0IiwibW9kdWxlIiwiZXhwb3J0cyIsIm5leHQiLCJkb25lIiwib2Zmc2V0UG9zaXRpb24iLCJjb2xvdXJDdWJlIiwiZnJvbU9mZnNldFBvc2l0aW9uIiwicHVzaCIsInNvdXJjZXMiLCJpbWFnZXMiLCJmaXJzdEltYWdlIiwiaW1hZ2UiLCJ0ZXh0dXJlQ3ViZSIsImZyb21PZmZzZXRQb3NpdGlvbkFuZEltYWdlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRUEsSUFBTUMsYUFBYUQsUUFBUSxlQUFSLENBQW5CO0FBQUEsSUFDTUUsY0FBY0YsUUFBUSxnQkFBUixDQURwQjtBQUFBLElBRU1HLGtCQUFrQkgsUUFBUSx3QkFBUixDQUZ4Qjs7SUFJUUksYyxHQUEwQ0wsUyxDQUExQ0ssYztJQUFnQkMscUIsR0FBMEJOLFMsQ0FBMUJNLHFCO0lBQ2hCQyxRLEdBQWFELHFCLENBQWJDLFE7SUFDQUMsTyxHQUFZSixlLENBQVpJLE87SUFDQUMsSyxHQUFVSixjLENBQVZJLEs7OztBQUVSLFNBQVNDLE1BQVQsQ0FBZ0JDLFlBQWhCLEVBQThCQyxhQUE5QixFQUE2Q0MsTUFBN0MsRUFBcURDLFFBQXJELEVBQStEO0FBQzdELE1BQU1DLFFBQVEsRUFBZDtBQUFBLE1BQ01DLFlBQVksQ0FDVkMsd0JBRFUsRUFFVkMseUJBRlUsQ0FEbEI7QUFBQSxNQUtNQyxVQUFVO0FBQ1JSLGtCQUFjQSxZQUROO0FBRVJDLG1CQUFlQSxhQUZQO0FBR1JDLFlBQVFBLE1BSEE7QUFJUkUsV0FBT0E7QUFKQyxHQUxoQjs7QUFZQVIsV0FBU1MsU0FBVCxFQUFvQixZQUFXO0FBQzdCRixhQUFTQyxLQUFUO0FBQ0QsR0FGRCxFQUVHSSxPQUZIO0FBR0Q7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZlgsVUFBUUE7QUFETyxDQUFqQjs7QUFJQSxTQUFTTyx3QkFBVCxDQUFrQ0ssSUFBbEMsRUFBd0NDLElBQXhDLEVBQThDSixPQUE5QyxFQUF1RDtBQUFBLE1BQzdDSixLQUQ2QyxHQUNiSSxPQURhLENBQzdDSixLQUQ2QztBQUFBLE1BQ3RDSixZQURzQyxHQUNiUSxPQURhLENBQ3RDUixZQURzQztBQUFBLE1BQ3hCRSxNQUR3QixHQUNiTSxPQURhLENBQ3hCTixNQUR3QjtBQUFBLE1BRS9DVyxjQUYrQyxHQUU5QixDQUFDLENBQUMsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBRjhCO0FBQUEsTUFHL0NDLFVBSCtDLEdBR2xDdkIsV0FBV3dCLGtCQUFYLENBQThCRixjQUE5QixFQUE4Q2IsWUFBOUMsRUFBNERFLE1BQTVELENBSGtDOzs7QUFLckRFLFFBQU1ZLElBQU4sQ0FBV0YsVUFBWDs7QUFFQUg7QUFDRDs7QUFFRCxTQUFTSix5QkFBVCxDQUFtQ0ksSUFBbkMsRUFBeUNDLElBQXpDLEVBQStDSixPQUEvQyxFQUF3RDtBQUFBLE1BQzlDSixLQUQ4QyxHQUNiSSxPQURhLENBQzlDSixLQUQ4QztBQUFBLE1BQ3ZDSCxhQUR1QyxHQUNiTyxPQURhLENBQ3ZDUCxhQUR1QztBQUFBLE1BQ3hCQyxNQUR3QixHQUNiTSxPQURhLENBQ3hCTixNQUR3QjtBQUFBLE1BRWhEZSxPQUZnRCxHQUV0QyxDQUNSLG9CQURRLENBRnNDOzs7QUFNdERwQixVQUFRb0IsT0FBUixFQUFpQixVQUFTQyxNQUFULEVBQWlCO0FBQ2hDLFFBQU1DLGFBQWFyQixNQUFNb0IsTUFBTixDQUFuQjtBQUFBLFFBQ01MLGlCQUFpQixDQUFDLENBQUMsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBRHZCO0FBQUEsUUFFTU8sUUFBUUQsVUFGZDtBQUFBLFFBRTBCO0FBQ3BCRSxrQkFBYzdCLFlBQVk4QiwwQkFBWixDQUF1Q1QsY0FBdkMsRUFBdURPLEtBQXZELEVBQThEbkIsYUFBOUQsRUFBNkVDLE1BQTdFLENBSHBCOztBQUtBRSxVQUFNWSxJQUFOLENBQVdLLFdBQVg7O0FBRUFWO0FBQ0QsR0FURDtBQVVEIiwiZmlsZSI6ImN1YmVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgQ29sb3VyQ3ViZSA9IHJlcXVpcmUoJy4vY3ViZS9jb2xvdXInKSxcbiAgICAgIFRleHR1cmVDdWJlID0gcmVxdWlyZSgnLi9jdWJlL3RleHR1cmUnKSxcbiAgICAgIGltYWdlc1V0aWxpdGllcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy9pbWFnZXMnKTtcblxuY29uc3QgeyBhcnJheVV0aWxpdGllcywgYXN5bmNocm9ub3VzVXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IHNlcXVlbmNlIH0gPSBhc3luY2hyb25vdXNVdGlsaXRpZXMsXG4gICAgICB7IHByZWxvYWQgfSA9IGltYWdlc1V0aWxpdGllcyxcbiAgICAgIHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBjcmVhdGUoY29sb3VyU2hhZGVyLCB0ZXh0dXJlU2hhZGVyLCBjYW52YXMsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGN1YmVzID0gW10sXG4gICAgICAgIGNhbGxiYWNrcyA9IFtcbiAgICAgICAgICBjcmVhdGVDb2xvdXJDdWJlQ2FsbGJhY2ssXG4gICAgICAgICAgY3JlYXRlVGV4dHVyZUN1YmVDYWxsYmFja1xuICAgICAgICBdLFxuICAgICAgICBjb250ZXh0ID0ge1xuICAgICAgICAgIGNvbG91clNoYWRlcjogY29sb3VyU2hhZGVyLFxuICAgICAgICAgIHRleHR1cmVTaGFkZXI6IHRleHR1cmVTaGFkZXIsXG4gICAgICAgICAgY2FudmFzOiBjYW52YXMsXG4gICAgICAgICAgY3ViZXM6IGN1YmVzXG4gICAgICAgIH07XG5cbiAgc2VxdWVuY2UoY2FsbGJhY2tzLCBmdW5jdGlvbigpIHtcbiAgICBjYWxsYmFjayhjdWJlcyk7XG4gIH0sIGNvbnRleHQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiBjcmVhdGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayhuZXh0LCBkb25lLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgY3ViZXMsIGNvbG91clNoYWRlciwgY2FudmFzIH0gPSBjb250ZXh0LFxuICAgICAgICBvZmZzZXRQb3NpdGlvbiA9IFstMiwgMCwgMF0sXG4gICAgICAgIGNvbG91ckN1YmUgPSBDb2xvdXJDdWJlLmZyb21PZmZzZXRQb3NpdGlvbihvZmZzZXRQb3NpdGlvbiwgY29sb3VyU2hhZGVyLCBjYW52YXMpO1xuXG4gIGN1YmVzLnB1c2goY29sb3VyQ3ViZSk7XG5cbiAgbmV4dCgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0dXJlQ3ViZUNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBjdWJlcywgdGV4dHVyZVNoYWRlciwgY2FudmFzIH0gPSBjb250ZXh0LFxuICAgICAgICBzb3VyY2VzID0gW1xuICAgICAgICAgICd0ZXh0dXJlL2JyaWNrcy5qcGcnXG4gICAgICAgIF07XG5cbiAgcHJlbG9hZChzb3VyY2VzLCBmdW5jdGlvbihpbWFnZXMpIHtcbiAgICBjb25zdCBmaXJzdEltYWdlID0gZmlyc3QoaW1hZ2VzKSxcbiAgICAgICAgICBvZmZzZXRQb3NpdGlvbiA9IFsrMiwgMCwgMF0sXG4gICAgICAgICAgaW1hZ2UgPSBmaXJzdEltYWdlLCAvLy9cbiAgICAgICAgICB0ZXh0dXJlQ3ViZSA9IFRleHR1cmVDdWJlLmZyb21PZmZzZXRQb3NpdGlvbkFuZEltYWdlKG9mZnNldFBvc2l0aW9uLCBpbWFnZSwgdGV4dHVyZVNoYWRlciwgY2FudmFzKTtcblxuICAgIGN1YmVzLnB1c2godGV4dHVyZUN1YmUpO1xuXG4gICAgbmV4dCgpO1xuICB9KTtcbn1cbiJdfQ==