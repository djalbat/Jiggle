'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imagesUtilities = require('../../utilities/images');

var arrayUtilities = necessary.arrayUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    preload = imagesUtilities.preload,
    first = arrayUtilities.first;


function create(colourShader, textureShader, canvas, done) {
      var callbacks = [createFirstColourCubeCallback, createSecondColourCubeCallback, createTextureCubeCallback],
          context = {
            colourShader: colourShader,
            textureShader: textureShader,
            canvas: canvas
      };

      sequence(callbacks, done, context);
}

module.exports = {
      create: create
};

function createFirstColourCubeCallback(next, done, context) {
      var colourShader = context.colourShader,
          offsetPosition = [0, +2, +2];


      var vertexPositionData = ColourCube.getVertexPositionData(offsetPosition),
          vertexNormalData = ColourCube.getVertexNormalData(),
          vertexIndexData = ColourCube.getVertexIndexData(),
          vertexColourData = ColourCube.getVertexColourData();

      colourShader.addVertexPositionData(vertexPositionData);
      colourShader.addVertexNormalData(vertexNormalData);
      colourShader.addVertexIndexData(vertexIndexData);
      colourShader.addVertexColourData(vertexColourData);

      next();
}

function createSecondColourCubeCallback(next, done, context) {
      var colourShader = context.colourShader,
          offsetPosition = [0, -2, -2];


      var vertexPositionData = ColourCube.getVertexPositionData(offsetPosition),
          vertexNormalData = ColourCube.getVertexNormalData(),
          vertexIndexData = ColourCube.getVertexIndexData(),
          vertexColourData = ColourCube.getVertexColourData();

      colourShader.addVertexPositionData(vertexPositionData);
      colourShader.addVertexNormalData(vertexNormalData);
      colourShader.addVertexIndexData(vertexIndexData);
      colourShader.addVertexColourData(vertexColourData);

      next();
}

function createTextureCubeCallback(next, done, context) {
      var textureShader = context.textureShader,
          canvas = context.canvas,
          sources = ['texture/bricks.jpg'];


      preload(sources, function (images) {
            var firstImage = first(images),
                offsetPosition = [+2, 0, 0],
                image = firstImage;

            var vertexPositionData = TextureCube.getVertexPositionData(offsetPosition),
                vertexNormalData = TextureCube.getVertexNormalData(),
                vertexIndexData = TextureCube.getVertexIndexData(),
                textureCoordinateData = TextureCube.getTextureCoordinateData();

            textureShader.addVertexPositionData(vertexPositionData);
            textureShader.addVertexNormalData(vertexNormalData);
            textureShader.addVertexIndexData(vertexIndexData);
            textureShader.addTextureCoordinateData(textureCoordinateData);

            textureShader.createTexture(image, canvas);

            next();
      });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImltYWdlc1V0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwiYXN5bmNocm9ub3VzVXRpbGl0aWVzIiwic2VxdWVuY2UiLCJwcmVsb2FkIiwiZmlyc3QiLCJjcmVhdGUiLCJjb2xvdXJTaGFkZXIiLCJ0ZXh0dXJlU2hhZGVyIiwiY2FudmFzIiwiZG9uZSIsImNhbGxiYWNrcyIsImNyZWF0ZUZpcnN0Q29sb3VyQ3ViZUNhbGxiYWNrIiwiY3JlYXRlU2Vjb25kQ29sb3VyQ3ViZUNhbGxiYWNrIiwiY3JlYXRlVGV4dHVyZUN1YmVDYWxsYmFjayIsImNvbnRleHQiLCJtb2R1bGUiLCJleHBvcnRzIiwibmV4dCIsIm9mZnNldFBvc2l0aW9uIiwidmVydGV4UG9zaXRpb25EYXRhIiwiZ2V0VmVydGV4UG9zaXRpb25EYXRhIiwidmVydGV4Tm9ybWFsRGF0YSIsImdldFZlcnRleE5vcm1hbERhdGEiLCJ2ZXJ0ZXhJbmRleERhdGEiLCJnZXRWZXJ0ZXhJbmRleERhdGEiLCJ2ZXJ0ZXhDb2xvdXJEYXRhIiwiZ2V0VmVydGV4Q29sb3VyRGF0YSIsImFkZFZlcnRleFBvc2l0aW9uRGF0YSIsImFkZFZlcnRleE5vcm1hbERhdGEiLCJhZGRWZXJ0ZXhJbmRleERhdGEiLCJhZGRWZXJ0ZXhDb2xvdXJEYXRhIiwic291cmNlcyIsImltYWdlcyIsImZpcnN0SW1hZ2UiLCJpbWFnZSIsInRleHR1cmVDb29yZGluYXRlRGF0YSIsImdldFRleHR1cmVDb29yZGluYXRlRGF0YSIsImFkZFRleHR1cmVDb29yZGluYXRlRGF0YSIsImNyZWF0ZVRleHR1cmUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjs7QUFFQSxJQUFNQyxhQUFhRCxRQUFRLGVBQVIs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QUFDLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixDQUR2QjtBQUFBLGdCQUVNZ0IsUUFBUUQsVUFGZDs7QUFJQSxnQkFBTWQscUJBQXFCckIsWUFBWXNCLHFCQUFaLENBQWtDRixjQUFsQyxDQUEzQjtBQUFBLGdCQUNNRyxtQkFBbUJ2QixZQUFZd0IsbUJBQVosRUFEekI7QUFBQSxnQkFFTUMsa0JBQWtCekIsWUFBWTBCLGtCQUFaLEVBRnhCO0FBQUEsZ0JBR01XLHdCQUF3QnJDLFlBQVlzQyx3QkFBWixFQUg5Qjs7QUFLQTdCLDBCQUFjb0IscUJBQWQsQ0FBb0NSLGtCQUFwQztBQUNBWiwwQkFBY3FCLG1CQUFkLENBQWtDUCxnQkFBbEM7QUFDQWQsMEJBQWNzQixrQkFBZCxDQUFpQ04sZUFBakM7QUFDQWhCLDBCQUFjOEIsd0JBQWQsQ0FBdUNGLHFCQUF2Qzs7QUFFQTVCLDBCQUFjK0IsYUFBZCxDQUE0QkosS0FBNUIsRUFBbUMxQixNQUFuQzs7QUFFQVM7QUFDRCxPQWxCRDtBQW1CRCIsImZpbGUiOiJjdWJlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IENvbG91ckN1YmUgPSByZXF1aXJlKCcuL2N1YmUvY29sb3VyJyksXG4gICAgICBUZXh0dXJlQ3ViZSA9IHJlcXVpcmUoJy4vY3ViZS90ZXh0dXJlJyksXG4gICAgICBpbWFnZXNVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvaW1hZ2VzJyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMsIGFzeW5jaHJvbm91c1V0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBzZXF1ZW5jZSB9ID0gYXN5bmNocm9ub3VzVXRpbGl0aWVzLFxuICAgICAgeyBwcmVsb2FkIH0gPSBpbWFnZXNVdGlsaXRpZXMsXG4gICAgICB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcztcblxuZnVuY3Rpb24gY3JlYXRlKGNvbG91clNoYWRlciwgdGV4dHVyZVNoYWRlciwgY2FudmFzLCBkb25lKSB7XG4gIGNvbnN0IGNhbGxiYWNrcyA9IFtcbiAgICAgICAgICBjcmVhdGVGaXJzdENvbG91ckN1YmVDYWxsYmFjayxcbiAgICAgICAgICBjcmVhdGVTZWNvbmRDb2xvdXJDdWJlQ2FsbGJhY2ssXG4gICAgICAgICAgY3JlYXRlVGV4dHVyZUN1YmVDYWxsYmFja1xuICAgICAgICBdLFxuICAgICAgICBjb250ZXh0ID0ge1xuICAgICAgICAgIGNvbG91clNoYWRlcjogY29sb3VyU2hhZGVyLFxuICAgICAgICAgIHRleHR1cmVTaGFkZXI6IHRleHR1cmVTaGFkZXIsXG4gICAgICAgICAgY2FudmFzOiBjYW52YXNcbiAgICAgICAgfTtcblxuICBzZXF1ZW5jZShjYWxsYmFja3MsIGRvbmUsIGNvbnRleHQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiBjcmVhdGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpcnN0Q29sb3VyQ3ViZUNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBjb2xvdXJTaGFkZXIgfSA9IGNvbnRleHQsXG4gICAgICAgIG9mZnNldFBvc2l0aW9uID0gWzAsICsyLCArMl07XG5cbiAgY29uc3QgdmVydGV4UG9zaXRpb25EYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhQb3NpdGlvbkRhdGEob2Zmc2V0UG9zaXRpb24pLFxuICAgICAgICB2ZXJ0ZXhOb3JtYWxEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhOb3JtYWxEYXRhKCksXG4gICAgICAgIHZlcnRleEluZGV4RGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4SW5kZXhEYXRhKCksXG4gICAgICAgIHZlcnRleENvbG91ckRhdGEgPSBDb2xvdXJDdWJlLmdldFZlcnRleENvbG91ckRhdGEoKTtcblxuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4UG9zaXRpb25EYXRhKHZlcnRleFBvc2l0aW9uRGF0YSk7XG4gIGNvbG91clNoYWRlci5hZGRWZXJ0ZXhOb3JtYWxEYXRhKHZlcnRleE5vcm1hbERhdGEpO1xuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4SW5kZXhEYXRhKHZlcnRleEluZGV4RGF0YSk7XG4gIGNvbG91clNoYWRlci5hZGRWZXJ0ZXhDb2xvdXJEYXRhKHZlcnRleENvbG91ckRhdGEpO1xuXG4gIG5leHQoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2Vjb25kQ29sb3VyQ3ViZUNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBjb2xvdXJTaGFkZXIgfSA9IGNvbnRleHQsXG4gICAgICAgIG9mZnNldFBvc2l0aW9uID0gWzAsIC0yLCAtMl07XG5cbiAgY29uc3QgdmVydGV4UG9zaXRpb25EYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhQb3NpdGlvbkRhdGEob2Zmc2V0UG9zaXRpb24pLFxuICAgICAgICB2ZXJ0ZXhOb3JtYWxEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhOb3JtYWxEYXRhKCksXG4gICAgICAgIHZlcnRleEluZGV4RGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4SW5kZXhEYXRhKCksXG4gICAgICAgIHZlcnRleENvbG91ckRhdGEgPSBDb2xvdXJDdWJlLmdldFZlcnRleENvbG91ckRhdGEoKTtcblxuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4UG9zaXRpb25EYXRhKHZlcnRleFBvc2l0aW9uRGF0YSk7XG4gIGNvbG91clNoYWRlci5hZGRWZXJ0ZXhOb3JtYWxEYXRhKHZlcnRleE5vcm1hbERhdGEpO1xuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4SW5kZXhEYXRhKHZlcnRleEluZGV4RGF0YSk7XG4gIGNvbG91clNoYWRlci5hZGRWZXJ0ZXhDb2xvdXJEYXRhKHZlcnRleENvbG91ckRhdGEpO1xuXG4gIG5leHQoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dHVyZUN1YmVDYWxsYmFjayhuZXh0LCBkb25lLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgdGV4dHVyZVNoYWRlciwgY2FudmFzIH0gPSBjb250ZXh0LFxuICAgICAgICBzb3VyY2VzID0gW1xuICAgICAgICAgICd0ZXh0dXJlL2JyaWNrcy5qcGcnXG4gICAgICAgIF07XG5cbiAgcHJlbG9hZChzb3VyY2VzLCBmdW5jdGlvbihpbWFnZXMpIHtcbiAgICBjb25zdCBmaXJzdEltYWdlID0gZmlyc3QoaW1hZ2VzKSxcbiAgICAgICAgICBvZmZzZXRQb3NpdGlvbiA9IFsrMiwgMCwgMF0sXG4gICAgICAgICAgaW1hZ2UgPSBmaXJzdEltYWdlO1xuXG4gICAgY29uc3QgdmVydGV4UG9zaXRpb25EYXRhID0gVGV4dHVyZUN1YmUuZ2V0VmVydGV4UG9zaXRpb25EYXRhKG9mZnNldFBvc2l0aW9uKSxcbiAgICAgICAgICB2ZXJ0ZXhOb3JtYWxEYXRhID0gVGV4dHVyZUN1YmUuZ2V0VmVydGV4Tm9ybWFsRGF0YSgpLFxuICAgICAgICAgIHZlcnRleEluZGV4RGF0YSA9IFRleHR1cmVDdWJlLmdldFZlcnRleEluZGV4RGF0YSgpLFxuICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlRGF0YSA9IFRleHR1cmVDdWJlLmdldFRleHR1cmVDb29yZGluYXRlRGF0YSgpO1xuXG4gICAgdGV4dHVyZVNoYWRlci5hZGRWZXJ0ZXhQb3NpdGlvbkRhdGEodmVydGV4UG9zaXRpb25EYXRhKTtcbiAgICB0ZXh0dXJlU2hhZGVyLmFkZFZlcnRleE5vcm1hbERhdGEodmVydGV4Tm9ybWFsRGF0YSk7XG4gICAgdGV4dHVyZVNoYWRlci5hZGRWZXJ0ZXhJbmRleERhdGEodmVydGV4SW5kZXhEYXRhKTtcbiAgICB0ZXh0dXJlU2hhZGVyLmFkZFRleHR1cmVDb29yZGluYXRlRGF0YSh0ZXh0dXJlQ29vcmRpbmF0ZURhdGEpO1xuXG4gICAgdGV4dHVyZVNoYWRlci5jcmVhdGVUZXh0dXJlKGltYWdlLCBjYW52YXMpO1xuXG4gICAgbmV4dCgpO1xuICB9KTtcbn1cbiJdfQ==