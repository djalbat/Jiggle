'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imageUtilities = require('../../utilities/image');

var arrayUtilities = necessary.arrayUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    first = arrayUtilities.first,
    preloadImages = imageUtilities.preloadImages;


function create(colourShader, textureShader, canvas, done) {
  var sources = ['image/bricks.jpg'];

  preloadImages(sources, function (images) {
    var callbacks = [createColourCubeCallback, createTextureCubeCallback],
        context = {
      colourShader: colourShader,
      textureShader: textureShader,
      images: images,
      canvas: canvas
    };

    sequence(callbacks, done, context);
  });
}

module.exports = {
  create: create
};

function createColourCubeCallback(next, done, context) {
  var colourShader = context.colourShader,
      offsetPosition = [+2, +2, +2];


  var vertexPositionData = ColourCube.getVertexPositionData(offsetPosition),
      vertexNormalData = ColourCube.getVertexNormalData(),
      vertexIndexData = ColourCube.getVertexIndexData(),
      vertexColourData = ColourCube.getVertexColourData();

  colourShader.addVertexPositionData(vertexPositionData);
  colourShader.addVertexNormalData(vertexNormalData);
  colourShader.addVertexIndexData(vertexIndexData);
  colourShader.addVertexColourData(vertexColourData);

  next();
}

function createTextureCubeCallback(next, done, context) {
  var textureShader = context.textureShader,
      images = context.images,
      canvas = context.canvas,
      firstImage = first(images),
      image = firstImage,
      offsetPosition = [0, 0, 0];


  var vertexPositionData = TextureCube.getVertexPositionData(offsetPosition),
      vertexNormalData = TextureCube.getVertexNormalData(),
      vertexIndexData = TextureCube.getVertexIndexData(),
      textureCoordinateData = TextureCube.getTextureCoordinateData();

  textureShader.addVertexPositionData(vertexPositionData);
  textureShader.addVertexNormalData(vertexNormalData);
  textureShader.addVertexIndexData(vertexIndexData);
  textureShader.addTextureCoordinateData(textureCoordinateData);

  textureShader.createTexture(image, canvas);

  next();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImltYWdlVXRpbGl0aWVzIiwiYXJyYXlVdGlsaXRpZXMiLCJhc3luY2hyb25vdXNVdGlsaXRpZXMiLCJzZXF1ZW5jZSIsImZpcnN0IiwicHJlbG9hZEltYWdlcyIsImNyZWF0ZSIsImNvbG91clNoYWRlciIsInRleHR1cmVTaGFkZXIiLCJjYW52YXMiLCJkb25lIiwic291cmNlcyIsImltYWdlcyIsImNhbGxiYWNrcyIsImNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayIsImNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2siLCJjb250ZXh0IiwibW9kdWxlIiwiZXhwb3J0cyIsIm5leHQiLCJvZmZzZXRQb3NpdGlvbiIsInZlcnRleFBvc2l0aW9uRGF0YSIsImdldFZlcnRleFBvc2l0aW9uRGF0YSIsInZlcnRleE5vcm1hbERhdGEiLCJnZXRWZXJ0ZXhOb3JtYWxEYXRhIiwidmVydGV4SW5kZXhEYXRhIiwiZ2V0VmVydGV4SW5kZXhEYXRhIiwidmVydGV4Q29sb3VyRGF0YSIsImdldFZlcnRleENvbG91ckRhdGEiLCJhZGRWZXJ0ZXhQb3NpdGlvbkRhdGEiLCJhZGRWZXJ0ZXhOb3JtYWxEYXRhIiwiYWRkVmVydGV4SW5kZXhEYXRhIiwiYWRkVmVydGV4Q29sb3VyRGF0YSIsImZpcnN0SW1hZ2UiLCJpbWFnZSIsInRleHR1cmVDb29yZGluYXRlRGF0YSIsImdldFRleHR1cmVDb29yZGluYXRlRGF0YSIsImFkZFRleHR1cmVDb29yZGluYXRlRGF0YSIsImNyZWF0ZVRleHR1cmUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjs7QUFFQSxJQUFNQyxhQUFhRCxRQUFRLGVBQVIsQ0FBbkI7QUFBQSxJQUNNRSxjQUFjRixRQUFRLGdCQUFS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J3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgQ29sb3VyQ3ViZSA9IHJlcXVpcmUoJy4vY3ViZS9jb2xvdXInKSxcbiAgICAgIFRleHR1cmVDdWJlID0gcmVxdWlyZSgnLi9jdWJlL3RleHR1cmUnKSxcbiAgICAgIGltYWdlVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL2ltYWdlJyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMsIGFzeW5jaHJvbm91c1V0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBzZXF1ZW5jZSB9ID0gYXN5bmNocm9ub3VzVXRpbGl0aWVzLFxuICAgICAgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHByZWxvYWRJbWFnZXMgfSA9IGltYWdlVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBjcmVhdGUoY29sb3VyU2hhZGVyLCB0ZXh0dXJlU2hhZGVyLCBjYW52YXMsIGRvbmUpIHtcbiAgY29uc3Qgc291cmNlcyA9IFtcbiAgICAnaW1hZ2UvYnJpY2tzLmpwZydcbiAgXTtcblxuICBwcmVsb2FkSW1hZ2VzKHNvdXJjZXMsIGZ1bmN0aW9uKGltYWdlcykge1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IFtcbiAgICAgICAgICAgIGNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayxcbiAgICAgICAgICAgIGNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2tcbiAgICAgICAgICBdLFxuICAgICAgICAgIGNvbnRleHQgPSB7XG4gICAgICAgICAgICBjb2xvdXJTaGFkZXI6IGNvbG91clNoYWRlcixcbiAgICAgICAgICAgIHRleHR1cmVTaGFkZXI6IHRleHR1cmVTaGFkZXIsXG4gICAgICAgICAgICBpbWFnZXM6IGltYWdlcyxcbiAgICAgICAgICAgIGNhbnZhczogY2FudmFzXG4gICAgICAgICAgfTtcblxuICAgIHNlcXVlbmNlKGNhbGxiYWNrcywgZG9uZSwgY29udGV4dCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiBjcmVhdGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayhuZXh0LCBkb25lLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgY29sb3VyU2hhZGVyIH0gPSBjb250ZXh0LFxuICAgICAgICBvZmZzZXRQb3NpdGlvbiA9IFsrMiwgKzIsICsyXTtcblxuICBjb25zdCB2ZXJ0ZXhQb3NpdGlvbkRhdGEgPSBDb2xvdXJDdWJlLmdldFZlcnRleFBvc2l0aW9uRGF0YShvZmZzZXRQb3NpdGlvbiksXG4gICAgICAgIHZlcnRleE5vcm1hbERhdGEgPSBDb2xvdXJDdWJlLmdldFZlcnRleE5vcm1hbERhdGEoKSxcbiAgICAgICAgdmVydGV4SW5kZXhEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhJbmRleERhdGEoKSxcbiAgICAgICAgdmVydGV4Q29sb3VyRGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4Q29sb3VyRGF0YSgpO1xuXG4gIGNvbG91clNoYWRlci5hZGRWZXJ0ZXhQb3NpdGlvbkRhdGEodmVydGV4UG9zaXRpb25EYXRhKTtcbiAgY29sb3VyU2hhZGVyLmFkZFZlcnRleE5vcm1hbERhdGEodmVydGV4Tm9ybWFsRGF0YSk7XG4gIGNvbG91clNoYWRlci5hZGRWZXJ0ZXhJbmRleERhdGEodmVydGV4SW5kZXhEYXRhKTtcbiAgY29sb3VyU2hhZGVyLmFkZFZlcnRleENvbG91ckRhdGEodmVydGV4Q29sb3VyRGF0YSk7XG5cbiAgbmV4dCgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0dXJlQ3ViZUNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyB0ZXh0dXJlU2hhZGVyLCBpbWFnZXMsIGNhbnZhcyB9ID0gY29udGV4dCxcbiAgICAgICAgZmlyc3RJbWFnZSA9IGZpcnN0KGltYWdlcyksXG4gICAgICAgIGltYWdlID0gZmlyc3RJbWFnZSwgLy8vXG4gICAgICAgIG9mZnNldFBvc2l0aW9uID0gWzAsIDAsIDBdO1xuXG4gIGNvbnN0IHZlcnRleFBvc2l0aW9uRGF0YSA9IFRleHR1cmVDdWJlLmdldFZlcnRleFBvc2l0aW9uRGF0YShvZmZzZXRQb3NpdGlvbiksXG4gICAgICAgIHZlcnRleE5vcm1hbERhdGEgPSBUZXh0dXJlQ3ViZS5nZXRWZXJ0ZXhOb3JtYWxEYXRhKCksXG4gICAgICAgIHZlcnRleEluZGV4RGF0YSA9IFRleHR1cmVDdWJlLmdldFZlcnRleEluZGV4RGF0YSgpLFxuICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZURhdGEgPSBUZXh0dXJlQ3ViZS5nZXRUZXh0dXJlQ29vcmRpbmF0ZURhdGEoKTtcblxuICB0ZXh0dXJlU2hhZGVyLmFkZFZlcnRleFBvc2l0aW9uRGF0YSh2ZXJ0ZXhQb3NpdGlvbkRhdGEpO1xuICB0ZXh0dXJlU2hhZGVyLmFkZFZlcnRleE5vcm1hbERhdGEodmVydGV4Tm9ybWFsRGF0YSk7XG4gIHRleHR1cmVTaGFkZXIuYWRkVmVydGV4SW5kZXhEYXRhKHZlcnRleEluZGV4RGF0YSk7XG4gIHRleHR1cmVTaGFkZXIuYWRkVGV4dHVyZUNvb3JkaW5hdGVEYXRhKHRleHR1cmVDb29yZGluYXRlRGF0YSk7XG5cbiAgdGV4dHVyZVNoYWRlci5jcmVhdGVUZXh0dXJlKGltYWdlLCBjYW52YXMpO1xuXG4gIG5leHQoKTtcbn1cbiJdfQ==