'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imagesUtilities = require('../../utilities/images');

var arrayUtilities = necessary.arrayUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    preload = imagesUtilities.preload,
    first = arrayUtilities.first;


function create(colourShader, textureShader, canvas, callback) {
  var counts = [],
      callbacks = [createColourCubeCallback, createTextureCubeCallback],
      context = {
    colourShader: colourShader,
    textureShader: textureShader,
    canvas: canvas,
    counts: counts
  };

  sequence(callbacks, function () {
    callback(counts);
  }, context);
}

module.exports = {
  create: create
};

function createColourCubeCallback(next, done, context) {
  var counts = context.counts,
      colourShader = context.colourShader,
      canvas = context.canvas,
      offsetPosition = [-2, 0, 0];


  var offsetVertexPositionData = ColourCube.getOffsetVertexPositionData(offsetPosition),
      vertexNormalData = ColourCube.getVertexNormalData(),
      vertexColourData = ColourCube.getVertexColourData(),
      vertexIndexData = ColourCube.getVertexIndexData();

  colourShader.createVertexPositionBuffer(offsetVertexPositionData, canvas);
  colourShader.createVertexNormalBuffer(vertexNormalData, canvas);
  colourShader.createVertexColourBuffer(vertexColourData, canvas);

  var count = canvas.createAndBindElementBuffer(vertexIndexData);

  counts.push(count); ///

  next();
}

function createTextureCubeCallback(next, done, context) {
  var counts = context.counts,
      textureShader = context.textureShader,
      canvas = context.canvas,
      sources = ['texture/bricks.jpg'];


  preload(sources, function (images) {
    var firstImage = first(images),
        offsetPosition = [+2, 0, 0],
        image = firstImage;

    var offsetVertexPositionData = TextureCube.getOffsetVertexPositionData(offsetPosition),
        vertexNormalData = TextureCube.getVertexNormalData(),
        textureCoordinateData = TextureCube.getTextureCoordinateData(),
        vertexIndexData = TextureCube.getVertexIndexData();

    textureShader.createVertexPositionBuffer(offsetVertexPositionData, canvas);
    textureShader.createVertexNormalBuffer(vertexNormalData, canvas);
    textureShader.createTextureCoordinateBuffer(textureCoordinateData, canvas);

    textureShader.createTexture(image, canvas);

    var count = canvas.createAndBindElementBuffer(vertexIndexData);

    counts.push(count); ///

    next();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImltYWdlc1V0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwiYXN5bmNocm9ub3VzVXRpbGl0aWVzIiwic2VxdWVuY2UiLCJwcmVsb2FkIiwiZmlyc3QiLCJjcmVhdGUiLCJjb2xvdXJTaGFkZXIiLCJ0ZXh0dXJlU2hhZGVyIiwiY2FudmFzIiwiY2FsbGJhY2siLCJjb3VudHMiLCJjYWxsYmFja3MiLCJjcmVhdGVDb2xvdXJDdWJlQ2FsbGJhY2siLCJjcmVhdGVUZXh0dXJlQ3ViZUNhbGxiYWNrIiwiY29udGV4dCIsIm1vZHVsZSIsImV4cG9ydHMiLCJuZXh0IiwiZG9uZSIsIm9mZnNldFBvc2l0aW9uIiwib2Zmc2V0VmVydGV4UG9zaXRpb25EYXRhIiwiZ2V0T2Zmc2V0VmVydGV4UG9zaXRpb25EYXRhIiwidmVydGV4Tm9ybWFsRGF0YSIsImdldFZlcnRleE5vcm1hbERhdGEiLCJ2ZXJ0ZXhDb2xvdXJEYXRhIiwiZ2V0VmVydGV4Q29sb3VyRGF0YSIsInZlcnRleEluZGV4RGF0YSIsImdldFZlcnRleEluZGV4RGF0YSIsImNyZWF0ZVZlcnRleFBvc2l0aW9uQnVmZmVyIiwiY3JlYXRlVmVydGV4Tm9ybWFsQnVmZmVyIiwiY3JlYXRlVmVydGV4Q29sb3VyQnVmZmVyIiwiY291bnQiLCJjcmVhdGVBbmRCaW5kRWxlbWVudEJ1ZmZlciIsInB1c2giLCJzb3VyY2VzIiwiaW1hZ2VzIiwiZmlyc3RJbWFnZSIsImltYWdlIiwidGV4dHVyZUNvb3JkaW5hdGVEYXRhIiwiZ2V0VGV4dHVyZUNvb3JkaW5hdGVEYXRhIiwiY3JlYXRlVGV4dHVyZUNvb3JkaW5hdGVCdWZmZXIiLCJjcmVhdGVUZXh0dXJlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdB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O0FBQUEsUUFHTWIsa0JBQWtCNUIsWUFBWTZCLGtCQUFaLEVBSHhCOztBQUtBcEIsa0JBQWNxQiwwQkFBZCxDQUF5Q1Isd0JBQXpDLEVBQW1FWixNQUFuRTtBQUNBRCxrQkFBY3NCLHdCQUFkLENBQXVDUCxnQkFBdkMsRUFBeURkLE1BQXpEO0FBQ0FELGtCQUFjaUMsNkJBQWQsQ0FBNENGLHFCQUE1QyxFQUFtRTlCLE1BQW5FOztBQUVBRCxrQkFBY2tDLGFBQWQsQ0FBNEJKLEtBQTVCLEVBQW1DN0IsTUFBbkM7O0FBRUEsUUFBTXVCLFFBQVF2QixPQUFPd0IsMEJBQVAsQ0FBa0NOLGVBQWxDLENBQWQ7O0FBRUFoQixXQUFPdUIsSUFBUCxDQUFZRixLQUFaLEVBbEJnQyxDQWtCWDs7QUFFckJkO0FBQ0QsR0FyQkQ7QUFzQkQiLCJmaWxlIjoiY3ViZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCBDb2xvdXJDdWJlID0gcmVxdWlyZSgnLi9jdWJlL2NvbG91cicpLFxuICAgICAgVGV4dHVyZUN1YmUgPSByZXF1aXJlKCcuL2N1YmUvdGV4dHVyZScpLFxuICAgICAgaW1hZ2VzVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL2ltYWdlcycpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzLCBhc3luY2hyb25vdXNVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgc2VxdWVuY2UgfSA9IGFzeW5jaHJvbm91c1V0aWxpdGllcyxcbiAgICAgIHsgcHJlbG9hZCB9ID0gaW1hZ2VzVXRpbGl0aWVzLFxuICAgICAgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGNyZWF0ZShjb2xvdXJTaGFkZXIsIHRleHR1cmVTaGFkZXIsIGNhbnZhcywgY2FsbGJhY2spIHtcbiAgY29uc3QgY291bnRzID0gW10sXG4gICAgICAgIGNhbGxiYWNrcyA9IFtcbiAgICAgICAgICBjcmVhdGVDb2xvdXJDdWJlQ2FsbGJhY2ssXG4gICAgICAgICAgY3JlYXRlVGV4dHVyZUN1YmVDYWxsYmFja1xuICAgICAgICBdLFxuICAgICAgICBjb250ZXh0ID0ge1xuICAgICAgICAgIGNvbG91clNoYWRlcjogY29sb3VyU2hhZGVyLFxuICAgICAgICAgIHRleHR1cmVTaGFkZXI6IHRleHR1cmVTaGFkZXIsXG4gICAgICAgICAgY2FudmFzOiBjYW52YXMsXG4gICAgICAgICAgY291bnRzOiBjb3VudHNcbiAgICAgICAgfTtcblxuICBzZXF1ZW5jZShjYWxsYmFja3MsIGZ1bmN0aW9uKCkge1xuICAgIGNhbGxiYWNrKGNvdW50cyk7XG4gIH0sIGNvbnRleHQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiBjcmVhdGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayhuZXh0LCBkb25lLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgY291bnRzLCBjb2xvdXJTaGFkZXIsIGNhbnZhcyB9ID0gY29udGV4dCxcbiAgICAgICAgb2Zmc2V0UG9zaXRpb24gPSBbLTIsIDAsIDBdO1xuXG4gIGNvbnN0IG9mZnNldFZlcnRleFBvc2l0aW9uRGF0YSA9IENvbG91ckN1YmUuZ2V0T2Zmc2V0VmVydGV4UG9zaXRpb25EYXRhKG9mZnNldFBvc2l0aW9uKSxcbiAgICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4Tm9ybWFsRGF0YSgpLFxuICAgICAgICB2ZXJ0ZXhDb2xvdXJEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhDb2xvdXJEYXRhKCksXG4gICAgICAgIHZlcnRleEluZGV4RGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4SW5kZXhEYXRhKCk7XG5cbiAgY29sb3VyU2hhZGVyLmNyZWF0ZVZlcnRleFBvc2l0aW9uQnVmZmVyKG9mZnNldFZlcnRleFBvc2l0aW9uRGF0YSwgY2FudmFzKTtcbiAgY29sb3VyU2hhZGVyLmNyZWF0ZVZlcnRleE5vcm1hbEJ1ZmZlcih2ZXJ0ZXhOb3JtYWxEYXRhLCBjYW52YXMpO1xuICBjb2xvdXJTaGFkZXIuY3JlYXRlVmVydGV4Q29sb3VyQnVmZmVyKHZlcnRleENvbG91ckRhdGEsIGNhbnZhcyk7XG5cbiAgY29uc3QgY291bnQgPSBjYW52YXMuY3JlYXRlQW5kQmluZEVsZW1lbnRCdWZmZXIodmVydGV4SW5kZXhEYXRhKTtcblxuICBjb3VudHMucHVzaChjb3VudCk7ICAvLy9cblxuICBuZXh0KCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2sobmV4dCwgZG9uZSwgY29udGV4dCkge1xuICBjb25zdCB7IGNvdW50cywgdGV4dHVyZVNoYWRlciwgY2FudmFzIH0gPSBjb250ZXh0LFxuICAgICAgICBzb3VyY2VzID0gW1xuICAgICAgICAgICd0ZXh0dXJlL2JyaWNrcy5qcGcnXG4gICAgICAgIF07XG5cbiAgcHJlbG9hZChzb3VyY2VzLCBmdW5jdGlvbihpbWFnZXMpIHtcbiAgICBjb25zdCBmaXJzdEltYWdlID0gZmlyc3QoaW1hZ2VzKSxcbiAgICAgICAgICBvZmZzZXRQb3NpdGlvbiA9IFsrMiwgMCwgMF0sXG4gICAgICAgICAgaW1hZ2UgPSBmaXJzdEltYWdlO1xuXG4gICAgY29uc3Qgb2Zmc2V0VmVydGV4UG9zaXRpb25EYXRhID0gVGV4dHVyZUN1YmUuZ2V0T2Zmc2V0VmVydGV4UG9zaXRpb25EYXRhKG9mZnNldFBvc2l0aW9uKSxcbiAgICAgICAgICB2ZXJ0ZXhOb3JtYWxEYXRhID0gVGV4dHVyZUN1YmUuZ2V0VmVydGV4Tm9ybWFsRGF0YSgpLFxuICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlRGF0YSA9IFRleHR1cmVDdWJlLmdldFRleHR1cmVDb29yZGluYXRlRGF0YSgpLFxuICAgICAgICAgIHZlcnRleEluZGV4RGF0YSA9IFRleHR1cmVDdWJlLmdldFZlcnRleEluZGV4RGF0YSgpO1xuXG4gICAgdGV4dHVyZVNoYWRlci5jcmVhdGVWZXJ0ZXhQb3NpdGlvbkJ1ZmZlcihvZmZzZXRWZXJ0ZXhQb3NpdGlvbkRhdGEsIGNhbnZhcyk7XG4gICAgdGV4dHVyZVNoYWRlci5jcmVhdGVWZXJ0ZXhOb3JtYWxCdWZmZXIodmVydGV4Tm9ybWFsRGF0YSwgY2FudmFzKTtcbiAgICB0ZXh0dXJlU2hhZGVyLmNyZWF0ZVRleHR1cmVDb29yZGluYXRlQnVmZmVyKHRleHR1cmVDb29yZGluYXRlRGF0YSwgY2FudmFzKTtcblxuICAgIHRleHR1cmVTaGFkZXIuY3JlYXRlVGV4dHVyZShpbWFnZSwgY2FudmFzKTtcblxuICAgIGNvbnN0IGNvdW50ID0gY2FudmFzLmNyZWF0ZUFuZEJpbmRFbGVtZW50QnVmZmVyKHZlcnRleEluZGV4RGF0YSk7XG5cbiAgICBjb3VudHMucHVzaChjb3VudCk7ICAvLy9cblxuICAgIG5leHQoKTtcbiAgfSk7XG59XG4iXX0=