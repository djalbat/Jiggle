'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imageUtilities = require('../../utilities/image');

var arrayUtilities = necessary.arrayUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    first = arrayUtilities.first,
    preloadImage = imageUtilities.preloadImage;


function create(colourShader, textureShader, canvas, done) {
  var source = ['imageMap'];

  preloadImage(source, function (image) {
    var callbacks = [createColourCubeCallback, createTextureCubeCallback],
        context = {
      colourShader: colourShader,
      textureShader: textureShader
    };

    textureShader.createTexture(image, canvas);

    sequence(callbacks, done, context);
  });
}

module.exports = {
  create: create
};

function createColourCubeCallback(next, done, context) {
  var colourShader = context.colourShader,
      offsetPosition = [+2, +2, +2];


  var vertexPositionData = ColourCube.getVertexPositionData(offsetPosition),
      vertexNormalData = ColourCube.getVertexNormalData(),
      vertexIndexData = ColourCube.getVertexIndexData(),
      vertexColourData = ColourCube.getVertexColourData();

  colourShader.addVertexPositionData(vertexPositionData);
  colourShader.addVertexNormalData(vertexNormalData);
  colourShader.addVertexIndexData(vertexIndexData);
  colourShader.addVertexColourData(vertexColourData);

  next();
}

function createTextureCubeCallback(next, done, context) {
  var textureShader = context.textureShader,
      canvas = context.canvas,
      offsetPosition = [0, 0, 0];


  var vertexPositionData = TextureCube.getVertexPositionData(offsetPosition),
      vertexNormalData = TextureCube.getVertexNormalData(),
      vertexIndexData = TextureCube.getVertexIndexData(),
      textureCoordinateData = TextureCube.getTextureCoordinateData();

  textureShader.addVertexPositionData(vertexPositionData);
  textureShader.addVertexNormalData(vertexNormalData);
  textureShader.addVertexIndexData(vertexIndexData);
  textureShader.addTextureCoordinateData(textureCoordinateData);

  next();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImltYWdlVXRpbGl0aWVzIiwiYXJyYXlVdGlsaXRpZXMiLCJhc3luY2hyb25vdXNVdGlsaXRpZXMiLCJzZXF1ZW5jZSIsImZpcnN0IiwicHJlbG9hZEltYWdlIiwiY3JlYXRlIiwiY29sb3VyU2hhZGVyIiwidGV4dHVyZVNoYWRlciIsImNhbnZhcyIsImRvbmUiLCJzb3VyY2UiLCJpbWFnZSIsImNhbGxiYWNrcyIsImNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayIsImNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2siLCJjb250ZXh0IiwiY3JlYXRlVGV4dHVyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJuZXh0Iiwib2Zmc2V0UG9zaXRpb24iLCJ2ZXJ0ZXhQb3NpdGlvbkRhdGEiLCJnZXRWZXJ0ZXhQb3NpdGlvbkRhdGEiLCJ2ZXJ0ZXhOb3JtYWxEYXRhIiwiZ2V0VmVydGV4Tm9ybWFsRGF0YSIsInZlcnRleEluZGV4RGF0YSIsImdldFZlcnRleEluZGV4RGF0YSIsInZlcnRleENvbG91ckRhdGEiLCJnZXRWZXJ0ZXhDb2xvdXJEYXRhIiwiYWRkVmVydGV4UG9zaXRpb25EYXRhIiwiYWRkVmVydGV4Tm9ybWFsRGF0YSIsImFkZFZlcnRleEluZGV4RGF0YSIsImFkZFZlcnRleENvbG91ckRhdGEiLCJ0ZXh0dXJlQ29vcmRpbmF0ZURhdGEiLCJnZXRUZXh0dXJlQ29vcmRpbmF0ZURhdGEiLCJhZGRUZXh0dXJlQ29vcmRpbmF0ZURhdGEiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjs7QUFFQSxJQUFNQyxhQUFhRCxRQUFRLGVBQVIsQ0FBbkI7QUFBQSxJQUNNRSxjQUFjRixRQUFRLGdCQUFSLENBRHBCO0FBQUEsSUFFTUcsaUJBQWlCSCxRQUFRLHVCQUFSLENBRnZCOztJQUlRSSxjLEdBQTBDTCxTLENBQTFDSyxjO0lBQWdCQyxxQixHQUEwQk4sUyxDQUExQk0scUI7SUFDaEJDLFEsR0FBYUQscUIsQ0FBYkMsUTtJQUNBQyxLLEdBQVVILGMsQ0FBVkcsSztJQUNBQyxZLEdBQWlCTCxjLENBQWpCSyxZOzs7QUFFUixTQUFTQyxNQUFULENBQWdCQyxZQUFoQixFQUE4QkMsYUFBOUIsRUFBNkNDLE1BQTdDLEVBQXFEQyxJQUFyRCxFQUEyRDtBQUN6RCxNQUFNQyxTQUFTLENBQ2IsVUFEYSxDQUFmOztBQUlBTixlQUFhTSxNQUFiLEVBQXFCLFVBQVNDLEtBQVQsRUFBZ0I7QUFDbkMsUUFBTUMsWUFBWSxDQUNWQyx3QkFEVSxFQUVWQyx5QkFGVSxDQUFsQjtBQUFBLFFBSU1DLFVBQVU7QUFDUlQsb0JBQWNBLFlBRE47QUFFUkMscUJBQWVBO0FBRlAsS0FKaEI7O0FBU0FBLGtCQUFjUyxhQUFkLENBQTRCTCxLQUE1QixFQUFtQ0gsTUFBbkM7O0FBRUFOLGFBQVNVLFNBQVQsRUFBb0JILElBQXBCLEVBQTBCTSxPQUExQjtBQUNELEdBYkQ7QUFjRDs7QUFFREUsT0FBT0MsT0FBUCxHQUFpQjtBQUNmYixVQUFRQTtBQURPLENBQWpCOztBQUlBLFNBQVNRLHdCQUFULENBQWtDTSxJQUFsQyxFQUF3Q1YsSUFBeEMsRUFBOENNLE9BQTlDLEVBQXVEO0FBQy9DLE1BQUVULFlBQUYsR0FBbUJTLE9BQW5CLENBQUVULFlBQUY7QUFBQSxNQUNBYyxjQURBLEdBQ2lCLENBQUMsQ0FBQyxDQUFGLEVBQUssQ0FBQyxDQUFOLEVBQVMsQ0FBQyxDQUFWLENBRGpCOzs7QUFHTixNQUFNQyxxQkFBcUJ4QixXQUFXeUIscUJBQVgsQ0FBaUNGLGNBQWpDLENBQTNCO0FBQUEsTUFDTUcsbUJBQW1CMUIsV0FBVzJCLG1CQUFYLEVBRHpCO0FBQUEsTUFFTUMsa0JBQWtCNUIsV0FBVzZCLGtCQUFYLEVBRnhCO0FBQUEsTUFHTUMsbUJBQW1COUIsV0FBVytCLG1CQUFYLEVBSHpCOztBQUtBdEIsZUFBYXVCLHFCQUFiLENBQW1DUixrQkFBbkM7QUFDQWYsZUFBYXdCLG1CQUFiLENBQWlDUCxnQkFBakM7QUFDQWpCLGVBQWF5QixrQkFBYixDQUFnQ04sZUFBaEM7QUFDQW5CLGVBQWEwQixtQkFBYixDQUFpQ0wsZ0JBQWpDOztBQUVBUjtBQUNEOztBQUVELFNBQVNMLHlCQUFULENBQW1DSyxJQUFuQyxFQUF5Q1YsSUFBekMsRUFBK0NNLE9BQS9DLEVBQXdEO0FBQUEsTUFDOUNSLGFBRDhDLEdBQ3BCUSxPQURvQixDQUM5Q1IsYUFEOEM7QUFBQSxNQUMvQkMsTUFEK0IsR0FDcEJPLE9BRG9CLENBQy9CUCxNQUQrQjtBQUFBLE1BRWhEWSxjQUZnRCxHQUUvQixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUYrQjs7O0FBSXRELE1BQU1DLHFCQUFxQnZCLFlBQVl3QixxQkFBWixDQUFrQ0YsY0FBbEMsQ0FBM0I7QUFBQSxNQUNNRyxtQkFBbUJ6QixZQUFZMEIsbUJBQVosRUFEekI7QUFBQSxNQUVNQyxrQkFBa0IzQixZQUFZNEIsa0JBQVosRUFGeEI7QUFBQSxNQUdNTyx3QkFBd0JuQyxZQUFZb0Msd0JBQVosRUFIOUI7O0FBS0EzQixnQkFBY3NCLHFCQUFkLENBQW9DUixrQkFBcEM7QUFDQWQsZ0JBQWN1QixtQkFBZCxDQUFrQ1AsZ0JBQWxDO0FBQ0FoQixnQkFBY3dCLGtCQUFkLENBQWlDTixlQUFqQztBQUNBbEIsZ0JBQWM0Qix3QkFBZCxDQUF1Q0YscUJBQXZDOztBQUVBZDtBQUNEIiwiZmlsZSI6ImN1YmVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgQ29sb3VyQ3ViZSA9IHJlcXVpcmUoJy4vY3ViZS9jb2xvdXInKSxcbiAgICAgIFRleHR1cmVDdWJlID0gcmVxdWlyZSgnLi9jdWJlL3RleHR1cmUnKSxcbiAgICAgIGltYWdlVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL2ltYWdlJyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMsIGFzeW5jaHJvbm91c1V0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBzZXF1ZW5jZSB9ID0gYXN5bmNocm9ub3VzVXRpbGl0aWVzLFxuICAgICAgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHByZWxvYWRJbWFnZSB9ID0gaW1hZ2VVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGNyZWF0ZShjb2xvdXJTaGFkZXIsIHRleHR1cmVTaGFkZXIsIGNhbnZhcywgZG9uZSkge1xuICBjb25zdCBzb3VyY2UgPSBbXG4gICAgJ2ltYWdlTWFwJ1xuICBdO1xuXG4gIHByZWxvYWRJbWFnZShzb3VyY2UsIGZ1bmN0aW9uKGltYWdlKSB7XG4gICAgY29uc3QgY2FsbGJhY2tzID0gW1xuICAgICAgICAgICAgY3JlYXRlQ29sb3VyQ3ViZUNhbGxiYWNrLFxuICAgICAgICAgICAgY3JlYXRlVGV4dHVyZUN1YmVDYWxsYmFja1xuICAgICAgICAgIF0sXG4gICAgICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgICAgIGNvbG91clNoYWRlcjogY29sb3VyU2hhZGVyLFxuICAgICAgICAgICAgdGV4dHVyZVNoYWRlcjogdGV4dHVyZVNoYWRlclxuICAgICAgICAgIH07XG5cbiAgICB0ZXh0dXJlU2hhZGVyLmNyZWF0ZVRleHR1cmUoaW1hZ2UsIGNhbnZhcyk7XG5cbiAgICBzZXF1ZW5jZShjYWxsYmFja3MsIGRvbmUsIGNvbnRleHQpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogY3JlYXRlXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVDb2xvdXJDdWJlQ2FsbGJhY2sobmV4dCwgZG9uZSwgY29udGV4dCkge1xuICBjb25zdCB7IGNvbG91clNoYWRlciB9ID0gY29udGV4dCxcbiAgICAgICAgb2Zmc2V0UG9zaXRpb24gPSBbKzIsICsyLCArMl07XG5cbiAgY29uc3QgdmVydGV4UG9zaXRpb25EYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhQb3NpdGlvbkRhdGEob2Zmc2V0UG9zaXRpb24pLFxuICAgICAgICB2ZXJ0ZXhOb3JtYWxEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhOb3JtYWxEYXRhKCksXG4gICAgICAgIHZlcnRleEluZGV4RGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4SW5kZXhEYXRhKCksXG4gICAgICAgIHZlcnRleENvbG91ckRhdGEgPSBDb2xvdXJDdWJlLmdldFZlcnRleENvbG91ckRhdGEoKTtcblxuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4UG9zaXRpb25EYXRhKHZlcnRleFBvc2l0aW9uRGF0YSk7XG4gIGNvbG91clNoYWRlci5hZGRWZXJ0ZXhOb3JtYWxEYXRhKHZlcnRleE5vcm1hbERhdGEpO1xuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4SW5kZXhEYXRhKHZlcnRleEluZGV4RGF0YSk7XG4gIGNvbG91clNoYWRlci5hZGRWZXJ0ZXhDb2xvdXJEYXRhKHZlcnRleENvbG91ckRhdGEpO1xuXG4gIG5leHQoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dHVyZUN1YmVDYWxsYmFjayhuZXh0LCBkb25lLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgdGV4dHVyZVNoYWRlciwgY2FudmFzIH0gPSBjb250ZXh0LFxuICAgICAgICBvZmZzZXRQb3NpdGlvbiA9IFswLCAwLCAwXTtcblxuICBjb25zdCB2ZXJ0ZXhQb3NpdGlvbkRhdGEgPSBUZXh0dXJlQ3ViZS5nZXRWZXJ0ZXhQb3NpdGlvbkRhdGEob2Zmc2V0UG9zaXRpb24pLFxuICAgICAgICB2ZXJ0ZXhOb3JtYWxEYXRhID0gVGV4dHVyZUN1YmUuZ2V0VmVydGV4Tm9ybWFsRGF0YSgpLFxuICAgICAgICB2ZXJ0ZXhJbmRleERhdGEgPSBUZXh0dXJlQ3ViZS5nZXRWZXJ0ZXhJbmRleERhdGEoKSxcbiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVEYXRhID0gVGV4dHVyZUN1YmUuZ2V0VGV4dHVyZUNvb3JkaW5hdGVEYXRhKCk7XG5cbiAgdGV4dHVyZVNoYWRlci5hZGRWZXJ0ZXhQb3NpdGlvbkRhdGEodmVydGV4UG9zaXRpb25EYXRhKTtcbiAgdGV4dHVyZVNoYWRlci5hZGRWZXJ0ZXhOb3JtYWxEYXRhKHZlcnRleE5vcm1hbERhdGEpO1xuICB0ZXh0dXJlU2hhZGVyLmFkZFZlcnRleEluZGV4RGF0YSh2ZXJ0ZXhJbmRleERhdGEpO1xuICB0ZXh0dXJlU2hhZGVyLmFkZFRleHR1cmVDb29yZGluYXRlRGF0YSh0ZXh0dXJlQ29vcmRpbmF0ZURhdGEpO1xuXG4gIG5leHQoKTtcbn1cbiJdfQ==