'use strict';

var necessary = require('necessary');

var React = require('../../react'),
    ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imageUtilities = require('../../utilities/image');

var asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    preloadImage = imageUtilities.preloadImage;


function create(colourShader, textureShader, canvas, done) {
  var source = ['imageMap'];

  preloadImage(source, function (image) {
    var callbacks = [createColourCubeCallback, createTextureCubeCallback],
        context = {
      colourShader: colourShader,
      textureShader: textureShader
    };

    textureShader.createTexture(image, canvas);

    sequence(callbacks, done, context);
  });
}

module.exports = {
  create: create
};

function createColourCubeCallback(next, done, context) {
  var colourShader = context.colourShader,
      textureShader = context.textureShader;


  var offsetPosition = [0, 0, 0],
      colourCube = React.createElement(ColourCube, { offsetPosition: offsetPosition });

  colourCube.createElement(colourShader, textureShader);

  next();
}

function createTextureCubeCallback(next, done, context) {
  var colourShader = context.colourShader,
      textureShader = context.textureShader;


  var offsetPosition = [+2, +2, +2],
      textureCube = React.createElement(TextureCube, { offsetPosition: offsetPosition });

  textureCube.createElement(colourShader, textureShader);

  next();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIlJlYWN0IiwiQ29sb3VyQ3ViZSIsIlRleHR1cmVDdWJlIiwiaW1hZ2VVdGlsaXRpZXMiLCJhc3luY2hyb25vdXNVdGlsaXRpZXMiLCJzZXF1ZW5jZSIsInByZWxvYWRJbWFnZSIsImNyZWF0ZSIsImNvbG91clNoYWRlciIsInRleHR1cmVTaGFkZXIiLCJjYW52YXMiLCJkb25lIiwic291cmNlIiwiaW1hZ2UiLCJjYWxsYmFja3MiLCJjcmVhdGVDb2xvdXJDdWJlQ2FsbGJhY2siLCJjcmVhdGVUZXh0dXJlQ3ViZUNhbGxiYWNrIiwiY29udGV4dCIsImNyZWF0ZVRleHR1cmUiLCJtb2R1bGUiLCJleHBvcnRzIiwibmV4dCIsIm9mZnNldFBvc2l0aW9uIiwiY29sb3VyQ3ViZSIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0dXJlQ3ViZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxXQUFSLENBQWxCOztBQUVBLElBQU1DLFFBQVFELFFBQVEsYUFBUixDQUFkO0FBQUEsSUFDTUUsYUFBYUYsUUFBUSxlQUFSLENBRG5CO0FBQUEsSUFFTUcsY0FBY0gsUUFBUSxnQkFBUixDQUZwQjtBQUFBLElBR01JLGlCQUFpQkosUUFBUSx1QkFBUixDQUh2Qjs7QUFLTSxJQUFFSyxxQkFBRixHQUE0Qk4sU0FBNUIsQ0FBRU0scUJBQUY7QUFBQSxJQUNFQyxRQURGLEdBQ2VELHFCQURmLENBQ0VDLFFBREY7QUFBQSxJQUVFQyxZQUZGLEdBRW1CSCxjQUZuQixDQUVFRyxZQUZGOzs7QUFJTixTQUFTQyxNQUFULENBQWdCQyxZQUFoQixFQUE4QkMsYUFBOUIsRUFBNkNDLE1BQTdDLEVBQXFEQyxJQUFyRCxFQUEyRDtBQUN6RCxNQUFNQyxTQUFTLENBQ2IsVUFEYSxDQUFmOztBQUlBTixlQUFhTSxNQUFiLEVBQXFCLFVBQVNDLEtBQVQsRUFBZ0I7QUFDbkMsUUFBTUMsWUFBWSxDQUNWQyx3QkFEVSxFQUVWQyx5QkFGVSxDQUFsQjtBQUFBLFFBSU1DLFVBQVU7QUFDUlQsb0JBQWNBLFlBRE47QUFFUkMscUJBQWVBO0FBRlAsS0FKaEI7O0FBU0FBLGtCQUFjUyxhQUFkLENBQTRCTCxLQUE1QixFQUFtQ0gsTUFBbkM7O0FBRUFMLGFBQVNTLFNBQVQsRUFBb0JILElBQXBCLEVBQTBCTSxPQUExQjtBQUNELEdBYkQ7QUFjRDs7QUFFREUsT0FBT0MsT0FBUCxHQUFpQjtBQUNmYixVQUFRQTtBQURPLENBQWpCOztBQUlBLFNBQVNRLHdCQUFULENBQWtDTSxJQUFsQyxFQUF3Q1YsSUFBeEMsRUFBOENNLE9BQTlDLEVBQXVEO0FBQUEsTUFDN0NULFlBRDZDLEdBQ2JTLE9BRGEsQ0FDN0NULFlBRDZDO0FBQUEsTUFDL0JDLGFBRCtCLEdBQ2JRLE9BRGEsQ0FDL0JSLGFBRCtCOzs7QUFHckQsTUFBTWEsaUJBQWlCLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQXZCO0FBQUEsTUFDTUMsYUFBYSxvQkFBQyxVQUFELElBQVksZ0JBQWdCRCxjQUE1QixHQURuQjs7QUFHQUMsYUFBV0MsYUFBWCxDQUF5QmhCLFlBQXpCLEVBQXVDQyxhQUF2Qzs7QUFFQVk7QUFDRDs7QUFFRCxTQUFTTCx5QkFBVCxDQUFtQ0ssSUFBbkMsRUFBeUNWLElBQXpDLEVBQStDTSxPQUEvQyxFQUF3RDtBQUFBLE1BQzlDVCxZQUQ4QyxHQUNkUyxPQURjLENBQzlDVCxZQUQ4QztBQUFBLE1BQ2hDQyxhQURnQyxHQUNkUSxPQURjLENBQ2hDUixhQURnQzs7O0FBR3RELE1BQU1hLGlCQUFpQixDQUFDLENBQUMsQ0FBRixFQUFLLENBQUMsQ0FBTixFQUFTLENBQUMsQ0FBVixDQUF2QjtBQUFBLE1BQ01HLGNBQWMsb0JBQUMsV0FBRCxJQUFhLGdCQUFnQkgsY0FBN0IsR0FEcEI7O0FBR0FHLGNBQVlELGFBQVosQ0FBMEJoQixZQUExQixFQUF3Q0MsYUFBeEM7O0FBRUFZO0FBQ0QiLCJmaWxlIjoiY3ViZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJy4uLy4uL3JlYWN0JyksXG4gICAgICBDb2xvdXJDdWJlID0gcmVxdWlyZSgnLi9jdWJlL2NvbG91cicpLFxuICAgICAgVGV4dHVyZUN1YmUgPSByZXF1aXJlKCcuL2N1YmUvdGV4dHVyZScpLFxuICAgICAgaW1hZ2VVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvaW1hZ2UnKTtcblxuY29uc3QgeyBhc3luY2hyb25vdXNVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgc2VxdWVuY2UgfSA9IGFzeW5jaHJvbm91c1V0aWxpdGllcyxcbiAgICAgIHsgcHJlbG9hZEltYWdlIH0gPSBpbWFnZVV0aWxpdGllcztcblxuZnVuY3Rpb24gY3JlYXRlKGNvbG91clNoYWRlciwgdGV4dHVyZVNoYWRlciwgY2FudmFzLCBkb25lKSB7XG4gIGNvbnN0IHNvdXJjZSA9IFtcbiAgICAnaW1hZ2VNYXAnXG4gIF07XG5cbiAgcHJlbG9hZEltYWdlKHNvdXJjZSwgZnVuY3Rpb24oaW1hZ2UpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBbXG4gICAgICAgICAgICBjcmVhdGVDb2xvdXJDdWJlQ2FsbGJhY2ssXG4gICAgICAgICAgICBjcmVhdGVUZXh0dXJlQ3ViZUNhbGxiYWNrXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjb250ZXh0ID0ge1xuICAgICAgICAgICAgY29sb3VyU2hhZGVyOiBjb2xvdXJTaGFkZXIsXG4gICAgICAgICAgICB0ZXh0dXJlU2hhZGVyOiB0ZXh0dXJlU2hhZGVyXG4gICAgICAgICAgfTtcblxuICAgIHRleHR1cmVTaGFkZXIuY3JlYXRlVGV4dHVyZShpbWFnZSwgY2FudmFzKTtcblxuICAgIHNlcXVlbmNlKGNhbGxiYWNrcywgZG9uZSwgY29udGV4dCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiBjcmVhdGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayhuZXh0LCBkb25lLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgY29sb3VyU2hhZGVyLCB0ZXh0dXJlU2hhZGVyIH0gPSBjb250ZXh0O1xuXG4gIGNvbnN0IG9mZnNldFBvc2l0aW9uID0gWzAsIDAsIDBdLFxuICAgICAgICBjb2xvdXJDdWJlID0gPENvbG91ckN1YmUgb2Zmc2V0UG9zaXRpb249e29mZnNldFBvc2l0aW9ufSAvPjtcblxuICBjb2xvdXJDdWJlLmNyZWF0ZUVsZW1lbnQoY29sb3VyU2hhZGVyLCB0ZXh0dXJlU2hhZGVyKTtcblxuICBuZXh0KCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2sobmV4dCwgZG9uZSwgY29udGV4dCkge1xuICBjb25zdCB7IGNvbG91clNoYWRlciwgdGV4dHVyZVNoYWRlciB9ID0gY29udGV4dDtcblxuICBjb25zdCBvZmZzZXRQb3NpdGlvbiA9IFsrMiwgKzIsICsyXSxcbiAgICAgICAgdGV4dHVyZUN1YmUgPSA8VGV4dHVyZUN1YmUgb2Zmc2V0UG9zaXRpb249e29mZnNldFBvc2l0aW9ufSAvPjtcblxuICB0ZXh0dXJlQ3ViZS5jcmVhdGVFbGVtZW50KGNvbG91clNoYWRlciwgdGV4dHVyZVNoYWRlcik7XG5cbiAgbmV4dCgpO1xufVxuIl19