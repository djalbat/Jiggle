'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imagesUtilities = require('../../utilities/images');

var arrayUtilities = necessary.arrayUtilities,
    preload = imagesUtilities.preload,
    first = arrayUtilities.first;


function create(colourShader, textureShader, canvas, callback) {
  var cubes = [];

  createColourCube(colourShader, canvas, function (colourCube) {
    cubes.push(colourCube);

    createTextureCube(textureShader, canvas, function (textureCube) {
      cubes.push(textureCube);

      callback(cubes);
    });
  });
}

module.exports = {
  create: create
};

function createColourCube(colourShader, canvas, callback) {
  var offsetPosition = [-2, 0, 0],
      colourCube = ColourCube.fromOffsetPosition(offsetPosition, colourShader, canvas);

  callback(colourCube);
}

function createTextureCube(textureShader, canvas, callback) {
  var sources = ['texture/bricks.jpg'];

  preload(sources, function (images) {
    var firstImage = first(images),
        offsetPosition = [+2, 0, 0],
        image = firstImage,
        ///
    textureCube = TextureCube.fromOffsetPositionAndImage(offsetPosition, image, textureShader, canvas);

    callback(textureCube);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImltYWdlc1V0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwicHJlbG9hZCIsImZpcnN0IiwiY3JlYXRlIiwiY29sb3VyU2hhZGVyIiwidGV4dHVyZVNoYWRlciIsImNhbnZhcyIsImNhbGxiYWNrIiwiY3ViZXMiLCJjcmVhdGVDb2xvdXJDdWJlIiwiY29sb3VyQ3ViZSIsInB1c2giLCJjcmVhdGVUZXh0dXJlQ3ViZSIsInRleHR1cmVDdWJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9mZnNldFBvc2l0aW9uIiwiZnJvbU9mZnNldFBvc2l0aW9uIiwic291cmNlcyIsImltYWdlcyIsImZpcnN0SW1hZ2UiLCJpbWFnZSIsImZyb21PZmZzZXRQb3NpdGlvbkFuZEltYWdlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRUEsSUFBTUMsYUFBYUQsUUFBUSxlQUFSLENBQW5CO0FBQUEsSUFDTUUsY0FBY0YsUUFBUSxnQkFBUixDQURwQjtBQUFBLElBRU1HLGtCQUFrQkgsUUFBUSx3QkFBUixDQUZ4Qjs7QUFJTSxJQUFFSSxjQUFGLEdBQXFCTCxTQUFyQixDQUFFSyxjQUFGO0FBQUEsSUFDRUMsT0FERixHQUNjRixlQURkLENBQ0VFLE9BREY7QUFBQSxJQUVFQyxLQUZGLEdBRVlGLGNBRlosQ0FFRUUsS0FGRjs7O0FBSU4sU0FBU0MsTUFBVCxDQUFnQkMsWUFBaEIsRUFBOEJDLGFBQTlCLEVBQTZDQyxNQUE3QyxFQUFxREMsUUFBckQsRUFBK0Q7QUFDN0QsTUFBTUMsUUFBUSxFQUFkOztBQUVBQyxtQkFBaUJMLFlBQWpCLEVBQStCRSxNQUEvQixFQUF1QyxVQUFTSSxVQUFULEVBQXFCO0FBQzFERixVQUFNRyxJQUFOLENBQVdELFVBQVg7O0FBRUFFLHNCQUFrQlAsYUFBbEIsRUFBaUNDLE1BQWpDLEVBQXlDLFVBQVNPLFdBQVQsRUFBc0I7QUFDN0RMLFlBQU1HLElBQU4sQ0FBV0UsV0FBWDs7QUFFQU4sZUFBU0MsS0FBVDtBQUNELEtBSkQ7QUFLRCxHQVJEO0FBU0Q7O0FBRURNLE9BQU9DLE9BQVAsR0FBaUI7QUFDZlosVUFBUUE7QUFETyxDQUFqQjs7QUFJQSxTQUFTTSxnQkFBVCxDQUEwQkwsWUFBMUIsRUFBd0NFLE1BQXhDLEVBQWdEQyxRQUFoRCxFQUEwRDtBQUN4RCxNQUFNUyxpQkFBaUIsQ0FBQyxDQUFDLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixDQUF2QjtBQUFBLE1BQ01OLGFBQWFiLFdBQVdvQixrQkFBWCxDQUE4QkQsY0FBOUIsRUFBOENaLFlBQTlDLEVBQTRERSxNQUE1RCxDQURuQjs7QUFHQUMsV0FBU0csVUFBVDtBQUNEOztBQUVELFNBQVNFLGlCQUFULENBQTJCUCxhQUEzQixFQUEwQ0MsTUFBMUMsRUFBa0RDLFFBQWxELEVBQTREO0FBQzFELE1BQU1XLFVBQVUsQ0FDUixvQkFEUSxDQUFoQjs7QUFJQWpCLFVBQVFpQixPQUFSLEVBQWlCLFVBQVNDLE1BQVQsRUFBaUI7QUFDaEMsUUFBTUMsYUFBYWxCLE1BQU1pQixNQUFOLENBQW5CO0FBQUEsUUFDTUgsaUJBQWlCLENBQUMsQ0FBQyxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FEdkI7QUFBQSxRQUVNSyxRQUFRRCxVQUZkO0FBQUEsUUFFMEI7QUFDcEJQLGtCQUFjZixZQUFZd0IsMEJBQVosQ0FBdUNOLGNBQXZDLEVBQXVESyxLQUF2RCxFQUE4RGhCLGFBQTlELEVBQTZFQyxNQUE3RSxDQUhwQjs7QUFLQUMsYUFBU00sV0FBVDtBQUNELEdBUEQ7QUFRRCIsImZpbGUiOiJjdWJlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IENvbG91ckN1YmUgPSByZXF1aXJlKCcuL2N1YmUvY29sb3VyJyksXG4gICAgICBUZXh0dXJlQ3ViZSA9IHJlcXVpcmUoJy4vY3ViZS90ZXh0dXJlJyksXG4gICAgICBpbWFnZXNVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvaW1hZ2VzJyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgcHJlbG9hZCB9ID0gaW1hZ2VzVXRpbGl0aWVzLFxuICAgICAgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGNyZWF0ZShjb2xvdXJTaGFkZXIsIHRleHR1cmVTaGFkZXIsIGNhbnZhcywgY2FsbGJhY2spIHtcbiAgY29uc3QgY3ViZXMgPSBbXTtcblxuICBjcmVhdGVDb2xvdXJDdWJlKGNvbG91clNoYWRlciwgY2FudmFzLCBmdW5jdGlvbihjb2xvdXJDdWJlKSB7XG4gICAgY3ViZXMucHVzaChjb2xvdXJDdWJlKTtcblxuICAgIGNyZWF0ZVRleHR1cmVDdWJlKHRleHR1cmVTaGFkZXIsIGNhbnZhcywgZnVuY3Rpb24odGV4dHVyZUN1YmUpIHtcbiAgICAgIGN1YmVzLnB1c2godGV4dHVyZUN1YmUpO1xuXG4gICAgICBjYWxsYmFjayhjdWJlcyk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiBjcmVhdGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbG91ckN1YmUoY29sb3VyU2hhZGVyLCBjYW52YXMsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IG9mZnNldFBvc2l0aW9uID0gWy0yLCAwLCAwXSxcbiAgICAgICAgY29sb3VyQ3ViZSA9IENvbG91ckN1YmUuZnJvbU9mZnNldFBvc2l0aW9uKG9mZnNldFBvc2l0aW9uLCBjb2xvdXJTaGFkZXIsIGNhbnZhcyk7XG5cbiAgY2FsbGJhY2soY29sb3VyQ3ViZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHR1cmVDdWJlKHRleHR1cmVTaGFkZXIsIGNhbnZhcywgY2FsbGJhY2spIHtcbiAgY29uc3Qgc291cmNlcyA9IFtcbiAgICAgICAgICAndGV4dHVyZS9icmlja3MuanBnJ1xuICAgICAgICBdO1xuXG4gIHByZWxvYWQoc291cmNlcywgZnVuY3Rpb24oaW1hZ2VzKSB7XG4gICAgY29uc3QgZmlyc3RJbWFnZSA9IGZpcnN0KGltYWdlcyksXG4gICAgICAgICAgb2Zmc2V0UG9zaXRpb24gPSBbKzIsIDAsIDBdLFxuICAgICAgICAgIGltYWdlID0gZmlyc3RJbWFnZSwgLy8vXG4gICAgICAgICAgdGV4dHVyZUN1YmUgPSBUZXh0dXJlQ3ViZS5mcm9tT2Zmc2V0UG9zaXRpb25BbmRJbWFnZShvZmZzZXRQb3NpdGlvbiwgaW1hZ2UsIHRleHR1cmVTaGFkZXIsIGNhbnZhcyk7XG5cbiAgICBjYWxsYmFjayh0ZXh0dXJlQ3ViZSk7XG4gIH0pO1xufVxuIl19