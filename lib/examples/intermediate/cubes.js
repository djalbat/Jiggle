'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imageUtilities = require('../../utilities/image');

var asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    preloadImage = imageUtilities.preloadImage;


function create(colourShader, textureShader, canvas, done) {
      var source = ['imageMap'];

      preloadImage(source, function (image) {
            var callbacks = [createFirstColourCubeCallback, createSecondColourCubeCallback, createTextureCubeCallback],
                context = {
                  colourShader: colourShader,
                  textureShader: textureShader
            };

            textureShader.createTexture(image, canvas);

            sequence(callbacks, done, context);
      });
}

module.exports = {
      create: create
};

function createFirstColourCubeCallback(next, done, context) {
      var colourShader = context.colourShader,
          offsetPosition = [+2, +2, +2];


      var vertexPositionData = ColourCube.getVertexPositionData(offsetPosition),
          vertexNormalData = ColourCube.getVertexNormalData(),
          vertexIndexData = ColourCube.getVertexIndexData(),
          vertexColourData = ColourCube.getVertexColourData();

      colourShader.addVertexPositionData(vertexPositionData);
      colourShader.addVertexNormalData(vertexNormalData);
      colourShader.addVertexIndexData(vertexIndexData);
      colourShader.addVertexColourData(vertexColourData);

      next();
}

function createSecondColourCubeCallback(next, done, context) {
      var colourShader = context.colourShader,
          offsetPosition = [-2, -2, -2];


      var vertexPositionData = ColourCube.getVertexPositionData(offsetPosition),
          vertexNormalData = ColourCube.getVertexNormalData(),
          vertexIndexData = ColourCube.getVertexIndexData(),
          vertexColourData = ColourCube.getVertexColourData();

      colourShader.addVertexPositionData(vertexPositionData);
      colourShader.addVertexNormalData(vertexNormalData);
      colourShader.addVertexIndexData(vertexIndexData);
      colourShader.addVertexColourData(vertexColourData);

      next();
}

function createTextureCubeCallback(next, done, context) {
      var textureShader = context.textureShader,
          canvas = context.canvas,
          offsetPosition = [0, 0, 0];


      var vertexPositionData = TextureCube.getVertexPositionData(offsetPosition),
          vertexNormalData = TextureCube.getVertexNormalData(),
          vertexIndexData = TextureCube.getVertexIndexData(),
          textureCoordinateData = TextureCube.getTextureCoordinateData();

      textureShader.addVertexPositionData(vertexPositionData);
      textureShader.addVertexNormalData(vertexNormalData);
      textureShader.addVertexIndexData(vertexIndexData);
      textureShader.addTextureCoordinateData(textureCoordinateData);

      next();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImltYWdlVXRpbGl0aWVzIiwiYXN5bmNocm9ub3VzVXRpbGl0aWVzIiwic2VxdWVuY2UiLCJwcmVsb2FkSW1hZ2UiLCJjcmVhdGUiLCJjb2xvdXJTaGFkZXIiLCJ0ZXh0dXJlU2hhZGVyIiwiY2FudmFzIiwiZG9uZSIsInNvdXJjZSIsImltYWdlIiwiY2FsbGJhY2tzIiwiY3JlYXRlRmlyc3RDb2xvdXJDdWJlQ2FsbGJhY2siLCJjcmVhdGVTZWNvbmRDb2xvdXJDdWJlQ2FsbGJhY2siLCJjcmVhdGVUZXh0dXJlQ3ViZUNhbGxiYWNrIiwiY29udGV4dCIsImNyZWF0ZVRleHR1cmUiLCJtb2R1bGUiLCJleHBvcnRzIiwibmV4dCIsIm9mZnNldFBvc2l0aW9uIiwidmVydGV4UG9zaXRpb25EYXRhIiwiZ2V0VmVydGV4UG9zaXRpb25EYXRhIiwidmVydGV4Tm9ybWFsRGF0YSIsImdldFZlcnRleE5vcm1hbERhdGEiLCJ2ZXJ0ZXhJbmRleERhdGEiLCJnZXRWZXJ0ZXhJbmRleERhdGEiLCJ2ZXJ0ZXhDb2xvdXJEYXRhIiwiZ2V0VmVydGV4Q29sb3VyRGF0YSIsImFkZFZlcnRleFBvc2l0aW9uRGF0YSIsImFkZFZlcnRleE5vcm1hbERhdGEiLCJhZGRWZXJ0ZXhJbmRleERhdGEiLCJhZGRWZXJ0ZXhDb2xvdXJEYXRhIiwidGV4dHVyZUNvb3JkaW5hdGVEYXRhIiwiZ2V0VGV4dHVyZUNvb3JkaW5hdGVEYXRhIiwiYWRkVGV4dHVyZUNvb3JkaW5hdGVEYXRhIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRUEsSUFBTUMsYUFBYUQsUUFBUSxlQUFSLENBQW5CO0FBQUEsSUFDTUUsY0FBY0YsUUFBUSxnQkFBUixDQURwQjtBQUFB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cUJBQXFCdEIsWUFBWXVCLHFCQUFaLENBQWtDRixjQUFsQyxDQUEzQjtBQUFBLFVBQ01HLG1CQUFtQnhCLFlBQVl5QixtQkFBWixFQUR6QjtBQUFBLFVBRU1DLGtCQUFrQjFCLFlBQVkyQixrQkFBWixFQUZ4QjtBQUFBLFVBR01PLHdCQUF3QmxDLFlBQVltQyx3QkFBWixFQUg5Qjs7QUFLQTVCLG9CQUFjdUIscUJBQWQsQ0FBb0NSLGtCQUFwQztBQUNBZixvQkFBY3dCLG1CQUFkLENBQWtDUCxnQkFBbEM7QUFDQWpCLG9CQUFjeUIsa0JBQWQsQ0FBaUNOLGVBQWpDO0FBQ0FuQixvQkFBYzZCLHdCQUFkLENBQXVDRixxQkFBdkM7O0FBRUFkO0FBQ0QiLCJmaWxlIjoiY3ViZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCBDb2xvdXJDdWJlID0gcmVxdWlyZSgnLi9jdWJlL2NvbG91cicpLFxuICAgICAgVGV4dHVyZUN1YmUgPSByZXF1aXJlKCcuL2N1YmUvdGV4dHVyZScpLFxuICAgICAgaW1hZ2VVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvaW1hZ2UnKTtcblxuY29uc3QgeyBhc3luY2hyb25vdXNVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgc2VxdWVuY2UgfSA9IGFzeW5jaHJvbm91c1V0aWxpdGllcyxcbiAgICAgIHsgcHJlbG9hZEltYWdlIH0gPSBpbWFnZVV0aWxpdGllcztcblxuZnVuY3Rpb24gY3JlYXRlKGNvbG91clNoYWRlciwgdGV4dHVyZVNoYWRlciwgY2FudmFzLCBkb25lKSB7XG4gIGNvbnN0IHNvdXJjZSA9IFtcbiAgICAnaW1hZ2VNYXAnXG4gIF07XG5cbiAgcHJlbG9hZEltYWdlKHNvdXJjZSwgZnVuY3Rpb24oaW1hZ2UpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBbXG4gICAgICAgICAgICBjcmVhdGVGaXJzdENvbG91ckN1YmVDYWxsYmFjayxcbiAgICAgICAgICAgIGNyZWF0ZVNlY29uZENvbG91ckN1YmVDYWxsYmFjayxcbiAgICAgICAgICAgIGNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2tcbiAgICAgICAgICBdLFxuICAgICAgICAgIGNvbnRleHQgPSB7XG4gICAgICAgICAgICBjb2xvdXJTaGFkZXI6IGNvbG91clNoYWRlcixcbiAgICAgICAgICAgIHRleHR1cmVTaGFkZXI6IHRleHR1cmVTaGFkZXJcbiAgICAgICAgICB9O1xuXG4gICAgdGV4dHVyZVNoYWRlci5jcmVhdGVUZXh0dXJlKGltYWdlLCBjYW52YXMpO1xuXG4gICAgc2VxdWVuY2UoY2FsbGJhY2tzLCBkb25lLCBjb250ZXh0KTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IGNyZWF0ZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlRmlyc3RDb2xvdXJDdWJlQ2FsbGJhY2sobmV4dCwgZG9uZSwgY29udGV4dCkge1xuICBjb25zdCB7IGNvbG91clNoYWRlciB9ID0gY29udGV4dCxcbiAgICAgICAgb2Zmc2V0UG9zaXRpb24gPSBbKzIsICsyLCArMl07XG5cbiAgY29uc3QgdmVydGV4UG9zaXRpb25EYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhQb3NpdGlvbkRhdGEob2Zmc2V0UG9zaXRpb24pLFxuICAgICAgICB2ZXJ0ZXhOb3JtYWxEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhOb3JtYWxEYXRhKCksXG4gICAgICAgIHZlcnRleEluZGV4RGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4SW5kZXhEYXRhKCksXG4gICAgICAgIHZlcnRleENvbG91ckRhdGEgPSBDb2xvdXJDdWJlLmdldFZlcnRleENvbG91ckRhdGEoKTtcblxuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4UG9zaXRpb25EYXRhKHZlcnRleFBvc2l0aW9uRGF0YSk7XG4gIGNvbG91clNoYWRlci5hZGRWZXJ0ZXhOb3JtYWxEYXRhKHZlcnRleE5vcm1hbERhdGEpO1xuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4SW5kZXhEYXRhKHZlcnRleEluZGV4RGF0YSk7XG4gIGNvbG91clNoYWRlci5hZGRWZXJ0ZXhDb2xvdXJEYXRhKHZlcnRleENvbG91ckRhdGEpO1xuXG4gIG5leHQoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2Vjb25kQ29sb3VyQ3ViZUNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBjb2xvdXJTaGFkZXIgfSA9IGNvbnRleHQsXG4gICAgICAgIG9mZnNldFBvc2l0aW9uID0gWy0yLCAtMiwgLTJdO1xuXG4gIGNvbnN0IHZlcnRleFBvc2l0aW9uRGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4UG9zaXRpb25EYXRhKG9mZnNldFBvc2l0aW9uKSxcbiAgICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4Tm9ybWFsRGF0YSgpLFxuICAgICAgICB2ZXJ0ZXhJbmRleERhdGEgPSBDb2xvdXJDdWJlLmdldFZlcnRleEluZGV4RGF0YSgpLFxuICAgICAgICB2ZXJ0ZXhDb2xvdXJEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhDb2xvdXJEYXRhKCk7XG5cbiAgY29sb3VyU2hhZGVyLmFkZFZlcnRleFBvc2l0aW9uRGF0YSh2ZXJ0ZXhQb3NpdGlvbkRhdGEpO1xuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4Tm9ybWFsRGF0YSh2ZXJ0ZXhOb3JtYWxEYXRhKTtcbiAgY29sb3VyU2hhZGVyLmFkZFZlcnRleEluZGV4RGF0YSh2ZXJ0ZXhJbmRleERhdGEpO1xuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4Q29sb3VyRGF0YSh2ZXJ0ZXhDb2xvdXJEYXRhKTtcblxuICBuZXh0KCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2sobmV4dCwgZG9uZSwgY29udGV4dCkge1xuICBjb25zdCB7IHRleHR1cmVTaGFkZXIsIGNhbnZhcyB9ID0gY29udGV4dCxcbiAgICAgICAgb2Zmc2V0UG9zaXRpb24gPSBbMCwgMCwgMF07XG5cbiAgY29uc3QgdmVydGV4UG9zaXRpb25EYXRhID0gVGV4dHVyZUN1YmUuZ2V0VmVydGV4UG9zaXRpb25EYXRhKG9mZnNldFBvc2l0aW9uKSxcbiAgICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IFRleHR1cmVDdWJlLmdldFZlcnRleE5vcm1hbERhdGEoKSxcbiAgICAgICAgdmVydGV4SW5kZXhEYXRhID0gVGV4dHVyZUN1YmUuZ2V0VmVydGV4SW5kZXhEYXRhKCksXG4gICAgICAgIHRleHR1cmVDb29yZGluYXRlRGF0YSA9IFRleHR1cmVDdWJlLmdldFRleHR1cmVDb29yZGluYXRlRGF0YSgpO1xuXG4gIHRleHR1cmVTaGFkZXIuYWRkVmVydGV4UG9zaXRpb25EYXRhKHZlcnRleFBvc2l0aW9uRGF0YSk7XG4gIHRleHR1cmVTaGFkZXIuYWRkVmVydGV4Tm9ybWFsRGF0YSh2ZXJ0ZXhOb3JtYWxEYXRhKTtcbiAgdGV4dHVyZVNoYWRlci5hZGRWZXJ0ZXhJbmRleERhdGEodmVydGV4SW5kZXhEYXRhKTtcbiAgdGV4dHVyZVNoYWRlci5hZGRUZXh0dXJlQ29vcmRpbmF0ZURhdGEodGV4dHVyZUNvb3JkaW5hdGVEYXRhKTtcblxuICBuZXh0KCk7XG59XG4iXX0=