'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imagesUtilities = require('../../utilities/images');

var asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    preloadImages = imagesUtilities.preloadImages,
    createImageMap = imagesUtilities.createImageMap;


function create(colourShader, textureShader, canvas, done) {
  var sources = ['texture/concrete.jpg', 'texture/bricks.jpg', 'texture/grass.jpg'];

  preloadImages(sources, function (images) {
    var imageMap = createImageMap(images),
        callbacks = [createColourCubeCallback, createTextureCubeCallback],
        context = {
      colourShader: colourShader,
      textureShader: textureShader,
      imageMap: imageMap,
      canvas: canvas
    };

    sequence(callbacks, done, context);
  });
}

module.exports = {
  create: create
};

function createColourCubeCallback(next, done, context) {
  var colourShader = context.colourShader,
      offsetPosition = [+2, +2, +2];


  var vertexPositionData = ColourCube.getVertexPositionData(offsetPosition),
      vertexNormalData = ColourCube.getVertexNormalData(),
      vertexIndexData = ColourCube.getVertexIndexData(),
      vertexColourData = ColourCube.getVertexColourData();

  colourShader.addVertexPositionData(vertexPositionData);
  colourShader.addVertexNormalData(vertexNormalData);
  colourShader.addVertexIndexData(vertexIndexData);
  colourShader.addVertexColourData(vertexColourData);

  next();
}

function createTextureCubeCallback(next, done, context) {
  var textureShader = context.textureShader,
      imageMap = context.imageMap,
      canvas = context.canvas,
      offsetPosition = [0, 0, 0];


  var vertexPositionData = TextureCube.getVertexPositionData(offsetPosition),
      vertexNormalData = TextureCube.getVertexNormalData(),
      vertexIndexData = TextureCube.getVertexIndexData(),
      textureCoordinateData = TextureCube.getTextureCoordinateData();

  textureShader.addVertexPositionData(vertexPositionData);
  textureShader.addVertexNormalData(vertexNormalData);
  textureShader.addVertexIndexData(vertexIndexData);
  textureShader.addTextureCoordinateData(textureCoordinateData);

  textureShader.createTexture(imageMap, canvas);

  next();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImltYWdlc1V0aWxpdGllcyIsImFzeW5jaHJvbm91c1V0aWxpdGllcyIsInNlcXVlbmNlIiwicHJlbG9hZEltYWdlcyIsImNyZWF0ZUltYWdlTWFwIiwiY3JlYXRlIiwiY29sb3VyU2hhZGVyIiwidGV4dHVyZVNoYWRlciIsImNhbnZhcyIsImRvbmUiLCJzb3VyY2VzIiwiaW1hZ2VzIiwiaW1hZ2VNYXAiLCJjYWxsYmFja3MiLCJjcmVhdGVDb2xvdXJDdWJlQ2FsbGJhY2siLCJjcmVhdGVUZXh0dXJlQ3ViZUNhbGxiYWNrIiwiY29udGV4dCIsIm1vZHVsZSIsImV4cG9ydHMiLCJuZXh0Iiwib2Zmc2V0UG9zaXRpb24iLCJ2ZXJ0ZXhQb3NpdGlvbkRhdGEiLCJnZXRWZXJ0ZXhQb3NpdGlvbkRhdGEiLCJ2ZXJ0ZXhOb3JtYWxEYXRhIiwiZ2V0VmVydGV4Tm9ybWFsRGF0YSIsInZlcnRleEluZGV4RGF0YSIsImdldFZlcnRleEluZGV4RGF0YSIsInZlcnRleENvbG91ckRhdGEiLCJnZXRWZXJ0ZXhDb2xvdXJEYXRhIiwiYWRkVmVydGV4UG9zaXRpb25EYXRhIiwiYWRkVmVydGV4Tm9ybWFsRGF0YSIsImFkZFZlcnRleEluZGV4RGF0YSIsImFkZFZlcnRleENvbG91ckRhdGEiLCJ0ZXh0dXJlQ29vcmRpbmF0ZURhdGEiLCJnZXRUZXh0dXJlQ29vcmRpbmF0ZURhdGEiLCJhZGRUZXh0dXJlQ29vcmRpbmF0ZURhdGEiLCJjcmVhdGVUZXh0dXJlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRUEsSUFBTUMsYUFBYUQsUUFBUSxlQUFSLENBQW5CO0FBQUEsSUFDTUUsY0FBY0YsUUFBUSxnQkFBUixDQURwQjtBQUFBLElBRU1H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dXNlIHN0cmljdCc7XG5cbmNvbnN0IG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCBDb2xvdXJDdWJlID0gcmVxdWlyZSgnLi9jdWJlL2NvbG91cicpLFxuICAgICAgVGV4dHVyZUN1YmUgPSByZXF1aXJlKCcuL2N1YmUvdGV4dHVyZScpLFxuICAgICAgaW1hZ2VzVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL2ltYWdlcycpO1xuXG5jb25zdCB7IGFzeW5jaHJvbm91c1V0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBzZXF1ZW5jZSB9ID0gYXN5bmNocm9ub3VzVXRpbGl0aWVzLFxuICAgICAgeyBwcmVsb2FkSW1hZ2VzLCBjcmVhdGVJbWFnZU1hcCB9ID0gaW1hZ2VzVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBjcmVhdGUoY29sb3VyU2hhZGVyLCB0ZXh0dXJlU2hhZGVyLCBjYW52YXMsIGRvbmUpIHtcbiAgY29uc3Qgc291cmNlcyA9IFtcbiAgICAndGV4dHVyZS9jb25jcmV0ZS5qcGcnLFxuICAgICd0ZXh0dXJlL2JyaWNrcy5qcGcnLFxuICAgICd0ZXh0dXJlL2dyYXNzLmpwZydcbiAgXTtcblxuICBwcmVsb2FkSW1hZ2VzKHNvdXJjZXMsIGZ1bmN0aW9uKGltYWdlcykge1xuICAgIGNvbnN0IGltYWdlTWFwID0gY3JlYXRlSW1hZ2VNYXAoaW1hZ2VzKSxcbiAgICAgICAgICBjYWxsYmFja3MgPSBbXG4gICAgICAgICAgICBjcmVhdGVDb2xvdXJDdWJlQ2FsbGJhY2ssXG4gICAgICAgICAgICBjcmVhdGVUZXh0dXJlQ3ViZUNhbGxiYWNrXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjb250ZXh0ID0ge1xuICAgICAgICAgICAgY29sb3VyU2hhZGVyOiBjb2xvdXJTaGFkZXIsXG4gICAgICAgICAgICB0ZXh0dXJlU2hhZGVyOiB0ZXh0dXJlU2hhZGVyLFxuICAgICAgICAgICAgaW1hZ2VNYXA6IGltYWdlTWFwLFxuICAgICAgICAgICAgY2FudmFzOiBjYW52YXNcbiAgICAgICAgICB9O1xuXG4gICAgc2VxdWVuY2UoY2FsbGJhY2tzLCBkb25lLCBjb250ZXh0KTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IGNyZWF0ZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlQ29sb3VyQ3ViZUNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBjb2xvdXJTaGFkZXIgfSA9IGNvbnRleHQsXG4gICAgICAgIG9mZnNldFBvc2l0aW9uID0gWysyLCArMiwgKzJdO1xuXG4gIGNvbnN0IHZlcnRleFBvc2l0aW9uRGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4UG9zaXRpb25EYXRhKG9mZnNldFBvc2l0aW9uKSxcbiAgICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4Tm9ybWFsRGF0YSgpLFxuICAgICAgICB2ZXJ0ZXhJbmRleERhdGEgPSBDb2xvdXJDdWJlLmdldFZlcnRleEluZGV4RGF0YSgpLFxuICAgICAgICB2ZXJ0ZXhDb2xvdXJEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhDb2xvdXJEYXRhKCk7XG5cbiAgY29sb3VyU2hhZGVyLmFkZFZlcnRleFBvc2l0aW9uRGF0YSh2ZXJ0ZXhQb3NpdGlvbkRhdGEpO1xuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4Tm9ybWFsRGF0YSh2ZXJ0ZXhOb3JtYWxEYXRhKTtcbiAgY29sb3VyU2hhZGVyLmFkZFZlcnRleEluZGV4RGF0YSh2ZXJ0ZXhJbmRleERhdGEpO1xuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4Q29sb3VyRGF0YSh2ZXJ0ZXhDb2xvdXJEYXRhKTtcblxuICBuZXh0KCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2sobmV4dCwgZG9uZSwgY29udGV4dCkge1xuICBjb25zdCB7IHRleHR1cmVTaGFkZXIsIGltYWdlTWFwLCBjYW52YXMgfSA9IGNvbnRleHQsXG4gICAgICAgIG9mZnNldFBvc2l0aW9uID0gWzAsIDAsIDBdO1xuXG4gIGNvbnN0IHZlcnRleFBvc2l0aW9uRGF0YSA9IFRleHR1cmVDdWJlLmdldFZlcnRleFBvc2l0aW9uRGF0YShvZmZzZXRQb3NpdGlvbiksXG4gICAgICAgIHZlcnRleE5vcm1hbERhdGEgPSBUZXh0dXJlQ3ViZS5nZXRWZXJ0ZXhOb3JtYWxEYXRhKCksXG4gICAgICAgIHZlcnRleEluZGV4RGF0YSA9IFRleHR1cmVDdWJlLmdldFZlcnRleEluZGV4RGF0YSgpLFxuICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZURhdGEgPSBUZXh0dXJlQ3ViZS5nZXRUZXh0dXJlQ29vcmRpbmF0ZURhdGEoKTtcblxuICB0ZXh0dXJlU2hhZGVyLmFkZFZlcnRleFBvc2l0aW9uRGF0YSh2ZXJ0ZXhQb3NpdGlvbkRhdGEpO1xuICB0ZXh0dXJlU2hhZGVyLmFkZFZlcnRleE5vcm1hbERhdGEodmVydGV4Tm9ybWFsRGF0YSk7XG4gIHRleHR1cmVTaGFkZXIuYWRkVmVydGV4SW5kZXhEYXRhKHZlcnRleEluZGV4RGF0YSk7XG4gIHRleHR1cmVTaGFkZXIuYWRkVGV4dHVyZUNvb3JkaW5hdGVEYXRhKHRleHR1cmVDb29yZGluYXRlRGF0YSk7XG5cbiAgdGV4dHVyZVNoYWRlci5jcmVhdGVUZXh0dXJlKGltYWdlTWFwLCBjYW52YXMpO1xuXG4gIG5leHQoKTtcbn1cbiJdfQ==