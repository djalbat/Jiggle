'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imagesUtilities = require('../../utilities/images');

var arrayUtilities = necessary.arrayUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    preload = imagesUtilities.preload,
    first = arrayUtilities.first;


function create(colourShader, textureShader, canvas, done) {
      var callbacks = [createColourCubeCallback, createTextureCubeCallback],
          context = {
            colourShader: colourShader,
            textureShader: textureShader,
            canvas: canvas
      };

      sequence(callbacks, done, context);
}

module.exports = {
      create: create
};

function createColourCubeCallback(next, done, context) {
      var colourShader = context.colourShader,
          canvas = context.canvas,
          offsetPosition = [-2, 0, 0];


      var vertexPositionData = ColourCube.getVertexPositionData(offsetPosition),
          vertexNormalData = ColourCube.getVertexNormalData(),
          vertexIndexData = ColourCube.getVertexIndexData(),
          vertexColourData = ColourCube.getVertexColourData();

      colourShader.addVertexPositionData(vertexPositionData);
      colourShader.addVertexNormalData(vertexNormalData);
      colourShader.addVertexIndexData(vertexIndexData);
      colourShader.addVertexColourData(vertexColourData);

      next();
}

function createTextureCubeCallback(next, done, context) {
      var textureShader = context.textureShader,
          canvas = context.canvas,
          sources = ['texture/bricks.jpg'];


      preload(sources, function (images) {
            var firstImage = first(images),
                offsetPosition = [+2, 0, 0],
                image = firstImage;

            var vertexPositionData = TextureCube.getVertexPositionData(offsetPosition),
                vertexNormalData = TextureCube.getVertexNormalData(),
                vertexIndexData = TextureCube.getVertexIndexData(),
                textureCoordinateData = TextureCube.getTextureCoordinateData();

            textureShader.addVertexPositionData(vertexPositionData);
            textureShader.addVertexNormalData(vertexNormalData);
            textureShader.addVertexIndexData(vertexIndexData);
            textureShader.addTextureCoordinateData(textureCoordinateData);

            textureShader.createTexture(image, canvas);

            next();
      });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImltYWdlc1V0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwiYXN5bmNocm9ub3VzVXRpbGl0aWVzIiwic2VxdWVuY2UiLCJwcmVsb2FkIiwiZmlyc3QiLCJjcmVhdGUiLCJjb2xvdXJTaGFkZXIiLCJ0ZXh0dXJlU2hhZGVyIiwiY2FudmFzIiwiZG9uZSIsImNhbGxiYWNrcyIsImNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayIsImNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2siLCJjb250ZXh0IiwibW9kdWxlIiwiZXhwb3J0cyIsIm5leHQiLCJvZmZzZXRQb3NpdGlvbiIsInZlcnRleFBvc2l0aW9uRGF0YSIsImdldFZlcnRleFBvc2l0aW9uRGF0YSIsInZlcnRleE5vcm1hbERhdGEiLCJnZXRWZXJ0ZXhOb3JtYWxEYXRhIiwidmVydGV4SW5kZXhEYXRhIiwiZ2V0VmVydGV4SW5kZXhEYXRhIiwidmVydGV4Q29sb3VyRGF0YSIsImdldFZlcnRleENvbG91ckRhdGEiLCJhZGRWZXJ0ZXhQb3NpdGlvbkRhdGEiLCJhZGRWZXJ0ZXhOb3JtYWxEYXRhIiwiYWRkVmVydGV4SW5kZXhEYXRhIiwiYWRkVmVydGV4Q29sb3VyRGF0YSIsInNvdXJjZXMiLCJpbWFnZXMiLCJmaXJzdEltYWdlIiwiaW1hZ2UiLCJ0ZXh0dXJlQ29vcmRpbmF0ZURhdGEiLCJnZXRUZXh0dXJlQ29vcmRpbmF0ZURhdGEiLCJhZGRUZXh0dXJlQ29vcmRpbmF0ZURhdGEiLCJjcmVhdGVUZXh0dXJlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRUEsSUFBTUMsYUFBYUQsUUFBUSxlQUFSLENBQW5CO0FBQUEsSUFDTUUsY0FBY0YsUUFBUSxnQkFBUixDQURw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b25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgQ29sb3VyQ3ViZSA9IHJlcXVpcmUoJy4vY3ViZS9jb2xvdXInKSxcbiAgICAgIFRleHR1cmVDdWJlID0gcmVxdWlyZSgnLi9jdWJlL3RleHR1cmUnKSxcbiAgICAgIGltYWdlc1V0aWxpdGllcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy9pbWFnZXMnKTtcblxuY29uc3QgeyBhcnJheVV0aWxpdGllcywgYXN5bmNocm9ub3VzVXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IHNlcXVlbmNlIH0gPSBhc3luY2hyb25vdXNVdGlsaXRpZXMsXG4gICAgICB7IHByZWxvYWQgfSA9IGltYWdlc1V0aWxpdGllcyxcbiAgICAgIHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBjcmVhdGUoY29sb3VyU2hhZGVyLCB0ZXh0dXJlU2hhZGVyLCBjYW52YXMsIGRvbmUpIHtcbiAgY29uc3QgY2FsbGJhY2tzID0gW1xuICAgICAgICAgIGNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayxcbiAgICAgICAgICBjcmVhdGVUZXh0dXJlQ3ViZUNhbGxiYWNrXG4gICAgICAgIF0sXG4gICAgICAgIGNvbnRleHQgPSB7XG4gICAgICAgICAgY29sb3VyU2hhZGVyOiBjb2xvdXJTaGFkZXIsXG4gICAgICAgICAgdGV4dHVyZVNoYWRlcjogdGV4dHVyZVNoYWRlcixcbiAgICAgICAgICBjYW52YXM6IGNhbnZhc1xuICAgICAgICB9O1xuXG4gIHNlcXVlbmNlKGNhbGxiYWNrcywgZG9uZSwgY29udGV4dCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IGNyZWF0ZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlQ29sb3VyQ3ViZUNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBjb2xvdXJTaGFkZXIsIGNhbnZhcyB9ID0gY29udGV4dCxcbiAgICAgICAgb2Zmc2V0UG9zaXRpb24gPSBbLTIsIDAsIDBdO1xuXG4gIGNvbnN0IHZlcnRleFBvc2l0aW9uRGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4UG9zaXRpb25EYXRhKG9mZnNldFBvc2l0aW9uKSxcbiAgICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4Tm9ybWFsRGF0YSgpLFxuICAgICAgICB2ZXJ0ZXhJbmRleERhdGEgPSBDb2xvdXJDdWJlLmdldFZlcnRleEluZGV4RGF0YSgpLFxuICAgICAgICB2ZXJ0ZXhDb2xvdXJEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhDb2xvdXJEYXRhKCk7XG5cbiAgY29sb3VyU2hhZGVyLmFkZFZlcnRleFBvc2l0aW9uRGF0YSh2ZXJ0ZXhQb3NpdGlvbkRhdGEpO1xuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4Tm9ybWFsRGF0YSh2ZXJ0ZXhOb3JtYWxEYXRhKTtcbiAgY29sb3VyU2hhZGVyLmFkZFZlcnRleEluZGV4RGF0YSh2ZXJ0ZXhJbmRleERhdGEpO1xuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4Q29sb3VyRGF0YSh2ZXJ0ZXhDb2xvdXJEYXRhKTtcblxuICBuZXh0KCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2sobmV4dCwgZG9uZSwgY29udGV4dCkge1xuICBjb25zdCB7IHRleHR1cmVTaGFkZXIsIGNhbnZhcyB9ID0gY29udGV4dCxcbiAgICAgICAgc291cmNlcyA9IFtcbiAgICAgICAgICAndGV4dHVyZS9icmlja3MuanBnJ1xuICAgICAgICBdO1xuXG4gIHByZWxvYWQoc291cmNlcywgZnVuY3Rpb24oaW1hZ2VzKSB7XG4gICAgY29uc3QgZmlyc3RJbWFnZSA9IGZpcnN0KGltYWdlcyksXG4gICAgICAgICAgb2Zmc2V0UG9zaXRpb24gPSBbKzIsIDAsIDBdLFxuICAgICAgICAgIGltYWdlID0gZmlyc3RJbWFnZTtcblxuICAgIGNvbnN0IHZlcnRleFBvc2l0aW9uRGF0YSA9IFRleHR1cmVDdWJlLmdldFZlcnRleFBvc2l0aW9uRGF0YShvZmZzZXRQb3NpdGlvbiksXG4gICAgICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IFRleHR1cmVDdWJlLmdldFZlcnRleE5vcm1hbERhdGEoKSxcbiAgICAgICAgICB2ZXJ0ZXhJbmRleERhdGEgPSBUZXh0dXJlQ3ViZS5nZXRWZXJ0ZXhJbmRleERhdGEoKSxcbiAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZURhdGEgPSBUZXh0dXJlQ3ViZS5nZXRUZXh0dXJlQ29vcmRpbmF0ZURhdGEoKTtcblxuICAgIHRleHR1cmVTaGFkZXIuYWRkVmVydGV4UG9zaXRpb25EYXRhKHZlcnRleFBvc2l0aW9uRGF0YSk7XG4gICAgdGV4dHVyZVNoYWRlci5hZGRWZXJ0ZXhOb3JtYWxEYXRhKHZlcnRleE5vcm1hbERhdGEpO1xuICAgIHRleHR1cmVTaGFkZXIuYWRkVmVydGV4SW5kZXhEYXRhKHZlcnRleEluZGV4RGF0YSk7XG4gICAgdGV4dHVyZVNoYWRlci5hZGRUZXh0dXJlQ29vcmRpbmF0ZURhdGEodGV4dHVyZUNvb3JkaW5hdGVEYXRhKTtcblxuICAgIHRleHR1cmVTaGFkZXIuY3JlYXRlVGV4dHVyZShpbWFnZSwgY2FudmFzKTtcblxuICAgIG5leHQoKTtcbiAgfSk7XG59XG4iXX0=