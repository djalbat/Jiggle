'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imagesUtilities = require('../../utilities/images');

var arrayUtilities = necessary.arrayUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    preload = imagesUtilities.preload,
    first = arrayUtilities.first;


function create(colourShader, textureShader, canvas, done) {
      var callbacks = [createColourCubeCallback, createTextureCubeCallback],
          context = {
            colourShader: colourShader,
            textureShader: textureShader,
            canvas: canvas
      };

      sequence(callbacks, done, context);
}

module.exports = {
      create: create
};

function createColourCubeCallback(next, done, context) {
      var colourShader = context.colourShader,
          canvas = context.canvas,
          offsetPosition = [-2, 0, 0];


      var vertexPositionData = ColourCube.getVertexPositionData(offsetPosition),
          vertexNormalData = ColourCube.getVertexNormalData(),
          vertexColourData = ColourCube.getVertexColourData(),
          vertexIndexData = ColourCube.getVertexIndexData();

      colourShader.addVertexPositionData(vertexPositionData);
      colourShader.addVertexNormalData(vertexNormalData);
      colourShader.addVertexIndexData(vertexIndexData);

      colourShader.createBuffers(vertexColourData, canvas);

      next();
}

function createTextureCubeCallback(next, done, context) {
      var textureShader = context.textureShader,
          canvas = context.canvas,
          sources = ['texture/bricks.jpg'];


      preload(sources, function (images) {
            var firstImage = first(images),
                offsetPosition = [+2, 0, 0],
                image = firstImage;

            var vertexPositionData = TextureCube.getVertexPositionData(offsetPosition),
                vertexNormalData = TextureCube.getVertexNormalData(),
                textureCoordinateData = TextureCube.getTextureCoordinateData(),
                vertexIndexData = TextureCube.getVertexIndexData();

            textureShader.addVertexPositionData(vertexPositionData);
            textureShader.addVertexNormalData(vertexNormalData);
            textureShader.addVertexIndexData(vertexIndexData);

            textureShader.createBuffers(textureCoordinateData, canvas);

            textureShader.createTexture(image, canvas);

            next();
      });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImltYWdlc1V0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwiYXN5bmNocm9ub3VzVXRpbGl0aWVzIiwic2VxdWVuY2UiLCJwcmVsb2FkIiwiZmlyc3QiLCJjcmVhdGUiLCJjb2xvdXJTaGFkZXIiLCJ0ZXh0dXJlU2hhZGVyIiwiY2FudmFzIiwiZG9uZSIsImNhbGxiYWNrcyIsImNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayIsImNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2siLCJjb250ZXh0IiwibW9kdWxlIiwiZXhwb3J0cyIsIm5leHQiLCJvZmZzZXRQb3NpdGlvbiIsInZlcnRleFBvc2l0aW9uRGF0YSIsImdldFZlcnRleFBvc2l0aW9uRGF0YSIsInZlcnRleE5vcm1hbERhdGEiLCJnZXRWZXJ0ZXhOb3JtYWxEYXRhIiwidmVydGV4Q29sb3VyRGF0YSIsImdldFZlcnRleENvbG91ckRhdGEiLCJ2ZXJ0ZXhJbmRleERhdGEiLCJnZXRWZXJ0ZXhJbmRleERhdGEiLCJhZGRWZXJ0ZXhQb3NpdGlvbkRhdGEiLCJhZGRWZXJ0ZXhOb3JtYWxEYXRhIiwiYWRkVmVydGV4SW5kZXhEYXRhIiwiY3JlYXRlQnVmZmVycyIsInNvdXJjZXMiLCJpbWFnZXMiLCJmaXJzdEltYWdlIiwiaW1hZ2UiLCJ0ZXh0dXJlQ29vcmRpbmF0ZURhdGEiLCJnZXRUZXh0dXJlQ29vcmRpbmF0ZURhdGEiLCJjcmVhdGVUZXh0dXJlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRUEsSUFBTUMsYUFBYUQsUUFBUSxlQUFSLENBQW5CO0FBQUEsSUFDTUUsY0FBY0YsUUFBUSxnQkFBUixDQURwQjtBQUFBLElBRU1HLGtCQUFrQkgsUUFBUSx3QkFBUixD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ZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgQ29sb3VyQ3ViZSA9IHJlcXVpcmUoJy4vY3ViZS9jb2xvdXInKSxcbiAgICAgIFRleHR1cmVDdWJlID0gcmVxdWlyZSgnLi9jdWJlL3RleHR1cmUnKSxcbiAgICAgIGltYWdlc1V0aWxpdGllcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy9pbWFnZXMnKTtcblxuY29uc3QgeyBhcnJheVV0aWxpdGllcywgYXN5bmNocm9ub3VzVXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IHNlcXVlbmNlIH0gPSBhc3luY2hyb25vdXNVdGlsaXRpZXMsXG4gICAgICB7IHByZWxvYWQgfSA9IGltYWdlc1V0aWxpdGllcyxcbiAgICAgIHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBjcmVhdGUoY29sb3VyU2hhZGVyLCB0ZXh0dXJlU2hhZGVyLCBjYW52YXMsIGRvbmUpIHtcbiAgY29uc3QgY2FsbGJhY2tzID0gW1xuICAgICAgICAgIGNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayxcbiAgICAgICAgICBjcmVhdGVUZXh0dXJlQ3ViZUNhbGxiYWNrXG4gICAgICAgIF0sXG4gICAgICAgIGNvbnRleHQgPSB7XG4gICAgICAgICAgY29sb3VyU2hhZGVyOiBjb2xvdXJTaGFkZXIsXG4gICAgICAgICAgdGV4dHVyZVNoYWRlcjogdGV4dHVyZVNoYWRlcixcbiAgICAgICAgICBjYW52YXM6IGNhbnZhc1xuICAgICAgICB9O1xuXG4gIHNlcXVlbmNlKGNhbGxiYWNrcywgZG9uZSwgY29udGV4dCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IGNyZWF0ZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlQ29sb3VyQ3ViZUNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBjb2xvdXJTaGFkZXIsIGNhbnZhcyB9ID0gY29udGV4dCxcbiAgICAgICAgb2Zmc2V0UG9zaXRpb24gPSBbLTIsIDAsIDBdO1xuXG4gIGNvbnN0IHZlcnRleFBvc2l0aW9uRGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4UG9zaXRpb25EYXRhKG9mZnNldFBvc2l0aW9uKSxcbiAgICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4Tm9ybWFsRGF0YSgpLFxuICAgICAgICB2ZXJ0ZXhDb2xvdXJEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhDb2xvdXJEYXRhKCksXG4gICAgICAgIHZlcnRleEluZGV4RGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4SW5kZXhEYXRhKCk7XG5cbiAgY29sb3VyU2hhZGVyLmFkZFZlcnRleFBvc2l0aW9uRGF0YSh2ZXJ0ZXhQb3NpdGlvbkRhdGEpO1xuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4Tm9ybWFsRGF0YSh2ZXJ0ZXhOb3JtYWxEYXRhKTtcbiAgY29sb3VyU2hhZGVyLmFkZFZlcnRleEluZGV4RGF0YSh2ZXJ0ZXhJbmRleERhdGEpO1xuXG4gIGNvbG91clNoYWRlci5jcmVhdGVCdWZmZXJzKHZlcnRleENvbG91ckRhdGEsIGNhbnZhcyk7XG5cbiAgbmV4dCgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0dXJlQ3ViZUNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyB0ZXh0dXJlU2hhZGVyLCBjYW52YXMgfSA9IGNvbnRleHQsXG4gICAgICAgIHNvdXJjZXMgPSBbXG4gICAgICAgICAgJ3RleHR1cmUvYnJpY2tzLmpwZydcbiAgICAgICAgXTtcblxuICBwcmVsb2FkKHNvdXJjZXMsIGZ1bmN0aW9uKGltYWdlcykge1xuICAgIGNvbnN0IGZpcnN0SW1hZ2UgPSBmaXJzdChpbWFnZXMpLFxuICAgICAgICAgIG9mZnNldFBvc2l0aW9uID0gWysyLCAwLCAwXSxcbiAgICAgICAgICBpbWFnZSA9IGZpcnN0SW1hZ2U7XG5cbiAgICBjb25zdCB2ZXJ0ZXhQb3NpdGlvbkRhdGEgPSBUZXh0dXJlQ3ViZS5nZXRWZXJ0ZXhQb3NpdGlvbkRhdGEob2Zmc2V0UG9zaXRpb24pLFxuICAgICAgICAgIHZlcnRleE5vcm1hbERhdGEgPSBUZXh0dXJlQ3ViZS5nZXRWZXJ0ZXhOb3JtYWxEYXRhKCksXG4gICAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVEYXRhID0gVGV4dHVyZUN1YmUuZ2V0VGV4dHVyZUNvb3JkaW5hdGVEYXRhKCksXG4gICAgICAgICAgdmVydGV4SW5kZXhEYXRhID0gVGV4dHVyZUN1YmUuZ2V0VmVydGV4SW5kZXhEYXRhKCk7XG5cbiAgICB0ZXh0dXJlU2hhZGVyLmFkZFZlcnRleFBvc2l0aW9uRGF0YSh2ZXJ0ZXhQb3NpdGlvbkRhdGEpO1xuICAgIHRleHR1cmVTaGFkZXIuYWRkVmVydGV4Tm9ybWFsRGF0YSh2ZXJ0ZXhOb3JtYWxEYXRhKTtcbiAgICB0ZXh0dXJlU2hhZGVyLmFkZFZlcnRleEluZGV4RGF0YSh2ZXJ0ZXhJbmRleERhdGEpO1xuXG4gICAgdGV4dHVyZVNoYWRlci5jcmVhdGVCdWZmZXJzKHRleHR1cmVDb29yZGluYXRlRGF0YSwgY2FudmFzKTtcblxuICAgIHRleHR1cmVTaGFkZXIuY3JlYXRlVGV4dHVyZShpbWFnZSwgY2FudmFzKTtcblxuICAgIG5leHQoKTtcbiAgfSk7XG59XG4iXX0=