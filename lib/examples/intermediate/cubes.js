'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imagesUtilities = require('../../utilities/images');

var arrayUtilities = necessary.arrayUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    preload = imagesUtilities.preload,
    first = arrayUtilities.first;


function create(colourShader, textureShader, canvas, done) {
      var callbacks = [createColourCubeCallback, createTextureCubeCallback],
          context = {
            colourShader: colourShader,
            textureShader: textureShader,
            canvas: canvas
      };

      sequence(callbacks, done, context);
}

module.exports = {
      create: create
};

function createColourCubeCallback(next, done, context) {
      var colourShader = context.colourShader,
          canvas = context.canvas,
          offsetPosition = [-2, 0, 0];


      var vertexPositionData = ColourCube.getVertexPositionData(offsetPosition),
          vertexNormalData = ColourCube.getVertexNormalData(),
          vertexColourData = ColourCube.getVertexColourData(),
          vertexIndexData = ColourCube.getVertexIndexData();

      colourShader.addVertexIndexData(vertexIndexData);

      colourShader.createBuffers(vertexPositionData, vertexNormalData, vertexColourData, canvas);

      next();
}

function createTextureCubeCallback(next, done, context) {
      var textureShader = context.textureShader,
          canvas = context.canvas,
          sources = ['texture/bricks.jpg'];


      preload(sources, function (images) {
            var firstImage = first(images),
                offsetPosition = [+2, 0, 0],
                image = firstImage;

            var vertexPositionData = TextureCube.getVertexPositionData(offsetPosition),
                vertexNormalData = TextureCube.getVertexNormalData(),
                textureCoordinateData = TextureCube.getTextureCoordinateData(),
                vertexIndexData = TextureCube.getVertexIndexData();

            textureShader.addVertexIndexData(vertexIndexData);

            textureShader.createBuffers(vertexPositionData, vertexNormalData, textureCoordinateData, canvas);

            textureShader.createTexture(image, canvas);

            next();
      });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImltYWdlc1V0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwiYXN5bmNocm9ub3VzVXRpbGl0aWVzIiwic2VxdWVuY2UiLCJwcmVsb2FkIiwiZmlyc3QiLCJjcmVhdGUiLCJjb2xvdXJTaGFkZXIiLCJ0ZXh0dXJlU2hhZGVyIiwiY2FudmFzIiwiZG9uZSIsImNhbGxiYWNrcyIsImNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayIsImNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2siLCJjb250ZXh0IiwibW9kdWxlIiwiZXhwb3J0cyIsIm5leHQiLCJvZmZzZXRQb3NpdGlvbiIsInZlcnRleFBvc2l0aW9uRGF0YSIsImdldFZlcnRleFBvc2l0aW9uRGF0YSIsInZlcnRleE5vcm1hbERhdGEiLCJnZXRWZXJ0ZXhOb3JtYWxEYXRhIiwidmVydGV4Q29sb3VyRGF0YSIsImdldFZlcnRleENvbG91ckRhdGEiLCJ2ZXJ0ZXhJbmRleERhdGEiLCJnZXRWZXJ0ZXhJbmRleERhdGEiLCJhZGRWZXJ0ZXhJbmRleERhdGEiLCJjcmVhdGVCdWZmZXJzIiwic291cmNlcyIsImltYWdlcyIsImZpcnN0SW1hZ2UiLCJpbWFnZSIsInRleHR1cmVDb29yZGluYXRlRGF0YSIsImdldFRleHR1cmVDb29yZGluYXRlRGF0YSIsImNyZWF0ZVRleHR1cmUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjs7QUFFQSxJQUFNQyxhQUFhRCxRQUFRLGVBQVIsQ0FBbkI7QUFBQSxJQUNNRSxjQUFjRixRQUFRLGdCQUFSLENBRHBCO0FBQUEsSUFFTUcsa0JBQWtCSCxRQUFRLHdCQUFSLENBRnhCOztJQUlRSSxjLEdBQTBDTCxTLENBQTFDSyxjO0lBQWdCQyxxQixHQUEwQk4sUyxDQUExQk0scUI7SUFDaEJDLFEsR0FBYUQscUIsQ0FBYkMsUTtJQUNBQyxPLEdBQVlKLGUsQ0FBWkksTztJQUNBQyxLLEdBQVVKLGMsQ0FBVkksSzs7O0FBRVIsU0FBU0MsTUFBVCxDQUFnQkMsWUFBaEIsRUFBOEJDLGFBQTlCLEVBQTZDQyxNQUE3QyxFQUFxREMsSUFBckQsRUFBMkQ7QUFDekQsVUFBTUMsWUFBWSxDQUNWQyx3QkFEVSxFQUVWQyx5QkFGVSxDQUFsQjtBQUFBLFVBSU1DLFVBQVU7QUFDUlAsMEJBQWNBLFlBRE47QUFFUkMsMkJBQWVBLGFBRlA7QUFHUkMsb0JBQVFBO0FBSEEsT0FKaEI7O0FBVUFOLGVBQVNRLFNBQVQsRUFBb0JELElBQXBCLEVBQTBCSSxPQUExQjtBQUNEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZWLGNBQVFBO0FBRE8sQ0FBakI7O0FBSUEsU0FBU00sd0JBQVQsQ0FBa0NLLElBQWxDLEVBQXdDUCxJQUF4QyxFQUE4Q0ksT0FBOUMsRUFBdUQ7QUFBQSxVQUM3Q1AsWUFENkMsR0FDcEJPLE9BRG9CLENBQzdDUCxZQUQ2QztBQUFBLFVBQy9CRSxNQUQrQixHQUNwQkssT0FEb0IsQ0FDL0JMLE1BRCtCO0FBQUEsVUFFL0NTLGNBRitDLEdBRTlCLENBQUMsQ0FBQyxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FGOEI7OztBQUlyRCxVQUFNQyxxQkFBcUJyQixXQUFXc0IscUJBQVgsQ0FBaUNGLGNBQWpDLENBQTNCO0FBQUEsVUFDTUcsbUJBQW1CdkIsV0FBV3dCLG1CQUFYLEVBRHpCO0FBQUEsVUFFTUMsbUJBQW1CekIsV0FBVzBCLG1CQUFYLEVBRnpCO0FBQUEsVUFHTUMsa0JBQWtCM0IsV0FBVzRCLGtCQUFYLEVBSHhCOztBQUtBbkIsbUJBQWFvQixrQkFBYixDQUFnQ0YsZUFBaEM7O0FBRUFsQixtQkFBYXFCLGFBQWIsQ0FBMkJULGtCQUEzQixFQUErQ0UsZ0JBQS9DLEVBQWlFRSxnQkFBakUsRUFBbUZkLE1BQW5GOztBQUVBUTtBQUNEOztBQUVELFNBQVNKLHlCQUFULENBQW1DSSxJQUFuQyxFQUF5Q1AsSUFBekMsRUFBK0NJLE9BQS9DLEVBQXdEO0FBQUEsVUFDOUNOLGFBRDhDLEdBQ3BCTSxPQURvQixDQUM5Q04sYUFEOEM7QUFBQSxVQUMvQkMsTUFEK0IsR0FDcEJLLE9BRG9CLENBQy9CTCxNQUQrQjtBQUFBLFVBRWhEb0IsT0FGZ0QsR0FFdEMsQ0FDUixvQkFEUSxDQUZzQzs7O0FBTXREekIsY0FBUXlCLE9BQVIsRUFBaUIsVUFBU0MsTUFBVCxFQUFpQjtBQUNoQyxnQkFBTUMsYUFBYTFCLE1BQU15QixNQUFOLENBQW5CO0FBQUEsZ0JBQ01aLGlCQUFpQixDQUFDLENBQUMsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBRHZCO0FBQUEsZ0JBRU1jLFFBQVFELFVBRmQ7O0FBSUEsZ0JBQU1aLHFCQUFxQnBCLFlBQVlxQixxQkFBWixDQUFrQ0YsY0FBbEMsQ0FBM0I7QUFBQSxnQkFDTUcsbUJBQW1CdEIsWUFBWXVCLG1CQUFaLEVBRHpCO0FBQUEsZ0JBRU1XLHdCQUF3QmxDLFlBQVltQyx3QkFBWixFQUY5QjtBQUFBLGdCQUdNVCxrQkFBa0IxQixZQUFZMkIsa0JBQVosRUFIeEI7O0FBS0FsQiwwQkFBY21CLGtCQUFkLENBQWlDRixlQUFqQzs7QUFFQWpCLDBCQUFjb0IsYUFBZCxDQUE0QlQsa0JBQTVCLEVBQWdERSxnQkFBaEQsRUFBa0VZLHFCQUFsRSxFQUF5RnhCLE1BQXpGOztBQUVBRCwwQkFBYzJCLGFBQWQsQ0FBNEJILEtBQTVCLEVBQW1DdkIsTUFBbkM7O0FBRUFRO0FBQ0QsT0FqQkQ7QUFrQkQiLCJmaWxlIjoiY3ViZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCBDb2xvdXJDdWJlID0gcmVxdWlyZSgnLi9jdWJlL2NvbG91cicpLFxuICAgICAgVGV4dHVyZUN1YmUgPSByZXF1aXJlKCcuL2N1YmUvdGV4dHVyZScpLFxuICAgICAgaW1hZ2VzVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL2ltYWdlcycpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzLCBhc3luY2hyb25vdXNVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgc2VxdWVuY2UgfSA9IGFzeW5jaHJvbm91c1V0aWxpdGllcyxcbiAgICAgIHsgcHJlbG9hZCB9ID0gaW1hZ2VzVXRpbGl0aWVzLFxuICAgICAgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGNyZWF0ZShjb2xvdXJTaGFkZXIsIHRleHR1cmVTaGFkZXIsIGNhbnZhcywgZG9uZSkge1xuICBjb25zdCBjYWxsYmFja3MgPSBbXG4gICAgICAgICAgY3JlYXRlQ29sb3VyQ3ViZUNhbGxiYWNrLFxuICAgICAgICAgIGNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2tcbiAgICAgICAgXSxcbiAgICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgICBjb2xvdXJTaGFkZXI6IGNvbG91clNoYWRlcixcbiAgICAgICAgICB0ZXh0dXJlU2hhZGVyOiB0ZXh0dXJlU2hhZGVyLFxuICAgICAgICAgIGNhbnZhczogY2FudmFzXG4gICAgICAgIH07XG5cbiAgc2VxdWVuY2UoY2FsbGJhY2tzLCBkb25lLCBjb250ZXh0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogY3JlYXRlXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVDb2xvdXJDdWJlQ2FsbGJhY2sobmV4dCwgZG9uZSwgY29udGV4dCkge1xuICBjb25zdCB7IGNvbG91clNoYWRlciwgY2FudmFzIH0gPSBjb250ZXh0LFxuICAgICAgICBvZmZzZXRQb3NpdGlvbiA9IFstMiwgMCwgMF07XG5cbiAgY29uc3QgdmVydGV4UG9zaXRpb25EYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhQb3NpdGlvbkRhdGEob2Zmc2V0UG9zaXRpb24pLFxuICAgICAgICB2ZXJ0ZXhOb3JtYWxEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhOb3JtYWxEYXRhKCksXG4gICAgICAgIHZlcnRleENvbG91ckRhdGEgPSBDb2xvdXJDdWJlLmdldFZlcnRleENvbG91ckRhdGEoKSxcbiAgICAgICAgdmVydGV4SW5kZXhEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhJbmRleERhdGEoKTtcblxuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4SW5kZXhEYXRhKHZlcnRleEluZGV4RGF0YSk7XG5cbiAgY29sb3VyU2hhZGVyLmNyZWF0ZUJ1ZmZlcnModmVydGV4UG9zaXRpb25EYXRhLCB2ZXJ0ZXhOb3JtYWxEYXRhLCB2ZXJ0ZXhDb2xvdXJEYXRhLCBjYW52YXMpO1xuXG4gIG5leHQoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dHVyZUN1YmVDYWxsYmFjayhuZXh0LCBkb25lLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgdGV4dHVyZVNoYWRlciwgY2FudmFzIH0gPSBjb250ZXh0LFxuICAgICAgICBzb3VyY2VzID0gW1xuICAgICAgICAgICd0ZXh0dXJlL2JyaWNrcy5qcGcnXG4gICAgICAgIF07XG5cbiAgcHJlbG9hZChzb3VyY2VzLCBmdW5jdGlvbihpbWFnZXMpIHtcbiAgICBjb25zdCBmaXJzdEltYWdlID0gZmlyc3QoaW1hZ2VzKSxcbiAgICAgICAgICBvZmZzZXRQb3NpdGlvbiA9IFsrMiwgMCwgMF0sXG4gICAgICAgICAgaW1hZ2UgPSBmaXJzdEltYWdlO1xuXG4gICAgY29uc3QgdmVydGV4UG9zaXRpb25EYXRhID0gVGV4dHVyZUN1YmUuZ2V0VmVydGV4UG9zaXRpb25EYXRhKG9mZnNldFBvc2l0aW9uKSxcbiAgICAgICAgICB2ZXJ0ZXhOb3JtYWxEYXRhID0gVGV4dHVyZUN1YmUuZ2V0VmVydGV4Tm9ybWFsRGF0YSgpLFxuICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlRGF0YSA9IFRleHR1cmVDdWJlLmdldFRleHR1cmVDb29yZGluYXRlRGF0YSgpLFxuICAgICAgICAgIHZlcnRleEluZGV4RGF0YSA9IFRleHR1cmVDdWJlLmdldFZlcnRleEluZGV4RGF0YSgpO1xuXG4gICAgdGV4dHVyZVNoYWRlci5hZGRWZXJ0ZXhJbmRleERhdGEodmVydGV4SW5kZXhEYXRhKTtcblxuICAgIHRleHR1cmVTaGFkZXIuY3JlYXRlQnVmZmVycyh2ZXJ0ZXhQb3NpdGlvbkRhdGEsIHZlcnRleE5vcm1hbERhdGEsIHRleHR1cmVDb29yZGluYXRlRGF0YSwgY2FudmFzKTtcblxuICAgIHRleHR1cmVTaGFkZXIuY3JlYXRlVGV4dHVyZShpbWFnZSwgY2FudmFzKTtcblxuICAgIG5leHQoKTtcbiAgfSk7XG59XG4iXX0=