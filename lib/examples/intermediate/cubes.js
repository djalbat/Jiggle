'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imagesUtilities = require('../../utilities/images');

var arrayUtilities = necessary.arrayUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    preload = imagesUtilities.preload,
    first = arrayUtilities.first;


function create(colourShader, textureShader, canvas, done) {
      var callbacks = [createColourCubeCallback, createTextureCubeCallback],
          context = {
            colourShader: colourShader,
            textureShader: textureShader,
            canvas: canvas
      };

      sequence(callbacks, done, context);
}

module.exports = {
      create: create
};

function createColourCubeCallback(next, done, context) {
      var colourShader = context.colourShader,
          canvas = context.canvas,
          offsetPosition = [-2, 0, 0];


      var offsetVertexPositionData = ColourCube.getOffsetVertexPositionData(offsetPosition),
          vertexNormalData = ColourCube.getVertexNormalData(),
          vertexColourData = ColourCube.getVertexColourData(),
          vertexIndexData = ColourCube.getVertexIndexData();

      colourShader.createBuffers(offsetVertexPositionData, vertexNormalData, vertexColourData, vertexIndexData, canvas);

      next();
}

function createTextureCubeCallback(next, done, context) {
      var textureShader = context.textureShader,
          canvas = context.canvas,
          sources = ['texture/bricks.jpg'];


      preload(sources, function (images) {
            var firstImage = first(images),
                offsetPosition = [+2, 0, 0],
                image = firstImage;

            var offsetVertexPositionData = TextureCube.getOffsetVertexPositionData(offsetPosition),
                vertexNormalData = TextureCube.getVertexNormalData(),
                textureCoordinateData = TextureCube.getTextureCoordinateData(),
                vertexIndexData = TextureCube.getVertexIndexData();

            textureShader.createBuffers(offsetVertexPositionData, vertexNormalData, textureCoordinateData, vertexIndexData, canvas);

            textureShader.createTexture(image, canvas);

            next();
      });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImltYWdlc1V0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwiYXN5bmNocm9ub3VzVXRpbGl0aWVzIiwic2VxdWVuY2UiLCJwcmVsb2FkIiwiZmlyc3QiLCJjcmVhdGUiLCJjb2xvdXJTaGFkZXIiLCJ0ZXh0dXJlU2hhZGVyIiwiY2FudmFzIiwiZG9uZSIsImNhbGxiYWNrcyIsImNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayIsImNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2siLCJjb250ZXh0IiwibW9kdWxlIiwiZXhwb3J0cyIsIm5leHQiLCJvZmZzZXRQb3NpdGlvbiIsIm9mZnNldFZlcnRleFBvc2l0aW9uRGF0YSIsImdldE9mZnNldFZlcnRleFBvc2l0aW9uRGF0YSIsInZlcnRleE5vcm1hbERhdGEiLCJnZXRWZXJ0ZXhOb3JtYWxEYXRhIiwidmVydGV4Q29sb3VyRGF0YSIsImdldFZlcnRleENvbG91ckRhdGEiLCJ2ZXJ0ZXhJbmRleERhdGEiLCJnZXRWZXJ0ZXhJbmRleERhdGEiLCJjcmVhdGVCdWZmZXJzIiwic291cmNlcyIsImltYWdlcyIsImZpcnN0SW1hZ2UiLCJpbWFnZSIsInRleHR1cmVDb29yZGluYXRlRGF0YSIsImdldFRleHR1cmVDb29yZGluYXRlRGF0YSIsImNyZWF0ZVRleHR1cmUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjs7QUFFQSxJQUFNQyxhQUFhRCxRQUFRLGVBQVIsQ0FBbkI7QUFBQSxJQUNNRSxjQUFjRixRQUFRLGdCQUFSLENBRHBCO0FBQUEsSUFFTUcsa0JBQWtCSCxRQUFRLHdCQUFSLENBRnhCOztJQUlRSSxjLEdBQTBDTCxTLENBQTFDSyxjO0lBQWdCQyxxQixHQUEwQk4sUyxDQUExQk0scUI7SUFDaEJDLFEsR0FBYUQscUIsQ0FBYkMsUTtJQUNBQyxPLEdBQVlKLGUsQ0FBWkksTztJQUNBQyxLLEdBQVVKLGMsQ0FBVkksSzs7O0FBRVIsU0FBU0MsTUFBVCxDQUFnQkMsWUFBaEIsRUFBOEJDLGFBQTlCLEVBQTZDQyxNQUE3QyxFQUFxREMsSUFBckQsRUFBMkQ7QUFDekQsVUFBTUMsWUFBWSxDQUNWQyx3QkFEVSxFQUVWQyx5QkFGVSxDQUFsQjtBQUFBLFVBSU1DLFVBQVU7QUFDUlAsMEJBQWNBLFlBRE47QUFFUkMsMkJBQWVBLGFBRlA7QUFHUkMsb0JBQVFBO0FBSEEsT0FKaEI7O0FBVUFOLGVBQVNRLFNBQVQsRUFBb0JELElBQXBCLEVBQTBCSSxPQUExQjtBQUNEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZWLGNBQVFBO0FBRE8sQ0FBakI7O0FBSUEsU0FBU00sd0JBQVQsQ0FBa0NLLElBQWxDLEVBQXdDUCxJQUF4QyxFQUE4Q0ksT0FBOUMsRUFBdUQ7QUFBQSxVQUM3Q1AsWUFENkMsR0FDcEJPLE9BRG9CLENBQzdDUCxZQUQ2QztBQUFBLFVBQy9CRSxNQUQrQixHQUNwQkssT0FEb0IsQ0FDL0JMLE1BRCtCO0FBQUEsVUFFL0NTLGNBRitDLEdBRTlCLENBQUMsQ0FBQyxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FGOEI7OztBQUlyRCxVQUFNQywyQkFBMkJyQixXQUFXc0IsMkJBQVgsQ0FBdUNGLGNBQXZDLENBQWpDO0FBQUEsVUFDTUcsbUJBQW1CdkIsV0FBV3dCLG1CQUFYLEVBRHpCO0FBQUEsVUFFTUMsbUJBQW1CekIsV0FBVzBCLG1CQUFYLEVBRnpCO0FBQUEsVUFHTUMsa0JBQWtCM0IsV0FBVzRCLGtCQUFYLEVBSHhCOztBQUtBbkIsbUJBQWFvQixhQUFiLENBQTJCUix3QkFBM0IsRUFBcURFLGdCQUFyRCxFQUF1RUUsZ0JBQXZFLEVBQXlGRSxlQUF6RixFQUEwR2hCLE1BQTFHOztBQUVBUTtBQUNEOztBQUVELFNBQVNKLHlCQUFULENBQW1DSSxJQUFuQyxFQUF5Q1AsSUFBekMsRUFBK0NJLE9BQS9DLEVBQXdEO0FBQUEsVUFDOUNOLGFBRDhDLEdBQ3BCTSxPQURvQixDQUM5Q04sYUFEOEM7QUFBQSxVQUMvQkMsTUFEK0IsR0FDcEJLLE9BRG9CLENBQy9CTCxNQUQrQjtBQUFBLFVBRWhEbUIsT0FGZ0QsR0FFdEMsQ0FDUixvQkFEUSxDQUZzQzs7O0FBTXREeEIsY0FBUXdCLE9BQVIsRUFBaUIsVUFBU0MsTUFBVCxFQUFpQjtBQUNoQyxnQkFBTUMsYUFBYXpCLE1BQU13QixNQUFOLENBQW5CO0FBQUEsZ0JBQ01YLGlCQUFpQixDQUFDLENBQUMsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBRHZCO0FBQUEsZ0JBRU1hLFFBQVFELFVBRmQ7O0FBSUEsZ0JBQU1YLDJCQUEyQnBCLFlBQVlxQiwyQkFBWixDQUF3Q0YsY0FBeEMsQ0FBakM7QUFBQSxnQkFDTUcsbUJBQW1CdEIsWUFBWXVCLG1CQUFaLEVBRHpCO0FBQUEsZ0JBRU1VLHdCQUF3QmpDLFlBQVlrQyx3QkFBWixFQUY5QjtBQUFBLGdCQUdNUixrQkFBa0IxQixZQUFZMkIsa0JBQVosRUFIeEI7O0FBS0FsQiwwQkFBY21CLGFBQWQsQ0FBNEJSLHdCQUE1QixFQUFzREUsZ0JBQXRELEVBQXdFVyxxQkFBeEUsRUFBK0ZQLGVBQS9GLEVBQWdIaEIsTUFBaEg7O0FBRUFELDBCQUFjMEIsYUFBZCxDQUE0QkgsS0FBNUIsRUFBbUN0QixNQUFuQzs7QUFFQVE7QUFDRCxPQWZEO0FBZ0JEIiwiZmlsZSI6ImN1YmVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgQ29sb3VyQ3ViZSA9IHJlcXVpcmUoJy4vY3ViZS9jb2xvdXInKSxcbiAgICAgIFRleHR1cmVDdWJlID0gcmVxdWlyZSgnLi9jdWJlL3RleHR1cmUnKSxcbiAgICAgIGltYWdlc1V0aWxpdGllcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy9pbWFnZXMnKTtcblxuY29uc3QgeyBhcnJheVV0aWxpdGllcywgYXN5bmNocm9ub3VzVXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IHNlcXVlbmNlIH0gPSBhc3luY2hyb25vdXNVdGlsaXRpZXMsXG4gICAgICB7IHByZWxvYWQgfSA9IGltYWdlc1V0aWxpdGllcyxcbiAgICAgIHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBjcmVhdGUoY29sb3VyU2hhZGVyLCB0ZXh0dXJlU2hhZGVyLCBjYW52YXMsIGRvbmUpIHtcbiAgY29uc3QgY2FsbGJhY2tzID0gW1xuICAgICAgICAgIGNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayxcbiAgICAgICAgICBjcmVhdGVUZXh0dXJlQ3ViZUNhbGxiYWNrXG4gICAgICAgIF0sXG4gICAgICAgIGNvbnRleHQgPSB7XG4gICAgICAgICAgY29sb3VyU2hhZGVyOiBjb2xvdXJTaGFkZXIsXG4gICAgICAgICAgdGV4dHVyZVNoYWRlcjogdGV4dHVyZVNoYWRlcixcbiAgICAgICAgICBjYW52YXM6IGNhbnZhc1xuICAgICAgICB9O1xuXG4gIHNlcXVlbmNlKGNhbGxiYWNrcywgZG9uZSwgY29udGV4dCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IGNyZWF0ZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlQ29sb3VyQ3ViZUNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBjb2xvdXJTaGFkZXIsIGNhbnZhcyB9ID0gY29udGV4dCxcbiAgICAgICAgb2Zmc2V0UG9zaXRpb24gPSBbLTIsIDAsIDBdO1xuXG4gIGNvbnN0IG9mZnNldFZlcnRleFBvc2l0aW9uRGF0YSA9IENvbG91ckN1YmUuZ2V0T2Zmc2V0VmVydGV4UG9zaXRpb25EYXRhKG9mZnNldFBvc2l0aW9uKSxcbiAgICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4Tm9ybWFsRGF0YSgpLFxuICAgICAgICB2ZXJ0ZXhDb2xvdXJEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhDb2xvdXJEYXRhKCksXG4gICAgICAgIHZlcnRleEluZGV4RGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4SW5kZXhEYXRhKCk7XG5cbiAgY29sb3VyU2hhZGVyLmNyZWF0ZUJ1ZmZlcnMob2Zmc2V0VmVydGV4UG9zaXRpb25EYXRhLCB2ZXJ0ZXhOb3JtYWxEYXRhLCB2ZXJ0ZXhDb2xvdXJEYXRhLCB2ZXJ0ZXhJbmRleERhdGEsIGNhbnZhcyk7XG5cbiAgbmV4dCgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0dXJlQ3ViZUNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyB0ZXh0dXJlU2hhZGVyLCBjYW52YXMgfSA9IGNvbnRleHQsXG4gICAgICAgIHNvdXJjZXMgPSBbXG4gICAgICAgICAgJ3RleHR1cmUvYnJpY2tzLmpwZydcbiAgICAgICAgXTtcblxuICBwcmVsb2FkKHNvdXJjZXMsIGZ1bmN0aW9uKGltYWdlcykge1xuICAgIGNvbnN0IGZpcnN0SW1hZ2UgPSBmaXJzdChpbWFnZXMpLFxuICAgICAgICAgIG9mZnNldFBvc2l0aW9uID0gWysyLCAwLCAwXSxcbiAgICAgICAgICBpbWFnZSA9IGZpcnN0SW1hZ2U7XG5cbiAgICBjb25zdCBvZmZzZXRWZXJ0ZXhQb3NpdGlvbkRhdGEgPSBUZXh0dXJlQ3ViZS5nZXRPZmZzZXRWZXJ0ZXhQb3NpdGlvbkRhdGEob2Zmc2V0UG9zaXRpb24pLFxuICAgICAgICAgIHZlcnRleE5vcm1hbERhdGEgPSBUZXh0dXJlQ3ViZS5nZXRWZXJ0ZXhOb3JtYWxEYXRhKCksXG4gICAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVEYXRhID0gVGV4dHVyZUN1YmUuZ2V0VGV4dHVyZUNvb3JkaW5hdGVEYXRhKCksXG4gICAgICAgICAgdmVydGV4SW5kZXhEYXRhID0gVGV4dHVyZUN1YmUuZ2V0VmVydGV4SW5kZXhEYXRhKCk7XG5cbiAgICB0ZXh0dXJlU2hhZGVyLmNyZWF0ZUJ1ZmZlcnMob2Zmc2V0VmVydGV4UG9zaXRpb25EYXRhLCB2ZXJ0ZXhOb3JtYWxEYXRhLCB0ZXh0dXJlQ29vcmRpbmF0ZURhdGEsIHZlcnRleEluZGV4RGF0YSwgY2FudmFzKVxuXG4gICAgdGV4dHVyZVNoYWRlci5jcmVhdGVUZXh0dXJlKGltYWdlLCBjYW52YXMpO1xuXG4gICAgbmV4dCgpO1xuICB9KTtcbn1cbiJdfQ==