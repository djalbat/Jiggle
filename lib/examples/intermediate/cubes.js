'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imageUtilities = require('../../utilities/image');

var asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    preloadImage = imageUtilities.preloadImage;


function create(colourShader, textureShader, canvas, done) {
  var source = ['imageMap'];

  preloadImage(source, function (image) {
    var callbacks = [createColourCubeCallback, createTextureCubeCallback],
        context = {
      colourShader: colourShader,
      textureShader: textureShader
    };

    textureShader.createTexture(image, canvas);

    sequence(callbacks, done, context);
  });
}

module.exports = {
  create: create
};

function createColourCubeCallback(next, done, context) {
  var colourShader = context.colourShader,
      offsetPosition = [+2, +2, +2];


  var vertexPositionData = ColourCube.getVertexPositionData(offsetPosition),
      vertexNormalData = ColourCube.getVertexNormalData(),
      vertexIndexData = ColourCube.getVertexIndexData(),
      vertexColourData = ColourCube.getVertexColourData();

  colourShader.addVertexPositionData(vertexPositionData);
  colourShader.addVertexNormalData(vertexNormalData);
  colourShader.addVertexIndexData(vertexIndexData);
  colourShader.addVertexColourData(vertexColourData);

  next();
}

function createTextureCubeCallback(next, done, context) {
  var textureShader = context.textureShader,
      canvas = context.canvas,
      offsetPosition = [0, 0, 0];


  var vertexPositionData = TextureCube.getVertexPositionData(offsetPosition),
      vertexNormalData = TextureCube.getVertexNormalData(),
      vertexIndexData = TextureCube.getVertexIndexData(),
      textureCoordinateData = TextureCube.getTextureCoordinateData();

  textureShader.addVertexPositionData(vertexPositionData);
  textureShader.addVertexNormalData(vertexNormalData);
  textureShader.addVertexIndexData(vertexIndexData);
  textureShader.addTextureCoordinateData(textureCoordinateData);

  next();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImltYWdlVXRpbGl0aWVzIiwiYXN5bmNocm9ub3VzVXRpbGl0aWVzIiwic2VxdWVuY2UiLCJwcmVsb2FkSW1hZ2UiLCJjcmVhdGUiLCJjb2xvdXJTaGFkZXIiLCJ0ZXh0dXJlU2hhZGVyIiwiY2FudmFzIiwiZG9uZSIsInNvdXJjZSIsImltYWdlIiwiY2FsbGJhY2tzIiwiY3JlYXRlQ29sb3VyQ3ViZUNhbGxiYWNrIiwiY3JlYXRlVGV4dHVyZUN1YmVDYWxsYmFjayIsImNvbnRleHQiLCJjcmVhdGVUZXh0dXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm5leHQiLCJvZmZzZXRQb3NpdGlvbiIsInZlcnRleFBvc2l0aW9uRGF0YSIsImdldFZlcnRleFBvc2l0aW9uRGF0YSIsInZlcnRleE5vcm1hbERhdGEiLCJnZXRWZXJ0ZXhOb3JtYWxEYXRhIiwidmVydGV4SW5kZXhEYXRhIiwiZ2V0VmVydGV4SW5kZXhEYXRhIiwidmVydGV4Q29sb3VyRGF0YSIsImdldFZlcnRleENvbG91ckRhdGEiLCJhZGRWZXJ0ZXhQb3NpdGlvbkRhdGEiLCJhZGRWZXJ0ZXhOb3JtYWxEYXRhIiwiYWRkVmVydGV4SW5kZXhEYXRhIiwiYWRkVmVydGV4Q29sb3VyRGF0YSIsInRleHR1cmVDb29yZGluYXRlRGF0YSIsImdldFRleHR1cmVDb29yZGluYXRlRGF0YSIsImFkZFRleHR1cmVDb29yZGluYXRlRGF0YSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxXQUFSLENBQWxCOztBQUVBLElBQU1DLGFBQWFELFFBQVEsZUFBUixDQUFuQjtBQUFBLElBQ01FLGNBQWNGLFFBQVEsZ0JBQVIsQ0FEcEI7QUFBQSxJQUVNRyxpQkFBaUJILFFBQVEsdUJBQVIsQ0FGdkI7O0FBSU0sSUFBRUkscUJBQUYsR0FBNEJMLFNBQTVCLENBQUVLLHFCQUFGO0FBQUEsSUFDRUMsUUFERixHQUNlRCxxQkFEZixDQUNFQyxRQURGO0FBQUEsSUFFRUMsWUFGRixHQUVtQkgsY0FGbkIsQ0FFRUcsWUFGRjs7O0FBSU4sU0FBU0MsTUFBVCxDQUFnQkMsWUFBaEIsRUFBOEJDLGFBQTlCLEVBQTZDQyxNQUE3QyxFQUFxREMsSUFBckQsRUFBMkQ7QUFDekQsTUFBTUMsU0FBUyxDQUNiLFVBRGEsQ0FBZjs7QUFJQU4sZUFBYU0sTUFBYixFQUFxQixVQUFTQyxLQUFULEVBQWdCO0FBQ25DLFFBQU1DLFlBQVksQ0FDVkMsd0JBRFUsRUFFVkMseUJBRlUsQ0FBbEI7QUFBQSxRQUlNQyxVQUFVO0FBQ1JULG9CQUFjQSxZQUROO0FBRVJDLHFCQUFlQTtBQUZQLEtBSmhCOztBQVNBQSxrQkFBY1MsYUFBZCxDQUE0QkwsS0FBNUIsRUFBbUNILE1BQW5DOztBQUVBTCxhQUFTUyxTQUFULEVBQW9CSCxJQUFwQixFQUEwQk0sT0FBMUI7QUFDRCxHQWJEO0FBY0Q7O0FBRURFLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmIsVUFBUUE7QUFETyxDQUFqQjs7QUFJQSxTQUFTUSx3QkFBVCxDQUFrQ00sSUFBbEMsRUFBd0NWLElBQXhDLEVBQThDTSxPQUE5QyxFQUF1RDtBQUMvQyxNQUFFVCxZQUFGLEdBQW1CUyxPQUFuQixDQUFFVCxZQUFGO0FBQUEsTUFDQWMsY0FEQSxHQUNpQixDQUFDLENBQUMsQ0FBRixFQUFLLENBQUMsQ0FBTixFQUFTLENBQUMsQ0FBVixDQURqQjs7O0FBR04sTUFBTUMscUJBQXFCdEIsV0FBV3VCLHFCQUFYLENBQWlDRixjQUFqQyxDQUEzQjtBQUFBLE1BQ01HLG1CQUFtQnhCLFdBQVd5QixtQkFBWCxFQUR6QjtBQUFBLE1BRU1DLGtCQUFrQjFCLFdBQVcyQixrQkFBWCxFQUZ4QjtBQUFBLE1BR01DLG1CQUFtQjVCLFdBQVc2QixtQkFBWCxFQUh6Qjs7QUFLQXRCLGVBQWF1QixxQkFBYixDQUFtQ1Isa0JBQW5DO0FBQ0FmLGVBQWF3QixtQkFBYixDQUFpQ1AsZ0JBQWpDO0FBQ0FqQixlQUFheUIsa0JBQWIsQ0FBZ0NOLGVBQWhDO0FBQ0FuQixlQUFhMEIsbUJBQWIsQ0FBaUNMLGdCQUFqQzs7QUFFQVI7QUFDRDs7QUFFRCxTQUFTTCx5QkFBVCxDQUFtQ0ssSUFBbkMsRUFBeUNWLElBQXpDLEVBQStDTSxPQUEvQyxFQUF3RDtBQUFBLE1BQzlDUixhQUQ4QyxHQUNwQlEsT0FEb0IsQ0FDOUNSLGFBRDhDO0FBQUEsTUFDL0JDLE1BRCtCLEdBQ3BCTyxPQURvQixDQUMvQlAsTUFEK0I7QUFBQSxNQUVoRFksY0FGZ0QsR0FFL0IsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FGK0I7OztBQUl0RCxNQUFNQyxxQkFBcUJyQixZQUFZc0IscUJBQVosQ0FBa0NGLGNBQWxDLENBQTNCO0FBQUEsTUFDTUcsbUJBQW1CdkIsWUFBWXdCLG1CQUFaLEVBRHpCO0FBQUEsTUFFTUMsa0JBQWtCekIsWUFBWTBCLGtCQUFaLEVBRnhCO0FBQUEsTUFHTU8sd0JBQXdCakMsWUFBWWtDLHdCQUFaLEVBSDlCOztBQUtBM0IsZ0JBQWNzQixxQkFBZCxDQUFvQ1Isa0JBQXBDO0FBQ0FkLGdCQUFjdUIsbUJBQWQsQ0FBa0NQLGdCQUFsQztBQUNBaEIsZ0JBQWN3QixrQkFBZCxDQUFpQ04sZUFBakM7QUFDQWxCLGdCQUFjNEIsd0JBQWQsQ0FBdUNGLHFCQUF2Qzs7QUFFQWQ7QUFDRCIsImZpbGUiOiJjdWJlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IENvbG91ckN1YmUgPSByZXF1aXJlKCcuL2N1YmUvY29sb3VyJyksXG4gICAgICBUZXh0dXJlQ3ViZSA9IHJlcXVpcmUoJy4vY3ViZS90ZXh0dXJlJyksXG4gICAgICBpbWFnZVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy9pbWFnZScpO1xuXG5jb25zdCB7IGFzeW5jaHJvbm91c1V0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBzZXF1ZW5jZSB9ID0gYXN5bmNocm9ub3VzVXRpbGl0aWVzLFxuICAgICAgeyBwcmVsb2FkSW1hZ2UgfSA9IGltYWdlVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBjcmVhdGUoY29sb3VyU2hhZGVyLCB0ZXh0dXJlU2hhZGVyLCBjYW52YXMsIGRvbmUpIHtcbiAgY29uc3Qgc291cmNlID0gW1xuICAgICdpbWFnZU1hcCdcbiAgXTtcblxuICBwcmVsb2FkSW1hZ2Uoc291cmNlLCBmdW5jdGlvbihpbWFnZSkge1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IFtcbiAgICAgICAgICAgIGNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayxcbiAgICAgICAgICAgIGNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2tcbiAgICAgICAgICBdLFxuICAgICAgICAgIGNvbnRleHQgPSB7XG4gICAgICAgICAgICBjb2xvdXJTaGFkZXI6IGNvbG91clNoYWRlcixcbiAgICAgICAgICAgIHRleHR1cmVTaGFkZXI6IHRleHR1cmVTaGFkZXJcbiAgICAgICAgICB9O1xuXG4gICAgdGV4dHVyZVNoYWRlci5jcmVhdGVUZXh0dXJlKGltYWdlLCBjYW52YXMpO1xuXG4gICAgc2VxdWVuY2UoY2FsbGJhY2tzLCBkb25lLCBjb250ZXh0KTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IGNyZWF0ZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlQ29sb3VyQ3ViZUNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBjb2xvdXJTaGFkZXIgfSA9IGNvbnRleHQsXG4gICAgICAgIG9mZnNldFBvc2l0aW9uID0gWysyLCArMiwgKzJdO1xuXG4gIGNvbnN0IHZlcnRleFBvc2l0aW9uRGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4UG9zaXRpb25EYXRhKG9mZnNldFBvc2l0aW9uKSxcbiAgICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4Tm9ybWFsRGF0YSgpLFxuICAgICAgICB2ZXJ0ZXhJbmRleERhdGEgPSBDb2xvdXJDdWJlLmdldFZlcnRleEluZGV4RGF0YSgpLFxuICAgICAgICB2ZXJ0ZXhDb2xvdXJEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhDb2xvdXJEYXRhKCk7XG5cbiAgY29sb3VyU2hhZGVyLmFkZFZlcnRleFBvc2l0aW9uRGF0YSh2ZXJ0ZXhQb3NpdGlvbkRhdGEpO1xuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4Tm9ybWFsRGF0YSh2ZXJ0ZXhOb3JtYWxEYXRhKTtcbiAgY29sb3VyU2hhZGVyLmFkZFZlcnRleEluZGV4RGF0YSh2ZXJ0ZXhJbmRleERhdGEpO1xuICBjb2xvdXJTaGFkZXIuYWRkVmVydGV4Q29sb3VyRGF0YSh2ZXJ0ZXhDb2xvdXJEYXRhKTtcblxuICBuZXh0KCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2sobmV4dCwgZG9uZSwgY29udGV4dCkge1xuICBjb25zdCB7IHRleHR1cmVTaGFkZXIsIGNhbnZhcyB9ID0gY29udGV4dCxcbiAgICAgICAgb2Zmc2V0UG9zaXRpb24gPSBbMCwgMCwgMF07XG5cbiAgY29uc3QgdmVydGV4UG9zaXRpb25EYXRhID0gVGV4dHVyZUN1YmUuZ2V0VmVydGV4UG9zaXRpb25EYXRhKG9mZnNldFBvc2l0aW9uKSxcbiAgICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IFRleHR1cmVDdWJlLmdldFZlcnRleE5vcm1hbERhdGEoKSxcbiAgICAgICAgdmVydGV4SW5kZXhEYXRhID0gVGV4dHVyZUN1YmUuZ2V0VmVydGV4SW5kZXhEYXRhKCksXG4gICAgICAgIHRleHR1cmVDb29yZGluYXRlRGF0YSA9IFRleHR1cmVDdWJlLmdldFRleHR1cmVDb29yZGluYXRlRGF0YSgpO1xuXG4gIHRleHR1cmVTaGFkZXIuYWRkVmVydGV4UG9zaXRpb25EYXRhKHZlcnRleFBvc2l0aW9uRGF0YSk7XG4gIHRleHR1cmVTaGFkZXIuYWRkVmVydGV4Tm9ybWFsRGF0YSh2ZXJ0ZXhOb3JtYWxEYXRhKTtcbiAgdGV4dHVyZVNoYWRlci5hZGRWZXJ0ZXhJbmRleERhdGEodmVydGV4SW5kZXhEYXRhKTtcbiAgdGV4dHVyZVNoYWRlci5hZGRUZXh0dXJlQ29vcmRpbmF0ZURhdGEodGV4dHVyZUNvb3JkaW5hdGVEYXRhKTtcblxuICBuZXh0KCk7XG59XG4iXX0=