'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imagesUtilities = require('../../utilities/images');

var arrayUtilities = necessary.arrayUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    preload = imagesUtilities.preload,
    first = arrayUtilities.first;


function create(colourShader, textureShader, canvas, done) {
      var callbacks = [createColourCubeCallback, createTextureCubeCallback],
          context = {
            colourShader: colourShader,
            textureShader: textureShader,
            canvas: canvas
      };

      sequence(callbacks, done, context);
}

module.exports = {
      create: create
};

function createColourCubeCallback(next, done, context) {
      var colourShader = context.colourShader,
          canvas = context.canvas,
          offsetPosition = [-2, 0, 0];


      var vertexPositionData = ColourCube.getVertexPositionData(offsetPosition),
          vertexNormalData = ColourCube.getVertexNormalData(),
          vertexIndexData = ColourCube.getVertexIndexData(),
          vertexColourData = ColourCube.getVertexColourData();

      colourShader.addVertexPositionData(vertexPositionData);
      colourShader.addVertexNormalData(vertexNormalData);
      colourShader.addVertexIndexData(vertexIndexData);
      colourShader.addVertexColourData(vertexColourData);

      colourShader.createBuffers(canvas);

      next();
}

function createTextureCubeCallback(next, done, context) {
      var textureShader = context.textureShader,
          canvas = context.canvas,
          sources = ['texture/bricks.jpg'];


      preload(sources, function (images) {
            var firstImage = first(images),
                offsetPosition = [+2, 0, 0],
                image = firstImage;

            var vertexPositionData = TextureCube.getVertexPositionData(offsetPosition),
                vertexNormalData = TextureCube.getVertexNormalData(),
                textureCoordinateData = TextureCube.getTextureCoordinateData(),
                vertexIndexData = TextureCube.getVertexIndexData();

            textureShader.addVertexPositionData(vertexPositionData);
            textureShader.addVertexNormalData(vertexNormalData);
            textureShader.addVertexIndexData(vertexIndexData);

            textureShader.createBuffers(textureCoordinateData, canvas);

            textureShader.createTexture(image, canvas);

            next();
      });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9pbnRlcm1lZGlhdGUvY3ViZXMuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIkNvbG91ckN1YmUiLCJUZXh0dXJlQ3ViZSIsImltYWdlc1V0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwiYXN5bmNocm9ub3VzVXRpbGl0aWVzIiwic2VxdWVuY2UiLCJwcmVsb2FkIiwiZmlyc3QiLCJjcmVhdGUiLCJjb2xvdXJTaGFkZXIiLCJ0ZXh0dXJlU2hhZGVyIiwiY2FudmFzIiwiZG9uZSIsImNhbGxiYWNrcyIsImNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayIsImNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2siLCJjb250ZXh0IiwibW9kdWxlIiwiZXhwb3J0cyIsIm5leHQiLCJvZmZzZXRQb3NpdGlvbiIsInZlcnRleFBvc2l0aW9uRGF0YSIsImdldFZlcnRleFBvc2l0aW9uRGF0YSIsInZlcnRleE5vcm1hbERhdGEiLCJnZXRWZXJ0ZXhOb3JtYWxEYXRhIiwidmVydGV4SW5kZXhEYXRhIiwiZ2V0VmVydGV4SW5kZXhEYXRhIiwidmVydGV4Q29sb3VyRGF0YSIsImdldFZlcnRleENvbG91ckRhdGEiLCJhZGRWZXJ0ZXhQb3NpdGlvbkRhdGEiLCJhZGRWZXJ0ZXhOb3JtYWxEYXRhIiwiYWRkVmVydGV4SW5kZXhEYXRhIiwiYWRkVmVydGV4Q29sb3VyRGF0YSIsImNyZWF0ZUJ1ZmZlcnMiLCJzb3VyY2VzIiwiaW1hZ2VzIiwiZmlyc3RJbWFnZSIsImltYWdlIiwidGV4dHVyZUNvb3JkaW5hdGVEYXRhIiwiZ2V0VGV4dHVyZUNvb3JkaW5hdGVEYXRhIiwiY3JlYXRlVGV4dHVyZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxXQUFSLENBQWxCOztBQUVBLElBQU1DLGFBQWFELFFBQVEsZUFBUixDQUFuQjtBQUFBLElBQ01FLGNBQWNGLFFBQVEsZ0JBQVIsQ0FEcEI7QUFBQSxJQUVNRyxrQkFBa0JILFFBQVEsd0JBQVIsQ0FGeEI7O0lBSVFJLGMsR0FBMENMLFMsQ0FBMUNLLGM7SUFBZ0JDLHFCLEdBQTBCTixTLENBQTFCTSxxQjtJQUNoQkMsUSxHQUFhRCxxQixDQUFiQyxRO0lBQ0FDLE8sR0FBWUosZSxDQUFaSSxPO0lBQ0FDLEssR0FBVUosYyxDQUFWSSxLOzs7QUFFUixTQUFTQyxNQUFULENBQWdCQyxZQUFoQixFQUE4QkMsYUFBOUIsRUFBNkNDLE1BQTdDLEVBQXFEQyxJQUFyRCxFQUEyRDtBQUN6RCxVQUFNQyxZQUFZLENBQ1ZDLHdCQURVLEVBRVZDLHlCQUZVLENBQWxCO0FBQUEsVUFJTUMsVUFBVTtBQUNSUCwwQkFBY0EsWUFETjtBQUVSQywyQkFBZUEsYUFGUDtBQUdSQyxvQkFBUUE7QUFIQSxPQUpoQjs7QUFVQU4sZUFBU1EsU0FBVCxFQUFvQkQsSUFBcEIsRUFBMEJJLE9BQTFCO0FBQ0Q7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZlYsY0FBUUE7QUFETyxDQUFqQjs7QUFJQSxTQUFTTSx3QkFBVCxDQUFrQ0ssSUFBbEMsRUFBd0NQLElBQXhDLEVBQThDSSxPQUE5QyxFQUF1RDtBQUFBLFVBQzdDUCxZQUQ2QyxHQUNwQk8sT0FEb0IsQ0FDN0NQLFlBRDZDO0FBQUEsVUFDL0JFLE1BRCtCLEdBQ3BCSyxPQURvQixDQUMvQkwsTUFEK0I7QUFBQSxVQUUvQ1MsY0FGK0MsR0FFOUIsQ0FBQyxDQUFDLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixDQUY4Qjs7O0FBSXJELFVBQU1DLHFCQUFxQnJCLFdBQVdzQixxQkFBWCxDQUFpQ0YsY0FBakMsQ0FBM0I7QUFBQSxVQUNNRyxtQkFBbUJ2QixXQUFXd0IsbUJBQVgsRUFEekI7QUFBQSxVQUVNQyxrQkFBa0J6QixXQUFXMEIsa0JBQVgsRUFGeEI7QUFBQSxVQUdNQyxtQkFBbUIzQixXQUFXNEIsbUJBQVgsRUFIekI7O0FBS0FuQixtQkFBYW9CLHFCQUFiLENBQW1DUixrQkFBbkM7QUFDQVosbUJBQWFxQixtQkFBYixDQUFpQ1AsZ0JBQWpDO0FBQ0FkLG1CQUFhc0Isa0JBQWIsQ0FBZ0NOLGVBQWhDO0FBQ0FoQixtQkFBYXVCLG1CQUFiLENBQWlDTCxnQkFBakM7O0FBRUFsQixtQkFBYXdCLGFBQWIsQ0FBMkJ0QixNQUEzQjs7QUFFQVE7QUFDRDs7QUFFRCxTQUFTSix5QkFBVCxDQUFtQ0ksSUFBbkMsRUFBeUNQLElBQXpDLEVBQStDSSxPQUEvQyxFQUF3RDtBQUFBLFVBQzlDTixhQUQ4QyxHQUNwQk0sT0FEb0IsQ0FDOUNOLGFBRDhDO0FBQUEsVUFDL0JDLE1BRCtCLEdBQ3BCSyxPQURvQixDQUMvQkwsTUFEK0I7QUFBQSxVQUVoRHVCLE9BRmdELEdBRXRDLENBQ1Isb0JBRFEsQ0FGc0M7OztBQU10RDVCLGNBQVE0QixPQUFSLEVBQWlCLFVBQVNDLE1BQVQsRUFBaUI7QUFDaEMsZ0JBQU1DLGFBQWE3QixNQUFNNEIsTUFBTixDQUFuQjtBQUFBLGdCQUNNZixpQkFBaUIsQ0FBQyxDQUFDLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixDQUR2QjtBQUFBLGdCQUVNaUIsUUFBUUQsVUFGZDs7QUFJQSxnQkFBTWYscUJBQXFCcEIsWUFBWXFCLHFCQUFaLENBQWtDRixjQUFsQyxDQUEzQjtBQUFBLGdCQUNNRyxtQkFBbUJ0QixZQUFZdUIsbUJBQVosRUFEekI7QUFBQSxnQkFFTWMsd0JBQXdCckMsWUFBWXNDLHdCQUFaLEVBRjlCO0FBQUEsZ0JBR01kLGtCQUFrQnhCLFlBQVl5QixrQkFBWixFQUh4Qjs7QUFLQWhCLDBCQUFjbUIscUJBQWQsQ0FBb0NSLGtCQUFwQztBQUNBWCwwQkFBY29CLG1CQUFkLENBQWtDUCxnQkFBbEM7QUFDQWIsMEJBQWNxQixrQkFBZCxDQUFpQ04sZUFBakM7O0FBRUFmLDBCQUFjdUIsYUFBZCxDQUE0QksscUJBQTVCLEVBQW1EM0IsTUFBbkQ7O0FBRUFELDBCQUFjOEIsYUFBZCxDQUE0QkgsS0FBNUIsRUFBbUMxQixNQUFuQzs7QUFFQVE7QUFDRCxPQW5CRDtBQW9CRCIsImZpbGUiOiJjdWJlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IENvbG91ckN1YmUgPSByZXF1aXJlKCcuL2N1YmUvY29sb3VyJyksXG4gICAgICBUZXh0dXJlQ3ViZSA9IHJlcXVpcmUoJy4vY3ViZS90ZXh0dXJlJyksXG4gICAgICBpbWFnZXNVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvaW1hZ2VzJyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMsIGFzeW5jaHJvbm91c1V0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBzZXF1ZW5jZSB9ID0gYXN5bmNocm9ub3VzVXRpbGl0aWVzLFxuICAgICAgeyBwcmVsb2FkIH0gPSBpbWFnZXNVdGlsaXRpZXMsXG4gICAgICB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcztcblxuZnVuY3Rpb24gY3JlYXRlKGNvbG91clNoYWRlciwgdGV4dHVyZVNoYWRlciwgY2FudmFzLCBkb25lKSB7XG4gIGNvbnN0IGNhbGxiYWNrcyA9IFtcbiAgICAgICAgICBjcmVhdGVDb2xvdXJDdWJlQ2FsbGJhY2ssXG4gICAgICAgICAgY3JlYXRlVGV4dHVyZUN1YmVDYWxsYmFja1xuICAgICAgICBdLFxuICAgICAgICBjb250ZXh0ID0ge1xuICAgICAgICAgIGNvbG91clNoYWRlcjogY29sb3VyU2hhZGVyLFxuICAgICAgICAgIHRleHR1cmVTaGFkZXI6IHRleHR1cmVTaGFkZXIsXG4gICAgICAgICAgY2FudmFzOiBjYW52YXNcbiAgICAgICAgfTtcblxuICBzZXF1ZW5jZShjYWxsYmFja3MsIGRvbmUsIGNvbnRleHQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiBjcmVhdGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbG91ckN1YmVDYWxsYmFjayhuZXh0LCBkb25lLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgY29sb3VyU2hhZGVyLCBjYW52YXMgfSA9IGNvbnRleHQsXG4gICAgICAgIG9mZnNldFBvc2l0aW9uID0gWy0yLCAwLCAwXTtcblxuICBjb25zdCB2ZXJ0ZXhQb3NpdGlvbkRhdGEgPSBDb2xvdXJDdWJlLmdldFZlcnRleFBvc2l0aW9uRGF0YShvZmZzZXRQb3NpdGlvbiksXG4gICAgICAgIHZlcnRleE5vcm1hbERhdGEgPSBDb2xvdXJDdWJlLmdldFZlcnRleE5vcm1hbERhdGEoKSxcbiAgICAgICAgdmVydGV4SW5kZXhEYXRhID0gQ29sb3VyQ3ViZS5nZXRWZXJ0ZXhJbmRleERhdGEoKSxcbiAgICAgICAgdmVydGV4Q29sb3VyRGF0YSA9IENvbG91ckN1YmUuZ2V0VmVydGV4Q29sb3VyRGF0YSgpO1xuXG4gIGNvbG91clNoYWRlci5hZGRWZXJ0ZXhQb3NpdGlvbkRhdGEodmVydGV4UG9zaXRpb25EYXRhKTtcbiAgY29sb3VyU2hhZGVyLmFkZFZlcnRleE5vcm1hbERhdGEodmVydGV4Tm9ybWFsRGF0YSk7XG4gIGNvbG91clNoYWRlci5hZGRWZXJ0ZXhJbmRleERhdGEodmVydGV4SW5kZXhEYXRhKTtcbiAgY29sb3VyU2hhZGVyLmFkZFZlcnRleENvbG91ckRhdGEodmVydGV4Q29sb3VyRGF0YSk7XG5cbiAgY29sb3VyU2hhZGVyLmNyZWF0ZUJ1ZmZlcnMoY2FudmFzKTtcblxuICBuZXh0KCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHR1cmVDdWJlQ2FsbGJhY2sobmV4dCwgZG9uZSwgY29udGV4dCkge1xuICBjb25zdCB7IHRleHR1cmVTaGFkZXIsIGNhbnZhcyB9ID0gY29udGV4dCxcbiAgICAgICAgc291cmNlcyA9IFtcbiAgICAgICAgICAndGV4dHVyZS9icmlja3MuanBnJ1xuICAgICAgICBdO1xuXG4gIHByZWxvYWQoc291cmNlcywgZnVuY3Rpb24oaW1hZ2VzKSB7XG4gICAgY29uc3QgZmlyc3RJbWFnZSA9IGZpcnN0KGltYWdlcyksXG4gICAgICAgICAgb2Zmc2V0UG9zaXRpb24gPSBbKzIsIDAsIDBdLFxuICAgICAgICAgIGltYWdlID0gZmlyc3RJbWFnZTtcblxuICAgIGNvbnN0IHZlcnRleFBvc2l0aW9uRGF0YSA9IFRleHR1cmVDdWJlLmdldFZlcnRleFBvc2l0aW9uRGF0YShvZmZzZXRQb3NpdGlvbiksXG4gICAgICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IFRleHR1cmVDdWJlLmdldFZlcnRleE5vcm1hbERhdGEoKSxcbiAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZURhdGEgPSBUZXh0dXJlQ3ViZS5nZXRUZXh0dXJlQ29vcmRpbmF0ZURhdGEoKSxcbiAgICAgICAgICB2ZXJ0ZXhJbmRleERhdGEgPSBUZXh0dXJlQ3ViZS5nZXRWZXJ0ZXhJbmRleERhdGEoKTtcblxuICAgIHRleHR1cmVTaGFkZXIuYWRkVmVydGV4UG9zaXRpb25EYXRhKHZlcnRleFBvc2l0aW9uRGF0YSk7XG4gICAgdGV4dHVyZVNoYWRlci5hZGRWZXJ0ZXhOb3JtYWxEYXRhKHZlcnRleE5vcm1hbERhdGEpO1xuICAgIHRleHR1cmVTaGFkZXIuYWRkVmVydGV4SW5kZXhEYXRhKHZlcnRleEluZGV4RGF0YSk7XG5cbiAgICB0ZXh0dXJlU2hhZGVyLmNyZWF0ZUJ1ZmZlcnModGV4dHVyZUNvb3JkaW5hdGVEYXRhLCBjYW52YXMpO1xuXG4gICAgdGV4dHVyZVNoYWRlci5jcmVhdGVUZXh0dXJlKGltYWdlLCBjYW52YXMpO1xuXG4gICAgbmV4dCgpO1xuICB9KTtcbn1cbiJdfQ==