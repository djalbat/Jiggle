'use strict';

var necessary = require('necessary');

var ColourCube = require('./cube/colour'),
    TextureCube = require('./cube/texture'),
    imagesUtilities = require('../../utilities/images');

var arrayUtilities = necessary.arrayUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    sequence = asynchronousUtilities.sequence,
    preload = imagesUtilities.preload,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third;


function create(colourShader, textureShader, canvas, done) {
      var sources = ['texture/concrete.jpg', 'texture/bricks.jpg', 'texture/grass.jpg'];

      preload(sources, function (images) {
            var callbacks = [createFirstColourCubeCallback, createSecondColourCubeCallback, createTextureCubeCallback],
                context = {
                  colourShader: colourShader,
                  textureShader: textureShader,
                  images: images,
                  canvas: canvas
            };

            sequence(callbacks, done, context);
      });
}

module.exports = {
      create: create
};

function createFirstColourCubeCallback(next, done, context) {
      var colourShader = context.colourShader,
          offsetPosition = [+2, +2, +2];


      var vertexPositionData = ColourCube.getVertexPositionData(offsetPosition),
          vertexNormalData = ColourCube.getVertexNormalData(),
          vertexIndexData = ColourCube.getVertexIndexData(),
          vertexColourData = ColourCube.getVertexColourData();

      colourShader.addVertexPositionData(vertexPositionData);
      colourShader.addVertexNormalData(vertexNormalData);
      colourShader.addVertexIndexData(vertexIndexData);
      colourShader.addVertexColourData(vertexColourData);

      next();
}

function createSecondColourCubeCallback(next, done, context) {
      var colourShader = context.colourShader,
          offsetPosition = [-2, -2, -2];


      var vertexPositionData = ColourCube.getVertexPositionData(offsetPosition),
          vertexNormalData = ColourCube.getVertexNormalData(),
          vertexIndexData = ColourCube.getVertexIndexData(),
          vertexColourData = ColourCube.getVertexColourData();

      colourShader.addVertexPositionData(vertexPositionData);
      colourShader.addVertexNormalData(vertexNormalData);
      colourShader.addVertexIndexData(vertexIndexData);
      colourShader.addVertexColourData(vertexColourData);

      next();
}

function createTextureCubeCallback(next, done, context) {
      var textureShader = context.textureShader,
          images = context.images,
          canvas = context.canvas,
          firstImage = first(images),
          secondImage = second(images),
          thirdImage = third(images),
          offsetPosition = [0, 0, 0],
          image = firstImage; ///

      var vertexPositionData = TextureCube.getVertexPositionData(offsetPosition),
          vertexNormalData = TextureCube.getVertexNormalData(),
          vertexIndexData = TextureCube.getVertexIndexData(),
          textureCoordinateData = TextureCube.getTextureCoordinateData();

      textureShader.addVertexPositionData(vertexPositionData);
      textureShader.addVertexNormalData(vertexNormalData);
      textureShader.addVertexIndexData(vertexIndexData);
      textureShader.addTextureCoordinateData(textureCoordinateData);

      textureShader.createTexture(image, canvas);

      next();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,