'use strict';

var constants = require('../../constants'),
    arrayUtilities = require('../../utilities/array');

var CYLINDER_SIDES = constants.CYLINDER_SIDES,
    push = arrayUtilities.push;


var defaultIndexes = calculateDefaultIndexes(),
    defaultVertices = calculateDefaultVertices(),
    defaultTextureCoordinates = calculateDefaultTextureCoordinates();

module.exports = {
      defaultIndexes: defaultIndexes,
      defaultVertices: defaultVertices,
      defaultTextureCoordinates: defaultTextureCoordinates
};

function calculateDefaultIndexes() {
      var defaultIndexes = [],
          sides = CYLINDER_SIDES,
          defaultIndexCount = sides * 2;

      for (var count = 0; count < sides; count++) {
            var defaultIndex = count * 2,
                firstDefaultIndexes = [(defaultIndex + 1) % defaultIndexCount, (defaultIndex + 0) % defaultIndexCount, (defaultIndex + 2) % defaultIndexCount],
                secondDefaultIndexes = [(defaultIndex + 2) % defaultIndexCount, (defaultIndex + 3) % defaultIndexCount, (defaultIndex + 1) % defaultIndexCount];

            defaultIndexes.push(firstDefaultIndexes);
            defaultIndexes.push(secondDefaultIndexes);
      }

      return defaultIndexes;
}

function calculateDefaultVertices() {
      var defaultVertices = [],
          sides = CYLINDER_SIDES,
          step = 2 * Math.PI / sides;

      for (var count = 0; count < sides; count++) {
            var angle = step * count,
                angleCosine = Math.cos(angle),
                angleSine = Math.sin(angle),
                topDefaultVertex = [(angleCosine + 1) / 2, (angleSine + 1) / 2, 0],
                bottomDefaultVertex = [(angleCosine + 1) / 2, (angleSine + 1) / 2, 1];

            defaultVertices.push(topDefaultVertex);
            defaultVertices.push(bottomDefaultVertex);
      }

      return defaultVertices;
}

function calculateDefaultTextureCoordinates() {
      var defaultTextureCoordinates = [],
          sides = CYLINDER_SIDES,
          step = 1 / sides;

      for (var count = 0; count < sides; count++) {
            var offset = step * count,
                firstDefaultTextureCoordinates = [[offset, 0], [offset, 1], [offset + step, 1]],
                secondDefaultTextureCoordinates = [[offset + step, 1], [offset + step, 0], [offset, 0]];

            push(defaultTextureCoordinates, firstDefaultTextureCoordinates);
            push(defaultTextureCoordinates, secondDefaultTextureCoordinates);
      }

      return defaultTextureCoordinates;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9jb21tb24vY3lsaW5kZXIuanMiXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiQ1lMSU5ERVJfU0lERVMiLCJwdXNoIiwiZGVmYXVsdEluZGV4ZXMiLCJjYWxjdWxhdGVEZWZhdWx0SW5kZXhlcyIsImRlZmF1bHRWZXJ0aWNlcyIsImNhbGN1bGF0ZURlZmF1bHRWZXJ0aWNlcyIsImRlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMiLCJjYWxjdWxhdGVEZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzIiwibW9kdWxlIiwiZXhwb3J0cyIsInNpZGVzIiwiZGVmYXVsdEluZGV4Q291bnQiLCJjb3VudCIsImRlZmF1bHRJbmRleCIsImZpcnN0RGVmYXVsdEluZGV4ZXMiLCJzZWNvbmREZWZhdWx0SW5kZXhlcyIsInN0ZXAiLCJNYXRoIiwiUEkiLCJhbmdsZSIsImFuZ2xlQ29zaW5lIiwiY29zIiwiYW5nbGVTaW5lIiwic2luIiwidG9wRGVmYXVsdFZlcnRleCIsImJvdHRvbURlZmF1bHRWZXJ0ZXgiLCJvZmZzZXQiLCJmaXJzdERlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMiLCJzZWNvbmREZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLGlCQUFSLENBQWxCO0FBQUEsSUFDTUMsaUJBQWlCRCxRQUFRLHVCQUFSLENBRHZCOztBQUdNLElBQUVFLGNBQUYsR0FBcUJILFNBQXJCLENBQUVHLGNBQUY7QUFBQSxJQUNFQyxJQURGLEdBQ1dGLGNBRFgsQ0FDRUUsSUFERjs7O0FBR04sSUFBTUMsaUJBQWlCQyx5QkFBdkI7QUFBQSxJQUNNQyxrQkFBa0JDLDBCQUR4QjtBQUFBLElBRU1DLDRCQUE0QkMsb0NBRmxDOztBQUlBQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZQLHNCQUFnQkEsY0FERDtBQUVmRSx1QkFBaUJBLGVBRkY7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dCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL2NvbnN0YW50cycpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvYXJyYXknKTtcblxuY29uc3QgeyBDWUxJTkRFUl9TSURFUyB9ID0gY29uc3RhbnRzLFxuICAgICAgeyBwdXNoIH0gPSBhcnJheVV0aWxpdGllcztcblxuY29uc3QgZGVmYXVsdEluZGV4ZXMgPSBjYWxjdWxhdGVEZWZhdWx0SW5kZXhlcygpLFxuICAgICAgZGVmYXVsdFZlcnRpY2VzID0gY2FsY3VsYXRlRGVmYXVsdFZlcnRpY2VzKCksXG4gICAgICBkZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzID0gY2FsY3VsYXRlRGVmYXVsdFRleHR1cmVDb29yZGluYXRlcygpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVmYXVsdEluZGV4ZXM6IGRlZmF1bHRJbmRleGVzLFxuICBkZWZhdWx0VmVydGljZXM6IGRlZmF1bHRWZXJ0aWNlcyxcbiAgZGVmYXVsdFRleHR1cmVDb29yZGluYXRlczogZGVmYXVsdFRleHR1cmVDb29yZGluYXRlc1xufTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlRGVmYXVsdEluZGV4ZXMoKSB7XG4gIGNvbnN0IGRlZmF1bHRJbmRleGVzID0gW10sXG4gICAgICAgIHNpZGVzID0gQ1lMSU5ERVJfU0lERVMsXG4gICAgICAgIGRlZmF1bHRJbmRleENvdW50ID0gc2lkZXMgKiAyO1xuXG4gIGZvciAobGV0IGNvdW50ID0gMDsgY291bnQgPCBzaWRlczsgY291bnQrKykge1xuICAgIGNvbnN0IGRlZmF1bHRJbmRleCA9IGNvdW50ICogMixcbiAgICAgICAgICBmaXJzdERlZmF1bHRJbmRleGVzID0gWyAoZGVmYXVsdEluZGV4ICsgMSkgJSBkZWZhdWx0SW5kZXhDb3VudCwgKGRlZmF1bHRJbmRleCArIDApICUgZGVmYXVsdEluZGV4Q291bnQsIChkZWZhdWx0SW5kZXggKyAyKSAlIGRlZmF1bHRJbmRleENvdW50IF0sXG4gICAgICAgICAgc2Vjb25kRGVmYXVsdEluZGV4ZXMgPSBbIChkZWZhdWx0SW5kZXggKyAyKSAlIGRlZmF1bHRJbmRleENvdW50LCAoZGVmYXVsdEluZGV4ICsgMykgJSBkZWZhdWx0SW5kZXhDb3VudCwgKGRlZmF1bHRJbmRleCArIDEpICUgZGVmYXVsdEluZGV4Q291bnQgXTtcblxuICAgIGRlZmF1bHRJbmRleGVzLnB1c2goZmlyc3REZWZhdWx0SW5kZXhlcyk7XG4gICAgZGVmYXVsdEluZGV4ZXMucHVzaChzZWNvbmREZWZhdWx0SW5kZXhlcyk7XG4gIH1cblxuICByZXR1cm4gZGVmYXVsdEluZGV4ZXM7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZURlZmF1bHRWZXJ0aWNlcygpIHtcbiAgY29uc3QgZGVmYXVsdFZlcnRpY2VzID0gW10sXG4gICAgICAgIHNpZGVzID0gQ1lMSU5ERVJfU0lERVMsXG4gICAgICAgIHN0ZXAgPSAyICogTWF0aC5QSSAvIHNpZGVzO1xuXG4gIGZvciAobGV0IGNvdW50ID0gMDsgY291bnQgPCBzaWRlczsgY291bnQrKykge1xuICAgIGNvbnN0IGFuZ2xlID0gc3RlcCAqIGNvdW50LFxuICAgICAgICAgIGFuZ2xlQ29zaW5lID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICAgIGFuZ2xlU2luZSA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgICB0b3BEZWZhdWx0VmVydGV4ID0gW1xuICAgICAgICAgICAgKCBhbmdsZUNvc2luZSArIDEgKSAvIDIsXG4gICAgICAgICAgICAoIGFuZ2xlU2luZSArIDEgKSAvIDIsXG4gICAgICAgICAgICAwXG4gICAgICAgICAgXSxcbiAgICAgICAgICBib3R0b21EZWZhdWx0VmVydGV4ID0gW1xuICAgICAgICAgICAgKCBhbmdsZUNvc2luZSArIDEgKSAvIDIsXG4gICAgICAgICAgICAoIGFuZ2xlU2luZSArIDEgKSAvIDIsXG4gICAgICAgICAgICAxXG4gICAgICAgICAgXTtcblxuICAgIGRlZmF1bHRWZXJ0aWNlcy5wdXNoKHRvcERlZmF1bHRWZXJ0ZXgpO1xuICAgIGRlZmF1bHRWZXJ0aWNlcy5wdXNoKGJvdHRvbURlZmF1bHRWZXJ0ZXgpO1xuICB9XG5cbiAgcmV0dXJuIGRlZmF1bHRWZXJ0aWNlcztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlRGVmYXVsdFRleHR1cmVDb29yZGluYXRlcygpIHtcbiAgY29uc3QgZGVmYXVsdFRleHR1cmVDb29yZGluYXRlcyA9IFtdLFxuICAgICAgICBzaWRlcyA9IENZTElOREVSX1NJREVTLFxuICAgICAgICBzdGVwID0gMSAvIHNpZGVzO1xuXG4gIGZvciAobGV0IGNvdW50ID0gMDsgY291bnQgPCBzaWRlczsgY291bnQrKykge1xuICAgIGNvbnN0IG9mZnNldCA9IHN0ZXAgKiBjb3VudCxcbiAgICAgICAgICBmaXJzdERlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMgPSBbIFsgb2Zmc2V0LCAwIF0sIFsgb2Zmc2V0LCAxIF0sIFsgb2Zmc2V0ICsgc3RlcCwgMSBdIF0sXG4gICAgICAgICAgc2Vjb25kRGVmYXVsdFRleHR1cmVDb29yZGluYXRlcyA9IFsgWyBvZmZzZXQgKyBzdGVwLCAxIF0sIFsgb2Zmc2V0ICsgc3RlcCwgMCBdLCBbIG9mZnNldCwgMCBdIF07XG5cbiAgICBwdXNoKGRlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMsIGZpcnN0RGVmYXVsdFRleHR1cmVDb29yZGluYXRlcyk7XG4gICAgcHVzaChkZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzLCBzZWNvbmREZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzKTtcbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzO1xufSJdfQ==