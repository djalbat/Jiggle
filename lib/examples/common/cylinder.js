'use strict';

var constants = require('../../constants'),
    arrayUtilities = require('../../utilities/array'),
    vertexUtilities = require('../../utilities/vertex');

var CYLINDER_FACES = constants.CYLINDER_FACES,
    flatten = arrayUtilities.flatten,
    calculateVertexIndexData = vertexUtilities.calculateVertexIndexData;


var initialVertexPositionData = calculateInitialVertexPositionData(),
    vertexIndexData = calculateVertexIndexData(initialVertexPositionData);

module.exports = {
      vertexIndexData: vertexIndexData,
      initialVertexPositionData: initialVertexPositionData
};

function calculateInitialVertexPositionData() {
      var initialVertexPositionVectors = [],
          faces = CYLINDER_FACES,
          step = 2 * Math.PI / faces;

      for (var count = 0; count < faces; count++) {
            var angle = step * count,
                firstX = (Math.cos(angle) + 1) / 2,
                firstY = (Math.sin(angle) + 1) / 2,
                secondX = (Math.cos(angle + step) + 1) / 2,
                secondY = (Math.sin(angle + step) + 1) / 2,
                firstZ = 0,
                secondZ = 1;

            initialVertexPositionVectors.push([firstX, firstY, firstZ]);
            initialVertexPositionVectors.push([secondX, secondY, firstZ]);
            initialVertexPositionVectors.push([secondX, secondY, secondZ]);
            initialVertexPositionVectors.push([firstX, firstY, secondZ]);
      }

      var initialVertexPositionData = flatten(initialVertexPositionVectors); ///

      return initialVertexPositionData;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9jb21tb24vY3lsaW5kZXIuanMiXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwidmVydGV4VXRpbGl0aWVzIiwiQ1lMSU5ERVJfRkFDRVMiLCJmbGF0dGVuIiwiY2FsY3VsYXRlVmVydGV4SW5kZXhEYXRhIiwiaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YSIsImNhbGN1bGF0ZUluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEiLCJ2ZXJ0ZXhJbmRleERhdGEiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5pdGlhbFZlcnRleFBvc2l0aW9uVmVjdG9ycyIsImZhY2VzIiwic3RlcCIsIk1hdGgiLCJQSSIsImNvdW50IiwiYW5nbGUiLCJmaXJzdFgiLCJjb3MiLCJmaXJzdFkiLCJzaW4iLCJzZWNvbmRYIiwic2Vjb25kWSIsImZpcnN0WiIsInNlY29uZFoiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLGlCQUFSLENBQWxCO0FBQUEsSUFDTUMsaUJBQWlCRCxRQUFRLHVCQUFSLENBRHZCO0FBQUEsSUFFTUUsa0JBQWtCRixRQUFRLHdCQUFSLENBRnhCOztBQUlNLElBQUVHLGNBQUYsR0FBcUJKLFNBQXJCLENBQUVJLGNBQUY7QUFBQSxJQUNFQyxPQURGLEdBQ2NILGNBRGQsQ0FDRUcsT0FERjtBQUFBLElBRUVDLHdCQUZGLEdBRStCSCxlQUYvQixDQUVFRyx3QkFGRjs7O0FBSU4sSUFBTUMsNEJBQTRCQyxvQ0FBbEM7QUFBQSxJQUNNQyxrQkFBa0JILHlCQUF5QkMseUJBQXpCLENBRHhCOztBQUdBRyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZGLHVCQUFpQkEsZUFERjtBQUVmRixpQ0FBMkJBO0FBRlosQ0FBakI7O0FBS0EsU0FBU0Msa0NBQVQsR0FBOEM7QUFDNUMsVUFBTUksK0JBQStCLEVBQXJDO0FBQUEsVUFDTUMsUUFBUVQsY0FEZDtBQUFBLFVBRU1VLE9BQU8sSUFBSUMsS0FBS0MsRUFBVCxHQUFjSCxLQUYzQjs7QUFJQSxXQUFLLElBQUlJLFFBQVEsQ0FBakIsRUFBb0JBLFFBQVFKLEtBQTVCLEVBQW1DSSxPQUFuQyxFQUE0QztBQUMxQyxnQkFBTUMsUUFBUUosT0FBT0csS0FBckI7QUFBQSxnQkFDTUUsU0FBUyxDQUFDSixLQUFLSyxHQUFMLENBQVNGLEtBQVQsSUFBa0IsQ0FBbkIsSUFBd0IsQ0FEdkM7QUFBQSxnQkFFTUcsU0FBUyxDQUFDTixLQUFLTyxHQUFMLENBQVNKLEtBQVQsSUFBa0IsQ0FBbkIsSUFBd0IsQ0FGdkM7QUFBQSxnQkFHTUssVUFBVSxDQUFDUixLQUFLSyxHQUFMLENBQVNGLFFBQVFKLElBQWpCLElBQXlCLENBQTFCLElBQStCLENBSC9DO0FBQUEsZ0JBSU1VLFVBQVUsQ0FBQ1QsS0FBS08sR0FBTCxDQUFTSixRQUFRSixJQUFqQixJQUF5QixDQUExQixJQUErQixDQUovQztBQUFBLGdCQUtNVyxTQUFTLENBTGY7QUFBQSxnQkFNTUMsVUFBVSxDQU5oQjs7QUFRQWQseUNBQTZCZSxJQUE3QixDQUFrQyxDQUFFUixNQUFGLEVBQVVFLE1BQVYsRUFBa0JJLE1BQWxCLENBQWxDO0FBQ0FiLHlDQUE2QmUsSUFBN0IsQ0FBa0MsQ0FBRUosT0FBRixFQUFXQyxPQUFYLEVBQW9CQyxNQUFwQixDQUFsQztBQUNBYix5Q0FBNkJlLElBQTdCLENBQWtDLENBQUVKLE9BQUYsRUFBV0MsT0FBWCxFQUFvQkUsT0FBcEIsQ0FBbEM7QUFDQWQseUNBQTZCZSxJQUE3QixDQUFrQyxDQUFFUixNQUFGLEVBQVVFLE1BQVYsRUFBa0JLLE9BQWxCLENBQWxDO0FBQ0Q7O0FBRUQsVUFBTW5CLDRCQUE0QkYsUUFBUU8sNEJBQVIsQ0FBbEMsQ0FwQjRDLENBb0I4Qjs7QUFFMUUsYUFBT0wseUJBQVA7QUFDRCIsImZpbGUiOiJjeWxpbmRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vY29uc3RhbnRzJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgdmVydGV4VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL3ZlcnRleCcpO1xuXG5jb25zdCB7IENZTElOREVSX0ZBQ0VTIH0gPSBjb25zdGFudHMsXG4gICAgICB7IGZsYXR0ZW4gfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBjYWxjdWxhdGVWZXJ0ZXhJbmRleERhdGEgfSA9IHZlcnRleFV0aWxpdGllcztcblxuY29uc3QgaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YSA9IGNhbGN1bGF0ZUluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEoKSxcbiAgICAgIHZlcnRleEluZGV4RGF0YSA9IGNhbGN1bGF0ZVZlcnRleEluZGV4RGF0YShpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZlcnRleEluZGV4RGF0YTogdmVydGV4SW5kZXhEYXRhLFxuICBpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhOiBpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhXG59O1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVJbml0aWFsVmVydGV4UG9zaXRpb25EYXRhKCkge1xuICBjb25zdCBpbml0aWFsVmVydGV4UG9zaXRpb25WZWN0b3JzID0gW10sXG4gICAgICAgIGZhY2VzID0gQ1lMSU5ERVJfRkFDRVMsXG4gICAgICAgIHN0ZXAgPSAyICogTWF0aC5QSSAvIGZhY2VzO1xuXG4gIGZvciAobGV0IGNvdW50ID0gMDsgY291bnQgPCBmYWNlczsgY291bnQrKykge1xuICAgIGNvbnN0IGFuZ2xlID0gc3RlcCAqIGNvdW50LFxuICAgICAgICAgIGZpcnN0WCA9IChNYXRoLmNvcyhhbmdsZSkgKyAxICkvIDIsXG4gICAgICAgICAgZmlyc3RZID0gKE1hdGguc2luKGFuZ2xlKSArIDEgKS8gMixcbiAgICAgICAgICBzZWNvbmRYID0gKE1hdGguY29zKGFuZ2xlICsgc3RlcCkgKyAxICkvIDIsXG4gICAgICAgICAgc2Vjb25kWSA9IChNYXRoLnNpbihhbmdsZSArIHN0ZXApICsgMSApLyAyLFxuICAgICAgICAgIGZpcnN0WiA9IDAsXG4gICAgICAgICAgc2Vjb25kWiA9IDE7XG5cbiAgICBpbml0aWFsVmVydGV4UG9zaXRpb25WZWN0b3JzLnB1c2goWyBmaXJzdFgsIGZpcnN0WSwgZmlyc3RaIF0pO1xuICAgIGluaXRpYWxWZXJ0ZXhQb3NpdGlvblZlY3RvcnMucHVzaChbIHNlY29uZFgsIHNlY29uZFksIGZpcnN0WiBdKTtcbiAgICBpbml0aWFsVmVydGV4UG9zaXRpb25WZWN0b3JzLnB1c2goWyBzZWNvbmRYLCBzZWNvbmRZLCBzZWNvbmRaIF0pO1xuICAgIGluaXRpYWxWZXJ0ZXhQb3NpdGlvblZlY3RvcnMucHVzaChbIGZpcnN0WCwgZmlyc3RZLCBzZWNvbmRaIF0pO1xuICB9XG5cbiAgY29uc3QgaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YSA9IGZsYXR0ZW4oaW5pdGlhbFZlcnRleFBvc2l0aW9uVmVjdG9ycyk7ICAvLy9cblxuICByZXR1cm4gaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YTtcbn1cbiJdfQ==