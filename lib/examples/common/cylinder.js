'use strict';

var constants = require('../../constants'),
    arrayUtilities = require('../../utilities/array'),
    vertexUtilities = require('../../utilities/vertex');

var CYLINDER_FACES = constants.CYLINDER_FACES,
    flatten = arrayUtilities.flatten,
    calculateVertexIndexData = vertexUtilities.calculateVertexIndexData,
    calculateVertexNormalData = vertexUtilities.calculateVertexNormalData;


var initialVertexPositionData = calculateInitialVertexPositionData(),
    vertexIndexData = calculateVertexIndexData(initialVertexPositionData),
    vertexNormalData = calculateVertexNormalData(initialVertexPositionData);

module.exports = {
      vertexIndexData: vertexIndexData,
      vertexNormalData: vertexNormalData,
      initialVertexPositionData: initialVertexPositionData
};

function calculateInitialVertexPositionData() {
      var initialVertexPositionVectors = [],
          faces = CYLINDER_FACES,
          step = 2 * Math.PI / faces;

      for (var count = 0; count < faces; count++) {
            var angle = step * count,
                firstX = (Math.cos(angle) + 1) / 2,
                firstY = (Math.sin(angle) + 1) / 2,
                secondX = (Math.cos(angle + step) + 1) / 2,
                secondY = (Math.sin(angle + step) + 1) / 2,
                firstZ = 0,
                secondZ = 1;

            initialVertexPositionVectors.push([firstX, firstY, firstZ, 1]);
            initialVertexPositionVectors.push([secondX, secondY, firstZ, 1]);
            initialVertexPositionVectors.push([secondX, secondY, secondZ, 1]);
            initialVertexPositionVectors.push([firstX, firstY, secondZ, 1]);
      }

      var initialVertexPositionData = flatten(initialVertexPositionVectors); ///

      return initialVertexPositionData;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9jb21tb24vY3lsaW5kZXIuanMiXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwidmVydGV4VXRpbGl0aWVzIiwiQ1lMSU5ERVJfRkFDRVMiLCJmbGF0dGVuIiwiY2FsY3VsYXRlVmVydGV4SW5kZXhEYXRhIiwiY2FsY3VsYXRlVmVydGV4Tm9ybWFsRGF0YSIsImluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEiLCJjYWxjdWxhdGVJbml0aWFsVmVydGV4UG9zaXRpb25EYXRhIiwidmVydGV4SW5kZXhEYXRhIiwidmVydGV4Tm9ybWFsRGF0YSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbml0aWFsVmVydGV4UG9zaXRpb25WZWN0b3JzIiwiZmFjZXMiLCJzdGVwIiwiTWF0aCIsIlBJIiwiY291bnQiLCJhbmdsZSIsImZpcnN0WCIsImNvcyIsImZpcnN0WSIsInNpbiIsInNlY29uZFgiLCJzZWNvbmRZIiwiZmlyc3RaIiwic2Vjb25kWiIsInB1c2giXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsaUJBQVIsQ0FBbEI7QUFBQSxJQUNNQyxpQkFBaUJELFFBQVEsdUJBQVIsQ0FEdkI7QUFBQSxJQUVNRSxrQkFBa0JGLFFBQVEsd0JBQVIsQ0FGeEI7O0FBSU0sSUFBRUcsY0FBRixHQUFxQkosU0FBckIsQ0FBRUksY0FBRjtBQUFBLElBQ0VDLE9BREYsR0FDY0gsY0FEZCxDQUNFRyxPQURGO0FBQUEsSUFFRUMsd0JBRkYsR0FFeURILGVBRnpELENBRUVHLHdCQUZGO0FBQUEsSUFFNEJDLHlCQUY1QixHQUV5REosZUFGekQsQ0FFNEJJLHlCQUY1Qjs7O0FBSU4sSUFBTUMsNEJBQTRCQyxvQ0FBbEM7QUFBQSxJQUNNQyxrQkFBa0JKLHlCQUF5QkUseUJBQXpCLENBRHhCO0FBQUEsSUFFTUcsbUJBQW1CSiwwQkFBMEJDLHlCQUExQixDQUZ6Qjs7QUFJQUksT0FBT0MsT0FBUCxHQUFpQjtBQUNmSCx1QkFBaUJBLGVBREY7QUFFZkMsd0JBQWtCQSxnQkFGSDtBQUdmSCxpQ0FBMkJBO0FBSFosQ0FBakI7O0FBTUEsU0FBU0Msa0NBQVQsR0FBOEM7QUFDNUMsVUFBTUssK0JBQStCLEVBQXJDO0FBQUEsVUFDTUMsUUFBUVgsY0FEZDtBQUFBLFVBRU1ZLE9BQU8sSUFBSUMsS0FBS0MsRUFBVCxHQUFjSCxLQUYzQjs7QUFJQSxXQUFLLElBQUlJLFFBQVEsQ0FBakIsRUFBb0JBLFFBQVFKLEtBQTVCLEVBQW1DSSxPQUFuQyxFQUE0QztBQUMxQyxnQkFBTUMsUUFBUUosT0FBT0csS0FBckI7QUFBQSxnQkFDTUUsU0FBUyxDQUFDSixLQUFLSyxHQUFMLENBQVNGLEtBQVQsSUFBa0IsQ0FBbkIsSUFBd0IsQ0FEdkM7QUFBQSxnQkFFTUcsU0FBUyxDQUFDTixLQUFLTyxHQUFMLENBQVNKLEtBQVQsSUFBa0IsQ0FBbkIsSUFBd0IsQ0FGdkM7QUFBQSxnQkFHTUssVUFBVSxDQUFDUixLQUFLSyxHQUFMLENBQVNGLFFBQVFKLElBQWpCLElBQXlCLENBQTFCLElBQStCLENBSC9DO0FBQUEsZ0JBSU1VLFVBQVUsQ0FBQ1QsS0FBS08sR0FBTCxDQUFTSixRQUFRSixJQUFqQixJQUF5QixDQUExQixJQUErQixDQUovQztBQUFBLGdCQUtNVyxTQUFTLENBTGY7QUFBQSxnQkFNTUMsVUFBVSxDQU5oQjs7QUFRQWQseUNBQTZCZSxJQUE3QixDQUFrQyxDQUFFUixNQUFGLEVBQVVFLE1BQVYsRUFBa0JJLE1BQWxCLEVBQTBCLENBQTFCLENBQWxDO0FBQ0FiLHlDQUE2QmUsSUFBN0IsQ0FBa0MsQ0FBRUosT0FBRixFQUFXQyxPQUFYLEVBQW9CQyxNQUFwQixFQUE0QixDQUE1QixDQUFsQztBQUNBYix5Q0FBNkJlLElBQTdCLENBQWtDLENBQUVKLE9BQUYsRUFBV0MsT0FBWCxFQUFvQkUsT0FBcEIsRUFBNkIsQ0FBN0IsQ0FBbEM7QUFDQWQseUNBQTZCZSxJQUE3QixDQUFrQyxDQUFFUixNQUFGLEVBQVVFLE1BQVYsRUFBa0JLLE9BQWxCLEVBQTJCLENBQTNCLENBQWxDO0FBQ0Q7O0FBRUQsVUFBTXBCLDRCQUE0QkgsUUFBUVMsNEJBQVIsQ0FBbEMsQ0FwQjRDLENBb0I4Qjs7QUFFMUUsYUFBT04seUJBQVA7QUFDRCIsImZpbGUiOiJjeWxpbmRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vY29uc3RhbnRzJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgdmVydGV4VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL3ZlcnRleCcpO1xuXG5jb25zdCB7IENZTElOREVSX0ZBQ0VTIH0gPSBjb25zdGFudHMsXG4gICAgICB7IGZsYXR0ZW4gfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBjYWxjdWxhdGVWZXJ0ZXhJbmRleERhdGEsIGNhbGN1bGF0ZVZlcnRleE5vcm1hbERhdGF9ID0gdmVydGV4VXRpbGl0aWVzO1xuXG5jb25zdCBpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhID0gY2FsY3VsYXRlSW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YSgpLFxuICAgICAgdmVydGV4SW5kZXhEYXRhID0gY2FsY3VsYXRlVmVydGV4SW5kZXhEYXRhKGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEpLFxuICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IGNhbGN1bGF0ZVZlcnRleE5vcm1hbERhdGEoaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2ZXJ0ZXhJbmRleERhdGE6IHZlcnRleEluZGV4RGF0YSxcbiAgdmVydGV4Tm9ybWFsRGF0YTogdmVydGV4Tm9ybWFsRGF0YSxcbiAgaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YTogaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YVxufTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlSW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YSgpIHtcbiAgY29uc3QgaW5pdGlhbFZlcnRleFBvc2l0aW9uVmVjdG9ycyA9IFtdLFxuICAgICAgICBmYWNlcyA9IENZTElOREVSX0ZBQ0VTLFxuICAgICAgICBzdGVwID0gMiAqIE1hdGguUEkgLyBmYWNlcztcblxuICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgZmFjZXM7IGNvdW50KyspIHtcbiAgICBjb25zdCBhbmdsZSA9IHN0ZXAgKiBjb3VudCxcbiAgICAgICAgICBmaXJzdFggPSAoTWF0aC5jb3MoYW5nbGUpICsgMSApLyAyLFxuICAgICAgICAgIGZpcnN0WSA9IChNYXRoLnNpbihhbmdsZSkgKyAxICkvIDIsXG4gICAgICAgICAgc2Vjb25kWCA9IChNYXRoLmNvcyhhbmdsZSArIHN0ZXApICsgMSApLyAyLFxuICAgICAgICAgIHNlY29uZFkgPSAoTWF0aC5zaW4oYW5nbGUgKyBzdGVwKSArIDEgKS8gMixcbiAgICAgICAgICBmaXJzdFogPSAwLFxuICAgICAgICAgIHNlY29uZFogPSAxO1xuXG4gICAgaW5pdGlhbFZlcnRleFBvc2l0aW9uVmVjdG9ycy5wdXNoKFsgZmlyc3RYLCBmaXJzdFksIGZpcnN0WiwgMSBdKTtcbiAgICBpbml0aWFsVmVydGV4UG9zaXRpb25WZWN0b3JzLnB1c2goWyBzZWNvbmRYLCBzZWNvbmRZLCBmaXJzdFosIDEgXSk7XG4gICAgaW5pdGlhbFZlcnRleFBvc2l0aW9uVmVjdG9ycy5wdXNoKFsgc2Vjb25kWCwgc2Vjb25kWSwgc2Vjb25kWiwgMSBdKTtcbiAgICBpbml0aWFsVmVydGV4UG9zaXRpb25WZWN0b3JzLnB1c2goWyBmaXJzdFgsIGZpcnN0WSwgc2Vjb25kWiwgMSBdKTtcbiAgfVxuXG4gIGNvbnN0IGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEgPSBmbGF0dGVuKGluaXRpYWxWZXJ0ZXhQb3NpdGlvblZlY3RvcnMpOyAgLy8vXG5cbiAgcmV0dXJuIGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGE7XG59XG4iXX0=