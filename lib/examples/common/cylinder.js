'use strict';

var constants = require('../../constants'),
    arrayUtilities = require('../../utilities/array');

var CYLINDER_SIDES = constants.CYLINDER_SIDES,
    push = arrayUtilities.push;


var defaultVertices = calculateDefaultVertices(),
    defaultIndexes = calculateDefaultIndexes(),
    defaultColour = [0, 0, 1, 1],
    defaultImageName = "concrete.jpg",
    defaultTextureCoordinates = calculateDefaultTextureCoordinates();

module.exports = {
  defaultVertices: defaultVertices,
  defaultIndexes: defaultIndexes,
  defaultColour: defaultColour,
  defaultImageName: defaultImageName,
  defaultTextureCoordinates: defaultTextureCoordinates
};

function calculateDefaultVertices() {
  var defaultVertices = [],
      sides = CYLINDER_SIDES,
      step = 2 * Math.PI / sides;

  for (var count = 0; count < sides; count++) {
    var angle = step * count,
        angleCosine = Math.cos(angle),
        angleSine = Math.sin(angle),
        topDefaultVertex = [(angleCosine + 1) / 2, (angleSine + 1) / 2, 0],
        bottomDefaultVertex = [(angleCosine + 1) / 2, (angleSine + 1) / 2, 1];

    defaultVertices.push(topDefaultVertex);
    defaultVertices.push(bottomDefaultVertex);
  }

  return defaultVertices;
}

function calculateDefaultIndexes() {
  var defaultIndexes = [],
      sides = CYLINDER_SIDES,
      defaultIndexCount = sides * 2;

  for (var count = 0; count < sides; count++) {
    var defaultIndex = count * 2,
        firstDefaultIndexes = [(defaultIndex + 1) % defaultIndexCount, (defaultIndex + 0) % defaultIndexCount, (defaultIndex + 2) % defaultIndexCount],
        secondDefaultIndexes = [(defaultIndex + 2) % defaultIndexCount, (defaultIndex + 3) % defaultIndexCount, (defaultIndex + 1) % defaultIndexCount];

    defaultIndexes.push(firstDefaultIndexes);
    defaultIndexes.push(secondDefaultIndexes);
  }

  return defaultIndexes;
}

function calculateDefaultTextureCoordinates() {
  var defaultTextureCoordinates = [],
      sides = CYLINDER_SIDES,
      step = 1 / sides;

  for (var count = 0; count < sides; count++) {
    var offset = step * count,
        firstDefaultTextureCoordinates = [[offset, 0], [offset, 1], [offset + step, 1]],
        secondDefaultTextureCoordinates = [[offset + step, 1], [offset + step, 0], [offset, 0]];

    push(defaultTextureCoordinates, firstDefaultTextureCoordinates);
    push(defaultTextureCoordinates, secondDefaultTextureCoordinates);
  }

  return defaultTextureCoordinates;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9jb21tb24vY3lsaW5kZXIuanMiXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiQ1lMSU5ERVJfU0lERVMiLCJwdXNoIiwiZGVmYXVsdFZlcnRpY2VzIiwiY2FsY3VsYXRlRGVmYXVsdFZlcnRpY2VzIiwiZGVmYXVsdEluZGV4ZXMiLCJjYWxjdWxhdGVEZWZhdWx0SW5kZXhlcyIsImRlZmF1bHRDb2xvdXIiLCJkZWZhdWx0SW1hZ2VOYW1lIiwiZGVmYXVsdFRleHR1cmVDb29yZGluYXRlcyIsImNhbGN1bGF0ZURlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwic2lkZXMiLCJzdGVwIiwiTWF0aCIsIlBJIiwiY291bnQiLCJhbmdsZSIsImFuZ2xlQ29zaW5lIiwiY29zIiwiYW5nbGVTaW5lIiwic2luIiwidG9wRGVmYXVsdFZlcnRleCIsImJvdHRvbURlZmF1bHRWZXJ0ZXgiLCJkZWZhdWx0SW5kZXhDb3VudCIsImRlZmF1bHRJbmRleCIsImZpcnN0RGVmYXVsdEluZGV4ZXMiLCJzZWNvbmREZWZhdWx0SW5kZXhlcyIsIm9mZnNldCIsImZpcnN0RGVmYXVsdFRleHR1cmVDb29yZGluYXRlcyIsInNlY29uZERlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsaUJBQVIsQ0FBbEI7QUFBQSxJQUNNQyxpQkFBaUJELFFBQVEsdUJBQVIsQ0FEdkI7O0FBR00sSUFBRUUsY0FBRixHQUFxQkgsU0FBckIsQ0FBRUcsY0FBRjtBQUFBLElBQ0VDLElBREYsR0FDV0YsY0FEWCxDQUNFRSxJQURGOzs7QUFHTixJQUFNQyxrQkFBa0JDLDBCQUF4QjtBQUFBLElBQ01DLGlCQUFpQkMseUJBRHZCO0FBQUEsSUFFTUMsZ0JBQWdCLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLEVBQVcs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VSxDQUFWLENBQTlDLENBRnhDOztBQUlBM0IsU0FBS08seUJBQUwsRUFBZ0NxQiw4QkFBaEM7QUFDQTVCLFNBQUtPLHlCQUFMLEVBQWdDc0IsK0JBQWhDO0FBQ0Q7O0FBRUQsU0FBT3RCLHlCQUFQO0FBQ0QiLCJmaWxlIjoiY3lsaW5kZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL2NvbnN0YW50cycpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvYXJyYXknKTtcblxuY29uc3QgeyBDWUxJTkRFUl9TSURFUyB9ID0gY29uc3RhbnRzLFxuICAgICAgeyBwdXNoIH0gPSBhcnJheVV0aWxpdGllcztcblxuY29uc3QgZGVmYXVsdFZlcnRpY2VzID0gY2FsY3VsYXRlRGVmYXVsdFZlcnRpY2VzKCksXG4gICAgICBkZWZhdWx0SW5kZXhlcyA9IGNhbGN1bGF0ZURlZmF1bHRJbmRleGVzKCksXG4gICAgICBkZWZhdWx0Q29sb3VyID0gWyAwLCAwLCAxLCAxIF0sXG4gICAgICBkZWZhdWx0SW1hZ2VOYW1lID0gXCJjb25jcmV0ZS5qcGdcIixcbiAgICAgIGRlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMgPSBjYWxjdWxhdGVEZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzKCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZWZhdWx0VmVydGljZXM6IGRlZmF1bHRWZXJ0aWNlcyxcbiAgZGVmYXVsdEluZGV4ZXM6IGRlZmF1bHRJbmRleGVzLFxuICBkZWZhdWx0Q29sb3VyOiBkZWZhdWx0Q29sb3VyLFxuICBkZWZhdWx0SW1hZ2VOYW1lOiBkZWZhdWx0SW1hZ2VOYW1lLFxuICBkZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzOiBkZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzXG59O1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVEZWZhdWx0VmVydGljZXMoKSB7XG4gIGNvbnN0IGRlZmF1bHRWZXJ0aWNlcyA9IFtdLFxuICAgICAgICBzaWRlcyA9IENZTElOREVSX1NJREVTLFxuICAgICAgICBzdGVwID0gMiAqIE1hdGguUEkgLyBzaWRlcztcblxuICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgc2lkZXM7IGNvdW50KyspIHtcbiAgICBjb25zdCBhbmdsZSA9IHN0ZXAgKiBjb3VudCxcbiAgICAgICAgICBhbmdsZUNvc2luZSA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICBhbmdsZVNpbmUgPSBNYXRoLnNpbihhbmdsZSksXG4gICAgICAgICAgdG9wRGVmYXVsdFZlcnRleCA9IFtcbiAgICAgICAgICAgICggYW5nbGVDb3NpbmUgKyAxICkgLyAyLFxuICAgICAgICAgICAgKCBhbmdsZVNpbmUgKyAxICkgLyAyLFxuICAgICAgICAgICAgMFxuICAgICAgICAgIF0sXG4gICAgICAgICAgYm90dG9tRGVmYXVsdFZlcnRleCA9IFtcbiAgICAgICAgICAgICggYW5nbGVDb3NpbmUgKyAxICkgLyAyLFxuICAgICAgICAgICAgKCBhbmdsZVNpbmUgKyAxICkgLyAyLFxuICAgICAgICAgICAgMVxuICAgICAgICAgIF07XG4gIFxuICAgIGRlZmF1bHRWZXJ0aWNlcy5wdXNoKHRvcERlZmF1bHRWZXJ0ZXgpO1xuICAgIGRlZmF1bHRWZXJ0aWNlcy5wdXNoKGJvdHRvbURlZmF1bHRWZXJ0ZXgpO1xuICB9XG5cbiAgcmV0dXJuIGRlZmF1bHRWZXJ0aWNlcztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlRGVmYXVsdEluZGV4ZXMoKSB7XG4gIGNvbnN0IGRlZmF1bHRJbmRleGVzID0gW10sXG4gICAgICAgIHNpZGVzID0gQ1lMSU5ERVJfU0lERVMsXG4gICAgICAgIGRlZmF1bHRJbmRleENvdW50ID0gc2lkZXMgKiAyO1xuXG4gIGZvciAobGV0IGNvdW50ID0gMDsgY291bnQgPCBzaWRlczsgY291bnQrKykge1xuICAgIGNvbnN0IGRlZmF1bHRJbmRleCA9IGNvdW50ICogMixcbiAgICAgICAgICBmaXJzdERlZmF1bHRJbmRleGVzID0gWyAoZGVmYXVsdEluZGV4ICsgMSkgJSBkZWZhdWx0SW5kZXhDb3VudCwgKGRlZmF1bHRJbmRleCArIDApICUgZGVmYXVsdEluZGV4Q291bnQsIChkZWZhdWx0SW5kZXggKyAyKSAlIGRlZmF1bHRJbmRleENvdW50IF0sXG4gICAgICAgICAgc2Vjb25kRGVmYXVsdEluZGV4ZXMgPSBbIChkZWZhdWx0SW5kZXggKyAyKSAlIGRlZmF1bHRJbmRleENvdW50LCAoZGVmYXVsdEluZGV4ICsgMykgJSBkZWZhdWx0SW5kZXhDb3VudCwgKGRlZmF1bHRJbmRleCArIDEpICUgZGVmYXVsdEluZGV4Q291bnQgXTtcblxuICAgIGRlZmF1bHRJbmRleGVzLnB1c2goZmlyc3REZWZhdWx0SW5kZXhlcyk7XG4gICAgZGVmYXVsdEluZGV4ZXMucHVzaChzZWNvbmREZWZhdWx0SW5kZXhlcyk7XG4gIH1cblxuICByZXR1cm4gZGVmYXVsdEluZGV4ZXM7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZURlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMoKSB7XG4gIGNvbnN0IGRlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMgPSBbXSxcbiAgICAgICAgc2lkZXMgPSBDWUxJTkRFUl9TSURFUyxcbiAgICAgICAgc3RlcCA9IDEgLyBzaWRlcztcblxuICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgc2lkZXM7IGNvdW50KyspIHtcbiAgICBjb25zdCBvZmZzZXQgPSBzdGVwICogY291bnQsXG4gICAgICAgICAgZmlyc3REZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzID0gWyBbIG9mZnNldCwgMCBdLCBbIG9mZnNldCwgMSBdLCBbIG9mZnNldCArIHN0ZXAsIDEgXSBdLFxuICAgICAgICAgIHNlY29uZERlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMgPSBbIFsgb2Zmc2V0ICsgc3RlcCwgMSBdLCBbIG9mZnNldCArIHN0ZXAsIDAgXSwgWyBvZmZzZXQsIDAgXSBdO1xuXG4gICAgcHVzaChkZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzLCBmaXJzdERlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMpO1xuICAgIHB1c2goZGVmYXVsdFRleHR1cmVDb29yZGluYXRlcywgc2Vjb25kRGVmYXVsdFRleHR1cmVDb29yZGluYXRlcyk7XG4gIH1cblxuICByZXR1cm4gZGVmYXVsdFRleHR1cmVDb29yZGluYXRlcztcbn0iXX0=