'use strict';

var arrayUtilities = require('../../utilities/array'),
    vertexUtilities = require('../../utilities/vertex');

var flatten = arrayUtilities.flatten,
    calculateVertexIndexData = vertexUtilities.calculateVertexIndexData,
    calculateVertexNormalData = vertexUtilities.calculateVertexNormalData;


var initialVertexPositionData = calculateInitialVertexPositionData(),
    vertexIndexData = calculateVertexIndexData(initialVertexPositionData),
    vertexNormalData = calculateVertexNormalData(initialVertexPositionData);

module.exports = {
      vertexIndexData: vertexIndexData,
      vertexNormalData: vertexNormalData,
      initialVertexPositionData: initialVertexPositionData
};

function calculateInitialVertexPositionData() {
      var initialVertexPositionVectors = [],
          faces = 64,
          ///
      step = 2 * Math.PI / faces;

      for (var count = 0; count < faces; count++) {
            var angle = step * count,
                firstX = Math.cos(angle),
                firstY = Math.sin(angle),
                secondX = Math.cos(angle + step),
                secondY = Math.sin(angle + step),
                firstZ = 0,
                secondZ = 1;

            initialVertexPositionVectors.push([firstX, firstY, firstZ, 1]);
            initialVertexPositionVectors.push([secondX, secondY, firstZ, 1]);
            initialVertexPositionVectors.push([secondX, secondY, secondZ, 1]);
            initialVertexPositionVectors.push([firstX, firstY, secondZ, 1]);
      }

      var initialVertexPositionData = flatten(initialVertexPositionVectors); ///

      return initialVertexPositionData;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9jb21tb24vY3lsaW5kZXIuanMiXSwibmFtZXMiOlsiYXJyYXlVdGlsaXRpZXMiLCJyZXF1aXJlIiwidmVydGV4VXRpbGl0aWVzIiwiZmxhdHRlbiIsImNhbGN1bGF0ZVZlcnRleEluZGV4RGF0YSIsImNhbGN1bGF0ZVZlcnRleE5vcm1hbERhdGEiLCJpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhIiwiY2FsY3VsYXRlSW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YSIsInZlcnRleEluZGV4RGF0YSIsInZlcnRleE5vcm1hbERhdGEiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5pdGlhbFZlcnRleFBvc2l0aW9uVmVjdG9ycyIsImZhY2VzIiwic3RlcCIsIk1hdGgiLCJQSSIsImNvdW50IiwiYW5nbGUiLCJmaXJzdFgiLCJjb3MiLCJmaXJzdFkiLCJzaW4iLCJzZWNvbmRYIiwic2Vjb25kWSIsImZpcnN0WiIsInNlY29uZFoiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxpQkFBaUJDLFFBQVEsdUJBQVIsQ0FBdkI7QUFBQSxJQUNNQyxrQkFBa0JELFFBQVEsd0JBQVIsQ0FEeEI7O0FBR00sSUFBRUUsT0FBRixHQUFjSCxjQUFkLENBQUVHLE9BQUY7QUFBQSxJQUNFQyx3QkFERixHQUN5REYsZUFEekQsQ0FDRUUsd0JBREY7QUFBQSxJQUM0QkMseUJBRDVCLEdBQ3lESCxlQUR6RCxDQUM0QkcseUJBRDVCOzs7QUFHTixJQUFNQyw0QkFBNEJDLG9DQUFsQztBQUFBLElBQ01DLGtCQUFrQkoseUJBQXlCRSx5QkFBekIsQ0FEeEI7QUFBQSxJQUVNRyxtQkFBbUJKLDBCQUEwQkMseUJBQTFCLENBRnpCOztBQUlBSSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZILHVCQUFpQkEsZUFERjtBQUVmQyx3QkFBa0JBLGdCQUZIO0FBR2ZILGlDQUEyQkE7QUFIWixDQUFqQjs7QUFNQSxTQUFTQyxrQ0FBVCxHQUE4QztBQUM1QyxVQUFNSywrQkFBK0IsRUFBckM7QUFBQSxVQUNNQyxRQUFRLEVBRGQ7QUFBQSxVQUNrQjtBQUNaQyxhQUFPLElBQUlDLEtBQUtDLEVBQVQsR0FBY0gsS0FGM0I7O0FBSUEsV0FBSyxJQUFJSSxRQUFRLENBQWpCLEVBQW9CQSxRQUFRSixLQUE1QixFQUFtQ0ksT0FBbkMsRUFBNEM7QUFDMUMsZ0JBQU1DLFFBQVFKLE9BQU9HLEtBQXJCO0FBQUEsZ0JBQ01FLFNBQVNKLEtBQUtLLEdBQUwsQ0FBU0YsS0FBVCxDQURmO0FBQUEsZ0JBRU1HLFNBQVNOLEtBQUtPLEdBQUwsQ0FBU0osS0FBVCxDQUZmO0FBQUEsZ0JBR01LLFVBQVVSLEtBQUtLLEdBQUwsQ0FBU0YsUUFBUUosSUFBakIsQ0FIaEI7QUFBQSxnQkFJTVUsVUFBVVQsS0FBS08sR0FBTCxDQUFTSixRQUFRSixJQUFqQixDQUpoQjtBQUFBLGdCQUtNVyxTQUFTLENBTGY7QUFBQSxnQkFNTUMsVUFBVSxDQU5oQjs7QUFRQWQseUNBQTZCZSxJQUE3QixDQUFrQyxDQUFFUixNQUFGLEVBQVVFLE1BQVYsRUFBa0JJLE1BQWxCLEVBQTBCLENBQTFCLENBQWxDO0FBQ0FiLHlDQUE2QmUsSUFBN0IsQ0FBa0MsQ0FBRUosT0FBRixFQUFXQyxPQUFYLEVBQW9CQyxNQUFwQixFQUE0QixDQUE1QixDQUFsQztBQUNBYix5Q0FBNkJlLElBQTdCLENBQWtDLENBQUVKLE9BQUYsRUFBV0MsT0FBWCxFQUFvQkUsT0FBcEIsRUFBNkIsQ0FBN0IsQ0FBbEM7QUFDQWQseUNBQTZCZSxJQUE3QixDQUFrQyxDQUFFUixNQUFGLEVBQVVFLE1BQVYsRUFBa0JLLE9BQWxCLEVBQTJCLENBQTNCLENBQWxDO0FBQ0Q7O0FBRUQsVUFBTXBCLDRCQUE0QkgsUUFBUVMsNEJBQVIsQ0FBbEMsQ0FwQjRDLENBb0I4Qjs7QUFFMUUsYUFBT04seUJBQVA7QUFDRCIsImZpbGUiOiJjeWxpbmRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIHZlcnRleFV0aWxpdGllcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy92ZXJ0ZXgnKTtcblxuY29uc3QgeyBmbGF0dGVuIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgY2FsY3VsYXRlVmVydGV4SW5kZXhEYXRhLCBjYWxjdWxhdGVWZXJ0ZXhOb3JtYWxEYXRhfSA9IHZlcnRleFV0aWxpdGllcztcblxuY29uc3QgaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YSA9IGNhbGN1bGF0ZUluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEoKSxcbiAgICAgIHZlcnRleEluZGV4RGF0YSA9IGNhbGN1bGF0ZVZlcnRleEluZGV4RGF0YShpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhKSxcbiAgICAgIHZlcnRleE5vcm1hbERhdGEgPSBjYWxjdWxhdGVWZXJ0ZXhOb3JtYWxEYXRhKGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmVydGV4SW5kZXhEYXRhOiB2ZXJ0ZXhJbmRleERhdGEsXG4gIHZlcnRleE5vcm1hbERhdGE6IHZlcnRleE5vcm1hbERhdGEsXG4gIGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGE6IGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGFcbn07XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEoKSB7XG4gIGNvbnN0IGluaXRpYWxWZXJ0ZXhQb3NpdGlvblZlY3RvcnMgPSBbXSxcbiAgICAgICAgZmFjZXMgPSA2NCwgLy8vXG4gICAgICAgIHN0ZXAgPSAyICogTWF0aC5QSSAvIGZhY2VzO1xuXG4gIGZvciAobGV0IGNvdW50ID0gMDsgY291bnQgPCBmYWNlczsgY291bnQrKykge1xuICAgIGNvbnN0IGFuZ2xlID0gc3RlcCAqIGNvdW50LFxuICAgICAgICAgIGZpcnN0WCA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICBmaXJzdFkgPSBNYXRoLnNpbihhbmdsZSksXG4gICAgICAgICAgc2Vjb25kWCA9IE1hdGguY29zKGFuZ2xlICsgc3RlcCksXG4gICAgICAgICAgc2Vjb25kWSA9IE1hdGguc2luKGFuZ2xlICsgc3RlcCksXG4gICAgICAgICAgZmlyc3RaID0gMCxcbiAgICAgICAgICBzZWNvbmRaID0gMTtcblxuICAgIGluaXRpYWxWZXJ0ZXhQb3NpdGlvblZlY3RvcnMucHVzaChbIGZpcnN0WCwgZmlyc3RZLCBmaXJzdFosIDEgXSk7XG4gICAgaW5pdGlhbFZlcnRleFBvc2l0aW9uVmVjdG9ycy5wdXNoKFsgc2Vjb25kWCwgc2Vjb25kWSwgZmlyc3RaLCAxIF0pO1xuICAgIGluaXRpYWxWZXJ0ZXhQb3NpdGlvblZlY3RvcnMucHVzaChbIHNlY29uZFgsIHNlY29uZFksIHNlY29uZFosIDEgXSk7XG4gICAgaW5pdGlhbFZlcnRleFBvc2l0aW9uVmVjdG9ycy5wdXNoKFsgZmlyc3RYLCBmaXJzdFksIHNlY29uZFosIDEgXSk7XG4gIH1cblxuICBjb25zdCBpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhID0gZmxhdHRlbihpbml0aWFsVmVydGV4UG9zaXRpb25WZWN0b3JzKTsgIC8vL1xuXG4gIHJldHVybiBpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhO1xufVxuIl19