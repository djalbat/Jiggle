'use strict';

var constants = require('../../constants'),
    arrayUtilities = require('../../utilities/array'),
    vertexUtilities = require('../../utilities/vertex');

var CYLINDER_FACES = constants.CYLINDER_FACES,
    flatten = arrayUtilities.flatten,
    calculateVertexIndexData = vertexUtilities.calculateVertexIndexData,
    calculateVertexNormalData = vertexUtilities.calculateVertexNormalData;


var initialVertexPositionData = calculateInitialVertexPositionData(),
    vertexIndexData = calculateVertexIndexData(initialVertexPositionData),
    vertexNormalData = calculateVertexNormalData(initialVertexPositionData);

module.exports = {
      vertexIndexData: vertexIndexData,
      vertexNormalData: vertexNormalData,
      initialVertexPositionData: initialVertexPositionData
};

function calculateInitialVertexPositionData() {
      var initialVertexPositionVectors = [],
          faces = CYLINDER_FACES,
          step = 2 * Math.PI / faces;

      for (var count = 0; count < faces; count++) {
            var angle = step * count,
                firstX = Math.cos(angle),
                firstY = Math.sin(angle),
                secondX = Math.cos(angle + step),
                secondY = Math.sin(angle + step),
                firstZ = 0,
                secondZ = 1;

            initialVertexPositionVectors.push([firstX, firstY, firstZ, 1]);
            initialVertexPositionVectors.push([secondX, secondY, firstZ, 1]);
            initialVertexPositionVectors.push([secondX, secondY, secondZ, 1]);
            initialVertexPositionVectors.push([firstX, firstY, secondZ, 1]);
      }

      var initialVertexPositionData = flatten(initialVertexPositionVectors); ///

      return initialVertexPositionData;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9jb21tb24vY3lsaW5kZXIuanMiXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwidmVydGV4VXRpbGl0aWVzIiwiQ1lMSU5ERVJfRkFDRVMiLCJmbGF0dGVuIiwiY2FsY3VsYXRlVmVydGV4SW5kZXhEYXRhIiwiY2FsY3VsYXRlVmVydGV4Tm9ybWFsRGF0YSIsImluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEiLCJjYWxjdWxhdGVJbml0aWFsVmVydGV4UG9zaXRpb25EYXRhIiwidmVydGV4SW5kZXhEYXRhIiwidmVydGV4Tm9ybWFsRGF0YSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbml0aWFsVmVydGV4UG9zaXRpb25WZWN0b3JzIiwiZmFjZXMiLCJzdGVwIiwiTWF0aCIsIlBJIiwiY291bnQiLCJhbmdsZSIsImZpcnN0WCIsImNvcyIsImZpcnN0WSIsInNpbiIsInNlY29uZFgiLCJzZWNvbmRZIiwiZmlyc3RaIiwic2Vjb25kWiIsInB1c2giXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsaUJBQVIsQ0FBbEI7QUFBQSxJQUNNQyxpQkFBaUJELFFBQVEsdUJBQVIsQ0FEdkI7QUFBQSxJQUVNRSxrQkFBa0JGLFFBQVEsd0JBQVIsQ0FGeEI7O0FBSU0sSUFBRUcsY0FBRixHQUFxQkosU0FBckIsQ0FBRUksY0FBRjtBQUFBLElBQ0VDLE9BREYsR0FDY0gsY0FEZCxDQUNFRyxPQURGO0FBQUEsSUFFRUMsd0JBRkYsR0FFeURILGVBRnpELENBRUVHLHdCQUZGO0FBQUEsSUFFNEJDLHlCQUY1QixHQUV5REosZUFGekQsQ0FFNEJJLHlCQUY1Qjs7O0FBSU4sSUFBTUMsNEJBQTRCQyxvQ0FBbEM7QUFBQSxJQUNNQyxrQkFBa0JKLHlCQUF5QkUseUJBQXpCLENBRHhCO0FBQUEsSUFFTUcsbUJBQW1CSiwwQkFBMEJDLHlCQUExQixDQUZ6Qjs7QUFJQUksT0FBT0MsT0FBUCxHQUFpQjtBQUNmSCx1QkFBaUJBLGVBREY7QUFFZkMsd0JBQWtCQSxnQkFGSDtBQUdmSCxpQ0FBMkJBO0FBSFosQ0FBakI7O0FBTUEsU0FBU0Msa0NBQVQsR0FBOEM7QUFDNUMsVUFBTUssK0JBQStCLEVBQXJDO0FBQUEsVUFDTUMsUUFBUVgsY0FEZDtBQUFBLFVBRU1ZLE9BQU8sSUFBSUMsS0FBS0MsRUFBVCxHQUFjSCxLQUYzQjs7QUFJQSxXQUFLLElBQUlJLFFBQVEsQ0FBakIsRUFBb0JBLFFBQVFKLEtBQTVCLEVBQW1DSSxPQUFuQyxFQUE0QztBQUMxQyxnQkFBTUMsUUFBUUosT0FBT0csS0FBckI7QUFBQSxnQkFDTUUsU0FBU0osS0FBS0ssR0FBTCxDQUFTRixLQUFULENBRGY7QUFBQSxnQkFFTUcsU0FBU04sS0FBS08sR0FBTCxDQUFTSixLQUFULENBRmY7QUFBQSxnQkFHTUssVUFBVVIsS0FBS0ssR0FBTCxDQUFTRixRQUFRSixJQUFqQixDQUhoQjtBQUFBLGdCQUlNVSxVQUFVVCxLQUFLTyxHQUFMLENBQVNKLFFBQVFKLElBQWpCLENBSmhCO0FBQUEsZ0JBS01XLFNBQVMsQ0FMZjtBQUFBLGdCQU1NQyxVQUFVLENBTmhCOztBQVFBZCx5Q0FBNkJlLElBQTdCLENBQWtDLENBQUVSLE1BQUYsRUFBVUUsTUFBVixFQUFrQkksTUFBbEIsRUFBMEIsQ0FBMUIsQ0FBbEM7QUFDQWIseUNBQTZCZSxJQUE3QixDQUFrQyxDQUFFSixPQUFGLEVBQVdDLE9BQVgsRUFBb0JDLE1BQXBCLEVBQTRCLENBQTVCLENBQWxDO0FBQ0FiLHlDQUE2QmUsSUFBN0IsQ0FBa0MsQ0FBRUosT0FBRixFQUFXQyxPQUFYLEVBQW9CRSxPQUFwQixFQUE2QixDQUE3QixDQUFsQztBQUNBZCx5Q0FBNkJlLElBQTdCLENBQWtDLENBQUVSLE1BQUYsRUFBVUUsTUFBVixFQUFrQkssT0FBbEIsRUFBMkIsQ0FBM0IsQ0FBbEM7QUFDRDs7QUFFRCxVQUFNcEIsNEJBQTRCSCxRQUFRUyw0QkFBUixDQUFsQyxDQXBCNEMsQ0FvQjhCOztBQUUxRSxhQUFPTix5QkFBUDtBQUNEIiwiZmlsZSI6ImN5bGluZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi9jb25zdGFudHMnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICB2ZXJ0ZXhVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvdmVydGV4Jyk7XG5cbmNvbnN0IHsgQ1lMSU5ERVJfRkFDRVMgfSA9IGNvbnN0YW50cyxcbiAgICAgIHsgZmxhdHRlbiB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGNhbGN1bGF0ZVZlcnRleEluZGV4RGF0YSwgY2FsY3VsYXRlVmVydGV4Tm9ybWFsRGF0YX0gPSB2ZXJ0ZXhVdGlsaXRpZXM7XG5cbmNvbnN0IGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEgPSBjYWxjdWxhdGVJbml0aWFsVmVydGV4UG9zaXRpb25EYXRhKCksXG4gICAgICB2ZXJ0ZXhJbmRleERhdGEgPSBjYWxjdWxhdGVWZXJ0ZXhJbmRleERhdGEoaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YSksXG4gICAgICB2ZXJ0ZXhOb3JtYWxEYXRhID0gY2FsY3VsYXRlVmVydGV4Tm9ybWFsRGF0YShpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZlcnRleEluZGV4RGF0YTogdmVydGV4SW5kZXhEYXRhLFxuICB2ZXJ0ZXhOb3JtYWxEYXRhOiB2ZXJ0ZXhOb3JtYWxEYXRhLFxuICBpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhOiBpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhXG59O1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVJbml0aWFsVmVydGV4UG9zaXRpb25EYXRhKCkge1xuICBjb25zdCBpbml0aWFsVmVydGV4UG9zaXRpb25WZWN0b3JzID0gW10sXG4gICAgICAgIGZhY2VzID0gQ1lMSU5ERVJfRkFDRVMsXG4gICAgICAgIHN0ZXAgPSAyICogTWF0aC5QSSAvIGZhY2VzO1xuXG4gIGZvciAobGV0IGNvdW50ID0gMDsgY291bnQgPCBmYWNlczsgY291bnQrKykge1xuICAgIGNvbnN0IGFuZ2xlID0gc3RlcCAqIGNvdW50LFxuICAgICAgICAgIGZpcnN0WCA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICBmaXJzdFkgPSBNYXRoLnNpbihhbmdsZSksXG4gICAgICAgICAgc2Vjb25kWCA9IE1hdGguY29zKGFuZ2xlICsgc3RlcCksXG4gICAgICAgICAgc2Vjb25kWSA9IE1hdGguc2luKGFuZ2xlICsgc3RlcCksXG4gICAgICAgICAgZmlyc3RaID0gMCxcbiAgICAgICAgICBzZWNvbmRaID0gMTtcblxuICAgIGluaXRpYWxWZXJ0ZXhQb3NpdGlvblZlY3RvcnMucHVzaChbIGZpcnN0WCwgZmlyc3RZLCBmaXJzdFosIDEgXSk7XG4gICAgaW5pdGlhbFZlcnRleFBvc2l0aW9uVmVjdG9ycy5wdXNoKFsgc2Vjb25kWCwgc2Vjb25kWSwgZmlyc3RaLCAxIF0pO1xuICAgIGluaXRpYWxWZXJ0ZXhQb3NpdGlvblZlY3RvcnMucHVzaChbIHNlY29uZFgsIHNlY29uZFksIHNlY29uZFosIDEgXSk7XG4gICAgaW5pdGlhbFZlcnRleFBvc2l0aW9uVmVjdG9ycy5wdXNoKFsgZmlyc3RYLCBmaXJzdFksIHNlY29uZFosIDEgXSk7XG4gIH1cblxuICBjb25zdCBpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhID0gZmxhdHRlbihpbml0aWFsVmVydGV4UG9zaXRpb25WZWN0b3JzKTsgIC8vL1xuXG4gIHJldHVybiBpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhO1xufVxuIl19