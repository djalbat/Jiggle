'use strict';

var necessary = require('necessary');

var constants = require('../../constants');

var CYLINDER_SIDES = constants.CYLINDER_SIDES,
    arrayUtilities = necessary.arrayUtilities,
    push = arrayUtilities.push;


var defaultIndexes = calculateDefaultIndexes(),
    defaultVertices = calculateDefaultVertices(),
    defaultTextureCoordinates = calculateDefaultTextureCoordinates();

module.exports = {
  defaultIndexes: defaultIndexes,
  defaultVertices: defaultVertices,
  defaultTextureCoordinates: defaultTextureCoordinates
};

function calculateDefaultIndexes() {
  var defaultIndexes = [],
      sides = CYLINDER_SIDES,
      defaultIndexCount = sides * 2;

  for (var count = 0; count < sides; count++) {
    var defaultIndex = count * 2,
        firstDefaultIndexes = [(defaultIndex + 1) % defaultIndexCount, (defaultIndex + 0) % defaultIndexCount, (defaultIndex + 2) % defaultIndexCount],
        secondDefaultIndexes = [(defaultIndex + 2) % defaultIndexCount, (defaultIndex + 3) % defaultIndexCount, (defaultIndex + 1) % defaultIndexCount];

    defaultIndexes.push(firstDefaultIndexes);
    defaultIndexes.push(secondDefaultIndexes);
  }

  return defaultIndexes;
}

function calculateDefaultVertices() {
  var defaultVertices = [],
      sides = CYLINDER_SIDES,
      step = 2 * Math.PI / sides;

  for (var count = 0; count < sides; count++) {
    var angle = step * count,
        angleCosine = Math.cos(angle),
        angleSine = Math.sin(angle),
        topDefaultVertex = [(angleCosine + 1) / 2, (angleSine + 1) / 2, 0],
        bottomDefaultVertex = [(angleCosine + 1) / 2, (angleSine + 1) / 2, 1];

    defaultVertices.push(topDefaultVertex);
    defaultVertices.push(bottomDefaultVertex);
  }

  return defaultVertices;
}

function calculateDefaultTextureCoordinates() {
  var defaultTextureCoordinates = [],
      sides = CYLINDER_SIDES,
      step = 1 / sides;

  for (var count = 0; count < sides; count++) {
    var offset = step * count,
        firstDefaultTextureCoordinates = [[offset, 0], [offset, 1], [offset + step, 1]],
        secondDefaultTextureCoordinates = [[offset + step, 1], [offset + step, 0], [offset, 0]];

    push(defaultTextureCoordinates, firstDefaultTextureCoordinates);
    push(defaultTextureCoordinates, secondDefaultTextureCoordinates);
  }

  return defaultTextureCoordinates;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9jb21tb24vY3lsaW5kZXIuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsImNvbnN0YW50cyIsIkNZTElOREVSX1NJREVTIiwiYXJyYXlVdGlsaXRpZXMiLCJwdXNoIiwiZGVmYXVsdEluZGV4ZXMiLCJjYWxjdWxhdGVEZWZhdWx0SW5kZXhlcyIsImRlZmF1bHRWZXJ0aWNlcyIsImNhbGN1bGF0ZURlZmF1bHRWZXJ0aWNlcyIsImRlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMiLCJjYWxjdWxhdGVEZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzIiwibW9kdWxlIiwiZXhwb3J0cyIsInNpZGVzIiwiZGVmYXVsdEluZGV4Q291bnQiLCJjb3VudCIsImRlZmF1bHRJbmRleCIsImZpcnN0RGVmYXVsdEluZGV4ZXMiLCJzZWNvbmREZWZhdWx0SW5kZXhlcyIsInN0ZXAiLCJNYXRoIiwiUEkiLCJhbmdsZSIsImFuZ2xlQ29zaW5lIiwiY29zIiwiYW5nbGVTaW5lIiwic2luIiwidG9wRGVmYXVsdFZlcnRleCIsImJvdHRvbURlZmF1bHRWZXJ0ZXgiLCJvZmZzZXQiLCJmaXJzdERlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMiLCJzZWNvbmREZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRUEsSUFBTUMsWUFBWUQsUUFBUSxpQkFBUixDQUFsQjs7QUFFTSxJQUFFRSxjQUFGLEdBQXFCRCxTQUFyQixDQUFFQyxjQUFGO0FBQUEsSUFDRUMsY0FERixHQUNxQkosU0FEckIsQ0FDRUksY0FERjtBQUFBLElBRUVDLElBRkYsR0FFV0QsY0FGWCxDQUVFQyxJQUZGOzs7QUFJTixJQUFNQyxpQkFBaUJDLHlCQUF2QjtBQUFBLElBQ01DLGtCQUFrQkMsMEJBRHhCO0FBQUEsSUFFTUMsNEJBQTRCQyxvQ0FGbEM7O0FBSUFDLE9BQU9D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IiwiZmlsZSI6ImN5bGluZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vY29uc3RhbnRzJyk7XG5cbmNvbnN0IHsgQ1lMSU5ERVJfU0lERVMgfSA9IGNvbnN0YW50cyxcbiAgICAgIHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgcHVzaCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmNvbnN0IGRlZmF1bHRJbmRleGVzID0gY2FsY3VsYXRlRGVmYXVsdEluZGV4ZXMoKSxcbiAgICAgIGRlZmF1bHRWZXJ0aWNlcyA9IGNhbGN1bGF0ZURlZmF1bHRWZXJ0aWNlcygpLFxuICAgICAgZGVmYXVsdFRleHR1cmVDb29yZGluYXRlcyA9IGNhbGN1bGF0ZURlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMoKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlZmF1bHRJbmRleGVzOiBkZWZhdWx0SW5kZXhlcyxcbiAgZGVmYXVsdFZlcnRpY2VzOiBkZWZhdWx0VmVydGljZXMsXG4gIGRlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXM6IGRlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXNcbn07XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZURlZmF1bHRJbmRleGVzKCkge1xuICBjb25zdCBkZWZhdWx0SW5kZXhlcyA9IFtdLFxuICAgICAgICBzaWRlcyA9IENZTElOREVSX1NJREVTLFxuICAgICAgICBkZWZhdWx0SW5kZXhDb3VudCA9IHNpZGVzICogMjtcblxuICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgc2lkZXM7IGNvdW50KyspIHtcbiAgICBjb25zdCBkZWZhdWx0SW5kZXggPSBjb3VudCAqIDIsXG4gICAgICAgICAgZmlyc3REZWZhdWx0SW5kZXhlcyA9IFsgKGRlZmF1bHRJbmRleCArIDEpICUgZGVmYXVsdEluZGV4Q291bnQsIChkZWZhdWx0SW5kZXggKyAwKSAlIGRlZmF1bHRJbmRleENvdW50LCAoZGVmYXVsdEluZGV4ICsgMikgJSBkZWZhdWx0SW5kZXhDb3VudCBdLFxuICAgICAgICAgIHNlY29uZERlZmF1bHRJbmRleGVzID0gWyAoZGVmYXVsdEluZGV4ICsgMikgJSBkZWZhdWx0SW5kZXhDb3VudCwgKGRlZmF1bHRJbmRleCArIDMpICUgZGVmYXVsdEluZGV4Q291bnQsIChkZWZhdWx0SW5kZXggKyAxKSAlIGRlZmF1bHRJbmRleENvdW50IF07XG5cbiAgICBkZWZhdWx0SW5kZXhlcy5wdXNoKGZpcnN0RGVmYXVsdEluZGV4ZXMpO1xuICAgIGRlZmF1bHRJbmRleGVzLnB1c2goc2Vjb25kRGVmYXVsdEluZGV4ZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRlZmF1bHRJbmRleGVzO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVEZWZhdWx0VmVydGljZXMoKSB7XG4gIGNvbnN0IGRlZmF1bHRWZXJ0aWNlcyA9IFtdLFxuICAgICAgICBzaWRlcyA9IENZTElOREVSX1NJREVTLFxuICAgICAgICBzdGVwID0gMiAqIE1hdGguUEkgLyBzaWRlcztcblxuICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgc2lkZXM7IGNvdW50KyspIHtcbiAgICBjb25zdCBhbmdsZSA9IHN0ZXAgKiBjb3VudCxcbiAgICAgICAgICBhbmdsZUNvc2luZSA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICBhbmdsZVNpbmUgPSBNYXRoLnNpbihhbmdsZSksXG4gICAgICAgICAgdG9wRGVmYXVsdFZlcnRleCA9IFtcbiAgICAgICAgICAgICggYW5nbGVDb3NpbmUgKyAxICkgLyAyLFxuICAgICAgICAgICAgKCBhbmdsZVNpbmUgKyAxICkgLyAyLFxuICAgICAgICAgICAgMFxuICAgICAgICAgIF0sXG4gICAgICAgICAgYm90dG9tRGVmYXVsdFZlcnRleCA9IFtcbiAgICAgICAgICAgICggYW5nbGVDb3NpbmUgKyAxICkgLyAyLFxuICAgICAgICAgICAgKCBhbmdsZVNpbmUgKyAxICkgLyAyLFxuICAgICAgICAgICAgMVxuICAgICAgICAgIF07XG5cbiAgICBkZWZhdWx0VmVydGljZXMucHVzaCh0b3BEZWZhdWx0VmVydGV4KTtcbiAgICBkZWZhdWx0VmVydGljZXMucHVzaChib3R0b21EZWZhdWx0VmVydGV4KTtcbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0VmVydGljZXM7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZURlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMoKSB7XG4gIGNvbnN0IGRlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMgPSBbXSxcbiAgICAgICAgc2lkZXMgPSBDWUxJTkRFUl9TSURFUyxcbiAgICAgICAgc3RlcCA9IDEgLyBzaWRlcztcblxuICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgc2lkZXM7IGNvdW50KyspIHtcbiAgICBjb25zdCBvZmZzZXQgPSBzdGVwICogY291bnQsXG4gICAgICAgICAgZmlyc3REZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzID0gWyBbIG9mZnNldCwgMCBdLCBbIG9mZnNldCwgMSBdLCBbIG9mZnNldCArIHN0ZXAsIDEgXSBdLFxuICAgICAgICAgIHNlY29uZERlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMgPSBbIFsgb2Zmc2V0ICsgc3RlcCwgMSBdLCBbIG9mZnNldCArIHN0ZXAsIDAgXSwgWyBvZmZzZXQsIDAgXSBdO1xuXG4gICAgcHVzaChkZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzLCBmaXJzdERlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMpO1xuICAgIHB1c2goZGVmYXVsdFRleHR1cmVDb29yZGluYXRlcywgc2Vjb25kRGVmYXVsdFRleHR1cmVDb29yZGluYXRlcyk7XG4gIH1cblxuICByZXR1cm4gZGVmYXVsdFRleHR1cmVDb29yZGluYXRlcztcbn0iXX0=