'use strict';

var constants = require('../../constants');

var CYLINDER_SIDES = constants.CYLINDER_SIDES;


var defaultIndexes = calculateDefaultIndexes(),
    defaultVertices = calculateDefaultVertices();

module.exports = {
  defaultIndexes: defaultIndexes,
  defaultVertices: defaultVertices
};

function calculateDefaultIndexes() {
  var defaultIndexes = [],
      sides = CYLINDER_SIDES,
      defaultIndexCount = sides * 2;

  for (var count = 0; count < sides; count++) {
    var defaultIndex = count * 2;

    defaultIndexes.push([(defaultIndex + 1) % defaultIndexCount, (defaultIndex + 0) % defaultIndexCount, (defaultIndex + 2) % defaultIndexCount]);
    defaultIndexes.push([(defaultIndex + 2) % defaultIndexCount, (defaultIndex + 3) % defaultIndexCount, (defaultIndex + 1) % defaultIndexCount]);
  }

  return defaultIndexes;
}

function calculateDefaultVertices() {
  var defaultVertices = [],
      sides = CYLINDER_SIDES,
      step = 2 * Math.PI / sides;

  for (var count = 0; count < sides; count++) {
    var angle = step * count,
        angleCosine = Math.cos(angle),
        angleSine = Math.sin(angle),
        topDefaultVertex = [(angleCosine + 1) / 2, (angleSine + 1) / 2, 0],
        bottomDefaultVertex = [(angleCosine + 1) / 2, (angleSine + 1) / 2, 1];

    defaultVertices.push(topDefaultVertex);
    defaultVertices.push(bottomDefaultVertex);
  }

  return defaultVertices;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9jb21tb24vY3lsaW5kZXIuanMiXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVxdWlyZSIsIkNZTElOREVSX1NJREVTIiwiZGVmYXVsdEluZGV4ZXMiLCJjYWxjdWxhdGVEZWZhdWx0SW5kZXhlcyIsImRlZmF1bHRWZXJ0aWNlcyIsImNhbGN1bGF0ZURlZmF1bHRWZXJ0aWNlcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJzaWRlcyIsImRlZmF1bHRJbmRleENvdW50IiwiY291bnQiLCJkZWZhdWx0SW5kZXgiLCJwdXNoIiwic3RlcCIsIk1hdGgiLCJQSSIsImFuZ2xlIiwiYW5nbGVDb3NpbmUiLCJjb3MiLCJhbmdsZVNpbmUiLCJzaW4iLCJ0b3BEZWZhdWx0VmVydGV4IiwiYm90dG9tRGVmYXVsdFZlcnRleCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxpQkFBUixDQUFsQjs7SUFFUUMsYyxHQUFtQkYsUyxDQUFuQkUsYzs7O0FBRVIsSUFBTUMsaUJBQWlCQyx5QkFBdkI7QUFBQSxJQUNNQyxrQkFBa0JDLDBCQUR4Qjs7QUFHQUMsT0FBT0MsT0FBUCxHQUFpQjtBQUNmTCxrQkFBZ0JBLGNBREQ7QUFFZkUsbUJBQWlCQTtBQUZGLENBQWpCOztBQUtBLFNBQVNELHVCQUFULEdBQW1DO0FBQ2pDLE1BQU1ELGlCQUFpQixFQUF2QjtBQUFBLE1BQ01NLFFBQVFQLGNBRGQ7QUFBQSxNQUVNUSxvQkFBb0JELFFBQVEsQ0FGbEM7O0FBSUEsT0FBSyxJQUFJRSxRQUFRLENBQWpCLEVBQW9CQSxRQUFRRixLQUE1QixFQUFtQ0UsT0FBbkMsRUFBNEM7QUFDMUMsUUFBTUMsZUFBZUQsUUFBUSxDQUE3Qjs7QUFFQVIsbUJBQWVVLElBQWYsQ0FBb0IsQ0FBRSxDQUFDRCxlQUFlLENBQWhCLElBQXFCRixpQkFBdkIsRUFBMEMsQ0FBQ0UsZUFBZSxDQUFoQixJQUFxQkYsaUJBQS9ELEVBQWtGLENBQUNFLGVBQWUsQ0FBaEIsSUFBcUJGLGlCQUF2RyxDQUFwQjtBQUNBUCxtQkFBZVUsSUFBZixDQUFvQixDQUFFLENBQUNELGVBQWUsQ0FBaEIsSUFBcUJGLGlCQUF2QixFQUEwQyxDQUFDRSxlQUFlLENBQWhCLElBQXFCRixpQkFBL0QsRUFBa0YsQ0FBQ0UsZUFBZSxDQUFoQixJQUFxQkYsaUJBQXZHLENBQXBCO0FBQ0Q7O0FBRUQsU0FBT1AsY0FBUDtBQUNEOztBQUVELFNBQVNHLHdCQUFULEdBQW9DO0FBQ2xDLE1BQU1ELGtCQUFrQixFQUF4QjtBQUFBLE1BQ01JLFFBQVFQLGNBRGQ7QUFBQSxNQUVNWSxPQUFPLElBQUlDLEtBQUtDLEVBQVQsR0FBY1AsS0FGM0I7O0FBSUEsT0FBSyxJQUFJRSxRQUFRLENBQWpCLEVBQW9CQSxRQUFRRixLQUE1QixFQUFtQ0UsT0FBbkMsRUFBNEM7QUFDMUMsUUFBTU0sUUFBUUgsT0FBT0gsS0FBckI7QUFBQSxRQUNNTyxjQUFjSCxLQUFLSSxHQUFMLENBQVNGLEtBQVQsQ0FEcEI7QUFBQSxRQUVNRyxZQUFZTCxLQUFLTSxHQUFMLENBQVNKLEtBQVQsQ0FGbEI7QUFBQSxRQUdNSyxtQkFBbUIsQ0FDakIsQ0FBRUosY0FBYyxDQUFoQixJQUFzQixDQURMLEVBRWpCLENBQUVFLFlBQVksQ0FBZCxJQUFvQixDQUZILEVBR2pCLENBSGlCLENBSHpCO0FBQUEsUUFRTUcsc0JBQXNCLENBQ3BCLENBQUVMLGNBQWMsQ0FBaEIsSUFBc0IsQ0FERixFQUVwQixDQUFFRSxZQUFZLENBQWQsSUFBb0IsQ0FGQSxFQUdwQixDQUhvQixDQVI1Qjs7QUFjQWYsb0JBQWdCUSxJQUFoQixDQUFxQlMsZ0JBQXJCO0FBQ0FqQixvQkFBZ0JRLElBQWhCLENBQXFCVSxtQkFBckI7QUFDRDs7QUFFRCxTQUFPbEIsZUFBUDtBQUNEIiwiZmlsZSI6ImN5bGluZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi9jb25zdGFudHMnKTtcblxuY29uc3QgeyBDWUxJTkRFUl9TSURFUyB9ID0gY29uc3RhbnRzO1xuXG5jb25zdCBkZWZhdWx0SW5kZXhlcyA9IGNhbGN1bGF0ZURlZmF1bHRJbmRleGVzKCksXG4gICAgICBkZWZhdWx0VmVydGljZXMgPSBjYWxjdWxhdGVEZWZhdWx0VmVydGljZXMoKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlZmF1bHRJbmRleGVzOiBkZWZhdWx0SW5kZXhlcyxcbiAgZGVmYXVsdFZlcnRpY2VzOiBkZWZhdWx0VmVydGljZXNcbn07XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZURlZmF1bHRJbmRleGVzKCkge1xuICBjb25zdCBkZWZhdWx0SW5kZXhlcyA9IFtdLFxuICAgICAgICBzaWRlcyA9IENZTElOREVSX1NJREVTLFxuICAgICAgICBkZWZhdWx0SW5kZXhDb3VudCA9IHNpZGVzICogMjtcblxuICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgc2lkZXM7IGNvdW50KyspIHtcbiAgICBjb25zdCBkZWZhdWx0SW5kZXggPSBjb3VudCAqIDI7XG5cbiAgICBkZWZhdWx0SW5kZXhlcy5wdXNoKFsgKGRlZmF1bHRJbmRleCArIDEpICUgZGVmYXVsdEluZGV4Q291bnQsIChkZWZhdWx0SW5kZXggKyAwKSAlIGRlZmF1bHRJbmRleENvdW50LCAoZGVmYXVsdEluZGV4ICsgMikgJSBkZWZhdWx0SW5kZXhDb3VudCBdKTtcbiAgICBkZWZhdWx0SW5kZXhlcy5wdXNoKFsgKGRlZmF1bHRJbmRleCArIDIpICUgZGVmYXVsdEluZGV4Q291bnQsIChkZWZhdWx0SW5kZXggKyAzKSAlIGRlZmF1bHRJbmRleENvdW50LCAoZGVmYXVsdEluZGV4ICsgMSkgJSBkZWZhdWx0SW5kZXhDb3VudCBdKTtcbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0SW5kZXhlcztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlRGVmYXVsdFZlcnRpY2VzKCkge1xuICBjb25zdCBkZWZhdWx0VmVydGljZXMgPSBbXSxcbiAgICAgICAgc2lkZXMgPSBDWUxJTkRFUl9TSURFUyxcbiAgICAgICAgc3RlcCA9IDIgKiBNYXRoLlBJIC8gc2lkZXM7XG5cbiAgZm9yIChsZXQgY291bnQgPSAwOyBjb3VudCA8IHNpZGVzOyBjb3VudCsrKSB7XG4gICAgY29uc3QgYW5nbGUgPSBzdGVwICogY291bnQsXG4gICAgICAgICAgYW5nbGVDb3NpbmUgPSBNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgICAgYW5nbGVTaW5lID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICAgIHRvcERlZmF1bHRWZXJ0ZXggPSBbXG4gICAgICAgICAgICAoIGFuZ2xlQ29zaW5lICsgMSApIC8gMixcbiAgICAgICAgICAgICggYW5nbGVTaW5lICsgMSApIC8gMixcbiAgICAgICAgICAgIDBcbiAgICAgICAgICBdLFxuICAgICAgICAgIGJvdHRvbURlZmF1bHRWZXJ0ZXggPSBbXG4gICAgICAgICAgICAoIGFuZ2xlQ29zaW5lICsgMSApIC8gMixcbiAgICAgICAgICAgICggYW5nbGVTaW5lICsgMSApIC8gMixcbiAgICAgICAgICAgIDFcbiAgICAgICAgICBdO1xuXG4gICAgZGVmYXVsdFZlcnRpY2VzLnB1c2godG9wRGVmYXVsdFZlcnRleCk7XG4gICAgZGVmYXVsdFZlcnRpY2VzLnB1c2goYm90dG9tRGVmYXVsdFZlcnRleCk7XG4gIH1cblxuICByZXR1cm4gZGVmYXVsdFZlcnRpY2VzO1xufVxuIl19