'use strict';

var constants = require('../../constants'),
    arrayUtilities = require('../../utilities/array');

var CYLINDER_FACES = constants.CYLINDER_FACES,
    flatten = arrayUtilities.flatten;


var initialVertexPositionData = calculateInitialVertexPositionData();

module.exports = {
      initialVertexPositionData: initialVertexPositionData
};

function calculateInitialVertexPositionData() {
      var initialVertexPositionVectors = [],
          faces = CYLINDER_FACES,
          step = 2 * Math.PI / faces;

      for (var count = 0; count < faces; count++) {
            var angle = step * count,
                firstX = (Math.cos(angle) + 1) / 2,
                firstY = (Math.sin(angle) + 1) / 2,
                secondX = (Math.cos(angle + step) + 1) / 2,
                secondY = (Math.sin(angle + step) + 1) / 2,
                firstZ = 0,
                secondZ = 1;

            initialVertexPositionVectors.push([firstX, firstY, firstZ]);
            initialVertexPositionVectors.push([secondX, secondY, firstZ]);
            initialVertexPositionVectors.push([secondX, secondY, secondZ]);
            initialVertexPositionVectors.push([firstX, firstY, secondZ]);
      }

      var initialVertexPositionData = flatten(initialVertexPositionVectors); ///

      return initialVertexPositionData;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9jb21tb24vY3lsaW5kZXIuanMiXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiQ1lMSU5ERVJfRkFDRVMiLCJmbGF0dGVuIiwiaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YSIsImNhbGN1bGF0ZUluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5pdGlhbFZlcnRleFBvc2l0aW9uVmVjdG9ycyIsImZhY2VzIiwic3RlcCIsIk1hdGgiLCJQSSIsImNvdW50IiwiYW5nbGUiLCJmaXJzdFgiLCJjb3MiLCJmaXJzdFkiLCJzaW4iLCJzZWNvbmRYIiwic2Vjb25kWSIsImZpcnN0WiIsInNlY29uZFoiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLGlCQUFSLENBQWxCO0FBQUEsSUFDTUMsaUJBQWlCRCxRQUFRLHVCQUFSLENBRHZCOztBQUdNLElBQUVFLGNBQUYsR0FBcUJILFNBQXJCLENBQUVHLGNBQUY7QUFBQSxJQUNFQyxPQURGLEdBQ2NGLGNBRGQsQ0FDRUUsT0FERjs7O0FBR04sSUFBTUMsNEJBQTRCQyxvQ0FBbEM7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZkgsaUNBQTJCQTtBQURaLENBQWpCOztBQUlBLFNBQVNDLGtDQUFULEdBQThDO0FBQzVDLFVBQU1HLCtCQUErQixFQUFyQztBQUFBLFVBQ01DLFFBQVFQLGNBRGQ7QUFBQSxVQUVNUSxPQUFPLElBQUlDLEtBQUtDLEVBQVQsR0FBY0gsS0FGM0I7O0FBSUEsV0FBSyxJQUFJSSxRQUFRLENBQWpCLEVBQW9CQSxRQUFRSixLQUE1QixFQUFtQ0ksT0FBbkMsRUFBNEM7QUFDMUMsZ0JBQU1DLFFBQVFKLE9BQU9HLEtBQXJCO0FBQUEsZ0JBQ01FLFNBQVMsQ0FBQ0osS0FBS0ssR0FBTCxDQUFTRixLQUFULElBQWtCLENBQW5CLElBQXdCLENBRHZDO0FBQUEsZ0JBRU1HLFNBQVMsQ0FBQ04sS0FBS08sR0FBTCxDQUFTSixLQUFULElBQWtCLENBQW5CLElBQXdCLENBRnZDO0FBQUEsZ0JBR01LLFVBQVUsQ0FBQ1IsS0FBS0ssR0FBTCxDQUFTRixRQUFRSixJQUFqQixJQUF5QixDQUExQixJQUErQixDQUgvQztBQUFBLGdCQUlNVSxVQUFVLENBQUNULEtBQUtPLEdBQUwsQ0FBU0osUUFBUUosSUFBakIsSUFBeUIsQ0FBMUIsSUFBK0IsQ0FKL0M7QUFBQSxnQkFLTVcsU0FBUyxDQUxmO0FBQUEsZ0JBTU1DLFVBQVUsQ0FOaEI7O0FBUUFkLHlDQUE2QmUsSUFBN0IsQ0FBa0MsQ0FBRVIsTUFBRixFQUFVRSxNQUFWLEVBQWtCSSxNQUFsQixDQUFsQztBQUNBYix5Q0FBNkJlLElBQTdCLENBQWtDLENBQUVKLE9BQUYsRUFBV0MsT0FBWCxFQUFvQkMsTUFBcEIsQ0FBbEM7QUFDQWIseUNBQTZCZSxJQUE3QixDQUFrQyxDQUFFSixPQUFGLEVBQVdDLE9BQVgsRUFBb0JFLE9BQXBCLENBQWxDO0FBQ0FkLHlDQUE2QmUsSUFBN0IsQ0FBa0MsQ0FBRVIsTUFBRixFQUFVRSxNQUFWLEVBQWtCSyxPQUFsQixDQUFsQztBQUNEOztBQUVELFVBQU1sQiw0QkFBNEJELFFBQVFLLDRCQUFSLENBQWxDLENBcEI0QyxDQW9COEI7O0FBRTFFLGFBQU9KLHlCQUFQO0FBQ0QiLCJmaWxlIjoiY3lsaW5kZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL2NvbnN0YW50cycpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvYXJyYXknKTtcblxuY29uc3QgeyBDWUxJTkRFUl9GQUNFUyB9ID0gY29uc3RhbnRzLFxuICAgICAgeyBmbGF0dGVuIH0gPSBhcnJheVV0aWxpdGllcztcblxuY29uc3QgaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YSA9IGNhbGN1bGF0ZUluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEoKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGE6IGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGFcbn07XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEoKSB7XG4gIGNvbnN0IGluaXRpYWxWZXJ0ZXhQb3NpdGlvblZlY3RvcnMgPSBbXSxcbiAgICAgICAgZmFjZXMgPSBDWUxJTkRFUl9GQUNFUyxcbiAgICAgICAgc3RlcCA9IDIgKiBNYXRoLlBJIC8gZmFjZXM7XG5cbiAgZm9yIChsZXQgY291bnQgPSAwOyBjb3VudCA8IGZhY2VzOyBjb3VudCsrKSB7XG4gICAgY29uc3QgYW5nbGUgPSBzdGVwICogY291bnQsXG4gICAgICAgICAgZmlyc3RYID0gKE1hdGguY29zKGFuZ2xlKSArIDEgKS8gMixcbiAgICAgICAgICBmaXJzdFkgPSAoTWF0aC5zaW4oYW5nbGUpICsgMSApLyAyLFxuICAgICAgICAgIHNlY29uZFggPSAoTWF0aC5jb3MoYW5nbGUgKyBzdGVwKSArIDEgKS8gMixcbiAgICAgICAgICBzZWNvbmRZID0gKE1hdGguc2luKGFuZ2xlICsgc3RlcCkgKyAxICkvIDIsXG4gICAgICAgICAgZmlyc3RaID0gMCxcbiAgICAgICAgICBzZWNvbmRaID0gMTtcblxuICAgIGluaXRpYWxWZXJ0ZXhQb3NpdGlvblZlY3RvcnMucHVzaChbIGZpcnN0WCwgZmlyc3RZLCBmaXJzdFogXSk7XG4gICAgaW5pdGlhbFZlcnRleFBvc2l0aW9uVmVjdG9ycy5wdXNoKFsgc2Vjb25kWCwgc2Vjb25kWSwgZmlyc3RaIF0pO1xuICAgIGluaXRpYWxWZXJ0ZXhQb3NpdGlvblZlY3RvcnMucHVzaChbIHNlY29uZFgsIHNlY29uZFksIHNlY29uZFogXSk7XG4gICAgaW5pdGlhbFZlcnRleFBvc2l0aW9uVmVjdG9ycy5wdXNoKFsgZmlyc3RYLCBmaXJzdFksIHNlY29uZFogXSk7XG4gIH1cblxuICBjb25zdCBpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhID0gZmxhdHRlbihpbml0aWFsVmVydGV4UG9zaXRpb25WZWN0b3JzKTsgIC8vL1xuXG4gIHJldHVybiBpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhO1xufVxuIl19