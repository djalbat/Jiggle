'use strict';

var constants = require('../../constants'),
    arrayUtilities = require('../../utilities/array');

var CYLINDER_SIDES = constants.CYLINDER_SIDES,
    push = arrayUtilities.push;


var defaultColour = [0, 0, 1, 1],
    defaultImageName = "concrete.jpg",
    defaultIndexes = calculateDefaultIndexes(),
    defaultVertexCoordinates = calculateDefaultVertexCoordinates(),
    defaultTextureCoordinates = calculateDefaultTextureCoordinates();

module.exports = {
  defaultImageName: defaultImageName,
  defaultColour: defaultColour,
  defaultIndexes: defaultIndexes,
  defaultVertexCoordinates: defaultVertexCoordinates,
  defaultTextureCoordinates: defaultTextureCoordinates
};

function calculateDefaultVertexCoordinates() {
  var defaultVertexCoordinates = [],
      sides = CYLINDER_SIDES,
      step = 2 * Math.PI / sides;

  for (var count = 0; count < sides; count++) {
    var angle = step * count,
        angleCosine = Math.cos(angle),
        angleSine = Math.sin(angle),
        topDefaultVertexCoordinates = [(angleCosine + 1) / 2, (angleSine + 1) / 2, 0],
        bottomDefaultVertexCoordinates = [(angleCosine + 1) / 2, (angleSine + 1) / 2, 1];

    defaultVertexCoordinates.push(topDefaultVertexCoordinates);
    defaultVertexCoordinates.push(bottomDefaultVertexCoordinates);
  }

  return defaultVertexCoordinates;
}

function calculateDefaultIndexes() {
  var defaultIndexes = [],
      sides = CYLINDER_SIDES,
      defaultIndexCount = sides * 2;

  for (var count = 0; count < sides; count++) {
    var defaultIndex = count * 2,
        firstDefaultIndexes = [(defaultIndex + 1) % defaultIndexCount, (defaultIndex + 0) % defaultIndexCount, (defaultIndex + 2) % defaultIndexCount],
        secondDefaultIndexes = [(defaultIndex + 2) % defaultIndexCount, (defaultIndex + 3) % defaultIndexCount, (defaultIndex + 1) % defaultIndexCount];

    defaultIndexes.push(firstDefaultIndexes);
    defaultIndexes.push(secondDefaultIndexes);
  }

  return defaultIndexes;
}

function calculateDefaultTextureCoordinates() {
  var defaultTextureCoordinates = [],
      sides = CYLINDER_SIDES,
      step = 1 / sides;

  for (var count = 0; count < sides; count++) {
    var offset = step * count,
        firstDefaultTextureCoordinates = [[offset, 0], [offset, 1], [offset + step, 1]],
        secondDefaultTextureCoordinates = [[offset + step, 1], [offset + step, 0], [offset, 0]];

    push(defaultTextureCoordinates, firstDefaultTextureCoordinates);
    push(defaultTextureCoordinates, secondDefaultTextureCoordinates);
  }

  return defaultTextureCoordinates;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9jb21tb24vY3lsaW5kZXIuanMiXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiQ1lMSU5ERVJfU0lERVMiLCJwdXNoIiwiZGVmYXVsdENvbG91ciIsImRlZmF1bHRJbWFnZU5hbWUiLCJkZWZhdWx0SW5kZXhlcyIsImNhbGN1bGF0ZURlZmF1bHRJbmRleGVzIiwiZGVmYXVsdFZlcnRleENvb3JkaW5hdGVzIiwiY2FsY3VsYXRlRGVmYXVsdFZlcnRleENvb3JkaW5hdGVzIiwiZGVmYXVsdFRleHR1cmVDb29yZGluYXRlcyIsImNhbGN1bGF0ZURlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwic2lkZXMiLCJzdGVwIiwiTWF0aCIsIlBJIiwiY291bnQiLCJhbmdsZSIsImFuZ2xlQ29zaW5lIiwiY29zIiwiYW5nbGVTaW5lIiwic2luIiwidG9wRGVmYXVsdFZlcnRleENvb3JkaW5hdGVzIiwiYm90dG9tRGVmYXVsdFZlcnRleENvb3JkaW5hdGVzIiwiZGVmYXVsdEluZGV4Q291bnQiLCJkZWZhdWx0SW5kZXgiLCJmaXJzdERlZmF1bHRJbmRleGVzIiwic2Vjb25kRGVmYXVsdEluZGV4ZXMiLCJvZmZzZXQiLCJmaXJzdERlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMiLCJzZWNvbmREZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLGlCQUFSLENBQWxCO0FBQUEsSUFDTUMsaUJBQWlCRCxRQUFRLHVCQUFSLENBRHZCOztBQUdNLElBQUVFLGNBQUYsR0FBcUJILFNBQXJCLENBQUVHLGNBQUY7QUFBQSxJQUNFQyxJQURGLEdBQ1dGLGNBRFgsQ0FDRUUsSUFERjs7O0FBR04sSUFBTUMsZ0JBQWdCLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLEVBQVcsQ0FBWCxDQUF0QjtBQUFBLElBQ01DLG1CQUFtQixjQUR6QjtBQUFBLElBRU1DLGlCQUFpQkMseUJBRnZCO0FBQUEsSUFHTUMsMkJBQTJCQyxtQ0FIakM7QUFBQSxJQUlNQyw0QkFBNEJDLG9DQUpsQzs7QUFNQUMsT0FBT0MsT0FBUCxHQUFpQjtBQUNmUixvQkFBa0JBLGdCQURIO0FBRWZELGlCQUFlQSxhQUZBO0FBR2ZFLGtCQUFnQkEsY0FIRDtBQUlmRSw0QkFBMEJBLHdCQUpYO0FBS2ZFLDZCQUEyQkE7QUFMWixDQUFqQjs7QUFRQSxTQUFTRCxpQ0FBVCxHQUE2QztBQUMzQyxNQUFNRCwyQkFBMkIsRUFBakM7QUFBQSxNQUNNTSxRQUFRWixjQURkO0FBQUEsTUFFTWEsT0FBTyxJQUFJQyxLQUFLQyxFQUFULEdBQWNILEtBRjNCOztBQUlBLE9BQUssSUFBSUksUUFBUSxDQUFqQixFQUFvQkEsUUFBUUosS0FBNUIsRUFBbUNJLE9BQW5DLEVBQTRDO0FBQzFDLFFBQU1DLFFBQVFKLE9BQU9HLEtBQXJCO0FBQUEsUUFDTUUsY0FBY0osS0FBS0ssR0FBTCxDQUFTRixLQUFULENBRHBCO0FBQUEsUUFFTUcsWUFBWU4sS0FBS08sR0FBTCxDQUFTSixLQUFULENBRmxCO0FBQUEsUUFHTUssOEJBQThCLENBQzVCLENBQUVKLGNBQWMsQ0FBaEIsSUFBc0IsQ0FETSxFQUU1QixDQUFFRSxZQUFZLENBQWQsSUFBb0IsQ0FGUSxFQUc1QixDQUg0QixDQUhwQztBQUFBLFFBUU1HLGlDQUFpQyxDQUMvQixDQUFFTCxjQUFjLENBQWhCLElBQXNCLENBRFMsRUFFL0IsQ0FBRUUsWUFBWSxDQUFkLElBQW9CLENBRlcsRUFHL0IsQ0FIK0IsQ0FSdkM7O0FBY0FkLDZCQUF5QkwsSUFBekIsQ0FBOEJxQiwyQkFBOUI7QUFDQWhCLDZCQUF5QkwsSUFBekIsQ0FBOEJzQiw4QkFBOUI7QUFDRDs7QUFFRCxTQUFPakIsd0JBQVA7QUFDRDs7QUFFRCxTQUFTRCx1QkFBVCxHQUFtQztBQUNqQyxNQUFNRCxpQkFBaUIsRUFBdkI7QUFBQSxNQUNNUSxRQUFRWixjQURkO0FBQUEsTUFFTXdCLG9CQUFvQlosUUFBUSxDQUZsQzs7QUFJQSxPQUFLLElBQUlJLFFBQVEsQ0FBakIsRUFBb0JBLFFBQVFKLEtBQTVCLEVBQW1DSSxPQUFuQyxFQUE0QztBQUMxQyxRQUFNUyxlQUFlVCxRQUFRLENBQTdCO0FBQUEsUUFDTVUsc0JBQXNCLENBQUUsQ0FBQ0QsZUFBZSxDQUFoQixJQUFxQkQsaUJBQXZCLEVBQTBDLENBQUNDLGVBQWUsQ0FBaEIsSUFBcUJELGlCQUEvRCxFQUFrRixDQUFDQyxlQUFlLENBQWhCLElBQXFCRCxpQkFBdkcsQ0FENUI7QUFBQSxRQUVNRyx1QkFBdUIsQ0FBRSxDQUFDRixlQUFlLENBQWhCLElBQXFCRCxpQkFBdkIsRUFBMEMsQ0FBQ0MsZUFBZSxDQUFoQixJQUFxQkQsaUJBQS9ELEVBQWtGLENBQUNDLGVBQWUsQ0FBaEIsSUFBcUJELGlCQUF2RyxDQUY3Qjs7QUFJQXBCLG1CQUFlSCxJQUFmLENBQW9CeUIsbUJBQXBCO0FBQ0F0QixtQkFBZUgsSUFBZixDQUFvQjBCLG9CQUFwQjtBQUNEOztBQUVELFNBQU92QixjQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssa0NBQVQsR0FBOEM7QUFDNUMsTUFBTUQsNEJBQTRCLEVBQWxDO0FBQUEsTUFDTUksUUFBUVosY0FEZDtBQUFBLE1BRU1hLE9BQU8sSUFBSUQsS0FGakI7O0FBSUEsT0FBSyxJQUFJSSxRQUFRLENBQWpCLEVBQW9CQSxRQUFRSixLQUE1QixFQUFtQ0ksT0FBbkMsRUFBNEM7QUFDMUMsUUFBTVksU0FBU2YsT0FBT0csS0FBdEI7QUFBQSxRQUNNYSxpQ0FBaUMsQ0FBRSxDQUFFRCxNQUFGLEVBQVUsQ0FBVixDQUFGLEVBQWlCLENBQUVBLE1BQUYsRUFBVSxDQUFWLENBQWpCLEVBQWdDLENBQUVBLFNBQVNmLElBQVgsRUFBaUIsQ0FBakIsQ0FBaEMsQ0FEdkM7QUFBQSxRQUVNaUIsa0NBQWtDLENBQUUsQ0FBRUYsU0FBU2YsSUFBWCxFQUFpQixDQUFqQixDQUFGLEVBQXdCLENBQUVlLFNBQVNmLElBQVgsRUFBaUIsQ0FBakIsQ0FBeEIsRUFBOEMsQ0FBRWUsTUFBRixFQUFVLENBQVYsQ0FBOUMsQ0FGeEM7O0FBSUEzQixTQUFLTyx5QkFBTCxFQUFnQ3FCLDhCQUFoQztBQUNBNUIsU0FBS08seUJBQUwsRUFBZ0NzQiwrQkFBaEM7QUFDRDs7QUFFRCxTQUFPdEIseUJBQVA7QUFDRCIsImZpbGUiOiJjeWxpbmRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vY29uc3RhbnRzJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy9hcnJheScpO1xuXG5jb25zdCB7IENZTElOREVSX1NJREVTIH0gPSBjb25zdGFudHMsXG4gICAgICB7IHB1c2ggfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5jb25zdCBkZWZhdWx0Q29sb3VyID0gWyAwLCAwLCAxLCAxIF0sXG4gICAgICBkZWZhdWx0SW1hZ2VOYW1lID0gXCJjb25jcmV0ZS5qcGdcIixcbiAgICAgIGRlZmF1bHRJbmRleGVzID0gY2FsY3VsYXRlRGVmYXVsdEluZGV4ZXMoKSxcbiAgICAgIGRlZmF1bHRWZXJ0ZXhDb29yZGluYXRlcyA9IGNhbGN1bGF0ZURlZmF1bHRWZXJ0ZXhDb29yZGluYXRlcygpLFxuICAgICAgZGVmYXVsdFRleHR1cmVDb29yZGluYXRlcyA9IGNhbGN1bGF0ZURlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMoKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlZmF1bHRJbWFnZU5hbWU6IGRlZmF1bHRJbWFnZU5hbWUsXG4gIGRlZmF1bHRDb2xvdXI6IGRlZmF1bHRDb2xvdXIsXG4gIGRlZmF1bHRJbmRleGVzOiBkZWZhdWx0SW5kZXhlcyxcbiAgZGVmYXVsdFZlcnRleENvb3JkaW5hdGVzOiBkZWZhdWx0VmVydGV4Q29vcmRpbmF0ZXMsXG4gIGRlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXM6IGRlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXNcbn07XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZURlZmF1bHRWZXJ0ZXhDb29yZGluYXRlcygpIHtcbiAgY29uc3QgZGVmYXVsdFZlcnRleENvb3JkaW5hdGVzID0gW10sXG4gICAgICAgIHNpZGVzID0gQ1lMSU5ERVJfU0lERVMsXG4gICAgICAgIHN0ZXAgPSAyICogTWF0aC5QSSAvIHNpZGVzO1xuXG4gIGZvciAobGV0IGNvdW50ID0gMDsgY291bnQgPCBzaWRlczsgY291bnQrKykge1xuICAgIGNvbnN0IGFuZ2xlID0gc3RlcCAqIGNvdW50LFxuICAgICAgICAgIGFuZ2xlQ29zaW5lID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICAgIGFuZ2xlU2luZSA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgICB0b3BEZWZhdWx0VmVydGV4Q29vcmRpbmF0ZXMgPSBbXG4gICAgICAgICAgICAoIGFuZ2xlQ29zaW5lICsgMSApIC8gMixcbiAgICAgICAgICAgICggYW5nbGVTaW5lICsgMSApIC8gMixcbiAgICAgICAgICAgIDBcbiAgICAgICAgICBdLFxuICAgICAgICAgIGJvdHRvbURlZmF1bHRWZXJ0ZXhDb29yZGluYXRlcyA9IFtcbiAgICAgICAgICAgICggYW5nbGVDb3NpbmUgKyAxICkgLyAyLFxuICAgICAgICAgICAgKCBhbmdsZVNpbmUgKyAxICkgLyAyLFxuICAgICAgICAgICAgMVxuICAgICAgICAgIF07XG4gIFxuICAgIGRlZmF1bHRWZXJ0ZXhDb29yZGluYXRlcy5wdXNoKHRvcERlZmF1bHRWZXJ0ZXhDb29yZGluYXRlcyk7XG4gICAgZGVmYXVsdFZlcnRleENvb3JkaW5hdGVzLnB1c2goYm90dG9tRGVmYXVsdFZlcnRleENvb3JkaW5hdGVzKTtcbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0VmVydGV4Q29vcmRpbmF0ZXM7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZURlZmF1bHRJbmRleGVzKCkge1xuICBjb25zdCBkZWZhdWx0SW5kZXhlcyA9IFtdLFxuICAgICAgICBzaWRlcyA9IENZTElOREVSX1NJREVTLFxuICAgICAgICBkZWZhdWx0SW5kZXhDb3VudCA9IHNpZGVzICogMjtcblxuICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgc2lkZXM7IGNvdW50KyspIHtcbiAgICBjb25zdCBkZWZhdWx0SW5kZXggPSBjb3VudCAqIDIsXG4gICAgICAgICAgZmlyc3REZWZhdWx0SW5kZXhlcyA9IFsgKGRlZmF1bHRJbmRleCArIDEpICUgZGVmYXVsdEluZGV4Q291bnQsIChkZWZhdWx0SW5kZXggKyAwKSAlIGRlZmF1bHRJbmRleENvdW50LCAoZGVmYXVsdEluZGV4ICsgMikgJSBkZWZhdWx0SW5kZXhDb3VudCBdLFxuICAgICAgICAgIHNlY29uZERlZmF1bHRJbmRleGVzID0gWyAoZGVmYXVsdEluZGV4ICsgMikgJSBkZWZhdWx0SW5kZXhDb3VudCwgKGRlZmF1bHRJbmRleCArIDMpICUgZGVmYXVsdEluZGV4Q291bnQsIChkZWZhdWx0SW5kZXggKyAxKSAlIGRlZmF1bHRJbmRleENvdW50IF07XG5cbiAgICBkZWZhdWx0SW5kZXhlcy5wdXNoKGZpcnN0RGVmYXVsdEluZGV4ZXMpO1xuICAgIGRlZmF1bHRJbmRleGVzLnB1c2goc2Vjb25kRGVmYXVsdEluZGV4ZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRlZmF1bHRJbmRleGVzO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVEZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzKCkge1xuICBjb25zdCBkZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzID0gW10sXG4gICAgICAgIHNpZGVzID0gQ1lMSU5ERVJfU0lERVMsXG4gICAgICAgIHN0ZXAgPSAxIC8gc2lkZXM7XG5cbiAgZm9yIChsZXQgY291bnQgPSAwOyBjb3VudCA8IHNpZGVzOyBjb3VudCsrKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gc3RlcCAqIGNvdW50LFxuICAgICAgICAgIGZpcnN0RGVmYXVsdFRleHR1cmVDb29yZGluYXRlcyA9IFsgWyBvZmZzZXQsIDAgXSwgWyBvZmZzZXQsIDEgXSwgWyBvZmZzZXQgKyBzdGVwLCAxIF0gXSxcbiAgICAgICAgICBzZWNvbmREZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzID0gWyBbIG9mZnNldCArIHN0ZXAsIDEgXSwgWyBvZmZzZXQgKyBzdGVwLCAwIF0sIFsgb2Zmc2V0LCAwIF0gXTtcblxuICAgIHB1c2goZGVmYXVsdFRleHR1cmVDb29yZGluYXRlcywgZmlyc3REZWZhdWx0VGV4dHVyZUNvb3JkaW5hdGVzKTtcbiAgICBwdXNoKGRlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMsIHNlY29uZERlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRlZmF1bHRUZXh0dXJlQ29vcmRpbmF0ZXM7XG59XG4iXX0=