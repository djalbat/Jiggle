'use strict';

var vec3 = require('../../vec3'),
    arrayUtilities = require('../../utilities/array');

var vertexPositionData = [0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0],
    vertexNormalData = [0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, +1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0],
    vertexIndexData = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];

var divide = arrayUtilities.divide,
    flatten = arrayUtilities.flatten;


function calculateVertexPositionData(width, depth, height, offset) {
  var vertexPositions = divide(vertexPositionData, 3); ///

  vertexPositions = vertexPositions.map(function (vertexPosition) {
    vertexPosition = vec3.multiply(vertexPosition, [width, depth, height]);
    vertexPosition = vec3.add(vertexPosition, offset);

    return vertexPosition;
  });

  return flatten(vertexPositions);
}

module.exports = {
  vertexNormalData: vertexNormalData,
  vertexIndexData: vertexIndexData,
  calculateVertexPositionData: calculateVertexPositionData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leGFtcGxlcy9jb21tb24vY3Vib2lkLmpzIl0sIm5hbWVzIjpbInZlYzMiLCJyZXF1aXJlIiwiYXJyYXlVdGlsaXRpZXMiLCJ2ZXJ0ZXhQb3NpdGlvbkRhdGEiLCJ2ZXJ0ZXhOb3JtYWxEYXRhIiwidmVydGV4SW5kZXhEYXRhIiwiZGl2aWRlIiwiZmxhdHRlbiIsImNhbGN1bGF0ZVZlcnRleFBvc2l0aW9uRGF0YSIsIndpZHRoIiwiZGVwdGgiLCJoZWlnaHQiLCJvZmZzZXQiLCJ2ZXJ0ZXhQb3NpdGlvbnMiLCJtYXAiLCJ2ZXJ0ZXhQb3NpdGlvbiIsIm11bHRpcGx5IiwiYWRkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxZQUFSLENBQWI7QUFBQSxJQUNNQyxpQkFBaUJELFFBQVEsdUJBQVIsQ0FEdkI7O0FBR0EsSUFBTUUscUJBQXFCLENBRW5CLEdBRm1CLEVBRWQsR0FGYyxFQUVULEdBRlMsRUFHbkIsR0FIbUIsRUFHZCxHQUhjLEVBR1QsR0FIUyxFQUluQixHQUptQixFQUlkLEdBSmMsRUFJVCxHQUpTLEVBS25CLEdBTG1CLEVBS2QsR0FMYyxFQUtULEdBTFMsRUFPbkIsR0FQbUIsRUFPZCxHQVBjLEVBT1QsR0FQUyxFQVFuQixHQVJtQixFQVFkLEdBUmMsRUFRVCxHQVJTLEVBU25CLEdBVG1CLEVBU2QsR0FUYyxFQVNULEdBVFMsRUFVbkIsR0FWbUIsRUFVZCxHQVZjLEVBVVQsR0FWUyxFQVluQixHQVptQixFQVlkLEdBWmMsRUFZVCxHQVpTLEVBYW5CLEdBYm1CLEVBYWQsR0FiYyxFQWFULEdBYlMsRUFjbkIsR0FkbUIsRUFjZCxHQWRjLEVBY1QsR0FkUyxFQWVuQixHQWZtQixFQWVkLEdBZmMsRUFlVCxHQWZTLEVBaUJuQixHQWpCbUIsRUFpQmQsR0FqQmMsRUFpQlQsR0FqQlMsRUFrQm5CLEdBbEJtQixFQWtCZCxHQWxCYyxFQWtCVCxHQWxCUyxFQW1CbkIs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b0JKLGMsQ0FBcEJJLE07SUFBUUMsTyxHQUFZTCxjLENBQVpLLE87OztBQUVoQixTQUFTQywyQkFBVCxDQUFxQ0MsS0FBckMsRUFBNENDLEtBQTVDLEVBQW1EQyxNQUFuRCxFQUEyREMsTUFBM0QsRUFBbUU7QUFDakUsTUFBSUMsa0JBQWtCUCxPQUFPSCxrQkFBUCxFQUEyQixDQUEzQixDQUF0QixDQURpRSxDQUNYOztBQUV0RFUsb0JBQWtCQSxnQkFBZ0JDLEdBQWhCLENBQW9CLFVBQVNDLGNBQVQsRUFBeUI7QUFDN0RBLHFCQUFpQmYsS0FBS2dCLFFBQUwsQ0FBY0QsY0FBZCxFQUE4QixDQUFDTixLQUFELEVBQVFDLEtBQVIsRUFBZUMsTUFBZixDQUE5QixDQUFqQjtBQUNBSSxxQkFBaUJmLEtBQUtpQixHQUFMLENBQVNGLGNBQVQsRUFBeUJILE1BQXpCLENBQWpCOztBQUVBLFdBQU9HLGNBQVA7QUFDRCxHQUxpQixDQUFsQjs7QUFPQSxTQUFPUixRQUFRTSxlQUFSLENBQVA7QUFDRDs7QUFFREssT0FBT0MsT0FBUCxHQUFpQjtBQUNmZixvQkFBa0JBLGdCQURIO0FBRWZDLG1CQUFpQkEsZUFGRjtBQUdmRywrQkFBNkJBO0FBSGQsQ0FBakIiLCJmaWxlIjoiY3Vib2lkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB2ZWMzID0gcmVxdWlyZSgnLi4vLi4vdmVjMycpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvYXJyYXknKTtcblxuY29uc3QgdmVydGV4UG9zaXRpb25EYXRhID0gW1xuXG4gICAgICAgIDAuMCwgMC4wLCAxLjAsXG4gICAgICAgIDEuMCwgMC4wLCAxLjAsXG4gICAgICAgIDEuMCwgMS4wLCAxLjAsXG4gICAgICAgIDAuMCwgMS4wLCAxLjAsXG5cbiAgICAgICAgMC4wLCAwLjAsIDAuMCxcbiAgICAgICAgMC4wLCAxLjAsIDAuMCxcbiAgICAgICAgMS4wLCAxLjAsIDAuMCxcbiAgICAgICAgMS4wLCAwLjAsIDAuMCxcblxuICAgICAgICAwLjAsIDEuMCwgMC4wLFxuICAgICAgICAwLjAsIDEuMCwgMS4wLFxuICAgICAgICAxLjAsIDEuMCwgMS4wLFxuICAgICAgICAxLjAsIDEuMCwgMC4wLFxuXG4gICAgICAgIDAuMCwgMC4wLCAwLjAsXG4gICAgICAgIDEuMCwgMC4wLCAwLjAsXG4gICAgICAgIDEuMCwgMC4wLCAxLjAsXG4gICAgICAgIDAuMCwgMC4wLCAxLjAsXG5cbiAgICAgICAgMS4wLCAwLjAsIDAuMCxcbiAgICAgICAgMS4wLCAxLjAsIDAuMCxcbiAgICAgICAgMS4wLCAxLjAsIDEuMCxcbiAgICAgICAgMS4wLCAwLjAsIDEuMCxcblxuICAgICAgICAwLjAsIDAuMCwgMC4wLFxuICAgICAgICAwLjAsIDAuMCwgMS4wLFxuICAgICAgICAwLjAsIDEuMCwgMS4wLFxuICAgICAgICAwLjAsIDEuMCwgMC4wLFxuXG4gICAgICBdLFxuICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IFtcblxuICAgICAgICAwLjAsICAwLjAsICsxLjAsXG4gICAgICAgIDAuMCwgIDAuMCwgKzEuMCxcbiAgICAgICAgMC4wLCAgMC4wLCArMS4wLFxuICAgICAgICAwLjAsICAwLjAsICsxLjAsXG5cbiAgICAgICAgMC4wLCAgMC4wLCAtMS4wLFxuICAgICAgICAwLjAsICAwLjAsIC0xLjAsXG4gICAgICAgIDAuMCwgIDAuMCwgLTEuMCxcbiAgICAgICAgMC4wLCAgMC4wLCAtMS4wLFxuXG4gICAgICAgIDAuMCwgKzEuMCwgIDAuMCxcbiAgICAgICAgMC4wLCArMS4wLCAgMC4wLFxuICAgICAgICAwLjAsICsxLjAsICAwLjAsXG4gICAgICAgIDAuMCwgKzEuMCwgIDAuMCxcblxuICAgICAgICAwLjAsIC0xLjAsICAwLjAsXG4gICAgICAgIDAuMCwgLTEuMCwgIDAuMCxcbiAgICAgICAgMC4wLCAtMS4wLCAgMC4wLFxuICAgICAgICAwLjAsIC0xLjAsICAwLjAsXG5cbiAgICAgICAgKzEuMCwgIDAuMCwgIDAuMCxcbiAgICAgICAgKzEuMCwgIDAuMCwgIDAuMCxcbiAgICAgICAgKzEuMCwgIDAuMCwgIDAuMCxcbiAgICAgICAgKzEuMCwgIDAuMCwgIDAuMCxcblxuICAgICAgICAtMS4wLCAgMC4wLCAgMC4wLFxuICAgICAgICAtMS4wLCAgMC4wLCAgMC4wLFxuICAgICAgICAtMS4wLCAgMC4wLCAgMC4wLFxuICAgICAgICAtMS4wLCAgMC4wLCAgMC4wLFxuXG4gICAgICBdLFxuICAgICAgdmVydGV4SW5kZXhEYXRhID0gW1xuXG4gICAgICAgIDAsICAxLCAgMixcbiAgICAgICAgMCwgIDIsICAzLFxuXG4gICAgICAgIDQsICA1LCAgNixcbiAgICAgICAgNCwgIDYsICA3LFxuXG4gICAgICAgIDgsICA5LCAxMCxcbiAgICAgICAgOCwgMTAsIDExLFxuXG4gICAgICAgIDEyLCAxMywgMTQsXG4gICAgICAgIDEyLCAxNCwgMTUsXG5cbiAgICAgICAgMTYsIDE3LCAxOCxcbiAgICAgICAgMTYsIDE4LCAxOSxcblxuICAgICAgICAyMCwgMjEsIDIyLFxuICAgICAgICAyMCwgMjIsIDIzLFxuXG4gICAgICBdO1xuXG5jb25zdCB7IGRpdmlkZSwgZmxhdHRlbiB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVZlcnRleFBvc2l0aW9uRGF0YSh3aWR0aCwgZGVwdGgsIGhlaWdodCwgb2Zmc2V0KSB7XG4gIGxldCB2ZXJ0ZXhQb3NpdGlvbnMgPSBkaXZpZGUodmVydGV4UG9zaXRpb25EYXRhLCAzKTsgIC8vL1xuXG4gIHZlcnRleFBvc2l0aW9ucyA9IHZlcnRleFBvc2l0aW9ucy5tYXAoZnVuY3Rpb24odmVydGV4UG9zaXRpb24pIHtcbiAgICB2ZXJ0ZXhQb3NpdGlvbiA9IHZlYzMubXVsdGlwbHkodmVydGV4UG9zaXRpb24sIFt3aWR0aCwgZGVwdGgsIGhlaWdodF0pIDtcbiAgICB2ZXJ0ZXhQb3NpdGlvbiA9IHZlYzMuYWRkKHZlcnRleFBvc2l0aW9uLCBvZmZzZXQpO1xuXG4gICAgcmV0dXJuIHZlcnRleFBvc2l0aW9uO1xuICB9KTtcblxuICByZXR1cm4gZmxhdHRlbih2ZXJ0ZXhQb3NpdGlvbnMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmVydGV4Tm9ybWFsRGF0YTogdmVydGV4Tm9ybWFsRGF0YSxcbiAgdmVydGV4SW5kZXhEYXRhOiB2ZXJ0ZXhJbmRleERhdGEsXG4gIGNhbGN1bGF0ZVZlcnRleFBvc2l0aW9uRGF0YTogY2FsY3VsYXRlVmVydGV4UG9zaXRpb25EYXRhXG59O1xuIl19