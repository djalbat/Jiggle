'use strict';

var ColouredPlane = require('../common/coloured/plane');

var overallHeight = 9.5,
    overallWidth = 8,
    colour = [1, 1, 1, 1];

var Container = function Container(properties) {
  var position = properties.position,
      rotations = properties.rotations,
      length = properties.length,
      dimensions = [1, 1, 1],
      transformation = {
    dimensions: dimensions,
    position: position,
    rotations: rotations
  },
      overallLength = length,
      overallTransformation = transformation; ///

  return [top(overallLength, overallTransformation), bottom(overallLength, overallTransformation), frontWall(overallLength, overallTransformation), backWall(overallLength, overallTransformation), sideWallA(overallLength, overallTransformation), sideWallB(overallLength, overallTransformation)];
};

module.exports = Container;

var top = function top(overallLength, overallTransformation) {
  var width = overallWidth,
      height = overallLength,
      depth = overallHeight,
      position = [0, overallHeight, overallLength],
      dimensions = {
    width: width,
    height: height,
    depth: depth
  },
      rotations = [-90, 0, 0],
      transformation = {
    position: position,
    dimensions: dimensions,
    rotations: rotations
  },
      transformations = [transformation, overallTransformation];

  return React.createElement(ColouredPlane, { colour: colour, transformations: transformations });
};

var bottom = function bottom(overallLength, overallTransformation) {
  var width = overallWidth,
      height = overallLength,
      depth = 0,
      position = [0, 0, 0],
      dimensions = {
    width: width,
    height: height,
    depth: depth
  },
      rotations = [+90, 0, 0],
      transformation = {
    position: position,
    dimensions: dimensions,
    rotations: rotations
  },
      transformations = [transformation, overallTransformation];

  return React.createElement(ColouredPlane, { colour: colour, transformations: transformations });
};

var frontWall = function frontWall(overallLength, overallTransformation) {
  var width = overallWidth,
      height = overallHeight,
      depth = 0,
      position = [0, 0, overallLength],
      dimensions = {
    width: width,
    height: height,
    depth: depth
  },
      rotations = [0, 0, 0],
      transformation = {
    position: position,
    dimensions: dimensions,
    rotations: rotations
  },
      transformations = [transformation, overallTransformation];

  return React.createElement(ColouredPlane, { colour: colour, transformations: transformations });
};

var backWall = function backWall(overallLength, overallTransformation) {
  var width = overallWidth,
      height = overallHeight,
      depth = 0,
      position = [overallWidth, 0, 0],
      dimensions = {
    width: width,
    height: height,
    depth: depth
  },
      rotations = [0, -180, 0],
      transformation = {
    position: position,
    dimensions: dimensions,
    rotations: rotations
  },
      transformations = [transformation, overallTransformation];

  return React.createElement(ColouredPlane, { colour: colour, transformations: transformations });
};

var sideWallA = function sideWallA(overallLength, overallTransformation) {
  var width = overallLength,
      height = overallHeight,
      depth = 0,
      position = [0, 0, 0],
      dimensions = {
    width: width,
    height: height,
    depth: depth
  },
      rotations = [0, -90, 0],
      transformation = {
    position: position,
    dimensions: dimensions,
    rotations: rotations
  },
      transformations = [transformation, overallTransformation];

  return React.createElement(ColouredPlane, { colour: colour, transformations: transformations });
};

var sideWallB = function sideWallB(overallLength, overallTransformation) {
  var width = overallLength,
      height = overallHeight,
      depth = 0,
      position = [overallWidth, 0, overallLength],
      dimensions = {
    width: width,
    height: height,
    depth: depth
  },
      rotations = [0, +90, 0],
      transformation = {
    position: position,
    dimensions: dimensions,
    rotations: rotations
  },
      transformations = [transformation, overallTransformation];

  return React.createElement(ColouredPlane, { colour: colour, transformations: transformations });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,