'use strict';

var vec3 = require('gl-vec3'); ///

var ColourCuboid = require('../../../common/cuboid/colour');

var height = 0.25,
    thickness = 0.025,
    widthwiseCount = 10,
    depthwiseCount = 5,
    colour = [0.6, 0.6, 0.6, 10];

var OpenMesh = function OpenMesh(properties) {
  var offset = properties.offset,
      width = properties.width,
      depth = properties.depth,
      overallWidth = width,
      overallDepth = depth,
      elements = [];


  for (var index = 1; index < widthwiseCount; index++) {
    var step = overallWidth / widthwiseCount,
        _width = thickness; ///

    elements.push(React.createElement(ColourCuboid, { colour: colour, offset: add(offset, [step * index, 0, -height]), width: _width, depth: overallDepth, height: height }));
  }

  for (var _index = 1; _index < depthwiseCount; _index++) {
    var _step = overallDepth / depthwiseCount,
        _depth = thickness; //;

    elements.push(React.createElement(ColourCuboid, { colour: colour, offset: add(offset, [0, _step * _index, -height]), width: overallWidth, depth: _depth, height: height }));
  }

  return elements;
};

Object.assign(OpenMesh, {
  height: height,
  thickness: thickness
});

module.exports = OpenMesh;

function add(vec1, vec2) {
  var vec = [];

  vec3.add(vec, vec1, vec2);

  return vec;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2VzNi9leGFtcGxlcy9jb250YWluZXJIb3VzZS9iYWxjb255L3NlY3Rpb24vb3Blbk1lc2guanMiXSwibmFtZXMiOlsidmVjMyIsInJlcXVpcmUiLCJDb2xvdXJDdWJvaWQiLCJoZWlnaHQiLCJ0aGlja25lc3MiLCJ3aWR0aHdpc2VDb3VudCIsImRlcHRod2lzZUNvdW50IiwiY29sb3VyIiwiT3Blbk1lc2giLCJwcm9wZXJ0aWVzIiwib2Zmc2V0Iiwid2lkdGgiLCJkZXB0aCIsIm92ZXJhbGxXaWR0aCIsIm92ZXJhbGxEZXB0aCIsImVsZW1lbnRzIiwiaW5kZXgiLCJzdGVwIiwicHVzaCIsImFkZCIsIk9iamVjdCIsImFzc2lnbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2ZWMxIiwidmVjMiIsInZlYyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxTQUFSLENBQWIsQyxDQUFrQzs7QUFFbEMsSUFBTUMsZUFBZUQsUUFBUSwrQkFBUixDQUFyQjs7QUFFQSxJQUFNRSxTQUFTLElBQWY7QUFBQSxJQUNNQyxZQUFZLEtBRGxCO0FBQUEsSUFFTUMsaUJBQWlCLEVBRnZCO0FBQUEsSUFHTUMsaUJBQWlCLENBSHZCO0FBQUEsSUFJTUMsU0FBUyxDQUFFLEdBQUYsRUFBTyxHQUFQLEVBQVksR0FBWixFQUFpQixFQUFqQixDQUpmOztBQU1BLElBQU1DLFdBQVcsU0FBWEEsUUFBVyxDQUFDQyxVQUFELEVBQWdCO0FBQUEsTUFDdkJDLE1BRHVCLEdBQ0VELFVBREYsQ0FDdkJDLE1BRHVCO0FBQUEsTUFDZkMsS0FEZSxHQUNFRixVQURGLENBQ2ZFLEtBRGU7QUFBQSxNQUNSQyxLQURRLEdBQ0VILFVBREYsQ0FDUkcsS0FEUTtBQUFBLE1BRXpCQyxZQUZ5QixHQUVWRixLQUZVO0FBQUEsTUFHekJHLFlBSHlCLEdBR1ZGLEtBSFU7QUFBQSxNQUl6QkcsUUFKeUIsR0FJZCxFQUpjOzs7QUFNL0IsT0FBSyxJQUFJQyxRQUFRLENBQWpCLEVBQW9CQSxRQUFRWCxjQUE1QixFQUE0Q1csT0FBNUMsRUFBcUQ7QUFDbkQsUUFBTUMsT0FBT0osZUFBZVIsY0FBNUI7QUFBQSxRQUNNTSxTQUFRUCxTQURkLENBRG1ELENBRXpCOztBQUUxQlcsYUFBU0csSUFBVCxDQUVFLG9CQUFDLFlBQUQsSUFBYyxRQUFRWCxNQUF0QixFQUE4QixRQUFRWSxJQUFJVCxNQUFKLEVBQVksQ0FBRU8sT0FBT0QsS0FBVCxFQUFnQixDQUFoQixFQUFtQixDQUFDYixNQUFwQixDQUFaLENBQXRDLEVBQWlGLE9BQU9RLE1BQXhGLEVBQStGLE9BQU9HLFlBQXRHLEVBQW9ILFFBQVFYLE1BQTVILEdBRkY7QUFLRDs7QUFFRCxPQUFLLElBQUlhLFNBQVEsQ0FBakIsRUFBb0JBLFNBQVFWLGNBQTVCLEVBQTRDVSxRQUE1QyxFQUFxRDtBQUNuRCxRQUFNQyxRQUFPSCxlQUFlUixjQUE1QjtBQUFBLFFBQ01NLFNBQVFSLFNBRGQsQ0FEbUQsQ0FFekI7O0FBRTFCVyxhQUFTRyxJQUFULENBRUUsb0JBQUMsWUFBRCxJQUFjLFFBQVFYLE1BQXRCLEVBQThCLFFBQVFZLElBQUlULE1BQUosRUFBWSxDQUFFLENBQUYsRUFBS08sUUFBT0QsTUFBWixFQUFtQixDQUFDYixNQUFwQixDQUFaLENBQXRDLEVBQWlGLE9BQU9VLFlBQXhGLEVBQXNHLE9BQU9ELE1BQTdHLEVBQW9ILFFBQVFULE1BQTVILEdBRkY7QUFLRDs7QUFFRCxTQUFPWSxRQUFQO0FBQ0QsQ0E3QkQ7O0FBK0JBSyxPQUFPQyxNQUFQLENBQWNiLFFBQWQsRUFBd0I7QUFDdEJMLFVBQVFBLE1BRGM7QUFFdEJDLGFBQVdBO0FBRlcsQ0FBeEI7O0FBS0FrQixPQUFPQyxPQUFQLEdBQWlCZixRQUFqQjs7QUFFQSxTQUFTVyxHQUFULENBQWFLLElBQWIsRUFBbUJDLElBQW5CLEVBQXlCO0FBQ3ZCLE1BQU1DLE1BQU0sRUFBWjs7QUFFQTFCLE9BQUttQixHQUFMLENBQVNPLEdBQVQsRUFBY0YsSUFBZCxFQUFvQkMsSUFBcEI7O0FBRUEsU0FBT0MsR0FBUDtBQUNEIiwiZmlsZSI6Im9wZW5NZXNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB2ZWMzID0gcmVxdWlyZSgnZ2wtdmVjMycpOyAgLy8vXG5cbmNvbnN0IENvbG91ckN1Ym9pZCA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbW1vbi9jdWJvaWQvY29sb3VyJyk7XG5cbmNvbnN0IGhlaWdodCA9IDAuMjUsXG4gICAgICB0aGlja25lc3MgPSAwLjAyNSxcbiAgICAgIHdpZHRod2lzZUNvdW50ID0gMTAsXG4gICAgICBkZXB0aHdpc2VDb3VudCA9IDUsXG4gICAgICBjb2xvdXIgPSBbIDAuNiwgMC42LCAwLjYsIDEwIF07XG5cbmNvbnN0IE9wZW5NZXNoID0gKHByb3BlcnRpZXMpID0+IHtcbiAgY29uc3QgeyBvZmZzZXQsIHdpZHRoLCBkZXB0aCB9ID0gcHJvcGVydGllcyxcbiAgICAgICAgb3ZlcmFsbFdpZHRoID0gd2lkdGgsIC8vL1xuICAgICAgICBvdmVyYWxsRGVwdGggPSBkZXB0aCwgLy8vXG4gICAgICAgIGVsZW1lbnRzID0gW107XG5cbiAgZm9yIChsZXQgaW5kZXggPSAxOyBpbmRleCA8IHdpZHRod2lzZUNvdW50OyBpbmRleCsrKSB7XG4gICAgY29uc3Qgc3RlcCA9IG92ZXJhbGxXaWR0aCAvIHdpZHRod2lzZUNvdW50LFxuICAgICAgICAgIHdpZHRoID0gdGhpY2tuZXNzOyAgLy8vXG5cbiAgICBlbGVtZW50cy5wdXNoKFxuXG4gICAgICA8Q29sb3VyQ3Vib2lkIGNvbG91cj17Y29sb3VyfSBvZmZzZXQ9e2FkZChvZmZzZXQsIFsgc3RlcCAqIGluZGV4LCAwLCAtaGVpZ2h0IF0pfSB3aWR0aD17d2lkdGh9IGRlcHRoPXtvdmVyYWxsRGVwdGh9IGhlaWdodD17aGVpZ2h0fSAvPlxuXG4gICAgKVxuICB9XG5cbiAgZm9yIChsZXQgaW5kZXggPSAxOyBpbmRleCA8IGRlcHRod2lzZUNvdW50OyBpbmRleCsrKSB7XG4gICAgY29uc3Qgc3RlcCA9IG92ZXJhbGxEZXB0aCAvIGRlcHRod2lzZUNvdW50LFxuICAgICAgICAgIGRlcHRoID0gdGhpY2tuZXNzOyAgLy87XG5cbiAgICBlbGVtZW50cy5wdXNoKFxuXG4gICAgICA8Q29sb3VyQ3Vib2lkIGNvbG91cj17Y29sb3VyfSBvZmZzZXQ9e2FkZChvZmZzZXQsIFsgMCwgc3RlcCAqIGluZGV4LCAtaGVpZ2h0IF0pfSB3aWR0aD17b3ZlcmFsbFdpZHRofSBkZXB0aD17ZGVwdGh9IGhlaWdodD17aGVpZ2h0fSAvPlxuXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRzO1xufTtcblxuT2JqZWN0LmFzc2lnbihPcGVuTWVzaCwge1xuICBoZWlnaHQ6IGhlaWdodCxcbiAgdGhpY2tuZXNzOiB0aGlja25lc3Ncbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9wZW5NZXNoO1xuXG5mdW5jdGlvbiBhZGQodmVjMSwgdmVjMikge1xuICBjb25zdCB2ZWMgPSBbXTtcblxuICB2ZWMzLmFkZCh2ZWMsIHZlYzEsIHZlYzIpO1xuXG4gIHJldHVybiB2ZWM7XG59XG4iXX0=