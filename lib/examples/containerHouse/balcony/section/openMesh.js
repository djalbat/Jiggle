'use strict';

var vec3 = require('gl-vec3'); ///

var ColourCuboid = require('../../../common/cuboid/colour'),
    ColourCylinder = require('../../../common/cylinder/colour');

var overallHeight = 0.25,
    overallThickness = 0.025,
    widthwiseCount = 10,
    depthwiseCount = 5,
    colour = [0.6, 0.6, 0.6, 10];

var OpenMesh = function OpenMesh(properties) {
  var offset = properties.offset,
      width = properties.width,
      depth = properties.depth,
      overallWidth = width,
      overallDepth = depth,
      elements = [];


  for (var index = 1; index < widthwiseCount; index++) {
    var step = overallWidth / widthwiseCount,
        _width = overallThickness,
        ///
    _depth = overallDepth,
        height = overallHeight;

    elements.push(React.createElement(ColourCuboid, { colour: colour, offset: add(offset, [step * index, 0, -height]), width: _width, depth: _depth, height: height }));
  }

  for (var _index = 1; _index < depthwiseCount; _index++) {
    var _step = overallDepth / depthwiseCount,
        diameter = overallHeight / 2,
        ///
    _width2 = diameter,
        ///
    _depth2 = diameter,
        ///
    _height = overallWidth; ///

    elements.push(React.createElement(ColourCylinder, { colour: colour, offset: add(offset, [0, _step * _index, -diameter / 2]), width: _width2, depth: _depth2, height: _height, rotation: [0, 90, 0] }));
  }

  return elements;
};

module.exports = OpenMesh;

function add(vec1, vec2) {
  var vec = [];

  vec3.add(vec, vec1, vec2);

  return vec;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2VzNi9leGFtcGxlcy9jb250YWluZXJIb3VzZS9iYWxjb255L3NlY3Rpb24vb3Blbk1lc2guanMiXSwibmFtZXMiOlsidmVjMyIsInJlcXVpcmUiLCJDb2xvdXJDdWJvaWQiLCJDb2xvdXJDeWxpbmRlciIsIm92ZXJhbGxIZWlnaHQiLCJvdmVyYWxsVGhpY2tuZXNzIiwid2lkdGh3aXNlQ291bnQiLCJkZXB0aHdpc2VDb3VudCIsImNvbG91ciIsIk9wZW5NZXNoIiwicHJvcGVydGllcyIsIm9mZnNldCIsIndpZHRoIiwiZGVwdGgiLCJvdmVyYWxsV2lkdGgiLCJvdmVyYWxsRGVwdGgiLCJlbGVtZW50cyIsImluZGV4Iiwic3RlcCIsImhlaWdodCIsInB1c2giLCJhZGQiLCJkaWFtZXRlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2ZWMxIiwidmVjMiIsInZlYyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxTQUFSLENBQWIsQyxDQUFrQzs7QUFFbEMsSUFBTUMsZUFBZUQsUUFBUSwrQkFBUixDQUFyQjtBQUFBLElBQ01FLGlCQUFpQkYsUUFBUSxpQ0FBUixDQUR2Qjs7QUFHQSxJQUFNRyxnQkFBZ0IsSUFBdEI7QUFBQSxJQUNNQyxtQkFBbUIsS0FEekI7QUFBQSxJQUVNQyxpQkFBaUIsRUFGdkI7QUFBQSxJQUdNQyxpQkFBaUIsQ0FIdkI7QUFBQSxJQUlNQyxTQUFTLENBQUUsR0FBRixFQUFPLEdBQVAsRUFBWSxHQUFaLEVBQWlCLEVBQWpCLENBSmY7O0FBTUEsSUFBTUMsV0FBVyxTQUFYQSxRQUFXLENBQUNDLFVBQUQsRUFBZ0I7QUFBQSxNQUN2QkMsTUFEdUIsR0FDRUQsVUFERixDQUN2QkMsTUFEdUI7QUFBQSxNQUNmQyxLQURlLEdBQ0VGLFVBREYsQ0FDZkUsS0FEZTtBQUFBLE1BQ1JDLEtBRFEsR0FDRUgsVUFERixDQUNSRyxLQURRO0FBQUEsTUFFekJDLFlBRnlCLEdBRVZGLEtBRlU7QUFBQSxNQUd6QkcsWUFIeUIsR0FHVkYsS0FIVTtBQUFBLE1BSXpCRyxRQUp5QixHQUlkLEVBSmM7OztBQU0vQixPQUFLLElBQUlDLFFBQVEsQ0FBakIsRUFBb0JBLFFBQVFYLGNBQTVCLEVBQTRDVyxPQUE1QyxFQUFxRDtBQUNuRCxRQUFNQyxPQUFPSixlQUFlUixjQUE1QjtBQUFBLFFBQ01NLFNBQVFQLGdCQURkO0FBQUEsUUFDaUM7QUFDM0JRLGFBQVFFLFlBRmQ7QUFBQSxRQUdNSSxTQUFTZixhQUhmOztBQUtBWSxhQUFTSSxJQUFULENBRUUsb0JBQUMsWUFBRCxJQUFjLFFBQVFaLE1BQXRCLEVBQThCLFFBQVFhLElBQUlWLE1BQUosRUFBWSxDQUFFTyxPQUFPRCxLQUFULEVBQWdCLENBQWhCLEVBQW1CLENBQUNFLE1BQXBCLENBQVosQ0FBdEMsRUFBaUYsT0FBT1AsTUFBeEYsRUFBK0YsT0FBT0MsTUFBdEcsRUFBNkcsUUFBUU0sTUFBckgsR0FGRjtBQUtEOztBQUVELE9BQUssSUFBSUYsU0FBUSxDQUFqQixFQUFvQkEsU0FBUVYsY0FBNUIsRUFBNENVLFFBQTVDLEVBQXFEO0FBQ25ELFFBQU1DLFFBQU9ILGVBQWVSLGNBQTVCO0FBQUEsUUFDTWUsV0FBV2xCLGdCQUFnQixDQURqQztBQUFBLFFBQ29DO0FBQzlCUSxjQUFRVSxRQUZkO0FBQUEsUUFFd0I7QUFDbEJULGNBQVFTLFFBSGQ7QUFBQSxRQUd3QjtBQUNsQkgsY0FBU0wsWUFKZixDQURtRCxDQUtyQjs7QUFFOUJFLGFBQVNJLElBQVQsQ0FFRSxvQkFBQyxjQUFELElBQWdCLFFBQVFaLE1BQXhCLEVBQWdDLFFBQVFhLElBQUlWLE1BQUosRUFBWSxDQUFFLENBQUYsRUFBS08sUUFBT0QsTUFBWixFQUFtQixDQUFDSyxRQUFELEdBQVUsQ0FBN0IsQ0FBWixDQUF4QyxFQUF1RixPQUFPVixPQUE5RixFQUFxRyxPQUFPQyxPQUE1RyxFQUFtSCxRQUFRTSxPQUEzSCxFQUFtSSxVQUFVLENBQUUsQ0FBRixFQUFLLEVBQUwsRUFBUyxDQUFULENBQTdJLEdBRkY7QUFLRDs7QUFFRCxTQUFPSCxRQUFQO0FBQ0QsQ0FsQ0Q7O0FBb0NBTyxPQUFPQyxPQUFQLEdBQWlCZixRQUFqQjs7QUFFQSxTQUFTWSxHQUFULENBQWFJLElBQWIsRUFBbUJDLElBQW5CLEVBQXlCO0FBQ3ZCLE1BQU1DLE1BQU0sRUFBWjs7QUFFQTNCLE9BQUtxQixHQUFMLENBQVNNLEdBQVQsRUFBY0YsSUFBZCxFQUFvQkMsSUFBcEI7O0FBRUEsU0FBT0MsR0FBUDtBQUNEIiwiZmlsZSI6Im9wZW5NZXNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB2ZWMzID0gcmVxdWlyZSgnZ2wtdmVjMycpOyAgLy8vXG5cbmNvbnN0IENvbG91ckN1Ym9pZCA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbW1vbi9jdWJvaWQvY29sb3VyJyksXG4gICAgICBDb2xvdXJDeWxpbmRlciA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbW1vbi9jeWxpbmRlci9jb2xvdXInKTtcblxuY29uc3Qgb3ZlcmFsbEhlaWdodCA9IDAuMjUsXG4gICAgICBvdmVyYWxsVGhpY2tuZXNzID0gMC4wMjUsXG4gICAgICB3aWR0aHdpc2VDb3VudCA9IDEwLFxuICAgICAgZGVwdGh3aXNlQ291bnQgPSA1LFxuICAgICAgY29sb3VyID0gWyAwLjYsIDAuNiwgMC42LCAxMCBdO1xuXG5jb25zdCBPcGVuTWVzaCA9IChwcm9wZXJ0aWVzKSA9PiB7XG4gIGNvbnN0IHsgb2Zmc2V0LCB3aWR0aCwgZGVwdGggfSA9IHByb3BlcnRpZXMsXG4gICAgICAgIG92ZXJhbGxXaWR0aCA9IHdpZHRoLCAvLy9cbiAgICAgICAgb3ZlcmFsbERlcHRoID0gZGVwdGgsIC8vL1xuICAgICAgICBlbGVtZW50cyA9IFtdO1xuXG4gIGZvciAobGV0IGluZGV4ID0gMTsgaW5kZXggPCB3aWR0aHdpc2VDb3VudDsgaW5kZXgrKykge1xuICAgIGNvbnN0IHN0ZXAgPSBvdmVyYWxsV2lkdGggLyB3aWR0aHdpc2VDb3VudCxcbiAgICAgICAgICB3aWR0aCA9IG92ZXJhbGxUaGlja25lc3MsICAvLy9cbiAgICAgICAgICBkZXB0aCA9IG92ZXJhbGxEZXB0aCxcbiAgICAgICAgICBoZWlnaHQgPSBvdmVyYWxsSGVpZ2h0O1xuXG4gICAgZWxlbWVudHMucHVzaChcblxuICAgICAgPENvbG91ckN1Ym9pZCBjb2xvdXI9e2NvbG91cn0gb2Zmc2V0PXthZGQob2Zmc2V0LCBbIHN0ZXAgKiBpbmRleCwgMCwgLWhlaWdodCBdKX0gd2lkdGg9e3dpZHRofSBkZXB0aD17ZGVwdGh9IGhlaWdodD17aGVpZ2h0fSAvPlxuXG4gICAgKVxuICB9XG5cbiAgZm9yIChsZXQgaW5kZXggPSAxOyBpbmRleCA8IGRlcHRod2lzZUNvdW50OyBpbmRleCsrKSB7XG4gICAgY29uc3Qgc3RlcCA9IG92ZXJhbGxEZXB0aCAvIGRlcHRod2lzZUNvdW50LFxuICAgICAgICAgIGRpYW1ldGVyID0gb3ZlcmFsbEhlaWdodCAvIDIsIC8vL1xuICAgICAgICAgIHdpZHRoID0gZGlhbWV0ZXIsIC8vL1xuICAgICAgICAgIGRlcHRoID0gZGlhbWV0ZXIsIC8vL1xuICAgICAgICAgIGhlaWdodCA9IG92ZXJhbGxXaWR0aDsgIC8vL1xuXG4gICAgZWxlbWVudHMucHVzaChcblxuICAgICAgPENvbG91ckN5bGluZGVyIGNvbG91cj17Y29sb3VyfSBvZmZzZXQ9e2FkZChvZmZzZXQsIFsgMCwgc3RlcCAqIGluZGV4LCAtZGlhbWV0ZXIvMiBdKX0gd2lkdGg9e3dpZHRofSBkZXB0aD17ZGVwdGh9IGhlaWdodD17aGVpZ2h0fSByb3RhdGlvbj17WyAwLCA5MCwgMCBdfSAvPlxuXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPcGVuTWVzaDtcblxuZnVuY3Rpb24gYWRkKHZlYzEsIHZlYzIpIHtcbiAgY29uc3QgdmVjID0gW107XG5cbiAgdmVjMy5hZGQodmVjLCB2ZWMxLCB2ZWMyKTtcblxuICByZXR1cm4gdmVjO1xufVxuIl19