'use strict';

var mat2 = require('gl-mat2');
var mat3 = require('gl-mat3');
var mat4 = require('gl-mat4');

function identity2() {
  return mat2.create();
} ///

function identity3() {
  return mat3.create();
} ///

function identity4() {
  return mat4.create();
} ///

function invert2(matrix) {
  return mat2.invert([], matrix);
}

function invert3(matrix) {
  return mat3.invert([], matrix);
}

function invert4(matrix) {
  return mat4.invert([], matrix);
}

function transpose2(matrix) {
  return mat2.transpose([], matrix);
}

function transpose3(matrix) {
  return mat3.transpose([], matrix);
}

function transpose4(matrix) {
  return mat4.transpose([], matrix);
}

function scale2(matrix, vector) {
  return mat2.scale([], matrix, vector);
}

function scale3(matrix, vector) {
  return mat3.scale([], matrix, vector);
}

function scale4(matrix, vector) {
  return mat4.scale([], matrix, vector);
}

function translate2(matrix, vector) {
  return mat2.translate([], matrix, vector);
}

function translate3(matrix, vector) {
  return mat3.translate([], matrix, vector);
}

function translate4(matrix, vector) {
  return mat4.translate([], matrix, vector);
}

function perspective4(fieldOfView, aspectRatio, zNear, zFar) {
  return mat4.perspective([], fieldOfView, aspectRatio, zNear, zFar);
}

function rotate4(matrix, angle, vector) {
  return mat4.rotate([], matrix, angle, vector);
}

module.exports = {
  identity2: identity2,
  identity3: identity3,
  identity4: identity4,
  invert2: invert2,
  invert3: invert3,
  invert4: invert4,
  scale2: scale2,
  scale3: scale3,
  scale4: scale4,
  transpose2: transpose2,
  transpose3: transpose3,
  transpose4: transpose4,
  translate2: translate2,
  translate3: translate3,
  translate4: translate4,
  perspective4: perspective4,
  rotate4: rotate4
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9tYXRocy9tYXRyaXguanMiXSwibmFtZXMiOlsibWF0MiIsInJlcXVpcmUiLCJtYXQzIiwibWF0NCIsImlkZW50aXR5MiIsImNyZWF0ZSIsImlkZW50aXR5MyIsImlkZW50aXR5NCIsImludmVydDIiLCJtYXRyaXgiLCJpbnZlcnQiLCJpbnZlcnQzIiwiaW52ZXJ0NCIsInRyYW5zcG9zZTIiLCJ0cmFuc3Bvc2UiLCJ0cmFuc3Bvc2UzIiwidHJhbnNwb3NlNCIsInNjYWxlMiIsInZlY3RvciIsInNjYWxlIiwic2NhbGUzIiwic2NhbGU0IiwidHJhbnNsYXRlMiIsInRyYW5zbGF0ZSIsInRyYW5zbGF0ZTMiLCJ0cmFuc2xhdGU0IiwicGVyc3BlY3RpdmU0IiwiZmllbGRPZlZpZXciLCJhc3BlY3RSYXRpbyIsInpOZWFyIiwiekZhciIsInBlcnNwZWN0aXZlIiwicm90YXRlNCIsImFuZ2xlIiwicm90YXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxTQUFSLENBQWI7QUFDQSxJQUFNQyxPQUFPRCxRQUFRLFNBQVIsQ0FBYjtBQUNBLElBQU1FLE9BQU9GLFFBQVEsU0FBUixDQUFiOztBQUVBLFNBQVNHLFNBQVQsR0FBcUI7QUFBRSxTQUFPSixLQUFLSyxNQUFMLEVBQVA7QUFBdUIsQyxDQUFFOztBQUVoRCxTQUFTQyxTQUFULEdBQXFCO0FBQUUsU0FBT0osS0FBS0csTUFBTCxFQUFQO0FBQXVCLEMsQ0FBRTs7QUFFaEQsU0FBU0UsU0FBVCxHQUFxQjtBQUFFLFNBQU9KLEtBQUtFLE1BQUwsRUFBUDtBQUF1QixDLENBQUU7O0FBRWhELFNBQVNHLE9BQVQsQ0FBaUJDLE1BQWpCLEVBQXlCO0FBQUUsU0FBT1QsS0FBS1UsTUFBTCxDQUFZLEVBQVosRUFBZ0JELE1BQWhCLENBQVA7QUFBaUM7O0FBRTVELFNBQVNFLE9BQVQsQ0FBaUJGLE1BQWpCLEVBQXlCO0FBQUUsU0FBT1AsS0FB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LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBtYXQyID0gcmVxdWlyZSgnZ2wtbWF0MicpO1xuY29uc3QgbWF0MyA9IHJlcXVpcmUoJ2dsLW1hdDMnKTtcbmNvbnN0IG1hdDQgPSByZXF1aXJlKCdnbC1tYXQ0Jyk7XG5cbmZ1bmN0aW9uIGlkZW50aXR5MigpIHsgcmV0dXJuIG1hdDIuY3JlYXRlKCk7IH0gIC8vL1xuXG5mdW5jdGlvbiBpZGVudGl0eTMoKSB7IHJldHVybiBtYXQzLmNyZWF0ZSgpOyB9ICAvLy9cblxuZnVuY3Rpb24gaWRlbnRpdHk0KCkgeyByZXR1cm4gbWF0NC5jcmVhdGUoKTsgfSAgLy8vXG5cbmZ1bmN0aW9uIGludmVydDIobWF0cml4KSB7IHJldHVybiBtYXQyLmludmVydChbXSwgbWF0cml4KTsgfVxuXG5mdW5jdGlvbiBpbnZlcnQzKG1hdHJpeCkgeyByZXR1cm4gbWF0My5pbnZlcnQoW10sIG1hdHJpeCk7IH1cblxuZnVuY3Rpb24gaW52ZXJ0NChtYXRyaXgpIHsgcmV0dXJuIG1hdDQuaW52ZXJ0KFtdLCBtYXRyaXgpOyB9XG5cbmZ1bmN0aW9uIHRyYW5zcG9zZTIobWF0cml4KSB7IHJldHVybiBtYXQyLnRyYW5zcG9zZShbXSwgbWF0cml4KTsgfVxuXG5mdW5jdGlvbiB0cmFuc3Bvc2UzKG1hdHJpeCkgeyByZXR1cm4gbWF0My50cmFuc3Bvc2UoW10sIG1hdHJpeCk7IH1cblxuZnVuY3Rpb24gdHJhbnNwb3NlNChtYXRyaXgpIHsgcmV0dXJuIG1hdDQudHJhbnNwb3NlKFtdLCBtYXRyaXgpOyB9XG5cbmZ1bmN0aW9uIHNjYWxlMihtYXRyaXgsIHZlY3RvcikgeyByZXR1cm4gbWF0Mi5zY2FsZShbXSwgbWF0cml4LCB2ZWN0b3IpOyB9XG5cbmZ1bmN0aW9uIHNjYWxlMyhtYXRyaXgsIHZlY3RvcikgeyByZXR1cm4gbWF0My5zY2FsZShbXSwgbWF0cml4LCB2ZWN0b3IpOyB9XG5cbmZ1bmN0aW9uIHNjYWxlNChtYXRyaXgsIHZlY3RvcikgeyByZXR1cm4gbWF0NC5zY2FsZShbXSwgbWF0cml4LCB2ZWN0b3IpOyB9XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZTIobWF0cml4LCB2ZWN0b3IpIHsgcmV0dXJuIG1hdDIudHJhbnNsYXRlKFtdLCBtYXRyaXgsIHZlY3Rvcik7IH1cblxuZnVuY3Rpb24gdHJhbnNsYXRlMyhtYXRyaXgsIHZlY3RvcikgeyByZXR1cm4gbWF0My50cmFuc2xhdGUoW10sIG1hdHJpeCwgdmVjdG9yKTsgfVxuXG5mdW5jdGlvbiB0cmFuc2xhdGU0KG1hdHJpeCwgdmVjdG9yKSB7IHJldHVybiBtYXQ0LnRyYW5zbGF0ZShbXSwgbWF0cml4LCB2ZWN0b3IpOyB9XG5cbmZ1bmN0aW9uIHBlcnNwZWN0aXZlNChmaWVsZE9mVmlldywgYXNwZWN0UmF0aW8sIHpOZWFyLCB6RmFyKSB7IHJldHVybiBtYXQ0LnBlcnNwZWN0aXZlKFtdLCBmaWVsZE9mVmlldywgYXNwZWN0UmF0aW8sIHpOZWFyLCB6RmFyKTsgfVxuXG5mdW5jdGlvbiByb3RhdGU0KG1hdHJpeCwgYW5nbGUsIHZlY3RvcikgeyByZXR1cm4gbWF0NC5yb3RhdGUoW10sIG1hdHJpeCwgYW5nbGUsIHZlY3Rvcik7IH1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlkZW50aXR5MjogaWRlbnRpdHkyLFxuICBpZGVudGl0eTM6IGlkZW50aXR5MyxcbiAgaWRlbnRpdHk0OiBpZGVudGl0eTQsXG4gIGludmVydDI6IGludmVydDIsXG4gIGludmVydDM6IGludmVydDMsXG4gIGludmVydDQ6IGludmVydDQsXG4gIHNjYWxlMjogc2NhbGUyLFxuICBzY2FsZTM6IHNjYWxlMyxcbiAgc2NhbGU0OiBzY2FsZTQsXG4gIHRyYW5zcG9zZTI6IHRyYW5zcG9zZTIsXG4gIHRyYW5zcG9zZTM6IHRyYW5zcG9zZTMsXG4gIHRyYW5zcG9zZTQ6IHRyYW5zcG9zZTQsXG4gIHRyYW5zbGF0ZTI6IHRyYW5zbGF0ZTIsXG4gIHRyYW5zbGF0ZTM6IHRyYW5zbGF0ZTMsXG4gIHRyYW5zbGF0ZTQ6IHRyYW5zbGF0ZTQsXG4gIHBlcnNwZWN0aXZlNDogcGVyc3BlY3RpdmU0LFxuICByb3RhdGU0OiByb3RhdGU0XG59O1xuIl19