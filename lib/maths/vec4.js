'use strict';

var vec4 = require('gl-vec4');

var mat4 = require('./mat4');

var transformMat4 = vec4.transformMat4,
    create = mat4.create,
    translate = mat4.translate,
    scale = mat4.scale,
    rotate = mat4.rotate,
    defaultWidth = 1,
    defaultDepth = 1,
    defaultHeight = 1,
    defaultOffset = [0, 0, 0],
    defaultRotation = [0, 0, 0];


function composeTransform() {
  var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultWidth;
  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultHeight;
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDepth;
  var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultOffset;
  var rotation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultRotation;

  var mat4 = create(),
      xAngle = rotation[0] * Math.PI / 180,
      yAngle = rotation[1] * Math.PI / 180,
      zAngle = rotation[2] * Math.PI / 180;

  translate(mat4, mat4, offset);

  rotate(mat4, mat4, xAngle, [1, 0, 0]);
  rotate(mat4, mat4, yAngle, [0, 1, 0]);
  rotate(mat4, mat4, zAngle, [0, 0, 1]);

  scale(mat4, mat4, [width, height, depth]);

  return function (vec4) {
    return transformMat4(vec4, vec4, mat4);
  };
}

module.exports = module.exports = {
  composeTransform: composeTransform
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9tYXRocy92ZWM0LmpzIl0sIm5hbWVzIjpbInZlYzQiLCJyZXF1aXJlIiwibWF0NCIsInRyYW5zZm9ybU1hdDQiLCJjcmVhdGUiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsInJvdGF0ZSIsImRlZmF1bHRXaWR0aCIsImRlZmF1bHREZXB0aCIsImRlZmF1bHRIZWlnaHQiLCJkZWZhdWx0T2Zmc2V0IiwiZGVmYXVsdFJvdGF0aW9uIiwiY29tcG9zZVRyYW5zZm9ybSIsIndpZHRoIiwiaGVpZ2h0IiwiZGVwdGgiLCJvZmZzZXQiLCJyb3RhdGlvbiIsInhBbmdsZSIsIk1hdGgiLCJQSSIsInlBbmdsZSIsInpBbmdsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLE9BQU9DLFFBQVEsU0FBUixDQUFiOztBQUVBLElBQU1DLE9BQU9ELFFBQVEsUUFBUixDQUFiOztBQUVNLElBQUVFLGFBQUYsR0FBb0JILElBQXBCLENBQUVHLGFBQUY7QUFBQSxJQUNFQyxNQURGLEdBQ3VDRixJQUR2QyxDQUNFRSxNQURGO0FBQUEsSUFDVUMsU0FEVixHQUN1Q0gsSUFEdkMsQ0FDVUcsU0FEVjtBQUFBLElBQ3FCQyxLQURyQixHQUN1Q0osSUFEdkMsQ0FDcUJJLEtBRHJCO0FBQUEsSUFDNEJDLE1BRDVCLEdBQ3VDTCxJQUR2QyxDQUM0QkssTUFENUI7QUFBQSxJQUVBQyxZQUZBLEdBRWUsQ0FGZjtBQUFBLElBR0FDLFlBSEEsR0FHZSxDQUhmO0FBQUEsSUFJQUMsYUFKQSxHQUlnQixDQUpoQjtBQUFBLElBS0FDLGFBTEEsR0FLZ0IsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FMaEI7QUFBQSxJQU1BQyxlQU5BLEdBTWtCLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBTmxCOzs7QUFRTixTQUFTQyxnQkFBVCxHQUFrSjtBQUFBLE1BQXhIQyxLQUF3SCx1RUFBaEhOLFlBQWdIO0FBQUEsTUFBbEdPLE1BQWtHLHVFQUF6RkwsYUFBeUY7QUFBQSxNQUExRU0sS0FBMEUsdUVBQWxFUCxZQUFrRTtBQUFBLE1BQXBEUSxNQUFvRCx1RUFBM0NOLGFBQTJDO0FBQUEsTUFBNUJPLFFBQTRCLHVFQUFqQk4sZUFBaUI7O0FBQ2hKLE1BQU1WLE9BQU9FLFFBQWI7QUFBQSxNQUNNZSxTQUFTRCxTQUFTLENBQVQsSUFBY0UsS0FBS0MsRUFBbkIsR0FBd0IsR0FEdkM7QUFBQSxNQUVNQyxTQUFTSixTQUFTLENBQVQsSUFBY0UsS0FBS0MsRUFBbkIsR0FBd0IsR0FGdkM7QUFBQSxNQUdNRSxTQUFTTCxTQUFTLENBQVQsSUFBY0UsS0FBS0MsRUFBbkIsR0FBd0IsR0FIdkM7O0FBS0FoQixZQUFVSCxJQUFWLEVBQWdCQSxJQUFoQixFQUFzQmUsTUFBdEI7O0FBRUFWLFNBQU9MLElBQVAsRUFBYUEsSUFBYixFQUFtQmlCLE1BQW5CLEVBQTJCLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBQTNCO0FBQ0FaLFNBQU9MLElBQVAsRUFBYUEsSUFBYixFQUFtQm9CLE1BQW5CLEVBQTJCLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBQTNCO0FBQ0FmLFNBQU9MLElBQVAsRUFBYUEsSUFBYixFQUFtQnFCLE1BQW5CLEVBQTJCLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBQTNCOztBQUVBakIsUUFBTUosSUFBTixFQUFZQSxJQUFaLEVBQWtCLENBQUNZLEtBQUQsRUFBUUMsTUFBUixFQUFnQkMsS0FBaEIsQ0FBbEI7O0FBRUEsU0FBTyxVQUFTaEIsSUFBVCxFQUFlO0FBQ3BCLFdBQU9HLGNBQWNILElBQWQsRUFBb0JBLElBQXBCLEVBQTBCRSxJQUExQixDQUFQO0FBQ0QsR0FGRDtBQUdEOztBQUVEc0IsT0FBT0MsT0FBUCxHQUFpQkQsT0FBT0MsT0FBUCxHQUFpQjtBQUNoQ1osb0JBQWtCQTtBQURjLENBQWxDIiwiZmlsZSI6InZlYzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHZlYzQgPSByZXF1aXJlKCdnbC12ZWM0Jyk7XG5cbmNvbnN0IG1hdDQgPSByZXF1aXJlKCcuL21hdDQnKTtcblxuY29uc3QgeyB0cmFuc2Zvcm1NYXQ0IH0gPSB2ZWM0LFxuICAgICAgeyBjcmVhdGUsIHRyYW5zbGF0ZSwgc2NhbGUsIHJvdGF0ZSB9ID0gbWF0NCxcbiAgICAgIGRlZmF1bHRXaWR0aCA9IDEsXG4gICAgICBkZWZhdWx0RGVwdGggPSAxLFxuICAgICAgZGVmYXVsdEhlaWdodCA9IDEsXG4gICAgICBkZWZhdWx0T2Zmc2V0ID0gWyAwLCAwLCAwIF0sXG4gICAgICBkZWZhdWx0Um90YXRpb24gPSBbIDAsIDAsIDAgXTtcblxuZnVuY3Rpb24gY29tcG9zZVRyYW5zZm9ybSh3aWR0aCA9IGRlZmF1bHRXaWR0aCwgaGVpZ2h0ID0gZGVmYXVsdEhlaWdodCwgZGVwdGggPSBkZWZhdWx0RGVwdGgsIG9mZnNldCA9IGRlZmF1bHRPZmZzZXQsIHJvdGF0aW9uID0gZGVmYXVsdFJvdGF0aW9uKSB7XG4gIGNvbnN0IG1hdDQgPSBjcmVhdGUoKSxcbiAgICAgICAgeEFuZ2xlID0gcm90YXRpb25bMF0gKiBNYXRoLlBJIC8gMTgwLFxuICAgICAgICB5QW5nbGUgPSByb3RhdGlvblsxXSAqIE1hdGguUEkgLyAxODAsXG4gICAgICAgIHpBbmdsZSA9IHJvdGF0aW9uWzJdICogTWF0aC5QSSAvIDE4MDtcblxuICB0cmFuc2xhdGUobWF0NCwgbWF0NCwgb2Zmc2V0KTtcblxuICByb3RhdGUobWF0NCwgbWF0NCwgeEFuZ2xlLCBbIDEsIDAsIDAgXSk7XG4gIHJvdGF0ZShtYXQ0LCBtYXQ0LCB5QW5nbGUsIFsgMCwgMSwgMCBdKTtcbiAgcm90YXRlKG1hdDQsIG1hdDQsIHpBbmdsZSwgWyAwLCAwLCAxIF0pO1xuXG4gIHNjYWxlKG1hdDQsIG1hdDQsIFt3aWR0aCwgaGVpZ2h0LCBkZXB0aF0pO1xuXG4gIHJldHVybiBmdW5jdGlvbih2ZWM0KSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybU1hdDQodmVjNCwgdmVjNCwgbWF0NCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbXBvc2VUcmFuc2Zvcm06IGNvbXBvc2VUcmFuc2Zvcm1cbn07XG4iXX0=