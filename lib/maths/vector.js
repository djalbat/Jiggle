"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zero2 = zero2;
exports.zero3 = zero3;
exports.zero4 = zero4;
exports.length2 = length2;
exports.length3 = length3;
exports.length4 = length4;
exports.dot2 = dot2;
exports.dot3 = dot3;
exports.dot4 = dot4;
exports.cross3 = cross3;
exports.normalise2 = normalise2;
exports.normalise3 = normalise3;
exports.normalise4 = normalise4;
exports.reflect2 = reflect2;
exports.reflect3 = reflect3;
exports.reflect4 = reflect4;
exports.scale2 = scale2;
exports.scale3 = scale3;
exports.scale4 = scale4;
exports.add2 = add2;
exports.add3 = add3;
exports.add4 = add4;
exports.subtract2 = subtract2;
exports.subtract3 = subtract3;
exports.subtract4 = subtract4;
exports.multiply2 = multiply2;
exports.multiply3 = multiply3;
exports.multiply4 = multiply4;
exports.transform2 = transform2;
exports.transform3 = transform3;
exports.transform4 = transform4;

function zero2() {
  return [0, 0];
}

function zero3() {
  return [0, 0, 0];
}

function zero4() {
  return [0, 0, 0, 0];
}

function length2(vector) {
  var x = vector[0],
      y = vector[1];
  return Math.sqrt(x * x + y * y);
}

function length3(vector) {
  var x = vector[0],
      y = vector[1],
      z = vector[2];
  return Math.sqrt(x * x + y * y + z * z);
}

function length4(vector) {
  var x = vector[0],
      y = vector[1],
      z = vector[2],
      w = vector[3];
  return Math.sqrt(x * x + y * y + z * z + w * w);
}

function dot2(vectorA, vectorB) {
  return vectorA[0] * vectorB[0] + vectorA[1] * vectorB[1];
}

function dot3(vectorA, vectorB) {
  return vectorA[0] * vectorB[0] + vectorA[1] * vectorB[1] + vectorA[2] * vectorB[2];
}

function dot4(vectorA, vectorB) {
  return vectorA[0] * vectorB[0] + vectorA[1] * vectorB[1] + vectorA[2] * vectorB[2] + vectorA[3] * vectorB[3];
}

function cross3(vectorA, vectorB) {
  var ax = vectorA[0],
      ay = vectorA[1],
      az = vectorA[2],
      bx = vectorB[0],
      by = vectorB[1],
      bz = vectorB[2];
  return [ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx];
}

function normalise2(vector) {
  var x = vector[0],
      y = vector[1],
      length = Math.sqrt(x * x + y * y);

  if (length > 0) {
    return [x / length, y / length];
  }
}

function normalise3(vector) {
  var x = vector[0],
      y = vector[1],
      z = vector[2],
      length = Math.sqrt(x * x + y * y + z * z);

  if (length > 0) {
    return [x / length, y / length, z / length];
  }
}

function normalise4(vector) {
  var x = vector[0],
      y = vector[1],
      z = vector[2],
      w = vector[3],
      length = Math.sqrt(x * x + y * y + z * z + w * w);

  if (length > 0) {
    return [x / length, y / length, z / length, w / length];
  }
}

function reflect2(vector) {
  return [vector[0] * -1, vector[1] * -1];
}

function reflect3(vector) {
  return [vector[0] * -1, vector[1] * -1, vector[2] * -1];
}

function reflect4(vector) {
  return [vector[0] * -1, vector[1] * -1, vector[2] * -1, vector[3] * -1];
}

function scale2(vector, scalar) {
  return [vector[0] * scalar, vector[1] * scalar];
}

function scale3(vector, scalar) {
  return [vector[0] * scalar, vector[1] * scalar, vector[2] * scalar];
}

function scale4(vector, scalar) {
  return [vector[0] * scalar, vector[1] * scalar, vector[2] * scalar, vector[3] * scalar];
}

function add2(vectorA, vectorB) {
  return [vectorA[0] + vectorB[0], vectorA[1] + vectorB[1]];
}

function add3(vectorA, vectorB) {
  return [vectorA[0] + vectorB[0], vectorA[1] + vectorB[1], vectorA[2] + vectorB[2]];
}

function add4(vectorA, vectorB) {
  return [vectorA[0] + vectorB[0], vectorA[1] + vectorB[1], vectorA[2] + vectorB[2], vectorA[3] + vectorB[3]];
}

function subtract2(vectorA, vectorB) {
  return [vectorA[0] - vectorB[0], vectorA[1] - vectorB[1]];
}

function subtract3(vectorA, vectorB) {
  return [vectorA[0] - vectorB[0], vectorA[1] - vectorB[1], vectorA[2] - vectorB[2]];
}

function subtract4(vectorA, vectorB) {
  return [vectorA[0] - vectorB[0], vectorA[1] - vectorB[1], vectorA[2] - vectorB[2], vectorA[3] - vectorB[3]];
}

function multiply2(vectorA, vectorB) {
  return [vectorA[0] * vectorB[0], vectorA[1] * vectorB[1]];
}

function multiply3(vectorA, vectorB) {
  return [vectorA[0] * vectorB[0], vectorA[1] * vectorB[1], vectorA[2] * vectorB[2]];
}

function multiply4(vectorA, vectorB) {
  return [vectorA[0] * vectorB[0], vectorA[1] * vectorB[1], vectorA[2] * vectorB[2], vectorA[3] * vectorB[3]];
}

function transform2(vector, matrix) {
  var x = vector[0],
      y = vector[1];
  return [matrix[0] * x + matrix[2] * y, matrix[1] * x + matrix[3] * y];
}

function transform3(vector, matrix) {
  var x = vector[0],
      y = vector[1],
      z = vector[2];
  return [matrix[0] * x + matrix[3] * y + matrix[6] * z, matrix[1] * x + matrix[4] * y + matrix[7] * z, matrix[2] * x + matrix[5] * y + matrix[8] * z];
}

function transform4(vector, matrix) {
  var x = vector[0],
      y = vector[1],
      z = vector[2],
      w = vector[3];
  return [matrix[0] * x + matrix[4] * y + matrix[8] * z + matrix[12] * w, matrix[1] * x + matrix[5] * y + matrix[9] * z + matrix[13] * w, matrix[2] * x + matrix[6] * y + matrix[10] * z + matrix[14] * w, matrix[3] * x + matrix[7] * y + matrix[11] * z + matrix[15] * w];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci5qcyJdLCJuYW1lcyI6WyJ6ZXJvMiIsInplcm8zIiwiemVybzQiLCJsZW5ndGgyIiwidmVjdG9yIiwieCIsInkiLCJNYXRoIiwic3FydCIsImxlbmd0aDMiLCJ6IiwibGVuZ3RoNCIsInciLCJkb3QyIiwidmVjdG9yQSIsInZlY3RvckIiLCJkb3QzIiwiZG90NCIsImNyb3NzMyIsImF4IiwiYXkiLCJheiIsImJ4IiwiYnkiLCJieiIsIm5vcm1hbGlzZTIiLCJsZW5ndGgiLCJub3JtYWxpc2UzIiwibm9ybWFsaXNlNCIsInJlZmxlY3QyIiwicmVmbGVjdDMiLCJyZWZsZWN0NCIsInNjYWxlMiIsInNjYWxhciIsInNjYWxlMyIsInNjYWxlNCIsImFkZDIiLCJhZGQzIiwiYWRkNCIsInN1YnRyYWN0MiIsInN1YnRyYWN0MyIsInN1YnRyYWN0NCIsIm11bHRpcGx5MiIsIm11bHRpcGx5MyIsIm11bHRpcGx5NCIsInRyYW5zZm9ybTIiLCJtYXRyaXgiLCJ0cmFuc2Zvcm0zIiwidHJhbnNmb3JtNCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFTyxTQUFTQSxLQUFULEdBQWlCO0FBQ3RCLFNBQVEsQ0FFTixDQUZNLEVBR04sQ0FITSxDQUFSO0FBTUQ7O0FBRU0sU0FBU0MsS0FBVCxHQUFpQjtBQUN0QixTQUFRLENBRU4sQ0FGTSxFQUdOLENBSE0sRUFJTixDQUpNLENBQVI7QUFPRDs7QUFFTSxTQUFTQyxLQUFULEdBQWlCO0FBQ3RCLFNBQVEsQ0FFTixDQUZNLEVBR04sQ0FITSxFQUlOLENBSk0sRUFLTixDQUxNLENBQVI7QUFRRDs7QUFFTSxTQUFTQyxPQUFULENBQWlCQyxNQUFqQixFQUF5QjtBQUM5QixNQUFNQyxDQUFDLEdBQUdELE1BQU0sQ0FBQyxDQUFELENBQWhCO0FBQUEsTUFDTUUsQ0FBQyxHQUFHRixNQUFNLENBQUMsQ0FBRCxDQURoQjtBQUdBLFNBQU9HLElBQUksQ0FBQ0MsSUFB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QUFBLE1BRU1NLENBQUMsR0FBR04sTUFBTSxDQUFDLENBQUQsQ0FGaEI7QUFBQSxNQUdNUSxDQUFDLEdBQUdSLE1BQU0sQ0FBQyxDQUFELENBSGhCO0FBS0EsU0FBUSxDQUVOMEMsTUFBTSxDQUFFLENBQUYsQ0FBTixHQUFhekMsQ0FBYixHQUFpQnlDLE1BQU0sQ0FBRSxDQUFGLENBQU4sR0FBYXhDLENBQTlCLEdBQWtDd0MsTUFBTSxDQUFFLENBQUYsQ0FBTixHQUFhcEMsQ0FBL0MsR0FBbURvQyxNQUFNLENBQUMsRUFBRCxDQUFOLEdBQWFsQyxDQUYxRCxFQUdOa0MsTUFBTSxDQUFFLENBQUYsQ0FBTixHQUFhekMsQ0FBYixHQUFpQnlDLE1BQU0sQ0FBRSxDQUFGLENBQU4sR0FBYXhDLENBQTlCLEdBQWtDd0MsTUFBTSxDQUFFLENBQUYsQ0FBTixHQUFhcEMsQ0FBL0MsR0FBbURvQyxNQUFNLENBQUMsRUFBRCxDQUFOLEdBQWFsQyxDQUgxRCxFQUlOa0MsTUFBTSxDQUFFLENBQUYsQ0FBTixHQUFhekMsQ0FBYixHQUFpQnlDLE1BQU0sQ0FBRSxDQUFGLENBQU4sR0FBYXhDLENBQTlCLEdBQWtDd0MsTUFBTSxDQUFDLEVBQUQsQ0FBTixHQUFhcEMsQ0FBL0MsR0FBbURvQyxNQUFNLENBQUMsRUFBRCxDQUFOLEdBQWFsQyxDQUoxRCxFQUtOa0MsTUFBTSxDQUFFLENBQUYsQ0FBTixHQUFhekMsQ0FBYixHQUFpQnlDLE1BQU0sQ0FBRSxDQUFGLENBQU4sR0FBYXhDLENBQTlCLEdBQWtDd0MsTUFBTSxDQUFDLEVBQUQsQ0FBTixHQUFhcEMsQ0FBL0MsR0FBbURvQyxNQUFNLENBQUMsRUFBRCxDQUFOLEdBQWFsQyxDQUwxRCxDQUFSO0FBUUQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHplcm8yKCkge1xuICByZXR1cm4gKFtcblxuICAgIDAsXG4gICAgMCxcblxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHplcm8zKCkge1xuICByZXR1cm4gKFtcblxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuXG4gIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gemVybzQoKSB7XG4gIHJldHVybiAoW1xuXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcblxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aDIodmVjdG9yKSB7XG4gIGNvbnN0IHggPSB2ZWN0b3JbMF0sXG4gICAgICAgIHkgPSB2ZWN0b3JbMV07XG5cbiAgcmV0dXJuIE1hdGguc3FydCh4KnggKyB5KnkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoMyh2ZWN0b3IpIHtcbiAgY29uc3QgeCA9IHZlY3RvclswXSxcbiAgICAgICAgeSA9IHZlY3RvclsxXSxcbiAgICAgICAgeiA9IHZlY3RvclsyXTtcblxuICByZXR1cm4gTWF0aC5zcXJ0KHgqeCArIHkqeSArIHoqeik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGg0KHZlY3Rvcikge1xuICBjb25zdCB4ID0gdmVjdG9yWzBdLFxuICAgICAgICB5ID0gdmVjdG9yWzFdLFxuICAgICAgICB6ID0gdmVjdG9yWzJdLFxuICAgICAgICB3ID0gdmVjdG9yWzNdO1xuXG4gIHJldHVybiBNYXRoLnNxcnQoeCp4ICsgeSp5ICsgeip6ICsgdyp3KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRvdDIodmVjdG9yQSwgdmVjdG9yQikgeyByZXR1cm4gKHZlY3RvckFbMF0gKiB2ZWN0b3JCWzBdICsgdmVjdG9yQVsxXSAqIHZlY3RvckJbMV0pOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBkb3QzKHZlY3RvckEsIHZlY3RvckIpIHsgcmV0dXJuICh2ZWN0b3JBWzBdICogdmVjdG9yQlswXSArIHZlY3RvckFbMV0gKiB2ZWN0b3JCWzFdICsgdmVjdG9yQVsyXSAqIHZlY3RvckJbMl0pOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBkb3Q0KHZlY3RvckEsIHZlY3RvckIpIHsgcmV0dXJuICh2ZWN0b3JBWzBdICogdmVjdG9yQlswXSArIHZlY3RvckFbMV0gKiB2ZWN0b3JCWzFdICsgdmVjdG9yQVsyXSAqIHZlY3RvckJbMl0gKyB2ZWN0b3JBWzNdICogdmVjdG9yQlszXSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyb3NzMyh2ZWN0b3JBLCB2ZWN0b3JCKSB7XG4gIGNvbnN0IGF4ID0gdmVjdG9yQVswXSwgYXkgPSB2ZWN0b3JBWzFdLCBheiA9IHZlY3RvckFbMl0sXG4gICAgICAgIGJ4ID0gdmVjdG9yQlswXSwgYnkgPSB2ZWN0b3JCWzFdLCBieiA9IHZlY3RvckJbMl07XG5cbiAgcmV0dXJuIChbXG5cbiAgICBheSAqIGJ6IC0gYXogKiBieSxcbiAgICBheiAqIGJ4IC0gYXggKiBieixcbiAgICBheCAqIGJ5IC0gYXkgKiBieCxcblxuICBdKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXNlMih2ZWN0b3IpIHtcbiAgY29uc3QgeCA9IHZlY3RvclswXSxcbiAgICAgICAgeSA9IHZlY3RvclsxXSxcbiAgICAgICAgbGVuZ3RoID0gTWF0aC5zcXJ0KHgqeCArIHkqeSk7XG5cbiAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gKFtcblxuICAgICAgeCAvIGxlbmd0aCxcbiAgICAgIHkgLyBsZW5ndGgsXG5cbiAgICBdKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXNlMyh2ZWN0b3IpIHtcbiAgY29uc3QgeCA9IHZlY3RvclswXSxcbiAgICAgICAgeSA9IHZlY3RvclsxXSxcbiAgICAgICAgeiA9IHZlY3RvclsyXSxcbiAgICAgICAgbGVuZ3RoID0gTWF0aC5zcXJ0KHgqeCArIHkqeSArIHoqeik7XG5cbiAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gKFtcblxuICAgICAgeCAvIGxlbmd0aCxcbiAgICAgIHkgLyBsZW5ndGgsXG4gICAgICB6IC8gbGVuZ3RoLFxuXG4gICAgXSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGlzZTQodmVjdG9yKSB7XG4gIGNvbnN0IHggPSB2ZWN0b3JbMF0sXG4gICAgICAgIHkgPSB2ZWN0b3JbMV0sXG4gICAgICAgIHogPSB2ZWN0b3JbMl0sXG4gICAgICAgIHcgPSB2ZWN0b3JbM10sXG4gICAgICAgIGxlbmd0aCA9IE1hdGguc3FydCh4KnggKyB5KnkgKyB6KnogKyB3KncpO1xuXG4gIGlmIChsZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIChbXG5cbiAgICAgIHggLyBsZW5ndGgsXG4gICAgICB5IC8gbGVuZ3RoLFxuICAgICAgeiAvIGxlbmd0aCxcbiAgICAgIHcgLyBsZW5ndGgsXG5cbiAgICBdKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVmbGVjdDIodmVjdG9yKSB7XG4gIHJldHVybiAoW1xuXG4gICAgdmVjdG9yWzBdICogLTEsXG4gICAgdmVjdG9yWzFdICogLTEsXG5cbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWZsZWN0Myh2ZWN0b3IpIHtcbiAgcmV0dXJuIChbXG5cbiAgICB2ZWN0b3JbMF0gKiAtMSxcbiAgICB2ZWN0b3JbMV0gKiAtMSxcbiAgICB2ZWN0b3JbMl0gKiAtMSxcblxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZmxlY3Q0KHZlY3Rvcikge1xuICByZXR1cm4gKFtcblxuICAgIHZlY3RvclswXSAqIC0xLFxuICAgIHZlY3RvclsxXSAqIC0xLFxuICAgIHZlY3RvclsyXSAqIC0xLFxuICAgIHZlY3RvclszXSAqIC0xLFxuXG4gIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUyKHZlY3Rvciwgc2NhbGFyKSB7XG4gIHJldHVybiAoW1xuXG4gICAgdmVjdG9yWzBdICogc2NhbGFyLFxuICAgIHZlY3RvclsxXSAqIHNjYWxhcixcblxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlMyh2ZWN0b3IsIHNjYWxhcikge1xuICByZXR1cm4gKFtcblxuICAgIHZlY3RvclswXSAqIHNjYWxhcixcbiAgICB2ZWN0b3JbMV0gKiBzY2FsYXIsXG4gICAgdmVjdG9yWzJdICogc2NhbGFyLFxuXG4gIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGU0KHZlY3Rvciwgc2NhbGFyKSB7XG4gIHJldHVybiAoW1xuXG4gICAgdmVjdG9yWzBdICogc2NhbGFyLFxuICAgIHZlY3RvclsxXSAqIHNjYWxhcixcbiAgICB2ZWN0b3JbMl0gKiBzY2FsYXIsXG4gICAgdmVjdG9yWzNdICogc2NhbGFyLFxuXG4gIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkMih2ZWN0b3JBLCB2ZWN0b3JCKSB7XG4gIHJldHVybiAoW1xuXG4gICAgdmVjdG9yQVswXSArIHZlY3RvckJbMF0sXG4gICAgdmVjdG9yQVsxXSArIHZlY3RvckJbMV0sXG5cbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQzKHZlY3RvckEsIHZlY3RvckIpIHtcbiAgcmV0dXJuIChbXG5cbiAgICB2ZWN0b3JBWzBdICsgdmVjdG9yQlswXSxcbiAgICB2ZWN0b3JBWzFdICsgdmVjdG9yQlsxXSxcbiAgICB2ZWN0b3JBWzJdICsgdmVjdG9yQlsyXSxcblxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZDQodmVjdG9yQSwgdmVjdG9yQikge1xuICByZXR1cm4gKFtcblxuICAgIHZlY3RvckFbMF0gKyB2ZWN0b3JCWzBdLFxuICAgIHZlY3RvckFbMV0gKyB2ZWN0b3JCWzFdLFxuICAgIHZlY3RvckFbMl0gKyB2ZWN0b3JCWzJdLFxuICAgIHZlY3RvckFbM10gKyB2ZWN0b3JCWzNdLFxuXG4gIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3QyKHZlY3RvckEsIHZlY3RvckIpIHtcbiAgcmV0dXJuIChbXG5cbiAgICB2ZWN0b3JBWzBdIC0gdmVjdG9yQlswXSxcbiAgICB2ZWN0b3JBWzFdIC0gdmVjdG9yQlsxXSxcblxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0Myh2ZWN0b3JBLCB2ZWN0b3JCKSB7XG4gIHJldHVybiAoW1xuXG4gICAgdmVjdG9yQVswXSAtIHZlY3RvckJbMF0sXG4gICAgdmVjdG9yQVsxXSAtIHZlY3RvckJbMV0sXG4gICAgdmVjdG9yQVsyXSAtIHZlY3RvckJbMl0sXG5cbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdDQodmVjdG9yQSwgdmVjdG9yQikge1xuICByZXR1cm4gKFtcblxuICAgIHZlY3RvckFbMF0gLSB2ZWN0b3JCWzBdLFxuICAgIHZlY3RvckFbMV0gLSB2ZWN0b3JCWzFdLFxuICAgIHZlY3RvckFbMl0gLSB2ZWN0b3JCWzJdLFxuICAgIHZlY3RvckFbM10gLSB2ZWN0b3JCWzNdLFxuXG4gIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkyKHZlY3RvckEsIHZlY3RvckIpIHtcbiAgcmV0dXJuIChbXG5cbiAgICB2ZWN0b3JBWzBdICogdmVjdG9yQlswXSxcbiAgICB2ZWN0b3JBWzFdICogdmVjdG9yQlsxXSxcblxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5Myh2ZWN0b3JBLCB2ZWN0b3JCKSB7XG4gIHJldHVybiAoW1xuXG4gICAgdmVjdG9yQVswXSAqIHZlY3RvckJbMF0sXG4gICAgdmVjdG9yQVsxXSAqIHZlY3RvckJbMV0sXG4gICAgdmVjdG9yQVsyXSAqIHZlY3RvckJbMl0sXG5cbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseTQodmVjdG9yQSwgdmVjdG9yQikge1xuICByZXR1cm4gKFtcblxuICAgIHZlY3RvckFbMF0gKiB2ZWN0b3JCWzBdLFxuICAgIHZlY3RvckFbMV0gKiB2ZWN0b3JCWzFdLFxuICAgIHZlY3RvckFbMl0gKiB2ZWN0b3JCWzJdLFxuICAgIHZlY3RvckFbM10gKiB2ZWN0b3JCWzNdLFxuXG4gIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtMih2ZWN0b3IsIG1hdHJpeCkge1xuICBjb25zdCB4ID0gdmVjdG9yWzBdLFxuICAgICAgICB5ID0gdmVjdG9yWzFdO1xuXG4gIHJldHVybiAoW1xuXG4gICAgbWF0cml4WzBdICogeCArIG1hdHJpeFsyXSAqIHksXG4gICAgbWF0cml4WzFdICogeCArIG1hdHJpeFszXSAqIHksXG5cbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm0zKHZlY3RvciwgbWF0cml4KSB7XG4gIGNvbnN0IHggPSB2ZWN0b3JbMF0sXG4gICAgICAgIHkgPSB2ZWN0b3JbMV0sXG4gICAgICAgIHogPSB2ZWN0b3JbMl07XG5cbiAgcmV0dXJuIChbXG5cbiAgICBtYXRyaXhbMF0gKiB4ICsgbWF0cml4WzNdICogeSArIG1hdHJpeFs2XSAqIHosXG4gICAgbWF0cml4WzFdICogeCArIG1hdHJpeFs0XSAqIHkgKyBtYXRyaXhbN10gKiB6LFxuICAgIG1hdHJpeFsyXSAqIHggKyBtYXRyaXhbNV0gKiB5ICsgbWF0cml4WzhdICogeixcblxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybTQodmVjdG9yLCBtYXRyaXgpIHtcbiAgY29uc3QgeCA9IHZlY3RvclswXSxcbiAgICAgICAgeSA9IHZlY3RvclsxXSxcbiAgICAgICAgeiA9IHZlY3RvclsyXSxcbiAgICAgICAgdyA9IHZlY3RvclszXTtcblxuICByZXR1cm4gKFtcblxuICAgIG1hdHJpeFsgMF0gKiB4ICsgbWF0cml4WyA0XSAqIHkgKyBtYXRyaXhbIDhdICogeiArIG1hdHJpeFsxMl0gKiB3LFxuICAgIG1hdHJpeFsgMV0gKiB4ICsgbWF0cml4WyA1XSAqIHkgKyBtYXRyaXhbIDldICogeiArIG1hdHJpeFsxM10gKiB3LFxuICAgIG1hdHJpeFsgMl0gKiB4ICsgbWF0cml4WyA2XSAqIHkgKyBtYXRyaXhbMTBdICogeiArIG1hdHJpeFsxNF0gKiB3LFxuICAgIG1hdHJpeFsgM10gKiB4ICsgbWF0cml4WyA3XSAqIHkgKyBtYXRyaXhbMTFdICogeiArIG1hdHJpeFsxNV0gKiB3LFxuXG4gIF0pO1xufVxuIl19