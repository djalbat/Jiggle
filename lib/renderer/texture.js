'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Renderer = require('../renderer'),
    TextureRendererBuffers = require('../renderer/buffers/texture'),
    TextureRendererData = require('../renderer/data/texture'),
    vertexShaderSource = require('./source/texture/vertexShader'),
    fragmentShaderSource = require('./source/texture/fragmentShader'),
    TextureUniformLocations = require('./locations/texture/uniform'),
    TextureAttributeLocations = require('./locations/texture/attribute');

var createProgram = Renderer.createProgram;

var TextureRenderer = function (_Renderer) {
  _inherits(TextureRenderer, _Renderer);

  function TextureRenderer(program, rendererData, rendererBuffers, uniformLocations, attributeLocations, imageJSON) {
    _classCallCheck(this, TextureRenderer);

    var _this = _possibleConstructorReturn(this, (TextureRenderer.__proto__ || Object.getPrototypeOf(TextureRenderer)).call(this, program, rendererData, rendererBuffers, uniformLocations, attributeLocations));

    _this.imageJSON = imageJSON;
    return _this;
  }

  _createClass(TextureRenderer, [{
    key: 'getImageJSON',
    value: function getImageJSON() {
      return this.imageJSON;
    }
  }, {
    key: 'getTextureCoordinateAttributeLocation',
    value: function getTextureCoordinateAttributeLocation() {
      var attributeLocations = this.getAttributeLocations(),
          textureCoordinateAttributeLocation = attributeLocations.getTextureCoordinateAttributeLocation();

      return textureCoordinateAttributeLocation;
    }
  }, {
    key: 'addVertexTextureCoordinates',
    value: function addVertexTextureCoordinates(vertexTextureCoordinates) {
      this.rendererData.addVertexTextureCoordinates(vertexTextureCoordinates);
    }
  }, {
    key: 'createBuffers',
    value: function createBuffers(canvas) {
      var rendererData = this.getRendererData(),
          rendererBuffers = this.getRendererBuffers(),
          vertexPositionsData = rendererData.getVertexPositionsData(),
          vertexNormalsData = rendererData.getVertexNormalsData(),
          vertexIndexesData = rendererData.getVertexIndexesData(),
          textureCoordinatesData = rendererData.getVertexTextureCoordinatesData();

      rendererBuffers.createBuffers(vertexPositionsData, vertexNormalsData, vertexIndexesData, textureCoordinatesData, canvas);
    }
  }, {
    key: 'bindBuffers',
    value: function bindBuffers(canvas) {
      var rendererBuffers = this.getRendererBuffers(),
          vertexNormalAttributeLocation = this.getVertexNormalAttributeLocation(),
          vertexPositionAttributeLocation = this.getVertexPositionAttributeLocation(),
          textureCoordinateAttributeLocation = this.getTextureCoordinateAttributeLocation();

      rendererBuffers.bindBuffers(vertexNormalAttributeLocation, vertexPositionAttributeLocation, textureCoordinateAttributeLocation, canvas);
    }
  }, {
    key: 'activateTexture',
    value: function activateTexture(canvas) {
      var context = canvas.getContext(),
          TEXTURE0 = context.TEXTURE0,
          target = TEXTURE0,
          uniformLocations = this.getUniformLocations(),
          samplerUniformLocation = uniformLocations.getSamplerUniformLocation(),
          uSamplerUniformLocationIntegerValue = 0;


      canvas.activateTexture(target);

      canvas.setUniformLocationIntegerValue(samplerUniformLocation, uSamplerUniformLocationIntegerValue);
    }
  }], [{
    key: 'fromImageMapAndImageJSON',
    value: function fromImageMapAndImageJSON(imageMap, imageJSON, canvas) {
      var program = createProgram(vertexShaderSource, fragmentShaderSource, canvas),
          textureRendererData = TextureRendererData.fromNothing(),
          textureRendererBuffers = TextureRendererBuffers.fromNothing(),
          rendererData = textureRendererData,
          ///
      rendererBuffers = textureRendererBuffers,
          ///
      uniformLocations = TextureUniformLocations.fromProgram(program, canvas),
          attributeLocations = TextureAttributeLocations.fromProgram(program, canvas),
          textureRenderer = new TextureRenderer(program, rendererData, rendererBuffers, uniformLocations, attributeLocations, imageJSON);

      var image = imageMap; ///

      canvas.createTexture(image);

      return textureRenderer;
    }
  }]);

  return TextureRenderer;
}(Renderer);

module.exports = TextureRenderer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9yZW5kZXJlci90ZXh0dXJlLmpzIl0sIm5hbWVzIjpbIlJlbmRlcmVyIiwicmVxdWlyZSIsIlRleHR1cmVSZW5kZXJlckJ1ZmZlcnMiLCJUZXh0dXJlUmVuZGVyZXJEYXRhIiwidmVydGV4U2hhZGVyU291cmNlIiwiZnJhZ21lbnRTaGFkZXJTb3VyY2UiLCJUZXh0dXJlVW5pZm9ybUxvY2F0aW9ucyIsIlRleHR1cmVBdHRyaWJ1dGVMb2NhdGlvbnMiLCJjcmVhdGVQcm9ncmFtIiwiVGV4dHVyZVJlbmRlcmVyIiwicHJvZ3JhbSIsInJlbmRlcmVyRGF0YSIsInJlbmRlcmVyQnVmZmVycyIsInVuaWZvcm1Mb2NhdGlvbnMiLCJhdHRyaWJ1dGVMb2NhdGlvbnMiLCJpbWFnZUpTT04iLCJnZXRBdHRyaWJ1dGVMb2NhdGlvbnMiLCJ0ZXh0dXJlQ29vcmRpbmF0ZUF0dHJpYnV0ZUxvY2F0aW9uIiwiZ2V0VGV4dHVyZUNvb3JkaW5hdGVBdHRyaWJ1dGVMb2NhdGlvbiIsInZlcnRleFRleHR1cmVDb29yZGluYXRlcyIsImFkZFZlcnRleFRleHR1cmVDb29yZGluYXRlcyIsImNhbnZhcyIsImdldFJlbmRlcmVyRGF0YSIsImdldFJlbmRlcmVyQnVmZmVycyIsInZlcnRleFBvc2l0aW9uc0RhdGEiLCJnZXRWZXJ0ZXhQb3NpdGlvbnNEYXRhIiwidmVydGV4Tm9ybWFsc0RhdGEiLCJnZXRWZXJ0ZXhOb3JtYWxzRGF0YSIsInZlcnRleEluZGV4ZXNEYXRhIiwiZ2V0VmVydGV4SW5kZXhlc0RhdGEiLCJ0ZXh0dXJlQ29vcmRpbmF0ZXNEYXRhIiwiZ2V0VmVydGV4VGV4dHVyZUNvb3JkaW5hdGVzRGF0YSIsImNyZWF0ZUJ1ZmZlcnMiLCJ2ZXJ0ZXhOb3JtYWxBdHRyaWJ1dGVMb2NhdGlvbiIsImdldFZlcnRleE5vcm1hbEF0dHJpYnV0ZUxvY2F0aW9uIiwidmVydGV4UG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiIsImdldFZlcnRleFBvc2l0aW9uQXR0cmlidXRlTG9jYXRpb24iLCJiaW5kQnVmZmVycyIsImdldENvbnRleHQiLCJURVhUVVJFMCIsImNvbnRleHQiLCJ0YXJnZXQiLCJnZXRVbmlmb3JtTG9jYXRpb25zIiwic2FtcGxlclVuaWZvcm1Mb2NhdGlvbiIsImdldFNhbXBsZXJVbmlmb3JtTG9jYXRpb24iLCJ1U2FtcGxlclVuaWZvcm1Mb2NhdGlvbkludGVnZXJWYWx1ZSIsImFjdGl2YXRlVGV4dHVyZSIsInNldFVuaWZvcm1Mb2NhdGlvbkludGVnZXJWYWx1ZSIsImltYWdlTWFwIiwidGV4dHVyZVJlbmRlcmVyRGF0YSIsImZyb21Ob3RoaW5nIiwidGV4dHVyZVJlbmRlcmVyQnVmZmVycyIsImZyb21Qcm9ncmFtIiwidGV4dHVyZVJlbmRlcmVyIiwiaW1hZ2UiLCJjcmVhdGVUZXh0dXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxXQUFXQyxRQUFRLGFBQVIsQ0FBakI7QUFBQSxJQUNNQyx5QkFBeUJELFFBQVEsNkJBQVIsQ0FEL0I7QUFBQSxJQUVNRSxzQkFBc0JGLFFBQVEsMEJBQVIsQ0FGNUI7QUFBQSxJQUdNRyxxQkFBcUJILFFBQVEsK0JBQVIsQ0FIM0I7QUFBQSxJQUlNSSx1QkFBdUJKLFFBQVEsaUNBQVIsQ0FKN0I7QUFBQSxJQUtNSywwQkFBMEJMLFFBQVEsNkJBQVIsQ0FMaEM7QUFBQSxJQU1NTSw0QkFBNEJOLFFBQVEsK0JBQVIsQ0FObEM7O0lBUVFPLGEsR0FBa0JSLFEsQ0FBbEJRLGE7O0lBRUZDLGU7OztBQUNMLDJCQUFZQyxPQUFaLEVBQXFCQyxZQUFyQixFQUFtQ0MsZUFBbkMsRUFBb0RDLGdCQUFwRCxFQUFzRUMsa0JBQXRFLEVBQTBGQyxTQUExRixFQUFxRztBQUFBOztBQUFBLGtJQUM5RkwsT0FEOEYsRUFDckZDLFlBRHFGLEVBQ3ZFQyxlQUR1RSxFQUN0REMsZ0JBRHNELEVBQ3BDQyxrQkFEb0M7O0FBR3BHLFVBQUtDLFNBQUwsR0FBaUJBLFNBQWpCO0FBSG9H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WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJlbmRlcmVyID0gcmVxdWlyZSgnLi4vcmVuZGVyZXInKSxcbiAgICAgIFRleHR1cmVSZW5kZXJlckJ1ZmZlcnMgPSByZXF1aXJlKCcuLi9yZW5kZXJlci9idWZmZXJzL3RleHR1cmUnKSxcbiAgICAgIFRleHR1cmVSZW5kZXJlckRhdGEgPSByZXF1aXJlKCcuLi9yZW5kZXJlci9kYXRhL3RleHR1cmUnKSxcbiAgICAgIHZlcnRleFNoYWRlclNvdXJjZSA9IHJlcXVpcmUoJy4vc291cmNlL3RleHR1cmUvdmVydGV4U2hhZGVyJyksXG4gICAgICBmcmFnbWVudFNoYWRlclNvdXJjZSA9IHJlcXVpcmUoJy4vc291cmNlL3RleHR1cmUvZnJhZ21lbnRTaGFkZXInKSxcbiAgICAgIFRleHR1cmVVbmlmb3JtTG9jYXRpb25zID0gcmVxdWlyZSgnLi9sb2NhdGlvbnMvdGV4dHVyZS91bmlmb3JtJyksXG4gICAgICBUZXh0dXJlQXR0cmlidXRlTG9jYXRpb25zID0gcmVxdWlyZSgnLi9sb2NhdGlvbnMvdGV4dHVyZS9hdHRyaWJ1dGUnKTtcblxuY29uc3QgeyBjcmVhdGVQcm9ncmFtIH0gPSBSZW5kZXJlcjtcblxuY2xhc3MgVGV4dHVyZVJlbmRlcmVyIGV4dGVuZHMgUmVuZGVyZXIge1xuXHRjb25zdHJ1Y3Rvcihwcm9ncmFtLCByZW5kZXJlckRhdGEsIHJlbmRlcmVyQnVmZmVycywgdW5pZm9ybUxvY2F0aW9ucywgYXR0cmlidXRlTG9jYXRpb25zLCBpbWFnZUpTT04pIHtcblx0XHRzdXBlcihwcm9ncmFtLCByZW5kZXJlckRhdGEsIHJlbmRlcmVyQnVmZmVycywgdW5pZm9ybUxvY2F0aW9ucywgYXR0cmlidXRlTG9jYXRpb25zKTtcblxuXHRcdHRoaXMuaW1hZ2VKU09OID0gaW1hZ2VKU09OO1xuXHR9XG5cblx0Z2V0SW1hZ2VKU09OKCkge1xuXHRcdHJldHVybiB0aGlzLmltYWdlSlNPTjtcblx0fVxuXG4gIGdldFRleHR1cmVDb29yZGluYXRlQXR0cmlidXRlTG9jYXRpb24oKSB7XG4gICAgY29uc3QgYXR0cmlidXRlTG9jYXRpb25zID0gdGhpcy5nZXRBdHRyaWJ1dGVMb2NhdGlvbnMoKSxcbiAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZUF0dHJpYnV0ZUxvY2F0aW9uID0gYXR0cmlidXRlTG9jYXRpb25zLmdldFRleHR1cmVDb29yZGluYXRlQXR0cmlidXRlTG9jYXRpb24oKTtcblxuICAgIHJldHVybiB0ZXh0dXJlQ29vcmRpbmF0ZUF0dHJpYnV0ZUxvY2F0aW9uO1xuICB9XG5cbiAgYWRkVmVydGV4VGV4dHVyZUNvb3JkaW5hdGVzKHZlcnRleFRleHR1cmVDb29yZGluYXRlcykgeyB0aGlzLnJlbmRlcmVyRGF0YS5hZGRWZXJ0ZXhUZXh0dXJlQ29vcmRpbmF0ZXModmVydGV4VGV4dHVyZUNvb3JkaW5hdGVzKTsgfVxuXG4gIGNyZWF0ZUJ1ZmZlcnMoY2FudmFzKSB7XG4gICAgY29uc3QgcmVuZGVyZXJEYXRhID0gdGhpcy5nZXRSZW5kZXJlckRhdGEoKSxcbiAgICAgICAgICByZW5kZXJlckJ1ZmZlcnMgPSB0aGlzLmdldFJlbmRlcmVyQnVmZmVycygpLFxuICAgICAgICAgIHZlcnRleFBvc2l0aW9uc0RhdGEgPSByZW5kZXJlckRhdGEuZ2V0VmVydGV4UG9zaXRpb25zRGF0YSgpLFxuICAgICAgICAgIHZlcnRleE5vcm1hbHNEYXRhID0gcmVuZGVyZXJEYXRhLmdldFZlcnRleE5vcm1hbHNEYXRhKCksXG4gICAgICAgICAgdmVydGV4SW5kZXhlc0RhdGEgPSByZW5kZXJlckRhdGEuZ2V0VmVydGV4SW5kZXhlc0RhdGEoKSxcbiAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNEYXRhID0gcmVuZGVyZXJEYXRhLmdldFZlcnRleFRleHR1cmVDb29yZGluYXRlc0RhdGEoKTtcblxuICAgIHJlbmRlcmVyQnVmZmVycy5jcmVhdGVCdWZmZXJzKHZlcnRleFBvc2l0aW9uc0RhdGEsIHZlcnRleE5vcm1hbHNEYXRhLCB2ZXJ0ZXhJbmRleGVzRGF0YSwgdGV4dHVyZUNvb3JkaW5hdGVzRGF0YSwgY2FudmFzKTtcbiAgfVxuXG4gIGJpbmRCdWZmZXJzKGNhbnZhcykge1xuICAgIGNvbnN0IHJlbmRlcmVyQnVmZmVycyA9IHRoaXMuZ2V0UmVuZGVyZXJCdWZmZXJzKCksXG4gICAgICAgICAgdmVydGV4Tm9ybWFsQXR0cmlidXRlTG9jYXRpb24gPSB0aGlzLmdldFZlcnRleE5vcm1hbEF0dHJpYnV0ZUxvY2F0aW9uKCksXG4gICAgICAgICAgdmVydGV4UG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiA9IHRoaXMuZ2V0VmVydGV4UG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbigpLFxuICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlQXR0cmlidXRlTG9jYXRpb24gPSB0aGlzLmdldFRleHR1cmVDb29yZGluYXRlQXR0cmlidXRlTG9jYXRpb24oKTtcblxuICAgIHJlbmRlcmVyQnVmZmVycy5iaW5kQnVmZmVycyh2ZXJ0ZXhOb3JtYWxBdHRyaWJ1dGVMb2NhdGlvbiwgdmVydGV4UG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiwgdGV4dHVyZUNvb3JkaW5hdGVBdHRyaWJ1dGVMb2NhdGlvbiwgY2FudmFzKTtcbiAgfVxuXG4gIGFjdGl2YXRlVGV4dHVyZShjYW52YXMpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoKSxcbiAgICAgICAgICB7IFRFWFRVUkUwIH0gPSBjb250ZXh0LFxuICAgICAgICAgIHRhcmdldCA9IFRFWFRVUkUwLCAgLy8vXG4gICAgICAgICAgdW5pZm9ybUxvY2F0aW9ucyA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9ucygpLFxuICAgICAgICAgIHNhbXBsZXJVbmlmb3JtTG9jYXRpb24gPSB1bmlmb3JtTG9jYXRpb25zLmdldFNhbXBsZXJVbmlmb3JtTG9jYXRpb24oKSxcbiAgICAgICAgICB1U2FtcGxlclVuaWZvcm1Mb2NhdGlvbkludGVnZXJWYWx1ZSA9IDA7XG5cbiAgICBjYW52YXMuYWN0aXZhdGVUZXh0dXJlKHRhcmdldCk7XG5cbiAgICBjYW52YXMuc2V0VW5pZm9ybUxvY2F0aW9uSW50ZWdlclZhbHVlKHNhbXBsZXJVbmlmb3JtTG9jYXRpb24sIHVTYW1wbGVyVW5pZm9ybUxvY2F0aW9uSW50ZWdlclZhbHVlKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSW1hZ2VNYXBBbmRJbWFnZUpTT04oaW1hZ2VNYXAsIGltYWdlSlNPTiwgY2FudmFzKSB7XG4gICAgY29uc3QgcHJvZ3JhbSA9IGNyZWF0ZVByb2dyYW0odmVydGV4U2hhZGVyU291cmNlLCBmcmFnbWVudFNoYWRlclNvdXJjZSwgY2FudmFzKSxcbiAgICAgICAgICB0ZXh0dXJlUmVuZGVyZXJEYXRhID0gVGV4dHVyZVJlbmRlcmVyRGF0YS5mcm9tTm90aGluZygpLFxuICAgICAgICAgIHRleHR1cmVSZW5kZXJlckJ1ZmZlcnMgPSBUZXh0dXJlUmVuZGVyZXJCdWZmZXJzLmZyb21Ob3RoaW5nKCksXG4gICAgICAgICAgcmVuZGVyZXJEYXRhID0gdGV4dHVyZVJlbmRlcmVyRGF0YSwgIC8vL1xuICAgICAgICAgIHJlbmRlcmVyQnVmZmVycyA9IHRleHR1cmVSZW5kZXJlckJ1ZmZlcnMsIC8vL1xuICAgICAgICAgIHVuaWZvcm1Mb2NhdGlvbnMgPSBUZXh0dXJlVW5pZm9ybUxvY2F0aW9ucy5mcm9tUHJvZ3JhbShwcm9ncmFtLCBjYW52YXMpLFxuICAgICAgICAgIGF0dHJpYnV0ZUxvY2F0aW9ucyA9IFRleHR1cmVBdHRyaWJ1dGVMb2NhdGlvbnMuZnJvbVByb2dyYW0ocHJvZ3JhbSwgY2FudmFzKSxcbiAgICAgICAgICB0ZXh0dXJlUmVuZGVyZXIgPSBuZXcgVGV4dHVyZVJlbmRlcmVyKHByb2dyYW0sIHJlbmRlcmVyRGF0YSwgcmVuZGVyZXJCdWZmZXJzLCB1bmlmb3JtTG9jYXRpb25zLCBhdHRyaWJ1dGVMb2NhdGlvbnMsIGltYWdlSlNPTik7XG5cblx0XHRjb25zdCBpbWFnZSA9IGltYWdlTWFwO1x0Ly8vXG5cblx0XHRjYW52YXMuY3JlYXRlVGV4dHVyZShpbWFnZSk7XG5cbiAgICByZXR1cm4gdGV4dHVyZVJlbmRlcmVyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dHVyZVJlbmRlcmVyO1xuIl19