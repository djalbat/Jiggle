'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var arrayUtilities = require('./utilities/array'),
    rotationUtilities = require('./utilities/rotation'),
    quaternionUtilities = require('./utilities/quaternion'),
    intersectionUtilities = require('./utilities/intersection');

var first = arrayUtilities.first,
    rotatePosition = rotationUtilities.rotatePosition,
    calculateIntersection = intersectionUtilities.calculateIntersection,
    calculateRotationAboutZAxisQuaternion = quaternionUtilities.calculateRotationAboutZAxisQuaternion,
    calculateForwardsRotationQuaternion = quaternionUtilities.calculateForwardsRotationQuaternion,
    calculateBackwardsRotationQuaternion = quaternionUtilities.calculateBackwardsRotationQuaternion;

var VerticalLine = function () {
  function VerticalLine(firstPositionComponent, forwardsRotationQuaternion, backwardsRotationQuaternion) {
    _classCallCheck(this, VerticalLine);

    this.firstPositionComponent = firstPositionComponent;
    this.forwardsRotationQuaternion = forwardsRotationQuaternion;
    this.backwardsRotationQuaternion = backwardsRotationQuaternion;
  }

  _createClass(VerticalLine, [{
    key: 'getFirstPositionComponent',
    value: function getFirstPositionComponent() {
      return this.firstPositionComponent;
    }
  }, {
    key: 'getForwardsRotationQuaternion',
    value: function getForwardsRotationQuaternion() {
      return this.forwardsRotationQuaternion;
    }
  }, {
    key: 'getBackwardsRotationQuaternion',
    value: function getBackwardsRotationQuaternion() {
      return this.backwardsRotationQuaternion;
    }
  }, {
    key: 'splitFacet',
    value: function splitFacet(facet, smallerFacets) {
      var edges = facet.getEdges(),
          intersections = edges.map(function (edge) {
        var intersection = calculateIntersection(edge, this.firstPositionComponent);

        return intersection;
      }.bind(this));

      facet.splitWithIntersections(intersections, smallerFacets);
    }
  }, {
    key: 'splitFacets',
    value: function splitFacets(facets) {
      var smallerFacets = [];

      facets.forEach(function (facet) {
        facet.rotate(this.forwardsRotationQuaternion);

        this.splitFacet(facet, smallerFacets);
      }.bind(this));

      smallerFacets.forEach(function (smallerFacet) {
        smallerFacet.rotate(this.backwardsRotationQuaternion);
      }.bind(this));

      return smallerFacets;
    }
  }], [{
    key: 'fromMaskingEdge',
    value: function fromMaskingEdge(maskingEdge) {
      var maskingEdgePosition = maskingEdge.getPosition(),
          rotationAboutZAxisQuaternion = calculateRotationAboutZAxisQuaternion(maskingEdge),
          rotationQuaternion = rotationAboutZAxisQuaternion,
          ///
      forwardsRotationQuaternion = calculateForwardsRotationQuaternion(rotationQuaternion),
          backwardsRotationQuaternion = calculateBackwardsRotationQuaternion(rotationQuaternion),
          position = rotatePosition(maskingEdgePosition, rotationQuaternion),
          positionComponents = position,
          ///
      firstPositionComponent = first(positionComponents),
          verticalLine = new VerticalLine(firstPositionComponent, forwardsRotationQuaternion, backwardsRotationQuaternion);

      return verticalLine;
    }
  }]);

  return VerticalLine;
}();

module.exports = VerticalLine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi92ZXJ0aWNhbExpbmUuanMiXSwibmFtZXMiOlsiYXJyYXlVdGlsaXRpZXMiLCJyZXF1aXJlIiwicm90YXRpb25VdGlsaXRpZXMiLCJxdWF0ZXJuaW9uVXRpbGl0aWVzIiwiaW50ZXJzZWN0aW9uVXRpbGl0aWVzIiwiZmlyc3QiLCJyb3RhdGVQb3NpdGlvbiIsImNhbGN1bGF0ZUludGVyc2VjdGlvbiIsImNhbGN1bGF0ZVJvdGF0aW9uQWJvdXRaQXhpc1F1YXRlcm5pb24iLCJjYWxjdWxhdGVGb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiIsImNhbGN1bGF0ZUJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiIsIlZlcnRpY2FsTGluZSIsImZpcnN0UG9zaXRpb25Db21wb25lbnQiLCJmb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiIsImJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiIsImZhY2V0Iiwic21hbGxlckZhY2V0cyIsImVkZ2VzIiwiZ2V0RWRnZXMiLCJpbnRlcnNlY3Rpb25zIiwibWFwIiwiZWRnZSIsImludGVyc2VjdGlvbiIsImJpbmQiLCJzcGxpdFdpdGhJbnRlcnNlY3Rpb25zIiwiZmFjZXRzIiwiZm9yRWFjaCIsInJvdGF0ZSIsInNwbGl0RmFjZXQiLCJzbWFsbGVyRmFjZXQiLCJtYXNraW5nRWRnZSIsIm1hc2tpbmdFZGdlUG9zaXRpb24iLCJnZXRQb3NpdGlvbiIsInJvdGF0aW9uQWJvdXRaQXhpc1F1YXRlcm5pb24iLCJyb3RhdGlvblF1YXRlcm5pb24iLCJwb3NpdGlvbiIsInBvc2l0aW9uQ29tcG9uZW50cyIsInZlcnRpY2FsTGluZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFNQSxpQkFBaUJDLFFBQVEsbUJBQVIsQ0FBdkI7QUFBQSxJQUNNQyxvQkFBb0JELFFBQVEsc0JBQVIsQ0FEMUI7QUFBQSxJQUVNRSxzQkFBc0JGLFFBQVEsd0JBQVIsQ0FGNUI7QUFBQSxJQUdNRyx3QkFBd0JILFFBQVEsMEJBQVIsQ0FIOUI7O0FBS00sSUFBRUksS0FBRixHQUFZTCxjQUFaLENBQUVLLEtBQUY7QUFBQSxJQUNFQyxjQURGLEdBQ3FCSixpQkFEckIsQ0FDRUksY0FERjtBQUFBLElBRUVDLHFCQUZGLEdBRTRCSCxxQkFGNUIsQ0FFRUcscUJBRkY7QUFBQSxJQUdFQyxxQ0FIRixHQUd1SEwsbUJBSHZILENBR0VLLHFDQUhGO0FBQUEsSUFHeUNDLG1DQUh6QyxHQUd1SE4sbUJBSHZILENBR3lDTSxtQ0FIekM7QUFBQSxJQUc4RUMsb0NBSDlFLEdBR3VIUCxtQkFIdkgsQ0FHOEVPLG9DQUg5RTs7SUFLQUMsWTtBQUNKLHdCQUFZQyxzQkFBWixFQUFvQ0MsMEJBQXBDLEVBQWdFQywyQkFBaEUsRUFBNkY7QUFBQTs7QUFDM0YsU0FBS0Ysc0JBQUwsR0FBOEJBLHNCQUE5QjtBQUNBLFNBQUtDLDBCQUFMLEdBQWtDQSwwQkFBbEM7QUFDQSxTQUFLQywyQkFBTCxHQUFtQ0EsMkJBQW5DO0FBQ0Q7Ozs7Z0RBRTJCO0FBQzFCLGFBQU8sS0FBS0Ysc0JBQVo7QUFDRDs7O29EQUUrQjtBQUM5QixhQUFPLEtBQUtDLDBCQUFaO0FBQ0Q7OztxREFFZ0M7QUFDL0IsYUFBTyxLQUFLQywyQkFBWjtBQUNEOzs7K0JBRVVDLEssRUFBT0MsYSxFQUFlO0FBQy9CLFVBQU1DLFFBQVFGLE1BQU1HLFFBQU4sRUFBZDtBQUFBLFVBQ01DLGdCQUFnQkYsTUFBTUcsR0FBTixDQUFVLFVBQVNDLElBQVQsRUFBZTtBQUN2QyxZQUFNQyxlQUFlZixzQkFBc0JjLElBQXRCLEVBQTRCLEtBQUtULHNCQUFqQyxDQUFyQjs7QUFFQSxlQUFPVSxZQUFQO0FBQ0QsT0FKeUIsQ0FJeEJDLElBSndCLENBSW5CLElBSm1CLENBQVYsQ0FEdEI7O0FBT0FSLFlBQU1TLHNCQUFOLENBQTZCTCxhQUE3QixFQUE0Q0gsYUFBNUM7QUFDRDs7O2dDQUVXUyxNLEVBQVE7QUFDbEIsVUFBTVQsZ0JBQWdCLEVBQXRCOztBQUVBUyxhQUFPQyxPQUFQLENBQWUsVUFBU1gsS0FBVCxFQUFnQjtBQUM3QkEsY0FBTVksTUFBTixDQUFhLEtBQUtkLDBCQUFsQjs7QUFFQSxhQUFLZSxVQUFMLENBQWdCYixLQUFoQixFQUF1QkMsYUFBdkI7QUFDRCxPQUpjLENBSWJPLElBSmEsQ0FJUixJQUpRLENBQWY7O0FBTUFQLG9CQUFjVSxPQUFkLENBQXNCLFVBQVNHLFlBQVQsRUFBdUI7QUFDM0NBLHFCQUFhRixNQUFiLENBQW9CLEtBQUtiLDJCQUF6QjtBQUNELE9BRnFCLENBRXBCUyxJQUZvQixDQUVmLElBRmUsQ0FBdEI7O0FBSUEsYUFBT1AsYUFBUDtBQUNEOzs7b0NBRXNCYyxXLEVBQWE7QUFDbEMsVUFBTUMsc0JBQXNCRCxZQUFZRSxXQUFaLEVBQTVCO0FBQUEsVUFDTUMsK0JBQStCekIsc0NBQXNDc0IsV0FBdEMsQ0FEckM7QUFBQSxVQUVNSSxxQkFBcUJELDRCQUYzQjtBQUFBLFVBRTBEO0FBQ3BEcEIsbUNBQTZCSixvQ0FBb0N5QixrQkFBcEMsQ0FIbkM7QUFBQSxVQUlNcEIsOEJBQThCSixxQ0FBcUN3QixrQkFBckMsQ0FKcEM7QUFBQSxVQUtNQyxXQUFXN0IsZUFBZXlCLG1CQUFmLEVBQW9DRyxrQkFBcEMsQ0FMakI7QUFBQSxVQU1NRSxxQkFBcUJELFFBTjNCO0FBQUEsVUFNcUM7QUFDL0J2QiwrQkFBeUJQLE1BQU0rQixrQkFBTixDQVAvQjtBQUFBLFVBUU1DLGVBQWUsSUFBSTFCLFlBQUosQ0FBaUJDLHNCQUFqQixFQUF5Q0MsMEJBQXpDLEVBQXFFQywyQkFBckUsQ0FSckI7O0FBVUEsYUFBT3VCLFlBQVA7QUFDRDs7Ozs7O0FBR0hDLE9BQU9DLE9BQVAsR0FBaUI1QixZQUFqQiIsImZpbGUiOiJ2ZXJ0aWNhbExpbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIHJvdGF0aW9uVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvcm90YXRpb24nKSxcbiAgICAgIHF1YXRlcm5pb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9xdWF0ZXJuaW9uJyksXG4gICAgICBpbnRlcnNlY3Rpb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9pbnRlcnNlY3Rpb24nKTtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHJvdGF0ZVBvc2l0aW9uIH0gPSByb3RhdGlvblV0aWxpdGllcyxcbiAgICAgIHsgY2FsY3VsYXRlSW50ZXJzZWN0aW9uIH0gPSBpbnRlcnNlY3Rpb25VdGlsaXRpZXMsXG4gICAgICB7IGNhbGN1bGF0ZVJvdGF0aW9uQWJvdXRaQXhpc1F1YXRlcm5pb24sIGNhbGN1bGF0ZUZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uLCBjYWxjdWxhdGVCYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb24gfSA9IHF1YXRlcm5pb25VdGlsaXRpZXM7XG5cbmNsYXNzIFZlcnRpY2FsTGluZSB7XG4gIGNvbnN0cnVjdG9yKGZpcnN0UG9zaXRpb25Db21wb25lbnQsIGZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uLCBiYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgICB0aGlzLmZpcnN0UG9zaXRpb25Db21wb25lbnQgPSBmaXJzdFBvc2l0aW9uQ29tcG9uZW50O1xuICAgIHRoaXMuZm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb24gPSBmb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbjtcbiAgICB0aGlzLmJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiA9IGJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbjtcbiAgfVxuXG4gIGdldEZpcnN0UG9zaXRpb25Db21wb25lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlyc3RQb3NpdGlvbkNvbXBvbmVudDtcbiAgfVxuICBcbiAgZ2V0Rm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb247XG4gIH1cblxuICBnZXRCYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uO1xuICB9XG5cbiAgc3BsaXRGYWNldChmYWNldCwgc21hbGxlckZhY2V0cykge1xuICAgIGNvbnN0IGVkZ2VzID0gZmFjZXQuZ2V0RWRnZXMoKSxcbiAgICAgICAgICBpbnRlcnNlY3Rpb25zID0gZWRnZXMubWFwKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IGNhbGN1bGF0ZUludGVyc2VjdGlvbihlZGdlLCB0aGlzLmZpcnN0UG9zaXRpb25Db21wb25lbnQpO1xuXG4gICAgICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uO1xuICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICBmYWNldC5zcGxpdFdpdGhJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICB9XG5cbiAgc3BsaXRGYWNldHMoZmFjZXRzKSB7XG4gICAgY29uc3Qgc21hbGxlckZhY2V0cyA9IFtdO1xuXG4gICAgZmFjZXRzLmZvckVhY2goZnVuY3Rpb24oZmFjZXQpIHtcbiAgICAgIGZhY2V0LnJvdGF0ZSh0aGlzLmZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uKTtcblxuICAgICAgdGhpcy5zcGxpdEZhY2V0KGZhY2V0LCBzbWFsbGVyRmFjZXRzKTtcbiAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgc21hbGxlckZhY2V0cy5mb3JFYWNoKGZ1bmN0aW9uKHNtYWxsZXJGYWNldCkge1xuICAgICAgc21hbGxlckZhY2V0LnJvdGF0ZSh0aGlzLmJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbik7XG4gICAgfS5iaW5kKHRoaXMpKTtcblxuICAgIHJldHVybiBzbWFsbGVyRmFjZXRzO1xuICB9XG5cbiAgc3RhdGljIGZyb21NYXNraW5nRWRnZShtYXNraW5nRWRnZSkge1xuICAgIGNvbnN0IG1hc2tpbmdFZGdlUG9zaXRpb24gPSBtYXNraW5nRWRnZS5nZXRQb3NpdGlvbigpLFxuICAgICAgICAgIHJvdGF0aW9uQWJvdXRaQXhpc1F1YXRlcm5pb24gPSBjYWxjdWxhdGVSb3RhdGlvbkFib3V0WkF4aXNRdWF0ZXJuaW9uKG1hc2tpbmdFZGdlKSxcbiAgICAgICAgICByb3RhdGlvblF1YXRlcm5pb24gPSByb3RhdGlvbkFib3V0WkF4aXNRdWF0ZXJuaW9uLCAgLy8vXG4gICAgICAgICAgZm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb24gPSBjYWxjdWxhdGVGb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbihyb3RhdGlvblF1YXRlcm5pb24pLFxuICAgICAgICAgIGJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiA9IGNhbGN1bGF0ZUJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbihyb3RhdGlvblF1YXRlcm5pb24pLFxuICAgICAgICAgIHBvc2l0aW9uID0gcm90YXRlUG9zaXRpb24obWFza2luZ0VkZ2VQb3NpdGlvbiwgcm90YXRpb25RdWF0ZXJuaW9uKSxcbiAgICAgICAgICBwb3NpdGlvbkNvbXBvbmVudHMgPSBwb3NpdGlvbiwgLy8vXG4gICAgICAgICAgZmlyc3RQb3NpdGlvbkNvbXBvbmVudCA9IGZpcnN0KHBvc2l0aW9uQ29tcG9uZW50cyksXG4gICAgICAgICAgdmVydGljYWxMaW5lID0gbmV3IFZlcnRpY2FsTGluZShmaXJzdFBvc2l0aW9uQ29tcG9uZW50LCBmb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiwgYmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uKTtcblxuICAgIHJldHVybiB2ZXJ0aWNhbExpbmU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWZXJ0aWNhbExpbmU7XG4iXX0=