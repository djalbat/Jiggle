'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var arrayUtilities = require('./utilities/array'),
    rotationUtilities = require('./utilities/rotation'),
    intersectionUtilities = require('./utilities/intersection');

var first = arrayUtilities.first,
    calculateIntersection = intersectionUtilities.calculateIntersection,
    rotatePositionAboutZAxis = rotationUtilities.rotatePositionAboutZAxis,
    calculateRotationAboutZAxisMatrix = rotationUtilities.calculateRotationAboutZAxisMatrix,
    calculateForwardsRotationAboutZAxisMatrix = rotationUtilities.calculateForwardsRotationAboutZAxisMatrix,
    calculateBackwardsRotationAboutZAxisMatrix = rotationUtilities.calculateBackwardsRotationAboutZAxisMatrix;

var VerticalLine = function () {
  function VerticalLine(firstPositionComponent, forwardsRotationAboutZAxisMatrix, backwardsRotationAboutZAxisMatrix) {
    _classCallCheck(this, VerticalLine);

    this.firstPositionComponent = firstPositionComponent;
    this.forwardsRotationAboutZAxisMatrix = forwardsRotationAboutZAxisMatrix;
    this.backwardsRotationAboutZAxisMatrix = backwardsRotationAboutZAxisMatrix;
  }

  _createClass(VerticalLine, [{
    key: 'getFirstPositionComponent',
    value: function getFirstPositionComponent() {
      return this.firstPositionComponent;
    }
  }, {
    key: 'getForwardsRotationAboutZAxisMatrix',
    value: function getForwardsRotationAboutZAxisMatrix() {
      return this.forwardsRotationAboutZAxisMatrix;
    }
  }, {
    key: 'getBackwardsRotationAboutZAxisMatrix',
    value: function getBackwardsRotationAboutZAxisMatrix() {
      return this.backwardsRotationAboutZAxisMatrix;
    }
  }, {
    key: 'splitFacet',
    value: function splitFacet(facet, smallerFacets) {
      var edges = facet.getEdges(),
          intersections = edges.map(function (edge) {
        var intersection = calculateIntersection(edge, this.firstPositionComponent);

        return intersection;
      }.bind(this));

      facet.splitWithIntersections(intersections, smallerFacets);
    }
  }, {
    key: 'splitFacets',
    value: function splitFacets(facets) {
      var smallerFacets = [];

      facets.forEach(function (facet) {
        facet.rotateAboutZAxis(this.forwardsRotationAboutZAxisMatrix);

        this.splitFacet(facet, smallerFacets);
      }.bind(this));

      smallerFacets.forEach(function (smallerFacet) {
        smallerFacet.rotateAboutZAxis(this.backwardsRotationAboutZAxisMatrix);
      }.bind(this));

      return smallerFacets;
    }
  }], [{
    key: 'fromMaskingEdge',
    value: function fromMaskingEdge(maskingEdge) {
      var maskingEdgePosition = maskingEdge.getPosition(),
          rotationAboutZAxisMatrix = calculateRotationAboutZAxisMatrix(maskingEdge),
          position = rotatePositionAboutZAxis(maskingEdgePosition, rotationAboutZAxisMatrix),
          positionComponents = position,
          ///
      firstPositionComponent = first(positionComponents),
          forwardsRotationAboutZAxisMatrix = calculateForwardsRotationAboutZAxisMatrix(rotationAboutZAxisMatrix),
          backwardsRotationAboutZAxisMatrix = calculateBackwardsRotationAboutZAxisMatrix(rotationAboutZAxisMatrix),
          verticalLine = new VerticalLine(firstPositionComponent, forwardsRotationAboutZAxisMatrix, backwardsRotationAboutZAxisMatrix);

      return verticalLine;
    }
  }]);

  return VerticalLine;
}();

module.exports = VerticalLine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi92ZXJ0aWNhbExpbmUuanMiXSwibmFtZXMiOlsiYXJyYXlVdGlsaXRpZXMiLCJyZXF1aXJlIiwicm90YXRpb25VdGlsaXRpZXMiLCJpbnRlcnNlY3Rpb25VdGlsaXRpZXMiLCJmaXJzdCIsImNhbGN1bGF0ZUludGVyc2VjdGlvbiIsInJvdGF0ZVBvc2l0aW9uQWJvdXRaQXhpcyIsImNhbGN1bGF0ZVJvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCIsImNhbGN1bGF0ZUZvcndhcmRzUm90YXRpb25BYm91dFpBeGlzTWF0cml4IiwiY2FsY3VsYXRlQmFja3dhcmRzUm90YXRpb25BYm91dFpBeGlzTWF0cml4IiwiVmVydGljYWxMaW5lIiwiZmlyc3RQb3NpdGlvbkNvbXBvbmVudCIsImZvcndhcmRzUm90YXRpb25BYm91dFpBeGlzTWF0cml4IiwiYmFja3dhcmRzUm90YXRpb25BYm91dFpBeGlzTWF0cml4IiwiZmFjZXQiLCJzbWFsbGVyRmFjZXRzIiwiZWRnZXMiLCJnZXRFZGdlcyIsImludGVyc2VjdGlvbnMiLCJtYXAiLCJlZGdlIiwiaW50ZXJzZWN0aW9uIiwiYmluZCIsInNwbGl0V2l0aEludGVyc2VjdGlvbnMiLCJmYWNldHMiLCJmb3JFYWNoIiwicm90YXRlQWJvdXRaQXhpcyIsInNwbGl0RmFjZXQiLCJzbWFsbGVyRmFjZXQiLCJtYXNraW5nRWRnZSIsIm1hc2tpbmdFZGdlUG9zaXRpb24iLCJnZXRQb3NpdGlvbiIsInJvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCIsInBvc2l0aW9uIiwicG9zaXRpb25Db21wb25lbnRzIiwidmVydGljYWxMaW5lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLGlCQUFpQkMsUUFBUSxtQkFBUixDQUF2QjtBQUFBLElBQ01DLG9CQUFvQkQsUUFBUSxzQkFBUixDQUQxQjtBQUFBLElBRU1FLHdCQUF3QkYsUUFBUSwwQkFBUixDQUY5Qjs7QUFJTSxJQUFFRyxLQUFGLEdBQVlKLGNBQVosQ0FBRUksS0FBRjtBQUFBLElBQ0VDLHFCQURGLEdBQzRCRixxQkFENUIsQ0FDRUUscUJBREY7QUFBQSxJQUVFQyx3QkFGRixHQUV5SkosaUJBRnpKLENBRUVJLHdCQUZGO0FBQUEsSUFFNEJDLGlDQUY1QixHQUV5SkwsaUJBRnpKLENBRTRCSyxpQ0FGNUI7QUFBQSxJQUUrREMseUNBRi9ELEdBRXlKTixpQkFGekosQ0FFK0RNLHlDQUYvRDtBQUFBLElBRTBHQywwQ0FGMUcsR0FFeUpQLGlCQUZ6SixDQUUwR08sMENBRjFHOztJQUlBQyxZO0FBQ0osd0JBQVlDLHNCQUFaLEVBQW9DQyxnQ0FBcEMsRUFBc0VDLGlDQUF0RSxFQUF5RztBQUFBOztBQUN2RyxTQUFLRixzQkFBTCxHQUE4QkEsc0JBQTlCO0FBQ0EsU0FBS0MsZ0NBQUwsR0FBd0NBLGdDQUF4QztBQUNBLFNBQUtDLGlDQUFMLEdBQXlDQSxpQ0FBekM7QUFDRDs7OztnREFFMkI7QUFDMUIsYUFBTyxLQUFLRixzQkFBWjtBQUNEOzs7MERBRXFDO0FBQ3BDLGFBQU8sS0FBS0MsZ0NBQVo7QUFDRDs7OzJEQUVzQztBQUNyQyxhQUFPLEtBQUtDLGlDQUFaO0FBQ0Q7OzsrQkFFVUMsSyxFQUFPQyxhLEVBQWU7QUFDL0IsVUFBTUMsUUFBUUYsTUFBTUcsUUFBTixFQUFkO0FBQUEsVUFDTUMsZ0JBQWdCRixNQUFNRyxHQUFOLENBQVUsVUFBU0MsSUFBVCxFQUFlO0FBQ3ZDLFlBQU1DLGVBQWVoQixzQkFBc0JlLElBQXRCLEVBQTRCLEtBQUtULHNCQUFqQyxDQUFyQjs7QUFFQSxlQUFPVSxZQUFQO0FBQ0QsT0FKeUIsQ0FJeEJDLElBSndCLENBSW5CLElBSm1CLENBQVYsQ0FEdEI7O0FBT0FSLFlBQU1TLHNCQUFOLENBQTZCTCxhQUE3QixFQUE0Q0gsYUFBNUM7QUFDRDs7O2dDQUVXUyxNLEVBQVE7QUFDbEIsVUFBTVQsZ0JBQWdCLEVBQXRCOztBQUVBUyxhQUFPQyxPQUFQLENBQWUsVUFBU1gsS0FBVCxFQUFnQjtBQUM3QkEsY0FBTVksZ0JBQU4sQ0FBdUIsS0FBS2QsZ0NBQTVCOztBQUVBLGFBQUtlLFVBQUwsQ0FBZ0JiLEtBQWhCLEVBQXVCQyxhQUF2QjtBQUNELE9BSmMsQ0FJYk8sSUFKYSxDQUlSLElBSlEsQ0FBZjs7QUFNQVAsb0JBQWNVLE9BQWQsQ0FBc0IsVUFBU0csWUFBVCxFQUF1QjtBQUMzQ0EscUJBQWFGLGdCQUFiLENBQThCLEtBQUtiLGlDQUFuQztBQUNELE9BRnFCLENBRXBCUyxJQUZvQixDQUVmLElBRmUsQ0FBdEI7O0FBSUEsYUFBT1AsYUFBUDtBQUNEOzs7b0NBRXNCYyxXLEVBQWE7QUFDbEMsVUFBTUMsc0JBQXNCRCxZQUFZRSxXQUFaLEVBQTVCO0FBQUEsVUFDTUMsMkJBQTJCekIsa0NBQWtDc0IsV0FBbEMsQ0FEakM7QUFBQSxVQUVNSSxXQUFXM0IseUJBQXlCd0IsbUJBQXpCLEVBQThDRSx3QkFBOUMsQ0FGakI7QUFBQSxVQUdNRSxxQkFBcUJELFFBSDNCO0FBQUEsVUFHcUM7QUFDL0J0QiwrQkFBeUJQLE1BQU04QixrQkFBTixDQUovQjtBQUFBLFVBS010QixtQ0FBbUNKLDBDQUEwQ3dCLHdCQUExQyxDQUx6QztBQUFBLFVBTU1uQixvQ0FBb0NKLDJDQUEyQ3VCLHdCQUEzQyxDQU4xQztBQUFBLFVBT01HLGVBQWUsSUFBSXpCLFlBQUosQ0FBaUJDLHNCQUFqQixFQUF5Q0MsZ0NBQXpDLEVBQTJFQyxpQ0FBM0UsQ0FQckI7O0FBU0EsYUFBT3NCLFlBQVA7QUFDRDs7Ozs7O0FBR0hDLE9BQU9DLE9BQVAsR0FBaUIzQixZQUFqQiIsImZpbGUiOiJ2ZXJ0aWNhbExpbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIHJvdGF0aW9uVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvcm90YXRpb24nKSxcbiAgICAgIGludGVyc2VjdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL2ludGVyc2VjdGlvbicpO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgY2FsY3VsYXRlSW50ZXJzZWN0aW9uIH0gPSBpbnRlcnNlY3Rpb25VdGlsaXRpZXMsXG4gICAgICB7IHJvdGF0ZVBvc2l0aW9uQWJvdXRaQXhpcywgY2FsY3VsYXRlUm90YXRpb25BYm91dFpBeGlzTWF0cml4LCBjYWxjdWxhdGVGb3J3YXJkc1JvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCwgY2FsY3VsYXRlQmFja3dhcmRzUm90YXRpb25BYm91dFpBeGlzTWF0cml4IH0gPSByb3RhdGlvblV0aWxpdGllcztcblxuY2xhc3MgVmVydGljYWxMaW5lIHtcbiAgY29uc3RydWN0b3IoZmlyc3RQb3NpdGlvbkNvbXBvbmVudCwgZm9yd2FyZHNSb3RhdGlvbkFib3V0WkF4aXNNYXRyaXgsIGJhY2t3YXJkc1JvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCkge1xuICAgIHRoaXMuZmlyc3RQb3NpdGlvbkNvbXBvbmVudCA9IGZpcnN0UG9zaXRpb25Db21wb25lbnQ7XG4gICAgdGhpcy5mb3J3YXJkc1JvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCA9IGZvcndhcmRzUm90YXRpb25BYm91dFpBeGlzTWF0cml4O1xuICAgIHRoaXMuYmFja3dhcmRzUm90YXRpb25BYm91dFpBeGlzTWF0cml4ID0gYmFja3dhcmRzUm90YXRpb25BYm91dFpBeGlzTWF0cml4O1xuICB9XG5cbiAgZ2V0Rmlyc3RQb3NpdGlvbkNvbXBvbmVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5maXJzdFBvc2l0aW9uQ29tcG9uZW50O1xuICB9XG4gIFxuICBnZXRGb3J3YXJkc1JvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCgpIHtcbiAgICByZXR1cm4gdGhpcy5mb3J3YXJkc1JvdGF0aW9uQWJvdXRaQXhpc01hdHJpeDtcbiAgfVxuXG4gIGdldEJhY2t3YXJkc1JvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCgpIHtcbiAgICByZXR1cm4gdGhpcy5iYWNrd2FyZHNSb3RhdGlvbkFib3V0WkF4aXNNYXRyaXg7XG4gIH1cblxuICBzcGxpdEZhY2V0KGZhY2V0LCBzbWFsbGVyRmFjZXRzKSB7XG4gICAgY29uc3QgZWRnZXMgPSBmYWNldC5nZXRFZGdlcygpLFxuICAgICAgICAgIGludGVyc2VjdGlvbnMgPSBlZGdlcy5tYXAoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uID0gY2FsY3VsYXRlSW50ZXJzZWN0aW9uKGVkZ2UsIHRoaXMuZmlyc3RQb3NpdGlvbkNvbXBvbmVudCk7XG5cbiAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb247XG4gICAgICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICAgIGZhY2V0LnNwbGl0V2l0aEludGVyc2VjdGlvbnMoaW50ZXJzZWN0aW9ucywgc21hbGxlckZhY2V0cyk7XG4gIH1cblxuICBzcGxpdEZhY2V0cyhmYWNldHMpIHtcbiAgICBjb25zdCBzbWFsbGVyRmFjZXRzID0gW107XG5cbiAgICBmYWNldHMuZm9yRWFjaChmdW5jdGlvbihmYWNldCkge1xuICAgICAgZmFjZXQucm90YXRlQWJvdXRaQXhpcyh0aGlzLmZvcndhcmRzUm90YXRpb25BYm91dFpBeGlzTWF0cml4KTtcblxuICAgICAgdGhpcy5zcGxpdEZhY2V0KGZhY2V0LCBzbWFsbGVyRmFjZXRzKTtcbiAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgc21hbGxlckZhY2V0cy5mb3JFYWNoKGZ1bmN0aW9uKHNtYWxsZXJGYWNldCkge1xuICAgICAgc21hbGxlckZhY2V0LnJvdGF0ZUFib3V0WkF4aXModGhpcy5iYWNrd2FyZHNSb3RhdGlvbkFib3V0WkF4aXNNYXRyaXgpO1xuICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICByZXR1cm4gc21hbGxlckZhY2V0cztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tTWFza2luZ0VkZ2UobWFza2luZ0VkZ2UpIHtcbiAgICBjb25zdCBtYXNraW5nRWRnZVBvc2l0aW9uID0gbWFza2luZ0VkZ2UuZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgICByb3RhdGlvbkFib3V0WkF4aXNNYXRyaXggPSBjYWxjdWxhdGVSb3RhdGlvbkFib3V0WkF4aXNNYXRyaXgobWFza2luZ0VkZ2UpLFxuICAgICAgICAgIHBvc2l0aW9uID0gcm90YXRlUG9zaXRpb25BYm91dFpBeGlzKG1hc2tpbmdFZGdlUG9zaXRpb24sIHJvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCksXG4gICAgICAgICAgcG9zaXRpb25Db21wb25lbnRzID0gcG9zaXRpb24sIC8vL1xuICAgICAgICAgIGZpcnN0UG9zaXRpb25Db21wb25lbnQgPSBmaXJzdChwb3NpdGlvbkNvbXBvbmVudHMpLFxuICAgICAgICAgIGZvcndhcmRzUm90YXRpb25BYm91dFpBeGlzTWF0cml4ID0gY2FsY3VsYXRlRm9yd2FyZHNSb3RhdGlvbkFib3V0WkF4aXNNYXRyaXgocm90YXRpb25BYm91dFpBeGlzTWF0cml4KSxcbiAgICAgICAgICBiYWNrd2FyZHNSb3RhdGlvbkFib3V0WkF4aXNNYXRyaXggPSBjYWxjdWxhdGVCYWNrd2FyZHNSb3RhdGlvbkFib3V0WkF4aXNNYXRyaXgocm90YXRpb25BYm91dFpBeGlzTWF0cml4KSxcbiAgICAgICAgICB2ZXJ0aWNhbExpbmUgPSBuZXcgVmVydGljYWxMaW5lKGZpcnN0UG9zaXRpb25Db21wb25lbnQsIGZvcndhcmRzUm90YXRpb25BYm91dFpBeGlzTWF0cml4LCBiYWNrd2FyZHNSb3RhdGlvbkFib3V0WkF4aXNNYXRyaXgpO1xuXG4gICAgcmV0dXJuIHZlcnRpY2FsTGluZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZlcnRpY2FsTGluZTtcbiJdfQ==