'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var arrayUtilities = require('./utilities/array'),
    rotationUtilities = require('./utilities/rotation'),
    quaternionUtilities = require('./utilities/quaternion'),
    intersectionUtilities = require('./utilities/intersection');

var first = arrayUtilities.first,
    rotatePosition = rotationUtilities.rotatePosition,
    calculateIntersection = intersectionUtilities.calculateIntersection,
    calculateRotationAboutZAxisQuaternion = quaternionUtilities.calculateRotationAboutZAxisQuaternion,
    calculateForwardsRotationQuaternion = quaternionUtilities.calculateForwardsRotationQuaternion,
    calculateBackwardsRotationQuaternion = quaternionUtilities.calculateBackwardsRotationQuaternion;

var VerticalLine = function () {
  function VerticalLine(firstPositionComponent, forwardsRotationQuaternion, backwardsRotationQuaternion) {
    _classCallCheck(this, VerticalLine);

    this.firstPositionComponent = firstPositionComponent;
    this.forwardsRotationQuaternion = forwardsRotationQuaternion;
    this.backwardsRotationQuaternion = backwardsRotationQuaternion;
  }

  _createClass(VerticalLine, [{
    key: 'getFirstPositionComponent',
    value: function getFirstPositionComponent() {
      return this.firstPositionComponent;
    }
  }, {
    key: 'getForwardsRotationQuaternion',
    value: function getForwardsRotationQuaternion() {
      return this.forwardsRotationQuaternion;
    }
  }, {
    key: 'getBackwardsRotationQuaternion',
    value: function getBackwardsRotationQuaternion() {
      return this.backwardsRotationQuaternion;
    }
  }, {
    key: 'splitFacet',
    value: function splitFacet(facet, smallerFacets) {
      var _this = this;

      var edges = facet.getEdges(),
          intersections = edges.map(function (edge) {
        var intersection = calculateIntersection(edge, _this.firstPositionComponent);

        return intersection;
      });

      facet.splitWithIntersections(intersections, smallerFacets);
    }
  }, {
    key: 'splitFacets',
    value: function splitFacets(facets) {
      var _this2 = this;

      var smallerFacets = [];

      facets.forEach(function (facet) {
        facet.rotate(_this2.forwardsRotationQuaternion);

        _this2.splitFacet(facet, smallerFacets);
      });

      smallerFacets.forEach(function (smallerFacet) {
        smallerFacet.rotate(_this2.backwardsRotationQuaternion);
      });

      return smallerFacets;
    }
  }], [{
    key: 'fromMaskingEdge',
    value: function fromMaskingEdge(maskingEdge) {
      var maskingEdgePosition = maskingEdge.getPosition(),
          rotationAboutZAxisQuaternion = calculateRotationAboutZAxisQuaternion(maskingEdge),
          rotationQuaternion = rotationAboutZAxisQuaternion,
          ///
      forwardsRotationQuaternion = calculateForwardsRotationQuaternion(rotationQuaternion),
          backwardsRotationQuaternion = calculateBackwardsRotationQuaternion(rotationQuaternion),
          position = rotatePosition(maskingEdgePosition, rotationQuaternion),
          positionComponents = position,
          ///
      firstPositionComponent = first(positionComponents),
          verticalLine = new VerticalLine(firstPositionComponent, forwardsRotationQuaternion, backwardsRotationQuaternion);

      return verticalLine;
    }
  }]);

  return VerticalLine;
}();

module.exports = VerticalLine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi92ZXJ0aWNhbExpbmUuanMiXSwibmFtZXMiOlsiYXJyYXlVdGlsaXRpZXMiLCJyZXF1aXJlIiwicm90YXRpb25VdGlsaXRpZXMiLCJxdWF0ZXJuaW9uVXRpbGl0aWVzIiwiaW50ZXJzZWN0aW9uVXRpbGl0aWVzIiwiZmlyc3QiLCJyb3RhdGVQb3NpdGlvbiIsImNhbGN1bGF0ZUludGVyc2VjdGlvbiIsImNhbGN1bGF0ZVJvdGF0aW9uQWJvdXRaQXhpc1F1YXRlcm5pb24iLCJjYWxjdWxhdGVGb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiIsImNhbGN1bGF0ZUJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiIsIlZlcnRpY2FsTGluZSIsImZpcnN0UG9zaXRpb25Db21wb25lbnQiLCJmb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiIsImJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiIsImZhY2V0Iiwic21hbGxlckZhY2V0cyIsImVkZ2VzIiwiZ2V0RWRnZXMiLCJpbnRlcnNlY3Rpb25zIiwibWFwIiwiZWRnZSIsImludGVyc2VjdGlvbiIsInNwbGl0V2l0aEludGVyc2VjdGlvbnMiLCJmYWNldHMiLCJmb3JFYWNoIiwicm90YXRlIiwic3BsaXRGYWNldCIsInNtYWxsZXJGYWNldCIsIm1hc2tpbmdFZGdlIiwibWFza2luZ0VkZ2VQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwicm90YXRpb25BYm91dFpBeGlzUXVhdGVybmlvbiIsInJvdGF0aW9uUXVhdGVybmlvbiIsInBvc2l0aW9uIiwicG9zaXRpb25Db21wb25lbnRzIiwidmVydGljYWxMaW5lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLGlCQUFpQkMsUUFBUSxtQkFBUixDQUF2QjtBQUFBLElBQ01DLG9CQUFvQkQsUUFBUSxzQkFBUixDQUQxQjtBQUFBLElBRU1FLHNCQUFzQkYsUUFBUSx3QkFBUixDQUY1QjtBQUFBLElBR01HLHdCQUF3QkgsUUFBUSwwQkFBUixDQUg5Qjs7QUFLTSxJQUFFSSxLQUFGLEdBQVlMLGNBQVosQ0FBRUssS0FBRjtBQUFBLElBQ0VDLGNBREYsR0FDcUJKLGlCQURyQixDQUNFSSxjQURGO0FBQUEsSUFFRUMscUJBRkYsR0FFNEJILHFCQUY1QixDQUVFRyxxQkFGRjtBQUFBLElBR0VDLHFDQUhGLEdBR3VITCxtQkFIdkgsQ0FHRUsscUNBSEY7QUFBQSxJQUd5Q0MsbUNBSHpDLEdBR3VITixtQkFIdkgsQ0FHeUNNLG1DQUh6QztBQUFBLElBRzhFQyxvQ0FIOUUsR0FHdUhQLG1CQUh2SCxDQUc4RU8sb0NBSDlFOztJQUtBQyxZO0FBQ0osd0JBQVlDLHNCQUFaLEVBQW9DQywwQkFBcEMsRUFBZ0VDLDJCQUFoRSxFQUE2RjtBQUFBOztBQUMzRixTQUFLRixzQkFBTCxHQUE4QkEsc0JBQTlCO0FBQ0EsU0FBS0MsMEJBQUwsR0FBa0NBLDBCQUFsQztBQUNBLFNBQUtDLDJCQUFMLEdBQW1DQSwyQkFBbkM7QUFDRDs7OztnREFFMkI7QUFDMUIsYUFBTyxLQUFLRixzQkFBWjtBQUNEOzs7b0RBRStCO0FBQzlCLGFBQU8sS0FBS0MsMEJBQVo7QUFDRDs7O3FEQUVnQztBQUMvQixhQUFPLEtBQUtDLDJCQUFaO0FBQ0Q7OzsrQkFFVUMsSyxFQUFPQyxhLEVBQWU7QUFBQTs7QUFDL0IsVUFBTUMsUUFBUUYsTUFBTUcsUUFBTixFQUFkO0FBQUEsVUFDTUMsZ0JBQWdCRixNQUFNRyxHQUFOLENBQVUsVUFBQ0MsSUFBRCxFQUFVO0FBQ2xDLFlBQU1DLGVBQWVmLHNCQUFzQmMsSUFBdEIsRUFBNEIsTUFBS1Qsc0JBQWpDLENBQXJCOztBQUVBLGVBQU9VLFlBQVA7QUFDRCxPQUplLENBRHRCOztBQU9BUCxZQUFNUSxzQkFBTixDQUE2QkosYUFBN0IsRUFBNENILGFBQTVDO0FBQ0Q7OztnQ0FFV1EsTSxFQUFRO0FBQUE7O0FBQ2xCLFVBQU1SLGdCQUFnQixFQUF0Qjs7QUFFQVEsYUFBT0MsT0FBUCxDQUFlLFVBQUNWLEtBQUQsRUFBVztBQUN4QkEsY0FBTVcsTUFBTixDQUFhLE9BQUtiLDBCQUFsQjs7QUFFQSxlQUFLYyxVQUFMLENBQWdCWixLQUFoQixFQUF1QkMsYUFBdkI7QUFDRCxPQUpEOztBQU1BQSxvQkFBY1MsT0FBZCxDQUFzQixVQUFDRyxZQUFELEVBQWtCO0FBQ3RDQSxxQkFBYUYsTUFBYixDQUFvQixPQUFLWiwyQkFBekI7QUFDRCxPQUZEOztBQUlBLGFBQU9FLGFBQVA7QUFDRDs7O29DQUVzQmEsVyxFQUFhO0FBQ2xDLFVBQU1DLHNCQUFzQkQsWUFBWUUsV0FBWixFQUE1QjtBQUFBLFVBQ01DLCtCQUErQnhCLHNDQUFzQ3FCLFdBQXRDLENBRHJDO0FBQUEsVUFFTUkscUJBQXFCRCw0QkFGM0I7QUFBQSxVQUUwRDtBQUNwRG5CLG1DQUE2Qkosb0NBQW9Dd0Isa0JBQXBDLENBSG5DO0FBQUEsVUFJTW5CLDhCQUE4QkoscUNBQXFDdUIsa0JBQXJDLENBSnBDO0FBQUEsVUFLTUMsV0FBVzVCLGVBQWV3QixtQkFBZixFQUFvQ0csa0JBQXBDLENBTGpCO0FBQUEsVUFNTUUscUJBQXFCRCxRQU4zQjtBQUFBLFVBTXFDO0FBQy9CdEIsK0JBQXlCUCxNQUFNOEIsa0JBQU4sQ0FQL0I7QUFBQSxVQVFNQyxlQUFlLElBQUl6QixZQUFKLENBQWlCQyxzQkFBakIsRUFBeUNDLDBCQUF6QyxFQUFxRUMsMkJBQXJFLENBUnJCOztBQVVBLGFBQU9zQixZQUFQO0FBQ0Q7Ozs7OztBQUdIQyxPQUFPQyxPQUFQLEdBQWlCM0IsWUFBakIiLCJmaWxlIjoidmVydGljYWxMaW5lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICByb3RhdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL3JvdGF0aW9uJyksXG4gICAgICBxdWF0ZXJuaW9uVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvcXVhdGVybmlvbicpLFxuICAgICAgaW50ZXJzZWN0aW9uVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvaW50ZXJzZWN0aW9uJyk7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyByb3RhdGVQb3NpdGlvbiB9ID0gcm90YXRpb25VdGlsaXRpZXMsXG4gICAgICB7IGNhbGN1bGF0ZUludGVyc2VjdGlvbiB9ID0gaW50ZXJzZWN0aW9uVXRpbGl0aWVzLFxuICAgICAgeyBjYWxjdWxhdGVSb3RhdGlvbkFib3V0WkF4aXNRdWF0ZXJuaW9uLCBjYWxjdWxhdGVGb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiwgY2FsY3VsYXRlQmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uIH0gPSBxdWF0ZXJuaW9uVXRpbGl0aWVzO1xuXG5jbGFzcyBWZXJ0aWNhbExpbmUge1xuICBjb25zdHJ1Y3RvcihmaXJzdFBvc2l0aW9uQ29tcG9uZW50LCBmb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiwgYmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uKSB7XG4gICAgdGhpcy5maXJzdFBvc2l0aW9uQ29tcG9uZW50ID0gZmlyc3RQb3NpdGlvbkNvbXBvbmVudDtcbiAgICB0aGlzLmZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uID0gZm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb247XG4gICAgdGhpcy5iYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb24gPSBiYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb247XG4gIH1cblxuICBnZXRGaXJzdFBvc2l0aW9uQ29tcG9uZW50KCkge1xuICAgIHJldHVybiB0aGlzLmZpcnN0UG9zaXRpb25Db21wb25lbnQ7XG4gIH1cbiAgXG4gIGdldEZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uKCkge1xuICAgIHJldHVybiB0aGlzLmZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uO1xuICB9XG5cbiAgZ2V0QmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uKCkge1xuICAgIHJldHVybiB0aGlzLmJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbjtcbiAgfVxuXG4gIHNwbGl0RmFjZXQoZmFjZXQsIHNtYWxsZXJGYWNldHMpIHtcbiAgICBjb25zdCBlZGdlcyA9IGZhY2V0LmdldEVkZ2VzKCksXG4gICAgICAgICAgaW50ZXJzZWN0aW9ucyA9IGVkZ2VzLm1hcCgoZWRnZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uID0gY2FsY3VsYXRlSW50ZXJzZWN0aW9uKGVkZ2UsIHRoaXMuZmlyc3RQb3NpdGlvbkNvbXBvbmVudCk7XG5cbiAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb247XG4gICAgICAgICAgfSk7XG5cbiAgICBmYWNldC5zcGxpdFdpdGhJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICB9XG5cbiAgc3BsaXRGYWNldHMoZmFjZXRzKSB7XG4gICAgY29uc3Qgc21hbGxlckZhY2V0cyA9IFtdO1xuXG4gICAgZmFjZXRzLmZvckVhY2goKGZhY2V0KSA9PiB7XG4gICAgICBmYWNldC5yb3RhdGUodGhpcy5mb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbik7XG5cbiAgICAgIHRoaXMuc3BsaXRGYWNldChmYWNldCwgc21hbGxlckZhY2V0cyk7XG4gICAgfSk7XG5cbiAgICBzbWFsbGVyRmFjZXRzLmZvckVhY2goKHNtYWxsZXJGYWNldCkgPT4ge1xuICAgICAgc21hbGxlckZhY2V0LnJvdGF0ZSh0aGlzLmJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc21hbGxlckZhY2V0cztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tTWFza2luZ0VkZ2UobWFza2luZ0VkZ2UpIHtcbiAgICBjb25zdCBtYXNraW5nRWRnZVBvc2l0aW9uID0gbWFza2luZ0VkZ2UuZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgICByb3RhdGlvbkFib3V0WkF4aXNRdWF0ZXJuaW9uID0gY2FsY3VsYXRlUm90YXRpb25BYm91dFpBeGlzUXVhdGVybmlvbihtYXNraW5nRWRnZSksXG4gICAgICAgICAgcm90YXRpb25RdWF0ZXJuaW9uID0gcm90YXRpb25BYm91dFpBeGlzUXVhdGVybmlvbiwgIC8vL1xuICAgICAgICAgIGZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uID0gY2FsY3VsYXRlRm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb24ocm90YXRpb25RdWF0ZXJuaW9uKSxcbiAgICAgICAgICBiYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb24gPSBjYWxjdWxhdGVCYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb24ocm90YXRpb25RdWF0ZXJuaW9uKSxcbiAgICAgICAgICBwb3NpdGlvbiA9IHJvdGF0ZVBvc2l0aW9uKG1hc2tpbmdFZGdlUG9zaXRpb24sIHJvdGF0aW9uUXVhdGVybmlvbiksXG4gICAgICAgICAgcG9zaXRpb25Db21wb25lbnRzID0gcG9zaXRpb24sIC8vL1xuICAgICAgICAgIGZpcnN0UG9zaXRpb25Db21wb25lbnQgPSBmaXJzdChwb3NpdGlvbkNvbXBvbmVudHMpLFxuICAgICAgICAgIHZlcnRpY2FsTGluZSA9IG5ldyBWZXJ0aWNhbExpbmUoZmlyc3RQb3NpdGlvbkNvbXBvbmVudCwgZm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb24sIGJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbik7XG5cbiAgICByZXR1cm4gdmVydGljYWxMaW5lO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVmVydGljYWxMaW5lO1xuIl19