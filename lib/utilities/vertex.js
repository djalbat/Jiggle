'use strict';

var vec3 = require('gl-vec3'),
    ///
vec4 = require('gl-vec4'),
    ///
mat4 = require('gl-mat4'); ///

var arrayUtilities = require('../utilities/array');

var dice = arrayUtilities.dice,
    flatten = arrayUtilities.flatten,
    create = mat4.create,
    translate = mat4.translate,
    scale = mat4.scale,
    rotate = mat4.rotate,
    transformMat4 = vec4.transformMat4;


var defaultWidth = 1,
    defaultDepth = 1,
    defaultHeight = 1,
    defaultOffset = [0, 0, 0],
    defaultRotation = [0, 0, 0];

function calculateVertexPositionData(initialVertexPositionData) {
  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultWidth;
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDepth;
  var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultHeight;
  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultOffset;
  var rotation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : defaultRotation;

  var mat4 = create(),
      xAngle = rotation[0] * Math.PI / 180,
      yAngle = rotation[1] * Math.PI / 180,
      zAngle = rotation[2] * Math.PI / 180;

  translate(mat4, mat4, offset);

  rotate(mat4, mat4, xAngle, [1, 0, 0]);
  rotate(mat4, mat4, yAngle, [0, 1, 0]);
  rotate(mat4, mat4, zAngle, [0, 0, 1]);

  scale(mat4, mat4, [width, depth, height]);

  var vertexPositions = dice(initialVertexPositionData, 4); ///

  vertexPositions = vertexPositions.map(function (vertexPosition) {
    return transformMat4(vertexPosition, vertexPosition, mat4);
  });

  vertexPositions = vertexPositions.map(function (vertexPosition) {
    return vertexPosition.slice(0, 3);
  });

  var vertexPositionData = flatten(vertexPositions);

  return vertexPositionData;
}

function calculateVertexNormalData(initialVertexPositionData) {
  var vertexNormalVectors = [],
      faces = dice(initialVertexPositionData, 16); ///

  faces.forEach(function (face) {
    var vertexPositions = dice(face, 4);

    for (var index = 0; index < 4; index++) {
      var firstVertexIndex = index,
          secondVertexIndex = (index + 1) % 4,
          thirdVertexIndex = (index + 3) % 4,
          firstVertexPosition = vertexPositions[firstVertexIndex],
          secondVertexPosition = vertexPositions[secondVertexIndex],
          thirdVertexPosition = vertexPositions[thirdVertexIndex],
          firstVector = subtract(secondVertexPosition, firstVertexPosition),
          ///
      secondVector = subtract(thirdVertexPosition, firstVertexPosition),
          ///
      vertexNormalVector = cross(firstVector, secondVector);

      vertexNormalVectors.push(vertexNormalVector);
    }
  });

  var vertexNormalData = flatten(vertexNormalVectors); ///

  return vertexNormalData;
}

function calculateVertexIndexData(initialVertexPositionData) {
  var vertexIndexData = [],
      initialVertexPositionDataLength = initialVertexPositionData.length,
      facesLength = initialVertexPositionDataLength / 16; ///

  for (var index = 0; index < facesLength; index++) {
    var offset = index * 4;

    vertexIndexData.push(offset + 0);
    vertexIndexData.push(offset + 1);
    vertexIndexData.push(offset + 2);
    vertexIndexData.push(offset + 0);
    vertexIndexData.push(offset + 2);
    vertexIndexData.push(offset + 3);
  }

  return vertexIndexData;
}

module.exports = {
  calculateVertexPositionData: calculateVertexPositionData,
  calculateVertexNormalData: calculateVertexNormalData,
  calculateVertexIndexData: calculateVertexIndexData
};

function subtract(vec1, vec2) {
  var vec = [];

  vec3.subtract(vec, vec1, vec2);

  return vec;
}

function cross(vec1, vec2) {
  var vec = [];

  vec3.cross(vec, vec1, vec2);

  return vec;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,