'use strict';

var vec3 = require('gl-vec3'),
    ///
vec4 = require('gl-vec4'),
    ///
mat4 = require('gl-mat4'); ///

var arrayUtilities = require('../utilities/array');

var dice = arrayUtilities.dice,
    flatten = arrayUtilities.flatten;


function calculateVertexPositionData(initialVertexPositionData, width, depth, height, offset) {
  var matrix = mat4.create();

  mat4.translate(matrix, matrix, offset);
  mat4.scale(matrix, matrix, [width, depth, height]);

  var vertexPositions = dice(initialVertexPositionData, 4); ///

  vertexPositions = vertexPositions.map(function (vertexPosition) {
    return vec4.transformMat4(vertexPosition, vertexPosition, matrix);
  });

  vertexPositions = vertexPositions.map(function (vertexPosition) {
    return vertexPosition.slice(0, 3);
  });

  return flatten(vertexPositions);
}

function calculateVertexNormalData(initialVertexPositionData) {
  var vertexNormalVectors = [],
      faces = dice(initialVertexPositionData, 16);

  faces.forEach(function (face) {
    var vertexPositions = dice(face, 4);

    for (var index = 0; index < 4; index++) {
      var firstVertexIndex = index,
          secondVertexIndex = (index + 1) % 4,
          thirdVertexIndex = (index + 3) % 4,
          firstVertexPosition = vertexPositions[firstVertexIndex],
          secondVertexPosition = vertexPositions[secondVertexIndex],
          thirdVertexPosition = vertexPositions[thirdVertexIndex],
          firstVector = subtract(secondVertexPosition, firstVertexPosition),
          ///
      secondVector = subtract(thirdVertexPosition, firstVertexPosition),
          ///
      vertexNormalVector = cross(firstVector, secondVector);

      vertexNormalVectors.push(vertexNormalVector);
    }
  });

  return flatten(vertexNormalVectors);
}

module.exports = {
  calculateVertexPositionData: calculateVertexPositionData,
  calculateVertexNormalData: calculateVertexNormalData
};

function subtract(vec1, vec2) {
  var vec = [];

  vec3.subtract(vec, vec1, vec2);

  return vec;
}

function cross(vec1, vec2) {
  var vec = [];

  vec3.cross(vec, vec1, vec2);

  return vec;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdmVydGV4LmpzIl0sIm5hbWVzIjpbInZlYzMiLCJyZXF1aXJlIiwidmVjNCIsIm1hdDQiLCJhcnJheVV0aWxpdGllcyIsImRpY2UiLCJmbGF0dGVuIiwiY2FsY3VsYXRlVmVydGV4UG9zaXRpb25EYXRhIiwiaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YSIsIndpZHRoIiwiZGVwdGgiLCJoZWlnaHQiLCJvZmZzZXQiLCJtYXRyaXgiLCJjcmVhdGUiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsInZlcnRleFBvc2l0aW9ucyIsIm1hcCIsInZlcnRleFBvc2l0aW9uIiwidHJhbnNmb3JtTWF0NCIsInNsaWNlIiwiY2FsY3VsYXRlVmVydGV4Tm9ybWFsRGF0YSIsInZlcnRleE5vcm1hbFZlY3RvcnMiLCJmYWNlcyIsImZvckVhY2giLCJmYWNlIiwiaW5kZXgiLCJmaXJzdFZlcnRleEluZGV4Iiwic2Vjb25kVmVydGV4SW5kZXgiLCJ0aGlyZFZlcnRleEluZGV4IiwiZmlyc3RWZXJ0ZXhQb3NpdGlvbiIsInNlY29uZFZlcnRleFBvc2l0aW9uIiwidGhpcmRWZXJ0ZXhQb3NpdGlvbiIsImZpcnN0VmVjdG9yIiwic3VidHJhY3QiLCJzZWNvbmRWZWN0b3IiLCJ2ZXJ0ZXhOb3JtYWxWZWN0b3IiLCJjcm9zcyIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIiwidmVjMSIsInZlYzIiLCJ2ZWMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLE9BQU9DLFFBQVEsU0FBUixDQUFiO0FBQUEsSUFBa0M7QUFDNUJDLE9BQU9ELFFBQVEsU0FBUixDQURiO0FBQUEsSUFDa0M7QUFDNUJFLE9BQU9GLFFBQVEsU0FBUixDQUZiLEMsQ0FFa0M7O0FBRWxDLElBQU1HLGlCQUFpQkgsUUFBUSxvQkFBUixDQUF2Qjs7SUFFUUksSSxHQUFrQkQsYyxDQUFsQkMsSTtJQUFNQyxPLEdBQVlGLGMsQ0FBWkUsTzs7O0FBRWQsU0FBU0MsMkJBQVQsQ0FBcUNDLHlCQUFyQyxFQUFnRUMsS0FBaEUsRUFBdUVDLEtBQXZFLEVBQThFQyxNQUE5RSxFQUFzRkMsTUFBdEYsRUFBOEY7QUFDNUYsTUFBTUMsU0FBU1YsS0FBS1csTUFBTCxFQUFmOztBQUVBWCxPQUFLWSxTQUFMLENBQWVGLE1BQWYsRUFBdUJBLE1BQXZCLEVBQStCRCxNQUEvQjtBQUNBVCxPQUFLYSxLQUFMLENBQVdILE1BQVgsRUFBbUJBLE1BQW5CLEVBQTJCLENBQUNKLEtBQUQsRUFBUUMsS0FBUixFQUFlQyxNQUFmLENBQTNCOztBQUVBLE1BQUlNLGtCQUFrQlosS0FBS0cseUJBQUwsRUFBZ0MsQ0FBaEMsQ0FBdEIsQ0FONEYsQ0FNakM7O0FBRTNEUyxvQkFBa0JBLGdCQUFnQkMsR0FBaEIsQ0FBb0IsVUFBU0MsY0FBVCxFQUF5QjtBQUM3RCxXQUFPakIsS0FBS2tCLGFBQUwsQ0FBbUJELGNBQW5CLEVBQW1DQSxjQUFuQyxFQUFtRE4sTUFBbkQsQ0FBUDtBQUNELEdBRmlCLENBQWxCOztBQUlBSSxvQkFBa0JBLGdCQUFnQkMsR0FBaEIsQ0FBb0IsVUFBU0MsY0FBVCxFQUF5QjtBQUM3RCxXQUFPQSxlQUFlRSxLQUFmLENBQXFCLENBQXJCLEVBQXdCLENBQXhCLENBQVA7QUFDRCxHQUZpQixDQUFsQjs7QUFJQSxTQUFPZixRQUFRVyxlQUFSLENBQVA7QUFDRDs7QUFFRCxTQUFTSyx5QkFBVCxDQUFtQ2QseUJBQW5DLEVBQThEO0FBQzVELE1BQU1lLHNCQUFzQixFQUE1QjtBQUFBLE1BQ01DLFFBQVFuQixLQUFLRyx5QkFBTCxFQUFnQyxFQUFoQyxDQURkOztBQUdBZ0IsUUFBTUMsT0FBTixDQUFjLFVBQVNDLElBQVQsRUFBZTtBQUMzQixRQUFNVCxrQkFBa0JaLEtBQUtxQixJQUFMLEVBQVcsQ0FBWCxDQUF4Qjs7QUFFQSxTQUFLLElBQUlDLFFBQVEsQ0FBakIsRUFBb0JBLFFBQVEsQ0FBNUIsRUFBK0JBLE9BQS9CLEVBQXdDO0FBQ3RDLFVBQU1DLG1CQUFtQkQsS0FBekI7QUFBQSxVQUNNRSxvQkFBb0IsQ0FBQ0YsUUFBUSxDQUFULElBQWMsQ0FEeEM7QUFBQSxVQUVNRyxtQkFBbUIsQ0FBQ0gsUUFBUSxDQUFULElBQWMsQ0FGdkM7QUFBQSxVQUdNSSxzQkFBc0JkLGdCQUFnQlcsZ0JBQWhCLENBSDVCO0FBQUEsVUFJTUksdUJBQXVCZixnQkFBZ0JZLGlCQUFoQixDQUo3QjtBQUFBLFVBS01JLHNCQUFzQmhCLGdCQUFnQmEsZ0JBQWhCLENBTDVCO0FBQUEsVUFNTUksY0FBY0MsU0FBU0gsb0JBQVQsRUFBK0JELG1CQUEvQixDQU5wQjtBQUFBLFVBTTBFO0FBQ3BFSyxxQkFBZUQsU0FBU0YsbUJBQVQsRUFBOEJGLG1CQUE5QixDQVByQjtBQUFBLFVBTzBFO0FBQ3BFTSwyQkFBcUJDLE1BQU1KLFdBQU4sRUFBbUJFLFlBQW5CLENBUjNCOztBQVVBYiwwQkFBb0JnQixJQUFwQixDQUF5QkYsa0JBQXpCO0FBQ0Q7QUFDRixHQWhCRDs7QUFrQkEsU0FBTy9CLFFBQVFpQixtQkFBUixDQUFQO0FBQ0Q7O0FBRURpQixPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZsQywrQkFBNkJBLDJCQURkO0FBRWZlLDZCQUEyQkE7QUFGWixDQUFqQjs7QUFLQSxTQUFTYSxRQUFULENBQWtCTyxJQUFsQixFQUF3QkMsSUFBeEIsRUFBOEI7QUFDNUIsTUFBTUMsTUFBTSxFQUFaOztBQUVBNUMsT0FBS21DLFFBQUwsQ0FBY1MsR0FBZCxFQUFtQkYsSUFBbkIsRUFBeUJDLElBQXpCOztBQUVBLFNBQU9DLEdBQVA7QUFDRDs7QUFFRCxTQUFTTixLQUFULENBQWVJLElBQWYsRUFBcUJDLElBQXJCLEVBQTJCO0FBQ3pCLE1BQU1DLE1BQU0sRUFBWjs7QUFFQTVDLE9BQUtzQyxLQUFMLENBQVdNLEdBQVgsRUFBZ0JGLElBQWhCLEVBQXNCQyxJQUF0Qjs7QUFFQSxTQUFPQyxHQUFQO0FBQ0QiLCJmaWxlIjoidmVydGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB2ZWMzID0gcmVxdWlyZSgnZ2wtdmVjMycpLCAgLy8vXG4gICAgICB2ZWM0ID0gcmVxdWlyZSgnZ2wtdmVjNCcpLCAgLy8vXG4gICAgICBtYXQ0ID0gcmVxdWlyZSgnZ2wtbWF0NCcpOyAgLy8vXG5cbmNvbnN0IGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5Jyk7XG5cbmNvbnN0IHsgZGljZSwgZmxhdHRlbiB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVZlcnRleFBvc2l0aW9uRGF0YShpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhLCB3aWR0aCwgZGVwdGgsIGhlaWdodCwgb2Zmc2V0KSB7XG4gIGNvbnN0IG1hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XG5cbiAgbWF0NC50cmFuc2xhdGUobWF0cml4LCBtYXRyaXgsIG9mZnNldCk7XG4gIG1hdDQuc2NhbGUobWF0cml4LCBtYXRyaXgsIFt3aWR0aCwgZGVwdGgsIGhlaWdodF0pO1xuXG4gIGxldCB2ZXJ0ZXhQb3NpdGlvbnMgPSBkaWNlKGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEsIDQpOyAgLy8vXG5cbiAgdmVydGV4UG9zaXRpb25zID0gdmVydGV4UG9zaXRpb25zLm1hcChmdW5jdGlvbih2ZXJ0ZXhQb3NpdGlvbikge1xuICAgIHJldHVybiB2ZWM0LnRyYW5zZm9ybU1hdDQodmVydGV4UG9zaXRpb24sIHZlcnRleFBvc2l0aW9uLCBtYXRyaXgpO1xuICB9KTtcblxuICB2ZXJ0ZXhQb3NpdGlvbnMgPSB2ZXJ0ZXhQb3NpdGlvbnMubWFwKGZ1bmN0aW9uKHZlcnRleFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHZlcnRleFBvc2l0aW9uLnNsaWNlKDAsIDMpO1xuICB9KTtcblxuICByZXR1cm4gZmxhdHRlbih2ZXJ0ZXhQb3NpdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVWZXJ0ZXhOb3JtYWxEYXRhKGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEpIHtcbiAgY29uc3QgdmVydGV4Tm9ybWFsVmVjdG9ycyA9IFtdLFxuICAgICAgICBmYWNlcyA9IGRpY2UoaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YSwgMTYpO1xuXG4gIGZhY2VzLmZvckVhY2goZnVuY3Rpb24oZmFjZSkge1xuICAgIGNvbnN0IHZlcnRleFBvc2l0aW9ucyA9IGRpY2UoZmFjZSwgNCk7XG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgNDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgZmlyc3RWZXJ0ZXhJbmRleCA9IGluZGV4LFxuICAgICAgICAgICAgc2Vjb25kVmVydGV4SW5kZXggPSAoaW5kZXggKyAxKSAlIDQsXG4gICAgICAgICAgICB0aGlyZFZlcnRleEluZGV4ID0gKGluZGV4ICsgMykgJSA0LFxuICAgICAgICAgICAgZmlyc3RWZXJ0ZXhQb3NpdGlvbiA9IHZlcnRleFBvc2l0aW9uc1tmaXJzdFZlcnRleEluZGV4XSxcbiAgICAgICAgICAgIHNlY29uZFZlcnRleFBvc2l0aW9uID0gdmVydGV4UG9zaXRpb25zW3NlY29uZFZlcnRleEluZGV4XSxcbiAgICAgICAgICAgIHRoaXJkVmVydGV4UG9zaXRpb24gPSB2ZXJ0ZXhQb3NpdGlvbnNbdGhpcmRWZXJ0ZXhJbmRleF0sXG4gICAgICAgICAgICBmaXJzdFZlY3RvciA9IHN1YnRyYWN0KHNlY29uZFZlcnRleFBvc2l0aW9uLCBmaXJzdFZlcnRleFBvc2l0aW9uKSwgIC8vL1xuICAgICAgICAgICAgc2Vjb25kVmVjdG9yID0gc3VidHJhY3QodGhpcmRWZXJ0ZXhQb3NpdGlvbiwgZmlyc3RWZXJ0ZXhQb3NpdGlvbiksICAvLy9cbiAgICAgICAgICAgIHZlcnRleE5vcm1hbFZlY3RvciA9IGNyb3NzKGZpcnN0VmVjdG9yLCBzZWNvbmRWZWN0b3IpO1xuXG4gICAgICB2ZXJ0ZXhOb3JtYWxWZWN0b3JzLnB1c2godmVydGV4Tm9ybWFsVmVjdG9yKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBmbGF0dGVuKHZlcnRleE5vcm1hbFZlY3RvcnMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2FsY3VsYXRlVmVydGV4UG9zaXRpb25EYXRhOiBjYWxjdWxhdGVWZXJ0ZXhQb3NpdGlvbkRhdGEsXG4gIGNhbGN1bGF0ZVZlcnRleE5vcm1hbERhdGE6IGNhbGN1bGF0ZVZlcnRleE5vcm1hbERhdGFcbn07XG5cbmZ1bmN0aW9uIHN1YnRyYWN0KHZlYzEsIHZlYzIpIHtcbiAgY29uc3QgdmVjID0gW107XG5cbiAgdmVjMy5zdWJ0cmFjdCh2ZWMsIHZlYzEsIHZlYzIpO1xuXG4gIHJldHVybiB2ZWM7XG59XG5cbmZ1bmN0aW9uIGNyb3NzKHZlYzEsIHZlYzIpIHtcbiAgY29uc3QgdmVjID0gW107XG5cbiAgdmVjMy5jcm9zcyh2ZWMsIHZlYzEsIHZlYzIpO1xuXG4gIHJldHVybiB2ZWM7XG59XG4iXX0=