'use strict';

var vec3 = require('../maths/vec3'),
    vec4 = require('../maths/vec4'),
    arrayUtilities = require('../utilities/array');

var chop = arrayUtilities.chop,
    flatten = arrayUtilities.flatten,
    subtract = vec3.subtract,
    cross = vec3.cross,
    composeTransform = vec4.composeTransform;


function calculateVertexPositionData(initialVertexPositionData, width, height, depth, offset, rotation) {
  var transform = composeTransform(width, height, depth, offset, rotation);

  var vertexPositions = chop(initialVertexPositionData, 4); ///

  vertexPositions = vertexPositions.map(function (vertexPosition) {
    return transform(vertexPosition);
  });

  vertexPositions = vertexPositions.map(function (vertexPosition) {
    return vertexPosition.slice(0, 3); ///
  });

  var vertexPositionData = flatten(vertexPositions);

  return vertexPositionData;
}

function calculateVertexColourData(initialVertexPositionData, colour) {
  var initialVertexPositionDataLength = initialVertexPositionData.length,
      vertexColoursLength = initialVertexPositionDataLength / 4,
      ///
  vertexColour = colour,
      vertexColours = [];

  for (var index = 0; index < vertexColoursLength; index++) {
    vertexColours.push(vertexColour);
  }

  var vertexColourData = flatten(vertexColours); ///

  return vertexColourData;
}

function calculateVertexNormalData(initialVertexPositionData) {
  var vertexNormalVectors = [],
      faces = chop(initialVertexPositionData, 16); ///

  faces.forEach(function (face) {
    var vertexPositions = chop(face, 4);

    for (var index = 0; index < 4; index++) {
      var firstVertexIndex = index,
          secondVertexIndex = (index + 1) % 4,
          thirdVertexIndex = (index + 3) % 4,
          firstVertexPosition = vertexPositions[firstVertexIndex],
          secondVertexPosition = vertexPositions[secondVertexIndex],
          thirdVertexPosition = vertexPositions[thirdVertexIndex],
          firstVector = subtract(secondVertexPosition, firstVertexPosition),
          ///
      secondVector = subtract(thirdVertexPosition, firstVertexPosition),
          ///
      vertexNormalVector = cross(firstVector, secondVector);

      vertexNormalVectors.push(vertexNormalVector);
    }
  });

  var vertexNormalData = flatten(vertexNormalVectors); ///

  return vertexNormalData;
}

function calculateVertexIndexData(initialVertexPositionData) {
  var vertexIndexData = [],
      initialVertexPositionDataLength = initialVertexPositionData.length,
      facesLength = initialVertexPositionDataLength / 16; ///

  for (var index = 0; index < facesLength; index++) {
    var offset = index * 4;

    vertexIndexData.push(offset + 0);
    vertexIndexData.push(offset + 1);
    vertexIndexData.push(offset + 2);
    vertexIndexData.push(offset + 0);
    vertexIndexData.push(offset + 2);
    vertexIndexData.push(offset + 3);
  }

  return vertexIndexData;
}

module.exports = {
  calculateVertexPositionData: calculateVertexPositionData,
  calculateVertexColourData: calculateVertexColourData,
  calculateVertexNormalData: calculateVertexNormalData,
  calculateVertexIndexData: calculateVertexIndexData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,