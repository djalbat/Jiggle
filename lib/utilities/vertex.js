'use strict';

var vec3 = require('../maths/vec3'),
    vec4 = require('../maths/vec4'),
    arrayUtilities = require('../utilities/array');

var chop = arrayUtilities.chop,
    flatten = arrayUtilities.flatten,
    subtract = vec3.subtract,
    cross = vec3.cross,
    composeTransform = vec4.composeTransform;


function calculateVertexPositionData(initialVertexPositionData, width, height, depth, offset, rotation) {
  var transform = composeTransform(width, height, depth, offset, rotation);

  var vertexPositions = chop(initialVertexPositionData, 4); ///

  vertexPositions = vertexPositions.map(function (vertexPosition) {
    return transform(vertexPosition);
  });

  vertexPositions = vertexPositions.map(function (vertexPosition) {
    return vertexPosition.slice(0, 3); ///
  });

  var vertexPositionData = flatten(vertexPositions);

  return vertexPositionData;
}

function calculateVertexNormalData(initialVertexPositionData) {
  var vertexNormalVectors = [],
      faces = chop(initialVertexPositionData, 16); ///

  faces.forEach(function (face) {
    var vertexPositions = chop(face, 4);

    for (var index = 0; index < 4; index++) {
      var firstVertexIndex = index,
          secondVertexIndex = (index + 1) % 4,
          thirdVertexIndex = (index + 3) % 4,
          firstVertexPosition = vertexPositions[firstVertexIndex],
          secondVertexPosition = vertexPositions[secondVertexIndex],
          thirdVertexPosition = vertexPositions[thirdVertexIndex],
          firstVector = subtract(secondVertexPosition, firstVertexPosition),
          ///
      secondVector = subtract(thirdVertexPosition, firstVertexPosition),
          ///
      vertexNormalVector = cross(firstVector, secondVector);

      vertexNormalVectors.push(vertexNormalVector);
    }
  });

  var vertexNormalData = flatten(vertexNormalVectors); ///

  return vertexNormalData;
}

function calculateVertexIndexData(initialVertexPositionData) {
  var vertexIndexData = [],
      initialVertexPositionDataLength = initialVertexPositionData.length,
      facesLength = initialVertexPositionDataLength / 16; ///

  for (var index = 0; index < facesLength; index++) {
    var offset = index * 4;

    vertexIndexData.push(offset + 0);
    vertexIndexData.push(offset + 1);
    vertexIndexData.push(offset + 2);
    vertexIndexData.push(offset + 0);
    vertexIndexData.push(offset + 2);
    vertexIndexData.push(offset + 3);
  }

  return vertexIndexData;
}

module.exports = {
  calculateVertexPositionData: calculateVertexPositionData,
  calculateVertexNormalData: calculateVertexNormalData,
  calculateVertexIndexData: calculateVertexIndexData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdmVydGV4LmpzIl0sIm5hbWVzIjpbInZlYzMiLCJyZXF1aXJlIiwidmVjNCIsImFycmF5VXRpbGl0aWVzIiwiY2hvcCIsImZsYXR0ZW4iLCJzdWJ0cmFjdCIsImNyb3NzIiwiY29tcG9zZVRyYW5zZm9ybSIsImNhbGN1bGF0ZVZlcnRleFBvc2l0aW9uRGF0YSIsImluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEiLCJ3aWR0aCIsImhlaWdodCIsImRlcHRoIiwib2Zmc2V0Iiwicm90YXRpb24iLCJ0cmFuc2Zvcm0iLCJ2ZXJ0ZXhQb3NpdGlvbnMiLCJtYXAiLCJ2ZXJ0ZXhQb3NpdGlvbiIsInNsaWNlIiwidmVydGV4UG9zaXRpb25EYXRhIiwiY2FsY3VsYXRlVmVydGV4Tm9ybWFsRGF0YSIsInZlcnRleE5vcm1hbFZlY3RvcnMiLCJmYWNlcyIsImZvckVhY2giLCJmYWNlIiwiaW5kZXgiLCJmaXJzdFZlcnRleEluZGV4Iiwic2Vjb25kVmVydGV4SW5kZXgiLCJ0aGlyZFZlcnRleEluZGV4IiwiZmlyc3RWZXJ0ZXhQb3NpdGlvbiIsInNlY29uZFZlcnRleFBvc2l0aW9uIiwidGhpcmRWZXJ0ZXhQb3NpdGlvbiIsImZpcnN0VmVjdG9yIiwic2Vjb25kVmVjdG9yIiwidmVydGV4Tm9ybWFsVmVjdG9yIiwicHVzaCIsInZlcnRleE5vcm1hbERhdGEiLCJjYWxjdWxhdGVWZXJ0ZXhJbmRleERhdGEiLCJ2ZXJ0ZXhJbmRleERhdGEiLCJpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhTGVuZ3RoIiwibGVuZ3RoIiwiZmFjZXNMZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLGVBQVIsQ0FBYjtBQUFBLElBQ01DLE9BQU9ELFFBQVEsZUFBUixDQURiO0FBQUEsSUFFTUUsaUJBQWlCRixRQUFRLG9CQUFSLENBRnZCOztJQUlRRyxJLEdBQWtCRCxjLENBQWxCQyxJO0lB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cUJ2QixTQUFTLENBQTlCO0FBQ0EwQixvQkFBZ0JILElBQWhCLENBQXFCdkIsU0FBUyxDQUE5QjtBQUNBMEIsb0JBQWdCSCxJQUFoQixDQUFxQnZCLFNBQVMsQ0FBOUI7QUFDQTBCLG9CQUFnQkgsSUFBaEIsQ0FBcUJ2QixTQUFTLENBQTlCO0FBQ0Q7O0FBRUQsU0FBTzBCLGVBQVA7QUFDRDs7QUFFREksT0FBT0MsT0FBUCxHQUFpQjtBQUNmcEMsK0JBQTZCQSwyQkFEZDtBQUVmYSw2QkFBMkJBLHlCQUZaO0FBR2ZpQiw0QkFBMEJBO0FBSFgsQ0FBakIiLCJmaWxlIjoidmVydGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB2ZWMzID0gcmVxdWlyZSgnLi4vbWF0aHMvdmVjMycpLFxuICAgICAgdmVjNCA9IHJlcXVpcmUoJy4uL21hdGhzL3ZlYzQnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5Jyk7XG5cbmNvbnN0IHsgY2hvcCwgZmxhdHRlbiB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHN1YnRyYWN0LCBjcm9zcyB9ID0gdmVjMyxcbiAgICAgIHsgY29tcG9zZVRyYW5zZm9ybSB9ID0gdmVjNDtcblxuZnVuY3Rpb24gY2FsY3VsYXRlVmVydGV4UG9zaXRpb25EYXRhKGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBvZmZzZXQsIHJvdGF0aW9uKSB7XG4gIGNvbnN0IHRyYW5zZm9ybSA9IGNvbXBvc2VUcmFuc2Zvcm0od2lkdGgsIGhlaWdodCwgZGVwdGgsIG9mZnNldCwgcm90YXRpb24pO1xuXG4gIGxldCB2ZXJ0ZXhQb3NpdGlvbnMgPSBjaG9wKGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEsIDQpOyAgLy8vXG5cbiAgdmVydGV4UG9zaXRpb25zID0gdmVydGV4UG9zaXRpb25zLm1hcChmdW5jdGlvbih2ZXJ0ZXhQb3NpdGlvbikge1xuICAgIHJldHVybiB0cmFuc2Zvcm0odmVydGV4UG9zaXRpb24pO1xuICB9KTtcblxuICB2ZXJ0ZXhQb3NpdGlvbnMgPSB2ZXJ0ZXhQb3NpdGlvbnMubWFwKGZ1bmN0aW9uKHZlcnRleFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHZlcnRleFBvc2l0aW9uLnNsaWNlKDAsIDMpOyAgLy8vXG4gIH0pO1xuICBcbiAgY29uc3QgdmVydGV4UG9zaXRpb25EYXRhID0gZmxhdHRlbih2ZXJ0ZXhQb3NpdGlvbnMpOyBcblxuICByZXR1cm4gdmVydGV4UG9zaXRpb25EYXRhO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVWZXJ0ZXhOb3JtYWxEYXRhKGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEpIHtcbiAgY29uc3QgdmVydGV4Tm9ybWFsVmVjdG9ycyA9IFtdLFxuICAgICAgICBmYWNlcyA9IGNob3AoaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YSwgMTYpOyAgLy8vXG5cbiAgZmFjZXMuZm9yRWFjaChmdW5jdGlvbihmYWNlKSB7XG4gICAgY29uc3QgdmVydGV4UG9zaXRpb25zID0gY2hvcChmYWNlLCA0KTtcblxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCA0OyBpbmRleCsrKSB7XG4gICAgICBjb25zdCBmaXJzdFZlcnRleEluZGV4ID0gaW5kZXgsXG4gICAgICAgICAgICBzZWNvbmRWZXJ0ZXhJbmRleCA9IChpbmRleCArIDEpICUgNCxcbiAgICAgICAgICAgIHRoaXJkVmVydGV4SW5kZXggPSAoaW5kZXggKyAzKSAlIDQsXG4gICAgICAgICAgICBmaXJzdFZlcnRleFBvc2l0aW9uID0gdmVydGV4UG9zaXRpb25zW2ZpcnN0VmVydGV4SW5kZXhdLFxuICAgICAgICAgICAgc2Vjb25kVmVydGV4UG9zaXRpb24gPSB2ZXJ0ZXhQb3NpdGlvbnNbc2Vjb25kVmVydGV4SW5kZXhdLFxuICAgICAgICAgICAgdGhpcmRWZXJ0ZXhQb3NpdGlvbiA9IHZlcnRleFBvc2l0aW9uc1t0aGlyZFZlcnRleEluZGV4XSxcbiAgICAgICAgICAgIGZpcnN0VmVjdG9yID0gc3VidHJhY3Qoc2Vjb25kVmVydGV4UG9zaXRpb24sIGZpcnN0VmVydGV4UG9zaXRpb24pLCAgLy8vXG4gICAgICAgICAgICBzZWNvbmRWZWN0b3IgPSBzdWJ0cmFjdCh0aGlyZFZlcnRleFBvc2l0aW9uLCBmaXJzdFZlcnRleFBvc2l0aW9uKSwgIC8vL1xuICAgICAgICAgICAgdmVydGV4Tm9ybWFsVmVjdG9yID0gY3Jvc3MoZmlyc3RWZWN0b3IsIHNlY29uZFZlY3Rvcik7XG5cbiAgICAgIHZlcnRleE5vcm1hbFZlY3RvcnMucHVzaCh2ZXJ0ZXhOb3JtYWxWZWN0b3IpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBjb25zdCB2ZXJ0ZXhOb3JtYWxEYXRhID0gZmxhdHRlbih2ZXJ0ZXhOb3JtYWxWZWN0b3JzKTsgLy8vXG5cbiAgcmV0dXJuIHZlcnRleE5vcm1hbERhdGE7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVZlcnRleEluZGV4RGF0YShpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhKSB7XG4gIGNvbnN0IHZlcnRleEluZGV4RGF0YSA9IFtdLFxuICAgICAgICBpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhTGVuZ3RoID0gaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YS5sZW5ndGgsXG4gICAgICAgIGZhY2VzTGVuZ3RoID0gaW5pdGlhbFZlcnRleFBvc2l0aW9uRGF0YUxlbmd0aCAvIDE2OyAvLy9cblxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZmFjZXNMZW5ndGg7IGluZGV4KyspIHtcbiAgICBjb25zdCBvZmZzZXQgPSBpbmRleCAqIDQ7XG5cbiAgICB2ZXJ0ZXhJbmRleERhdGEucHVzaChvZmZzZXQgKyAwKTtcbiAgICB2ZXJ0ZXhJbmRleERhdGEucHVzaChvZmZzZXQgKyAxKTtcbiAgICB2ZXJ0ZXhJbmRleERhdGEucHVzaChvZmZzZXQgKyAyKTtcbiAgICB2ZXJ0ZXhJbmRleERhdGEucHVzaChvZmZzZXQgKyAwKTtcbiAgICB2ZXJ0ZXhJbmRleERhdGEucHVzaChvZmZzZXQgKyAyKTtcbiAgICB2ZXJ0ZXhJbmRleERhdGEucHVzaChvZmZzZXQgKyAzKTtcbiAgfVxuXG4gIHJldHVybiB2ZXJ0ZXhJbmRleERhdGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjYWxjdWxhdGVWZXJ0ZXhQb3NpdGlvbkRhdGE6IGNhbGN1bGF0ZVZlcnRleFBvc2l0aW9uRGF0YSxcbiAgY2FsY3VsYXRlVmVydGV4Tm9ybWFsRGF0YTogY2FsY3VsYXRlVmVydGV4Tm9ybWFsRGF0YSxcbiAgY2FsY3VsYXRlVmVydGV4SW5kZXhEYXRhOiBjYWxjdWxhdGVWZXJ0ZXhJbmRleERhdGFcbn07XG4iXX0=