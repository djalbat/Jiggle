'use strict';

var vec3 = require('../maths/vec3'),
    arrayUtilities = require('../utilities/array'),
    imageMapUtilities = require('../utilities/imageMap'),
    transformUtilities = require('../utilities/transform');

var textureCoordinatesFromImageNames = imageMapUtilities.textureCoordinatesFromImageNames,
    composeScaleRotateTranslate = transformUtilities.composeScaleRotateTranslate,
    chop = arrayUtilities.chop,
    flatten = arrayUtilities.flatten,
    subtract = vec3.subtract,
    cross = vec3.cross,
    normalise = vec3.normalise;


function calculateVertexPositionData(initialVertexPositionData, width, height, depth, offset, rotations) {
  var initialVertexPositions = chop(initialVertexPositionData, 3),
      ///
  scaleRotateTranslate = composeScaleRotateTranslate(width, height, depth, offset, rotations),
      vertexPositions = initialVertexPositions.map(function (initialVertexPosition) {
    var vertexPosition = scaleRotateTranslate(initialVertexPosition);

    return vertexPosition;
  }),
      vertexPositionData = flatten(vertexPositions);

  return vertexPositionData;
}

function calculateVertexNormalData(vertexPositionData) {
  var faces = chop(vertexPositionData, 12),
      ///
  vertexNormals = faces.reduce(function (vertexNormals, face) {
    var vertexPositions = chop(face, 3);

    for (var index = 0; index < 4; index++) {
      var firstVertexIndex = index,
          secondVertexIndex = (index + 1) % 4,
          thirdVertexIndex = (index + 3) % 4,
          firstVertexPosition = vertexPositions[firstVertexIndex],
          secondVertexPosition = vertexPositions[secondVertexIndex],
          thirdVertexPosition = vertexPositions[thirdVertexIndex],
          firstVector = subtract(secondVertexPosition, firstVertexPosition),
          secondVector = subtract(thirdVertexPosition, firstVertexPosition),
          vertexNormal = normalise(cross(firstVector, secondVector));

      vertexNormals.push(vertexNormal);
    }

    return vertexNormals;
  }, []),
      vertexNormalData = flatten(vertexNormals); ///

  return vertexNormalData;
}

function calculateVertexIndexData(initialVertexPositionData) {
  var vertexIndexData = [],
      initialVertexPositionDataLength = initialVertexPositionData.length,
      facesLength = initialVertexPositionDataLength / 12; ///

  for (var index = 0; index < facesLength; index++) {
    var offset = index * 4;

    vertexIndexData.push(offset + 0);
    vertexIndexData.push(offset + 1);
    vertexIndexData.push(offset + 2);
    vertexIndexData.push(offset + 0);
    vertexIndexData.push(offset + 2);
    vertexIndexData.push(offset + 3);
  }

  return vertexIndexData;
}

function calculateVertexColourData(initialVertexPositionData, colour) {
  var initialVertexPositionDataLength = initialVertexPositionData.length,
      vertexColoursLength = initialVertexPositionDataLength / 3,
      ///
  vertexColour = colour,
      vertexColours = [];

  for (var index = 0; index < vertexColoursLength; index++) {
    vertexColours.push(vertexColour);
  }

  var vertexColourData = flatten(vertexColours); ///

  return vertexColourData;
}

function calculateTextureCoordinateData(initialVertexPositionData, imageName) {
  var initialVertexPositionDataLength = initialVertexPositionData.length,
      imageNamesLength = initialVertexPositionDataLength / 12,
      ///
  imageNames = [];

  for (var index = 0; index < imageNamesLength; index++) {
    imageNames.push(imageName);
  }

  var textureCoordinates = textureCoordinatesFromImageNames(imageNames),
      textureCoordinateData = flatten(textureCoordinates);

  return textureCoordinateData;
}

module.exports = {
  calculateVertexPositionData: calculateVertexPositionData,
  calculateVertexNormalData: calculateVertexNormalData,
  calculateVertexIndexData: calculateVertexIndexData,
  calculateVertexColourData: calculateVertexColourData,
  calculateTextureCoordinateData: calculateTextureCoordinateData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,