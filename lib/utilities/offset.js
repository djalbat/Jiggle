'use strict';

var arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    second = arrayUtilities.second;


function calculateXAngleOffset(xAngle, yAngle, scaledRelativeMouseCoordinates) {
  var secondScaledRelativeMouseCoordinate = second(scaledRelativeMouseCoordinates),
      xAngleOffset = [-Math.sin(yAngle) * Math.sin(xAngle) * secondScaledRelativeMouseCoordinate, -Math.cos(xAngle) * secondScaledRelativeMouseCoordinate, +Math.cos(yAngle) * Math.sin(xAngle) * secondScaledRelativeMouseCoordinate];

  return xAngleOffset;
}

function calculateYAngleOffset(yAngle, scaledRelativeMouseCoordinates) {
  var firstScaledRelativeMouseCoordinate = first(scaledRelativeMouseCoordinates),
      yAngleOffset = [-Math.cos(yAngle) * firstScaledRelativeMouseCoordinate, +0, -Math.sin(yAngle) * firstScaledRelativeMouseCoordinate];

  return yAngleOffset;
}

function calculateZAngleOffset(xAngle, yAngle, thirdScaledRelativeMouseCoordinate) {
  var zAngleOffset = [-Math.sin(yAngle) * Math.cos(xAngle) * thirdScaledRelativeMouseCoordinate, Math.sin(xAngle) * thirdScaledRelativeMouseCoordinate, +Math.cos(yAngle) * Math.cos(xAngle) * thirdScaledRelativeMouseCoordinate];

  return zAngleOffset;
}

module.exports = {
  calculateXAngleOffset: calculateXAngleOffset,
  calculateYAngleOffset: calculateYAngleOffset,
  calculateZAngleOffset: calculateZAngleOffset
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvb2Zmc2V0LmpzIl0sIm5hbWVzIjpbImFycmF5VXRpbGl0aWVzIiwicmVxdWlyZSIsImZpcnN0Iiwic2Vjb25kIiwiY2FsY3VsYXRlWEFuZ2xlT2Zmc2V0IiwieEFuZ2xlIiwieUFuZ2xlIiwic2NhbGVkUmVsYXRpdmVNb3VzZUNvb3JkaW5hdGVzIiwic2Vjb25kU2NhbGVkUmVsYXRpdmVNb3VzZUNvb3JkaW5hdGUiLCJ4QW5nbGVPZmZzZXQiLCJNYXRoIiwic2luIiwiY29zIiwiY2FsY3VsYXRlWUFuZ2xlT2Zmc2V0IiwiZmlyc3RTY2FsZWRSZWxhdGl2ZU1vdXNlQ29vcmRpbmF0ZSIsInlBbmdsZU9mZnNldCIsImNhbGN1bGF0ZVpBbmdsZU9mZnNldCIsInRoaXJkU2NhbGVkUmVsYXRpdmVNb3VzZUNvb3JkaW5hdGUiLCJ6QW5nbGVPZmZzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxpQkFBaUJDLFFBQVEsb0JBQVIsQ0FBdkI7O0lBRVFDLEssR0FBa0JGLGMsQ0FBbEJFLEs7SUFBT0MsTSxHQUFXSCxjLENBQVhHLE07OztBQUVmLFNBQVNDLHFCQUFULENBQStCQyxNQUEvQixFQUF1Q0MsTUFBdkMsRUFBK0NDLDhCQUEvQyxFQUErRTtBQUM3RSxNQUFNQyxzQ0FBc0NMLE9BQU9JLDhCQUFQLENBQTVDO0FBQUEsTUFDTUUsZUFBZSxDQUNiLENBQUNDLEtBQUtDLEdBQUwsQ0FBU0wsTUFBVCxDQUFELEdBQW9CSSxLQUFLQyxHQUFMLENBQVNOLE1BQVQsQ0FBcEIsR0FBdUNHLG1DQUQxQixFQUVLLENBQUVFLEtBQUtFLEdBQUwsQ0FBU1AsTUFBVCxDQUFGLEdBQXFCRyxtQ0FGMUIsRUFHYixDQUFDRSxLQUFLRSxHQUFMLENBQVNOLE1BQVQsQ0FBRCxHQUFvQkksS0FBS0MsR0FBTCxDQUFTTixNQUFULENBQXBCLEdBQXVDRyxtQ0FIMUIsQ0FEckI7O0FBT0EsU0FBT0MsWUFBUDtBQUNEOztBQUVELFNBQVNJLHFCQUFULENBQStCUCxNQUEvQixFQUF1Q0MsOEJBQXZDLEVBQXVFO0FBQ3JFLE1BQU1PLHFDQUFxQ1osTUFBTUssOEJBQU4sQ0FBM0M7QUFBQSxNQUNNUSxlQUFlLENBQ2IsQ0FBQ0wsS0FBS0UsR0FBTCxDQUFTTixNQUFULENBQUQsR0FBb0JRLGtDQURQLEVBRWIsQ0FBQyxDQUZZLEVBR2IsQ0FBQ0osS0FBS0MsR0FBTCxDQUFTTCxNQUFULENBQUQsR0FBb0JRLGtDQUhQLENBRHJCOztBQU9BLFNBQU9DLFlBQVA7QUFDRDs7QUFFRCxTQUFTQyxxQkFBVCxDQUErQlgsTUFBL0IsRUFBdUNDLE1BQXZDLEVBQStDVyxrQ0FBL0MsRUFBbUY7QUFDakYsTUFBTUMsZUFBZSxDQUNiLENBQUNSLEtBQUtDLEdBQUwsQ0FBU0wsTUFBVCxDQUFELEdBQW9CSSxLQUFLRSxHQUFMLENBQVNQLE1BQVQsQ0FBcEIsR0FBdUNZLGtDQUQxQixFQUVPUCxLQUFLQyxHQUFMLENBQVNOLE1BQVQsSUFBbUJZLGtDQUYxQixFQUdiLENBQUNQLEtBQUtFLEdBQUwsQ0FBU04sTUFBVCxDQUFELEdBQW9CSSxLQUFLRSxHQUFMLENBQVNQLE1BQVQsQ0FBcEIsR0FBdUNZLGtDQUgxQixDQUFyQjs7QUFNQSxTQUFPQyxZQUFQO0FBQ0Q7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmhCLDhDQURlO0FBRWZTLDhDQUZlO0FBR2ZHO0FBSGUsQ0FBakIiLCJmaWxlIjoib2Zmc2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpO1xuXG5jb25zdCB7IGZpcnN0LCBzZWNvbmQgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVYQW5nbGVPZmZzZXQoeEFuZ2xlLCB5QW5nbGUsIHNjYWxlZFJlbGF0aXZlTW91c2VDb29yZGluYXRlcykge1xuICBjb25zdCBzZWNvbmRTY2FsZWRSZWxhdGl2ZU1vdXNlQ29vcmRpbmF0ZSA9IHNlY29uZChzY2FsZWRSZWxhdGl2ZU1vdXNlQ29vcmRpbmF0ZXMpLFxuICAgICAgICB4QW5nbGVPZmZzZXQgPSBbXG4gICAgICAgICAgLU1hdGguc2luKHlBbmdsZSkgKiBNYXRoLnNpbih4QW5nbGUpICogc2Vjb25kU2NhbGVkUmVsYXRpdmVNb3VzZUNvb3JkaW5hdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBNYXRoLmNvcyh4QW5nbGUpICogc2Vjb25kU2NhbGVkUmVsYXRpdmVNb3VzZUNvb3JkaW5hdGUsXG4gICAgICAgICAgK01hdGguY29zKHlBbmdsZSkgKiBNYXRoLnNpbih4QW5nbGUpICogc2Vjb25kU2NhbGVkUmVsYXRpdmVNb3VzZUNvb3JkaW5hdGVcbiAgICAgICAgXTtcblxuICByZXR1cm4geEFuZ2xlT2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVZQW5nbGVPZmZzZXQoeUFuZ2xlLCBzY2FsZWRSZWxhdGl2ZU1vdXNlQ29vcmRpbmF0ZXMpIHtcbiAgY29uc3QgZmlyc3RTY2FsZWRSZWxhdGl2ZU1vdXNlQ29vcmRpbmF0ZSA9IGZpcnN0KHNjYWxlZFJlbGF0aXZlTW91c2VDb29yZGluYXRlcyksXG4gICAgICAgIHlBbmdsZU9mZnNldCA9IFtcbiAgICAgICAgICAtTWF0aC5jb3MoeUFuZ2xlKSAqIGZpcnN0U2NhbGVkUmVsYXRpdmVNb3VzZUNvb3JkaW5hdGUsXG4gICAgICAgICAgKzAsXG4gICAgICAgICAgLU1hdGguc2luKHlBbmdsZSkgKiBmaXJzdFNjYWxlZFJlbGF0aXZlTW91c2VDb29yZGluYXRlXG4gICAgICAgIF07XG5cbiAgcmV0dXJuIHlBbmdsZU9mZnNldDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlWkFuZ2xlT2Zmc2V0KHhBbmdsZSwgeUFuZ2xlLCB0aGlyZFNjYWxlZFJlbGF0aXZlTW91c2VDb29yZGluYXRlKSB7XG4gIGNvbnN0IHpBbmdsZU9mZnNldCA9IFtcbiAgICAgICAgICAtTWF0aC5zaW4oeUFuZ2xlKSAqIE1hdGguY29zKHhBbmdsZSkgKiB0aGlyZFNjYWxlZFJlbGF0aXZlTW91c2VDb29yZGluYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oeEFuZ2xlKSAqIHRoaXJkU2NhbGVkUmVsYXRpdmVNb3VzZUNvb3JkaW5hdGUsXG4gICAgICAgICAgK01hdGguY29zKHlBbmdsZSkgKiBNYXRoLmNvcyh4QW5nbGUpICogdGhpcmRTY2FsZWRSZWxhdGl2ZU1vdXNlQ29vcmRpbmF0ZVxuICAgICAgICBdO1xuXG4gIHJldHVybiB6QW5nbGVPZmZzZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjYWxjdWxhdGVYQW5nbGVPZmZzZXQsXG4gIGNhbGN1bGF0ZVlBbmdsZU9mZnNldCxcbiAgY2FsY3VsYXRlWkFuZ2xlT2Zmc2V0XG59O1xuIl19