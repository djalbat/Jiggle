'use strict';

var arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    second = arrayUtilities.second;


function calculateXAngleOffset(xAngle, yAngle, relativeOffsets) {
  var secondRelativeOffset = second(relativeOffsets),
      xAngleOffset = [-Math.sin(yAngle) * Math.sin(xAngle) * secondRelativeOffset, -Math.cos(xAngle) * secondRelativeOffset, +Math.cos(yAngle) * Math.sin(xAngle) * secondRelativeOffset];

  return xAngleOffset;
}

function calculateYAngleOffset(yAngle, relativeOffsets) {
  var firstRelativeOffset = first(relativeOffsets),
      yAngleOffset = [-Math.cos(yAngle) * firstRelativeOffset, +0, -Math.sin(yAngle) * firstRelativeOffset];

  return yAngleOffset;
}

function calculateZAngleOffset(xAngle, yAngle, thirdRelativeOffset) {
  var zAngleOffset = [-Math.sin(yAngle) * Math.cos(xAngle) * thirdRelativeOffset, Math.sin(xAngle) * thirdRelativeOffset, +Math.cos(yAngle) * Math.cos(xAngle) * thirdRelativeOffset];

  return zAngleOffset;
}

module.exports = {
  calculateXAngleOffset: calculateXAngleOffset,
  calculateYAngleOffset: calculateYAngleOffset,
  calculateZAngleOffset: calculateZAngleOffset
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvb2Zmc2V0LmpzIl0sIm5hbWVzIjpbImFycmF5VXRpbGl0aWVzIiwicmVxdWlyZSIsImZpcnN0Iiwic2Vjb25kIiwiY2FsY3VsYXRlWEFuZ2xlT2Zmc2V0IiwieEFuZ2xlIiwieUFuZ2xlIiwicmVsYXRpdmVPZmZzZXRzIiwic2Vjb25kUmVsYXRpdmVPZmZzZXQiLCJ4QW5nbGVPZmZzZXQiLCJNYXRoIiwic2luIiwiY29zIiwiY2FsY3VsYXRlWUFuZ2xlT2Zmc2V0IiwiZmlyc3RSZWxhdGl2ZU9mZnNldCIsInlBbmdsZU9mZnNldCIsImNhbGN1bGF0ZVpBbmdsZU9mZnNldCIsInRoaXJkUmVsYXRpdmVPZmZzZXQiLCJ6QW5nbGVPZmZzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxpQkFBaUJDLFFBQVEsb0JBQVIsQ0FBdkI7O0lBRVFDLEssR0FBa0JGLGMsQ0FBbEJFLEs7SUFBT0MsTSxHQUFXSCxjLENBQVhHLE07OztBQUVmLFNBQVNDLHFCQUFULENBQStCQyxNQUEvQixFQUF1Q0MsTUFBdkMsRUFBK0NDLGVBQS9DLEVBQWdFO0FBQzlELE1BQU1DLHVCQUF1QkwsT0FBT0ksZUFBUCxDQUE3QjtBQUFBLE1BQ01FLGVBQWUsQ0FDYixDQUFDQyxLQUFLQyxHQUFMLENBQVNMLE1BQVQsQ0FBRCxHQUFvQkksS0FBS0MsR0FBTCxDQUFTTixNQUFULENBQXBCLEdBQXVDRyxvQkFEMUIsRUFFSyxDQUFFRSxLQUFLRSxHQUFMLENBQVNQLE1BQVQsQ0FBRixHQUFxQkcsb0JBRjFCLEVBR2IsQ0FBQ0UsS0FBS0UsR0FBTCxDQUFTTixNQUFULENBQUQsR0FBb0JJLEtBQUtDLEdBQUwsQ0FBU04sTUFBVCxDQUFwQixHQUF1Q0csb0JBSDFCLENBRHJCOztBQU9BLFNBQU9DLFlBQVA7QUFDRDs7QUFFRCxTQUFTSSxxQkFBVCxDQUErQlAsTUFBL0IsRUFBdUNDLGVBQXZDLEVBQXdEO0FBQ3RELE1BQU1PLHNCQUFzQlosTUFBTUssZUFBTixDQUE1QjtBQUFBLE1BQ01RLGVBQWUsQ0FDYixDQUFDTCxLQUFLRSxHQUFMLENBQVNOLE1BQVQsQ0FBRCxHQUFvQlEsbUJBRFAsRUFFYixDQUFDLENBRlksRUFHYixDQUFDSixLQUFLQyxHQUFMLENBQVNMLE1BQVQsQ0FBRCxHQUFvQlEsbUJBSFAsQ0FEckI7O0FBT0EsU0FBT0MsWUFBUDtBQUNEOztBQUVELFNBQVNDLHFCQUFULENBQStCWCxNQUEvQixFQUF1Q0MsTUFBdkMsRUFBK0NXLG1CQUEvQyxFQUFvRTtBQUNsRSxNQUFNQyxlQUFlLENBQ2IsQ0FBQ1IsS0FBS0MsR0FBTCxDQUFTTCxNQUFULENBQUQsR0FBb0JJLEtBQUtFLEdBQUwsQ0FBU1AsTUFBVCxDQUFwQixHQUF1Q1ksbUJBRDFCLEVBRU9QLEtBQUtDLEdBQUwsQ0FBU04sTUFBVCxJQUFtQlksbUJBRjFCLEVBR2IsQ0FBQ1AsS0FBS0UsR0FBTCxDQUFTTixNQUFULENBQUQsR0FBb0JJLEtBQUtFLEdBQUwsQ0FBU1AsTUFBVCxDQUFwQixHQUF1Q1ksbUJBSDFCLENBQXJCOztBQU1BLFNBQU9DLFlBQVA7QUFDRDs7QUFFREMsT0FBT0MsT0FBUCxHQUFpQjtBQUNmaEIsOENBRGU7QUFFZlMsOENBRmU7QUFHZkc7QUFIZSxDQUFqQiIsImZpbGUiOiJvZmZzZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5Jyk7XG5cbmNvbnN0IHsgZmlyc3QsIHNlY29uZCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVhBbmdsZU9mZnNldCh4QW5nbGUsIHlBbmdsZSwgcmVsYXRpdmVPZmZzZXRzKSB7XG4gIGNvbnN0IHNlY29uZFJlbGF0aXZlT2Zmc2V0ID0gc2Vjb25kKHJlbGF0aXZlT2Zmc2V0cyksXG4gICAgICAgIHhBbmdsZU9mZnNldCA9IFtcbiAgICAgICAgICAtTWF0aC5zaW4oeUFuZ2xlKSAqIE1hdGguc2luKHhBbmdsZSkgKiBzZWNvbmRSZWxhdGl2ZU9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIE1hdGguY29zKHhBbmdsZSkgKiBzZWNvbmRSZWxhdGl2ZU9mZnNldCxcbiAgICAgICAgICArTWF0aC5jb3MoeUFuZ2xlKSAqIE1hdGguc2luKHhBbmdsZSkgKiBzZWNvbmRSZWxhdGl2ZU9mZnNldFxuICAgICAgICBdO1xuXG4gIHJldHVybiB4QW5nbGVPZmZzZXQ7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVlBbmdsZU9mZnNldCh5QW5nbGUsIHJlbGF0aXZlT2Zmc2V0cykge1xuICBjb25zdCBmaXJzdFJlbGF0aXZlT2Zmc2V0ID0gZmlyc3QocmVsYXRpdmVPZmZzZXRzKSxcbiAgICAgICAgeUFuZ2xlT2Zmc2V0ID0gW1xuICAgICAgICAgIC1NYXRoLmNvcyh5QW5nbGUpICogZmlyc3RSZWxhdGl2ZU9mZnNldCxcbiAgICAgICAgICArMCxcbiAgICAgICAgICAtTWF0aC5zaW4oeUFuZ2xlKSAqIGZpcnN0UmVsYXRpdmVPZmZzZXRcbiAgICAgICAgXTtcblxuICByZXR1cm4geUFuZ2xlT2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVaQW5nbGVPZmZzZXQoeEFuZ2xlLCB5QW5nbGUsIHRoaXJkUmVsYXRpdmVPZmZzZXQpIHtcbiAgY29uc3QgekFuZ2xlT2Zmc2V0ID0gW1xuICAgICAgICAgIC1NYXRoLnNpbih5QW5nbGUpICogTWF0aC5jb3MoeEFuZ2xlKSAqIHRoaXJkUmVsYXRpdmVPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbih4QW5nbGUpICogdGhpcmRSZWxhdGl2ZU9mZnNldCxcbiAgICAgICAgICArTWF0aC5jb3MoeUFuZ2xlKSAqIE1hdGguY29zKHhBbmdsZSkgKiB0aGlyZFJlbGF0aXZlT2Zmc2V0XG4gICAgICAgIF07XG5cbiAgcmV0dXJuIHpBbmdsZU9mZnNldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNhbGN1bGF0ZVhBbmdsZU9mZnNldCxcbiAgY2FsY3VsYXRlWUFuZ2xlT2Zmc2V0LFxuICBjYWxjdWxhdGVaQW5nbGVPZmZzZXRcbn07XG4iXX0=