'use strict';

var constants = require('../constants'),
    vectorMaths = require('../maths/vector'),
    arrayUtilities = require('../utilities/array');

var VERTICES_LENGTH = constants.VERTICES_LENGTH,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    subtract3 = vectorMaths.subtract3,
    cross3 = vectorMaths.cross3,
    length3 = vectorMaths.length3;


function cloneEdges(edges) {
  edges = edges.map(function (edge) {
    edge = edge.clone();

    return edge;
  });

  return edges;
}

function cloneNormal(normal) {
  normal = normal.slice(); ///

  return normal;
}

function cloneVertices(vertices) {
  vertices = vertices.map(function (vertex) {
    vertex = vertex.clone();

    return vertex;
  });

  return vertices;
}

function calculateEdges(vertices, Edge) {
  var edges = vertices.map(function (vertex, index) {
    var startIndex = index,
        ///
    endIndex = (startIndex + 1) % VERTICES_LENGTH,
        startVertex = vertices[startIndex],
        endVertex = vertices[endIndex],
        edge = Edge.fromStartVertexAndEndVertex(startVertex, endVertex);

    return edge;
  });

  return edges;
}

function calculateNormal(vertices) {
  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      firstPosition = firstVertex.getPosition(),
      secondPosition = secondVertex.getPosition(),
      thirdPosition = thirdVertex.getPosition(),
      firstExtent = subtract3(secondPosition, firstPosition),
      secondExtent = subtract3(thirdPosition, firstPosition),
      normal = cross3(firstExtent, secondExtent);

  return normal;
}

function calculateArea(vertices) {
  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      firstPosition = firstVertex.getPosition(),
      secondPosition = secondVertex.getPosition(),
      thirdPosition = thirdVertex.getPosition(),
      firstExtent = subtract3(secondPosition, firstPosition),
      secondExtent = subtract3(thirdPosition, firstPosition),
      area = length3(cross3(firstExtent, secondExtent)) / 2;

  return area;
}

module.exports = {
  cloneEdges: cloneEdges,
  cloneNormal: cloneNormal,
  cloneVertices: cloneVertices,
  calculateEdges: calculateEdges,
  calculateNormal: calculateNormal,
  calculateArea: calculateArea
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmFjZXQuanMiXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVxdWlyZSIsInZlY3Rvck1hdGhzIiwiYXJyYXlVdGlsaXRpZXMiLCJWRVJUSUNFU19MRU5HVEgiLCJmaXJzdCIsInNlY29uZCIsInRoaXJkIiwic3VidHJhY3QzIiwiY3Jvc3MzIiwibGVuZ3RoMyIsImNsb25lRWRnZXMiLCJlZGdlcyIsIm1hcCIsImVkZ2UiLCJjbG9uZSIsImNsb25lTm9ybWFsIiwibm9ybWFsIiwic2xpY2UiLCJjbG9uZVZlcnRpY2VzIiwidmVydGljZXMiLCJ2ZXJ0ZXgiLCJjYWxjdWxhdGVFZGdlcyIsIkVkZ2UiLCJpbmRleCIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsInN0YXJ0VmVydGV4IiwiZW5kVmVydGV4IiwiZnJvbVN0YXJ0VmVydGV4QW5kRW5kVmVydGV4IiwiY2FsY3VsYXRlTm9ybWFsIiwiZmlyc3RWZXJ0ZXgiLCJzZWNvbmRWZXJ0ZXgiLCJ0aGlyZFZlcnRleCIsImZpcnN0UG9zaXRpb24iLCJnZXRQb3NpdGlvbiIsInNlY29uZFBvc2l0aW9uIiwidGhpcmRQb3NpdGlvbiIsImZpcnN0RXh0ZW50Iiwic2Vjb25kRXh0ZW50IiwiY2FsY3VsYXRlQXJlYSIsImFyZWEiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLGNBQVIsQ0FBbEI7QUFBQSxJQUNNQyxjQUFjRCxRQUFRLGlCQUFSLENBRHBCO0FBQUEsSUFFTUUsaUJBQWlCRixRQUFRLG9CQUFSLENBRnZCOztBQUlNLElBQUVHLGVBQUYsR0FBc0JKLFNBQXRCLENBQUVJLGVBQUY7QUFBQSxJQUNFQyxLQURGLEdBQzJCRixjQUQzQixDQUNFRSxLQURGO0FBQUEsSUFDU0MsTUFEVCxHQUMyQkgsY0FEM0IsQ0FDU0csTUFEVDtBQUFBLElBQ2lCQyxLQURqQixHQUMyQkosY0FEM0IsQ0FDaUJJLEtBRGpCO0FBQUEs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aUI7QUFDZmhDLGNBQVlBLFVBREc7QUFFZkssZUFBYUEsV0FGRTtBQUdmRyxpQkFBZUEsYUFIQTtBQUlmRyxrQkFBZ0JBLGNBSkQ7QUFLZlEsbUJBQWlCQSxlQUxGO0FBTWZVLGlCQUFlQTtBQU5BLENBQWpCIiwiZmlsZSI6ImZhY2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIHZlY3Rvck1hdGhzID0gcmVxdWlyZSgnLi4vbWF0aHMvdmVjdG9yJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpO1xuXG5jb25zdCB7IFZFUlRJQ0VTX0xFTkdUSCB9ID0gY29uc3RhbnRzLFxuICAgICAgeyBmaXJzdCwgc2Vjb25kLCB0aGlyZCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHN1YnRyYWN0MywgY3Jvc3MzLCBsZW5ndGgzIH0gPSB2ZWN0b3JNYXRocztcblxuZnVuY3Rpb24gY2xvbmVFZGdlcyhlZGdlcykge1xuICBlZGdlcyA9IGVkZ2VzLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgZWRnZSA9IGVkZ2UuY2xvbmUoKTtcblxuICAgIHJldHVybiBlZGdlO1xuICB9KTtcblxuICByZXR1cm4gZWRnZXM7XG59XG5cbmZ1bmN0aW9uIGNsb25lTm9ybWFsKG5vcm1hbCkge1xuICBub3JtYWwgPSBub3JtYWwuc2xpY2UoKTsgIC8vL1xuXG4gIHJldHVybiBub3JtYWw7XG59XG5cbmZ1bmN0aW9uIGNsb25lVmVydGljZXModmVydGljZXMpIHtcbiAgdmVydGljZXMgPSB2ZXJ0aWNlcy5tYXAoZnVuY3Rpb24odmVydGV4KSB7XG4gICAgdmVydGV4ID0gdmVydGV4LmNsb25lKCk7XG5cbiAgICByZXR1cm4gdmVydGV4O1xuICB9KTtcblxuICByZXR1cm4gdmVydGljZXM7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUVkZ2VzKHZlcnRpY2VzLCBFZGdlKSB7XG4gIGNvbnN0IGVkZ2VzID0gdmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCwgaW5kZXgpIHtcbiAgICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXgsIC8vL1xuICAgICAgICAgIGVuZEluZGV4ID0gKHN0YXJ0SW5kZXggKyAxKSAlIFZFUlRJQ0VTX0xFTkdUSCxcbiAgICAgICAgICBzdGFydFZlcnRleCA9IHZlcnRpY2VzW3N0YXJ0SW5kZXhdLFxuICAgICAgICAgIGVuZFZlcnRleCA9IHZlcnRpY2VzW2VuZEluZGV4XSxcbiAgICAgICAgICBlZGdlID0gRWRnZS5mcm9tU3RhcnRWZXJ0ZXhBbmRFbmRWZXJ0ZXgoc3RhcnRWZXJ0ZXgsIGVuZFZlcnRleCk7XG5cbiAgICByZXR1cm4gZWRnZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVOb3JtYWwodmVydGljZXMpIHtcbiAgY29uc3QgZmlyc3RWZXJ0ZXggPSBmaXJzdCh2ZXJ0aWNlcyksXG4gICAgICAgIHNlY29uZFZlcnRleCA9IHNlY29uZCh2ZXJ0aWNlcyksXG4gICAgICAgIHRoaXJkVmVydGV4ID0gdGhpcmQodmVydGljZXMpLFxuICAgICAgICBmaXJzdFBvc2l0aW9uID0gZmlyc3RWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgc2Vjb25kUG9zaXRpb24gPSBzZWNvbmRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgdGhpcmRQb3NpdGlvbiA9IHRoaXJkVmVydGV4LmdldFBvc2l0aW9uKCksXG4gICAgICAgIGZpcnN0RXh0ZW50ID0gc3VidHJhY3QzKHNlY29uZFBvc2l0aW9uLCBmaXJzdFBvc2l0aW9uKSxcbiAgICAgICAgc2Vjb25kRXh0ZW50ID0gc3VidHJhY3QzKHRoaXJkUG9zaXRpb24sIGZpcnN0UG9zaXRpb24pLFxuICAgICAgICBub3JtYWwgPSBjcm9zczMoZmlyc3RFeHRlbnQsIHNlY29uZEV4dGVudCk7XG5cbiAgcmV0dXJuIG5vcm1hbDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlQXJlYSh2ZXJ0aWNlcykge1xuICBjb25zdCBmaXJzdFZlcnRleCA9IGZpcnN0KHZlcnRpY2VzKSxcbiAgICAgICAgc2Vjb25kVmVydGV4ID0gc2Vjb25kKHZlcnRpY2VzKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh2ZXJ0aWNlcyksXG4gICAgICAgIGZpcnN0UG9zaXRpb24gPSBmaXJzdFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICBzZWNvbmRQb3NpdGlvbiA9IHNlY29uZFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICB0aGlyZFBvc2l0aW9uID0gdGhpcmRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgZmlyc3RFeHRlbnQgPSBzdWJ0cmFjdDMoc2Vjb25kUG9zaXRpb24sIGZpcnN0UG9zaXRpb24pLFxuICAgICAgICBzZWNvbmRFeHRlbnQgPSBzdWJ0cmFjdDModGhpcmRQb3NpdGlvbiwgZmlyc3RQb3NpdGlvbiksXG4gICAgICAgIGFyZWEgPSBsZW5ndGgzKGNyb3NzMyhmaXJzdEV4dGVudCwgc2Vjb25kRXh0ZW50KSkgLyAyO1xuXG4gIHJldHVybiBhcmVhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2xvbmVFZGdlczogY2xvbmVFZGdlcyxcbiAgY2xvbmVOb3JtYWw6IGNsb25lTm9ybWFsLFxuICBjbG9uZVZlcnRpY2VzOiBjbG9uZVZlcnRpY2VzLFxuICBjYWxjdWxhdGVFZGdlczogY2FsY3VsYXRlRWRnZXMsXG4gIGNhbGN1bGF0ZU5vcm1hbDogY2FsY3VsYXRlTm9ybWFsLFxuICBjYWxjdWxhdGVBcmVhOiBjYWxjdWxhdGVBcmVhXG59O1xuIl19