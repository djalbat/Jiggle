"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloneEdges = cloneEdges;
exports.cloneNormal = cloneNormal;
exports.cloneVertices = cloneVertices;
exports.calculateEdges = calculateEdges;
exports.calculateNormal = calculateNormal;
exports.calculateArea = calculateArea;

var _constants = require("../constants");

var _array = require("../utilities/array");

var _vector = require("../maths/vector");

function cloneEdges(edges) {
  edges = edges.map(function (edge) {
    return edge.clone();
  });
  return edges;
}

function cloneNormal(normal) {
  normal = normal.clone();
  return normal;
}

function cloneVertices(vertices) {
  vertices = vertices.map(function (vertex) {
    return vertex.clone();
  });
  return vertices;
}

function calculateEdges(vertices, Edge) {
  var edges = vertices.map(function (vertex, index) {
    var startIndex = index,
        ///
    endIndex = (startIndex + 1) % _constants.VERTICES_LENGTH,
        startVertex = vertices[startIndex],
        endVertex = vertices[endIndex],
        edge = Edge.fromStartVertexAndEndVertex(startVertex, endVertex);
    return edge;
  });
  return edges;
}

function calculateNormal(vertices, Normal) {
  var normal = Normal.fromVertices(vertices);
  return normal;
}

function calculateArea(vertices) {
  var firstVertex = (0, _array.first)(vertices),
      secondVertex = (0, _array.second)(vertices),
      thirdVertex = (0, _array.third)(vertices),
      firstVertexPosition = firstVertex.getPosition(),
      secondVertexPosition = secondVertex.getPosition(),
      thirdVertexPosition = thirdVertex.getPosition(),
      firstExtent = (0, _vector.subtract3)(secondVertexPosition, firstVertexPosition),
      secondExtent = (0, _vector.subtract3)(thirdVertexPosition, firstVertexPosition),
      area = (0, _vector.length3)((0, _vector.cross3)(firstExtent, secondExtent)) / 2;
  return area;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZhY2V0LmpzIl0sIm5hbWVzIjpbImNsb25lRWRnZXMiLCJlZGdlcyIsIm1hcCIsImVkZ2UiLCJjbG9uZSIsImNsb25lTm9ybWFsIiwibm9ybWFsIiwiY2xvbmVWZXJ0aWNlcyIsInZlcnRpY2VzIiwidmVydGV4IiwiY2FsY3VsYXRlRWRnZXMiLCJFZGdlIiwiaW5kZXgiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJWRVJUSUNFU19MRU5HVEgiLCJzdGFydFZlcnRleCIsImVuZFZlcnRleCIsImZyb21TdGFydFZlcnRleEFuZEVuZFZlcnRleCIsImNhbGN1bGF0ZU5vcm1hbCIsIk5vcm1hbCIsImZyb21WZXJ0aWNlcyIsImNhbGN1bGF0ZUFyZWEiLCJmaXJzdFZlcnRleCIsInNlY29uZFZlcnRleCIsInRoaXJkVmVydGV4IiwiZmlyc3RWZXJ0ZXhQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwic2Vjb25kVmVydGV4UG9zaXRpb24iLCJ0aGlyZFZlcnRleFBvc2l0aW9uIiwiZmlyc3RFeHRlbnQiLCJzZWNvbmRFeHRlbnQiLCJhcmVhIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBRU8sU0FBU0EsVUFBVCxDQUFvQkMsS0FBcEIsRUFBMkI7QUFDaENBLEVBQUFBLEtBQUssR0FBR0EsS0FBSyxDQUFDQyxHQUFOLENBQVUsVUFBQ0MsSUFBRDtBQUFBLFdBQVVBLElBQUksQ0FBQ0MsS0FBTCxFQUFWO0FBQUEsR0FBVixDQUFSO0FBRUEsU0FBT0gsS0FBUDtBQUNEOztBQUVNLFNBQVNJLFdBQVQsQ0FBcUJDLE1BQXJCLEVBQTZCO0FBQ2xDQSxFQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0YsS0FBUCxFQUFUO0FBRUEsU0FBT0UsTUFBUDtBQUNEOztBQUVNLFNBQVNDLGFBQVQsQ0FBdUJDLFFBQXZCLEVBQWlDO0FBQ3RDQSxFQUFBQSxRQUFRLEdBQUdBLFFBQVEsQ0FBQ04sR0FBVCxDQUFhLFVBQUNPLE1BQUQ7QUFBQSxXQUFZQSxNQUFNLENBQUNMLEtBQVAsRUFBWjtBQUFBLEdBQWIsQ0FBWDtBQUVBLFNBQU9JLFFBQVA7QUFDRDs7QUFFTSxTQUFTRSxjQUFULENBQXdCRixRQUF4QixFQUFrQ0csSUFBbEMsRUFBd0M7QUFDN0MsTUFBTVYsS0FBSyxHQUFHTyxRQUFRLENBQUNOLEdBQVQsQ0FBYSxVQUFDTyxNQUFELEVBQVNHLEtBQVQsRUFBbUI7QUFDNUMsUUFBTUMsVUFBVSxHQUFHRCxLQUFuQjtBQUFBLFFBQTBCO0FBQ3BCRSxJQUFBQSxRQUFRLEdBQUcsQ0FBQ0QsVUFBVSxHQUFHLENBQWQsSUFBbUJFLDBCQURwQztBQUFBLFFBRU1DLFdBQVcsR0FBR1IsUUFBUSxDQUFDSyxVQUFELENBRjVCO0FBQUEsUUFHTUksU0FBUyxHQUFHVCxRQUFRLENBQUNNLFFBQUQsQ0FIMUI7QUFBQSxRQUlNWCxJQUFJLEdBQUdRLElBQUksQ0FBQ08sMkJBQUwsQ0FBaUNGLFdBQWpDLEVBQThDQyxTQUE5QyxDQUpiO0FBTUEsV0FBT2QsSUFBUDtBQUNELEdBUmEsQ0FBZDtBQVVBLFNBQU9GLEtBQVA7QUFDRDs7QUFFTSxTQUFTa0IsZUFBVCxDQUF5QlgsUUFBekIsRUFBbUNZLE1BQW5DLEVBQTJDO0FBQ2hELE1BQU1kLE1BQU0sR0FBR2MsTUFBTSxDQUFDQyxZQUFQLENBQW9CYixRQUFwQixDQUFmO0FBRUEsU0FBT0YsTUFBUDtBQUNEOztBQUVNLFNBQVNnQixhQUFULENBQXVCZCxRQUF2QixFQUFpQztBQUN0QyxNQUFNZSxXQUFXLEdBQUcsa0JBQU1mLFFBQU4sQ0FBcEI7QUFBQSxNQUNNZ0IsWUFBWSxHQUFHLG1CQUFPaEIsUUFBUCxDQURyQjtBQUFBLE1BRU1pQixXQUFXLEdBQUcsa0JBQU1qQixRQUFOLENBRnBCO0FBQUEsTUFHTWtCLG1CQUFtQixHQUFHSCxXQUFXLENBQUNJLFdBQVosRUFINUI7QUFBQSxNQUlNQyxvQkFBb0IsR0FBR0osWUFBWSxDQUFDRyxXQUFiLEVBSjdCO0FBQUEsTUFLTUUsbUJBQW1CLEdBQUdKLFdBQVcsQ0FBQ0UsV0FBWixFQUw1QjtBQUFBLE1BTU1HLFdBQVcsR0FBRyx1QkFBVUYsb0JBQVYsRUFBZ0NGLG1CQUFoQyxDQU5wQjtBQUFBLE1BT01LLFlBQVksR0FBRyx1QkFBVUYsbUJBQVYsRUFBK0JILG1CQUEvQixDQVByQjtBQUFBLE1BUU1NLElBQUksR0FBRyxxQkFBUSxvQkFBT0YsV0FBUCxFQUFvQkMsWUFBcEIsQ0FBUixJQUE2QyxDQVIxRDtBQVVBLFNBQU9DLElBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBWRVJUSUNFU19MRU5HVEggfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBmaXJzdCwgc2Vjb25kLCB0aGlyZCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IHN1YnRyYWN0MywgY3Jvc3MzLCBsZW5ndGgzIH0gZnJvbSBcIi4uL21hdGhzL3ZlY3RvclwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVFZGdlcyhlZGdlcykge1xuICBlZGdlcyA9IGVkZ2VzLm1hcCgoZWRnZSkgPT4gZWRnZS5jbG9uZSgpKTtcblxuICByZXR1cm4gZWRnZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZU5vcm1hbChub3JtYWwpIHtcbiAgbm9ybWFsID0gbm9ybWFsLmNsb25lKCk7XG4gIFxuICByZXR1cm4gbm9ybWFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVWZXJ0aWNlcyh2ZXJ0aWNlcykge1xuICB2ZXJ0aWNlcyA9IHZlcnRpY2VzLm1hcCgodmVydGV4KSA9PiB2ZXJ0ZXguY2xvbmUoKSk7XG5cbiAgcmV0dXJuIHZlcnRpY2VzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlRWRnZXModmVydGljZXMsIEVkZ2UpIHtcbiAgY29uc3QgZWRnZXMgPSB2ZXJ0aWNlcy5tYXAoKHZlcnRleCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXgsIC8vL1xuICAgICAgICAgIGVuZEluZGV4ID0gKHN0YXJ0SW5kZXggKyAxKSAlIFZFUlRJQ0VTX0xFTkdUSCxcbiAgICAgICAgICBzdGFydFZlcnRleCA9IHZlcnRpY2VzW3N0YXJ0SW5kZXhdLFxuICAgICAgICAgIGVuZFZlcnRleCA9IHZlcnRpY2VzW2VuZEluZGV4XSxcbiAgICAgICAgICBlZGdlID0gRWRnZS5mcm9tU3RhcnRWZXJ0ZXhBbmRFbmRWZXJ0ZXgoc3RhcnRWZXJ0ZXgsIGVuZFZlcnRleCk7XG5cbiAgICByZXR1cm4gZWRnZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlTm9ybWFsKHZlcnRpY2VzLCBOb3JtYWwpIHtcbiAgY29uc3Qgbm9ybWFsID0gTm9ybWFsLmZyb21WZXJ0aWNlcyh2ZXJ0aWNlcyk7XG5cbiAgcmV0dXJuIG5vcm1hbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUFyZWEodmVydGljZXMpIHtcbiAgY29uc3QgZmlyc3RWZXJ0ZXggPSBmaXJzdCh2ZXJ0aWNlcyksXG4gICAgICAgIHNlY29uZFZlcnRleCA9IHNlY29uZCh2ZXJ0aWNlcyksXG4gICAgICAgIHRoaXJkVmVydGV4ID0gdGhpcmQodmVydGljZXMpLFxuICAgICAgICBmaXJzdFZlcnRleFBvc2l0aW9uID0gZmlyc3RWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgc2Vjb25kVmVydGV4UG9zaXRpb24gPSBzZWNvbmRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXhQb3NpdGlvbiA9IHRoaXJkVmVydGV4LmdldFBvc2l0aW9uKCksXG4gICAgICAgIGZpcnN0RXh0ZW50ID0gc3VidHJhY3QzKHNlY29uZFZlcnRleFBvc2l0aW9uLCBmaXJzdFZlcnRleFBvc2l0aW9uKSxcbiAgICAgICAgc2Vjb25kRXh0ZW50ID0gc3VidHJhY3QzKHRoaXJkVmVydGV4UG9zaXRpb24sIGZpcnN0VmVydGV4UG9zaXRpb24pLFxuICAgICAgICBhcmVhID0gbGVuZ3RoMyhjcm9zczMoZmlyc3RFeHRlbnQsIHNlY29uZEV4dGVudCkpIC8gMjtcblxuICByZXR1cm4gYXJlYTtcbn1cbiJdfQ==