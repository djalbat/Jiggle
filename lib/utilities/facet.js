'use strict';

var constants = require('../constants'),
    vectorMaths = require('../maths/vector'),
    arrayUtilities = require('../utilities/array');

var VERTICES_LENGTH = constants.VERTICES_LENGTH,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    subtract3 = vectorMaths.subtract3,
    cross3 = vectorMaths.cross3,
    length3 = vectorMaths.length3;


function cloneEdges(edges) {
  edges = edges.map(function (edge) {
    edge = edge.clone();

    return edge;
  });

  return edges;
}

function cloneNormal(normal) {
  normal = normal.clone();

  return normal;
}

function cloneVertices(vertices) {
  vertices = vertices.map(function (vertex) {
    vertex = vertex.clone();

    return vertex;
  });

  return vertices;
}

function calculateEdges(vertices, Edge) {
  var edges = vertices.map(function (vertex, index) {
    var startIndex = index,
        ///
    endIndex = (startIndex + 1) % VERTICES_LENGTH,
        startVertex = vertices[startIndex],
        endVertex = vertices[endIndex],
        edge = Edge.fromStartVertexAndEndVertex(startVertex, endVertex);

    return edge;
  });

  return edges;
}

function calculateNormal(vertices, Normal) {
  var normal = Normal.fromVertices(vertices);

  return normal;
}

function calculateArea(vertices) {
  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      firstVertexPosition = firstVertex.getPosition(),
      secondVertexPosition = secondVertex.getPosition(),
      thirdVertexPosition = thirdVertex.getPosition(),
      firstExtent = subtract3(secondVertexPosition, firstVertexPosition),
      secondExtent = subtract3(thirdVertexPosition, firstVertexPosition),
      area = length3(cross3(firstExtent, secondExtent)) / 2;

  return area;
}

module.exports = {
  cloneEdges: cloneEdges,
  cloneNormal: cloneNormal,
  cloneVertices: cloneVertices,
  calculateEdges: calculateEdges,
  calculateNormal: calculateNormal,
  calculateArea: calculateArea
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmFjZXQuanMiXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVxdWlyZSIsInZlY3Rvck1hdGhzIiwiYXJyYXlVdGlsaXRpZXMiLCJWRVJUSUNFU19MRU5HVEgiLCJmaXJzdCIsInNlY29uZCIsInRoaXJkIiwic3VidHJhY3QzIiwiY3Jvc3MzIiwibGVuZ3RoMyIsImNsb25lRWRnZXMiLCJlZGdlcyIsIm1hcCIsImVkZ2UiLCJjbG9uZSIsImNsb25lTm9ybWFsIiwibm9ybWFsIiwiY2xvbmVWZXJ0aWNlcyIsInZlcnRpY2VzIiwidmVydGV4IiwiY2FsY3VsYXRlRWRnZXMiLCJFZGdlIiwiaW5kZXgiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJzdGFydFZlcnRleCIsImVuZFZlcnRleCIsImZyb21TdGFydFZlcnRleEFuZEVuZFZlcnRleCIsImNhbGN1bGF0ZU5vcm1hbCIsIk5vcm1hbCIsImZyb21WZXJ0aWNlcyIsImNhbGN1bGF0ZUFyZWEiLCJmaXJzdFZlcnRleCIsInNlY29uZFZlcnRleCIsInRoaXJkVmVydGV4IiwiZmlyc3RWZXJ0ZXhQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwic2Vjb25kVmVydGV4UG9zaXRpb24iLCJ0aGlyZFZlcnRleFBvc2l0aW9uIiwiZmlyc3RFeHRlbnQiLCJzZWNvbmRFeHRlbnQiLCJhcmVhIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxjQUFSLENBQWxCO0FBQUEsSUFDTUMsY0FBY0QsUUFBUSxpQkFBUixDQURwQjtBQUFBLElBRU1FLGlCQUFpQkYsUUFBUSxvQkFBUixDQUZ2Qjs7QUFJTSxJQUFFRyxlQUFGLEdBQXNCSixTQUF0QixDQUFFSSxlQUFGO0FBQUEsSUFDRUMsS0FERixHQUMyQkYsY0FEM0IsQ0FDRUUsS0FERjtBQUFBLElBQ1NDLE1BRFQsR0FDMkJILGNBRDNCLENBQ1NHLE1BRFQ7QUFBQSxJQUNpQkMsS0FEakIsR0FDMkJKLGNBRDNCLENBQ2lCSSxLQURqQjtBQUFBLElBRUVDLFNBRkYsR0FFaUNOLFdBRmpDLENBRUVNLFNBRkY7QUFBQSxJQUVhQyxNQUZiLEdBRWlDUCxXQUZqQyxDQUVhTyxNQUZiO0FBQUEsSUFFcUJDLE9BRnJCLEdBRWlDUixXQUZqQyxDQUVxQlEsT0FGckI7OztBQUlOLFNBQVNDLFVBQVQsQ0FBb0JDLEtBQXBCLEVBQTJCO0FBQ3pCQSxVQUFRQSxNQUFNQyxHQUFOLENBQVUsVUFBU0MsSUFBVCxFQUFlO0FBQy9CQSxXQUFPQSxLQUFLQyxLQUFMLEVBQVA7O0FBRUEsV0FBT0QsSUFBUDtBQUNELEdBSk8sQ0FBUjs7QUFNQSxTQUFPRixLQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksV0FBVCxDQUFxQkMsTUFBckIsRUFBNkI7QUFDM0JBLFdBQVNBLE9BQU9GLEtBQVAsRUFBVDs7QUFFQSxTQUFPRSxNQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsYUFBVCxDQUF1QkMsUUFBdkIsRUFBaUM7QUFDL0JBLGFBQVdBLFNBQVNOLEdBQVQsQ0FBYSxVQUFTTyxNQUFULEVBQWlCO0FBQ3ZDQSxhQUFTQSxPQUFPTCxLQUFQLEVBQVQ7O0FBRUEsV0FBT0ssTUFBUDtBQUNELEdBSlUsQ0FBWDs7QUFNQSxTQUFPRCxRQUFQO0FBQ0Q7O0FBRUQsU0FBU0UsY0FBVCxDQUF3QkYsUUFBeEIsRUFBa0NHLElBQWxDLEVBQXdDO0FBQ3RDLE1BQU1WLFFBQVFPLFNBQVNOLEdBQVQsQ0FBYSxVQUFTTyxNQUFULEVBQWlCRyxLQUFqQixFQUF3QjtBQUNqRCxRQUFNQyxhQUFhRCxLQUFuQjtBQUFBLFFBQTBCO0FBQ3BCRSxlQUFXLENBQUNELGFBQWEsQ0FBZCxJQUFtQnBCLGVBRHBDO0FBQUEsUUFFTXNCLGNBQWNQLFNBQVNLLFVBQVQsQ0FGcEI7QUFBQSxRQUdNRyxZQUFZUixTQUFTTSxRQUFULENBSGxCO0FBQUEsUUFJTVgsT0FBT1EsS0FBS00sMkJBQUwsQ0FBaUNGLFdBQWpDLEVBQThDQyxTQUE5QyxDQUpiOztBQU1BLFdBQU9iLElBQVA7QUFDRCxHQVJhLENBQWQ7O0FBVUEsU0FBT0YsS0FBUDtBQUNEOztBQUVELFNBQVNpQixlQUFULENBQXlCVixRQUF6QixFQUFtQ1csTUFBbkMsRUFBMkM7QUFDekMsTUFBTWIsU0FBU2EsT0FBT0MsWUFBUCxDQUFvQlosUUFBcEIsQ0FBZjs7QUFFQSxTQUFPRixNQUFQO0FBQ0Q7O0FBRUQsU0FBU2UsYUFBVCxDQUF1QmIsUUFBdkIsRUFBaUM7QUFDL0IsTUFBTWMsY0FBYzVCLE1BQU1jLFFBQU4sQ0FBcEI7QUFBQSxNQUNNZSxlQUFlNUIsT0FBT2EsUUFBUCxDQURyQjtBQUFBLE1BRU1nQixjQUFjNUIsTUFBTVksUUFBTixDQUZwQjtBQUFBLE1BR01pQixzQkFBc0JILFlBQVlJLFdBQVosRUFINUI7QUFBQSxNQUlNQyx1QkFBdUJKLGFBQWFHLFdBQWIsRUFKN0I7QUFBQSxNQUtNRSxzQkFBc0JKLFlBQVlFLFdBQVosRUFMNUI7QUFBQSxNQU1NRyxjQUFjaEMsVUFBVThCLG9CQUFWLEVBQWdDRixtQkFBaEMsQ0FOcEI7QUFBQSxNQU9NSyxlQUFlakMsVUFBVStCLG1CQUFWLEVBQStCSCxtQkFBL0IsQ0FQckI7QUFBQSxNQVFNTSxPQUFPaEMsUUFBUUQsT0FBTytCLFdBQVAsRUFBb0JDLFlBQXBCLENBQVIsSUFBNkMsQ0FSMUQ7O0FBVUEsU0FBT0MsSUFBUDtBQUNEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZqQyx3QkFEZTtBQUVmSywwQkFGZTtBQUdmRSw4QkFIZTtBQUlmRyxnQ0FKZTtBQUtmUSxrQ0FMZTtBQU1mRztBQU5lLENBQWpCIiwiZmlsZSI6ImZhY2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIHZlY3Rvck1hdGhzID0gcmVxdWlyZSgnLi4vbWF0aHMvdmVjdG9yJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpO1xuXG5jb25zdCB7IFZFUlRJQ0VTX0xFTkdUSCB9ID0gY29uc3RhbnRzLFxuICAgICAgeyBmaXJzdCwgc2Vjb25kLCB0aGlyZCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHN1YnRyYWN0MywgY3Jvc3MzLCBsZW5ndGgzIH0gPSB2ZWN0b3JNYXRocztcblxuZnVuY3Rpb24gY2xvbmVFZGdlcyhlZGdlcykge1xuICBlZGdlcyA9IGVkZ2VzLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgZWRnZSA9IGVkZ2UuY2xvbmUoKTtcblxuICAgIHJldHVybiBlZGdlO1xuICB9KTtcblxuICByZXR1cm4gZWRnZXM7XG59XG5cbmZ1bmN0aW9uIGNsb25lTm9ybWFsKG5vcm1hbCkge1xuICBub3JtYWwgPSBub3JtYWwuY2xvbmUoKTtcbiAgXG4gIHJldHVybiBub3JtYWw7XG59XG5cbmZ1bmN0aW9uIGNsb25lVmVydGljZXModmVydGljZXMpIHtcbiAgdmVydGljZXMgPSB2ZXJ0aWNlcy5tYXAoZnVuY3Rpb24odmVydGV4KSB7XG4gICAgdmVydGV4ID0gdmVydGV4LmNsb25lKCk7XG5cbiAgICByZXR1cm4gdmVydGV4O1xuICB9KTtcblxuICByZXR1cm4gdmVydGljZXM7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUVkZ2VzKHZlcnRpY2VzLCBFZGdlKSB7XG4gIGNvbnN0IGVkZ2VzID0gdmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCwgaW5kZXgpIHtcbiAgICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXgsIC8vL1xuICAgICAgICAgIGVuZEluZGV4ID0gKHN0YXJ0SW5kZXggKyAxKSAlIFZFUlRJQ0VTX0xFTkdUSCxcbiAgICAgICAgICBzdGFydFZlcnRleCA9IHZlcnRpY2VzW3N0YXJ0SW5kZXhdLFxuICAgICAgICAgIGVuZFZlcnRleCA9IHZlcnRpY2VzW2VuZEluZGV4XSxcbiAgICAgICAgICBlZGdlID0gRWRnZS5mcm9tU3RhcnRWZXJ0ZXhBbmRFbmRWZXJ0ZXgoc3RhcnRWZXJ0ZXgsIGVuZFZlcnRleCk7XG5cbiAgICByZXR1cm4gZWRnZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVOb3JtYWwodmVydGljZXMsIE5vcm1hbCkge1xuICBjb25zdCBub3JtYWwgPSBOb3JtYWwuZnJvbVZlcnRpY2VzKHZlcnRpY2VzKTtcblxuICByZXR1cm4gbm9ybWFsO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVBcmVhKHZlcnRpY2VzKSB7XG4gIGNvbnN0IGZpcnN0VmVydGV4ID0gZmlyc3QodmVydGljZXMpLFxuICAgICAgICBzZWNvbmRWZXJ0ZXggPSBzZWNvbmQodmVydGljZXMpLFxuICAgICAgICB0aGlyZFZlcnRleCA9IHRoaXJkKHZlcnRpY2VzKSxcbiAgICAgICAgZmlyc3RWZXJ0ZXhQb3NpdGlvbiA9IGZpcnN0VmVydGV4LmdldFBvc2l0aW9uKCksXG4gICAgICAgIHNlY29uZFZlcnRleFBvc2l0aW9uID0gc2Vjb25kVmVydGV4LmdldFBvc2l0aW9uKCksXG4gICAgICAgIHRoaXJkVmVydGV4UG9zaXRpb24gPSB0aGlyZFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICBmaXJzdEV4dGVudCA9IHN1YnRyYWN0MyhzZWNvbmRWZXJ0ZXhQb3NpdGlvbiwgZmlyc3RWZXJ0ZXhQb3NpdGlvbiksXG4gICAgICAgIHNlY29uZEV4dGVudCA9IHN1YnRyYWN0Myh0aGlyZFZlcnRleFBvc2l0aW9uLCBmaXJzdFZlcnRleFBvc2l0aW9uKSxcbiAgICAgICAgYXJlYSA9IGxlbmd0aDMoY3Jvc3MzKGZpcnN0RXh0ZW50LCBzZWNvbmRFeHRlbnQpKSAvIDI7XG5cbiAgcmV0dXJuIGFyZWE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjbG9uZUVkZ2VzLFxuICBjbG9uZU5vcm1hbCxcbiAgY2xvbmVWZXJ0aWNlcyxcbiAgY2FsY3VsYXRlRWRnZXMsXG4gIGNhbGN1bGF0ZU5vcm1hbCxcbiAgY2FsY3VsYXRlQXJlYVxufTtcbiJdfQ==