'use strict';

var constants = require('../constants'),
    vectorMaths = require('../maths/vector'),
    arrayUtilities = require('../utilities/array');

var VERTICES_LENGTH = constants.VERTICES_LENGTH,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    subtract3 = vectorMaths.subtract3,
    cross3 = vectorMaths.cross3,
    length3 = vectorMaths.length3;

function cloneEdges(edges) {
  edges = edges.map(function (edge) {
    return edge.clone();
  });
  return edges;
}

function cloneNormal(normal) {
  normal = normal.clone();
  return normal;
}

function cloneVertices(vertices) {
  vertices = vertices.map(function (vertex) {
    return vertex.clone();
  });
  return vertices;
}

function calculateEdges(vertices, Edge) {
  var edges = vertices.map(function (vertex, index) {
    var startIndex = index,
        ///
    endIndex = (startIndex + 1) % VERTICES_LENGTH,
        startVertex = vertices[startIndex],
        endVertex = vertices[endIndex],
        edge = Edge.fromStartVertexAndEndVertex(startVertex, endVertex);
    return edge;
  });
  return edges;
}

function calculateNormal(vertices, Normal) {
  var normal = Normal.fromVertices(vertices);
  return normal;
}

function calculateArea(vertices) {
  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      firstVertexPosition = firstVertex.getPosition(),
      secondVertexPosition = secondVertex.getPosition(),
      thirdVertexPosition = thirdVertex.getPosition(),
      firstExtent = subtract3(secondVertexPosition, firstVertexPosition),
      secondExtent = subtract3(thirdVertexPosition, firstVertexPosition),
      area = length3(cross3(firstExtent, secondExtent)) / 2;
  return area;
}

module.exports = {
  cloneEdges: cloneEdges,
  cloneNormal: cloneNormal,
  cloneVertices: cloneVertices,
  calculateEdges: calculateEdges,
  calculateNormal: calculateNormal,
  calculateArea: calculateArea
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZhY2V0LmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJ2ZWN0b3JNYXRocyIsImFycmF5VXRpbGl0aWVzIiwiVkVSVElDRVNfTEVOR1RIIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsInN1YnRyYWN0MyIsImNyb3NzMyIsImxlbmd0aDMiLCJjbG9uZUVkZ2VzIiwiZWRnZXMiLCJtYXAiLCJlZGdlIiwiY2xvbmUiLCJjbG9uZU5vcm1hbCIsIm5vcm1hbCIsImNsb25lVmVydGljZXMiLCJ2ZXJ0aWNlcyIsInZlcnRleCIsImNhbGN1bGF0ZUVkZ2VzIiwiRWRnZSIsImluZGV4Iiwic3RhcnRJbmRleCIsImVuZEluZGV4Iiwic3RhcnRWZXJ0ZXgiLCJlbmRWZXJ0ZXgiLCJmcm9tU3RhcnRWZXJ0ZXhBbmRFbmRWZXJ0ZXgiLCJjYWxjdWxhdGVOb3JtYWwiLCJOb3JtYWwiLCJmcm9tVmVydGljZXMiLCJjYWxjdWxhdGVBcmVhIiwiZmlyc3RWZXJ0ZXgiLCJzZWNvbmRWZXJ0ZXgiLCJ0aGlyZFZlcnRleCIsImZpcnN0VmVydGV4UG9zaXRpb24iLCJnZXRQb3NpdGlvbiIsInNlY29uZFZlcnRleFBvc2l0aW9uIiwidGhpcmRWZXJ0ZXhQb3NpdGlvbiIsImZpcnN0RXh0ZW50Iiwic2Vjb25kRXh0ZW50IiwiYXJlYSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLGNBQUQsQ0FBekI7QUFBQSxJQUNNQyxXQUFXLEdBQUdELE9BQU8sQ0FBQyxpQkFBRCxDQUQzQjtBQUFBLElBRU1FLGNBQWMsR0FBR0YsT0FBTyxDQUFDLG9CQUFELENBRjlCOztBQUlNLElBQUVHLGVBQUYsR0FBc0JKLFNBQXRCLENBQUVJLGVBQUY7QUFBQSxJQUNFQyxLQURGLEdBQzJCRixjQUQzQixDQUNFRSxLQURGO0FBQUEsSUFDU0MsTUFEVCxHQUMyQkgsY0FEM0IsQ0FDU0csTUFEVDtBQUFBLElB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RUFBQUEsY0FBYyxFQUFkQSxjQUplO0FBS2ZRLEVBQUFBLGVBQWUsRUFBZkEsZUFMZTtBQU1mRyxFQUFBQSxhQUFhLEVBQWJBO0FBTmUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpLFxuICAgICAgdmVjdG9yTWF0aHMgPSByZXF1aXJlKCcuLi9tYXRocy92ZWN0b3InKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5Jyk7XG5cbmNvbnN0IHsgVkVSVElDRVNfTEVOR1RIIH0gPSBjb25zdGFudHMsXG4gICAgICB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgc3VidHJhY3QzLCBjcm9zczMsIGxlbmd0aDMgfSA9IHZlY3Rvck1hdGhzO1xuXG5mdW5jdGlvbiBjbG9uZUVkZ2VzKGVkZ2VzKSB7XG4gIGVkZ2VzID0gZWRnZXMubWFwKChlZGdlKSA9PiBlZGdlLmNsb25lKCkpO1xuXG4gIHJldHVybiBlZGdlcztcbn1cblxuZnVuY3Rpb24gY2xvbmVOb3JtYWwobm9ybWFsKSB7XG4gIG5vcm1hbCA9IG5vcm1hbC5jbG9uZSgpO1xuICBcbiAgcmV0dXJuIG5vcm1hbDtcbn1cblxuZnVuY3Rpb24gY2xvbmVWZXJ0aWNlcyh2ZXJ0aWNlcykge1xuICB2ZXJ0aWNlcyA9IHZlcnRpY2VzLm1hcCgodmVydGV4KSA9PiB2ZXJ0ZXguY2xvbmUoKSk7XG5cbiAgcmV0dXJuIHZlcnRpY2VzO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVFZGdlcyh2ZXJ0aWNlcywgRWRnZSkge1xuICBjb25zdCBlZGdlcyA9IHZlcnRpY2VzLm1hcCgodmVydGV4LCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleCwgLy8vXG4gICAgICAgICAgZW5kSW5kZXggPSAoc3RhcnRJbmRleCArIDEpICUgVkVSVElDRVNfTEVOR1RILFxuICAgICAgICAgIHN0YXJ0VmVydGV4ID0gdmVydGljZXNbc3RhcnRJbmRleF0sXG4gICAgICAgICAgZW5kVmVydGV4ID0gdmVydGljZXNbZW5kSW5kZXhdLFxuICAgICAgICAgIGVkZ2UgPSBFZGdlLmZyb21TdGFydFZlcnRleEFuZEVuZFZlcnRleChzdGFydFZlcnRleCwgZW5kVmVydGV4KTtcblxuICAgIHJldHVybiBlZGdlO1xuICB9KTtcblxuICByZXR1cm4gZWRnZXM7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vcm1hbCh2ZXJ0aWNlcywgTm9ybWFsKSB7XG4gIGNvbnN0IG5vcm1hbCA9IE5vcm1hbC5mcm9tVmVydGljZXModmVydGljZXMpO1xuXG4gIHJldHVybiBub3JtYWw7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUFyZWEodmVydGljZXMpIHtcbiAgY29uc3QgZmlyc3RWZXJ0ZXggPSBmaXJzdCh2ZXJ0aWNlcyksXG4gICAgICAgIHNlY29uZFZlcnRleCA9IHNlY29uZCh2ZXJ0aWNlcyksXG4gICAgICAgIHRoaXJkVmVydGV4ID0gdGhpcmQodmVydGljZXMpLFxuICAgICAgICBmaXJzdFZlcnRleFBvc2l0aW9uID0gZmlyc3RWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgc2Vjb25kVmVydGV4UG9zaXRpb24gPSBzZWNvbmRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXhQb3NpdGlvbiA9IHRoaXJkVmVydGV4LmdldFBvc2l0aW9uKCksXG4gICAgICAgIGZpcnN0RXh0ZW50ID0gc3VidHJhY3QzKHNlY29uZFZlcnRleFBvc2l0aW9uLCBmaXJzdFZlcnRleFBvc2l0aW9uKSxcbiAgICAgICAgc2Vjb25kRXh0ZW50ID0gc3VidHJhY3QzKHRoaXJkVmVydGV4UG9zaXRpb24sIGZpcnN0VmVydGV4UG9zaXRpb24pLFxuICAgICAgICBhcmVhID0gbGVuZ3RoMyhjcm9zczMoZmlyc3RFeHRlbnQsIHNlY29uZEV4dGVudCkpIC8gMjtcblxuICByZXR1cm4gYXJlYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNsb25lRWRnZXMsXG4gIGNsb25lTm9ybWFsLFxuICBjbG9uZVZlcnRpY2VzLFxuICBjYWxjdWxhdGVFZGdlcyxcbiAgY2FsY3VsYXRlTm9ybWFsLFxuICBjYWxjdWxhdGVBcmVhXG59O1xuIl19