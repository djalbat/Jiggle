'use strict';

var constants = require('../constants'),
    arrayUtilities = require('../utilities/array'),
    vectorUtilities = require('../utilities/vector');

var VERTICES_LENGTH = constants.VERTICES_LENGTH,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    subtract3 = vectorUtilities.subtract3,
    cross3 = vectorUtilities.cross3,
    length3 = vectorUtilities.length3;


function cloneEdges(edges) {
  edges = edges.map(function (edge) {
    edge = edge.clone();

    return edge;
  });

  return edges;
}

function cloneNormal(normal) {
  normal = normal.slice(); ///

  return normal;
}

function cloneVertices(vertices) {
  vertices = vertices.map(function (vertex) {
    vertex = vertex.slice(); ///

    return vertex;
  });

  return vertices;
}

function calculateEdges(vertices, Edge) {
  var edges = vertices.map(function (vertex, index) {
    var startIndex = index,
        ///
    endIndex = (startIndex + 1) % VERTICES_LENGTH,
        startVertex = vertices[startIndex],
        endVertex = vertices[endIndex],
        edge = Edge.fromVertices(startVertex, endVertex);

    return edge;
  });

  return edges;
}

function calculateNormal(vertices) {
  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      firstEdge = subtract3(secondVertex, firstVertex),
      secondEdge = subtract3(thirdVertex, firstVertex),
      normal = cross3(firstEdge, secondEdge);

  return normal;
}

function calculateArea(vertices) {
  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      firstEdge = subtract3(secondVertex, firstVertex),
      secondEdge = subtract3(thirdVertex, firstVertex),
      area = length3(cross3(firstEdge, secondEdge)) / 2;

  return area;
}

module.exports = {
  cloneEdges: cloneEdges,
  cloneNormal: cloneNormal,
  cloneVertices: cloneVertices,
  calculateEdges: calculateEdges,
  calculateNormal: calculateNormal,
  calculateArea: calculateArea
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmFjZXQuanMiXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwidmVjdG9yVXRpbGl0aWVzIiwiVkVSVElDRVNfTEVOR1RIIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsInN1YnRyYWN0MyIsImNyb3NzMyIsImxlbmd0aDMiLCJjbG9uZUVkZ2VzIiwiZWRnZXMiLCJtYXAiLCJlZGdlIiwiY2xvbmUiLCJjbG9uZU5vcm1hbCIsIm5vcm1hbCIsInNsaWNlIiwiY2xvbmVWZXJ0aWNlcyIsInZlcnRpY2VzIiwidmVydGV4IiwiY2FsY3VsYXRlRWRnZXMiLCJFZGdlIiwiaW5kZXgiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJzdGFydFZlcnRleCIsImVuZFZlcnRleCIsImZyb21WZXJ0aWNlcyIsImNhbGN1bGF0ZU5vcm1hbCIsImZpcnN0VmVydGV4Iiwic2Vjb25kVmVydGV4IiwidGhpcmRWZXJ0ZXgiLCJmaXJzdEVkZ2UiLCJzZWNvbmRFZGdlIiwiY2FsY3VsYXRlQXJlYSIsImFyZWEiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLGNBQVIsQ0FBbEI7QUFBQSxJQUNNQyxpQkFBaUJELFFBQVEsb0JBQVIsQ0FEdkI7QUFBQSxJQUVNRSxrQkFBa0JGLFFBQVEscUJBQVIsQ0FGeEI7O0FBSU0sSUFBRUcsZUFBRixHQUFzQkosU0FBdEIsQ0FBRUksZUFBRjtBQUFBLElBQ0VDLEtBREYsR0FDMkJILGNBRDNCLENBQ0VHLEtBREY7QUFBQSxJQUNTQyxNQURULEdBQzJCSixjQUQzQixDQUNTSSxNQURUO0FBQUEsSUFDaUJDLEtBRGpCLEdBQzJCTCxjQUQzQixDQUNpQkssS0FEakI7QUFBQSxJQUVFQyxTQUZGLEdBRWlDTCxlQUZqQyxDQUVFSyxTQUZGO0FBQUEsSUFFYUMsTUFGYixHQUVpQ04sZUFGakMsQ0FFYU0sTUFGYjtBQUFBLElBRXFCQyxPQUZyQixHQUVpQ1AsZUFGakMsQ0FFcUJPLE9BRnJCOzs7QUFJTixTQUFTQyxVQUFULENBQW9CQyxLQUFwQixFQUEyQjtBQUN6QkEsVUFBUUEsTUFBTUMsR0FBTixDQUFVLFVBQVNDLElBQVQsRUFBZTtBQUMvQkEsV0FBT0EsS0FBS0MsS0FBTCxFQUFQOztBQUVBLFdBQU9ELElBQVA7QUFDRCxHQUpPLENBQVI7O0FBTUEsU0FBT0YsS0FBUDtBQUNEOztBQUVELFNBQVNJLFdBQVQsQ0FBcUJDLE1BQXJCLEVBQTZCO0FBQzNCQSxXQUFTQSxPQUFPQyxLQUFQLEVBQVQsQ0FEMkIsQ0FDRDs7QUFFMUIsU0FBT0QsTUFBUDtBQUNEOztBQUVELFNBQVNFLGFBQVQsQ0FBdUJDLFFBQXZCLEVBQWlDO0FBQy9CQSxhQUFXQSxTQUFTUCxHQUFULENBQWEsVUFBU1EsTUFBVCxFQUFpQjtBQUN2Q0EsYUFBU0EsT0FBT0gsS0FBUCxFQUFULENBRHVDLENBQ2I7O0FBRTFCLFdBQU9HLE1BQVA7QUFDRCxHQUpVLENBQVg7O0FBTUEsU0FBT0QsUUFBUDtBQUNEOztBQUVELFNBQVNFLGNBQVQsQ0FBd0JGLFFBQXhCLEVBQWtDRyxJQUFsQyxFQUF3QztBQUN0QyxNQUFNWCxRQUFRUSxTQUFTUCxHQUFULENBQWEsVUFBU1EsTUFBVCxFQUFpQkcsS0FBakIsRUFBd0I7QUFDakQsUUFBTUMsYUFBYUQsS0FBbkI7QUFBQSxRQUEwQjtBQUNwQkUsZUFBVyxDQUFDRCxhQUFhLENBQWQsSUFBbUJyQixlQURwQztBQUFBLFFBRU11QixjQUFjUCxTQUFTSyxVQUFULENBRnBCO0FBQUEsUUFHTUcsWUFBWVIsU0FBU00sUUFBVCxDQUhsQjtBQUFBLFFBSU1aLE9BQU9TLEtBQUtNLFlBQUwsQ0FBa0JGLFdBQWxCLEVBQStCQyxTQUEvQixDQUpiOztBQU1BLFdBQU9kLElBQVA7QUFDRCxHQVJhLENBQWQ7O0FBVUEsU0FBT0YsS0FBUDtBQUNEOztBQUVELFNBQVNrQixlQUFULENBQXlCVixRQUF6QixFQUFtQztBQUNqQyxNQUFNVyxjQUFjMUIsTUFBTWUsUUFBTixDQUFwQjtBQUFBLE1BQ01ZLGVBQWUxQixPQUFPYyxRQUFQLENBRHJCO0FBQUEsTUFFTWEsY0FBYzFCLE1BQU1hLFFBQU4sQ0FGcEI7QUFBQSxNQUdNYyxZQUFZMUIsVUFBVXdCLFlBQVYsRUFBd0JELFdBQXhCLENBSGxCO0FBQUEsTUFJTUksYUFBYTNCLFVBQVV5QixXQUFWLEVBQXVCRixXQUF2QixDQUpuQjtBQUFBLE1BS01kLFNBQVNSLE9BQU95QixTQUFQLEVBQWtCQyxVQUFsQixDQUxmOztBQU9BLFNBQU9sQixNQUFQO0FBQ0Q7O0FBRUQsU0FBU21CLGFBQVQsQ0FBdUJoQixRQUF2QixFQUFpQztBQUMvQixNQUFNVyxjQUFjMUIsTUFBTWUsUUFBTixDQUFwQjtBQUFBLE1BQ01ZLGVBQWUxQixPQUFPYyxRQUFQLENBRHJCO0FBQUEsTUFFTWEsY0FBYzFCLE1BQU1hLFFBQU4sQ0FGcEI7QUFBQSxNQUdNYyxZQUFZMUIsVUFBVXdCLFlBQVYsRUFBd0JELFdBQXhCLENBSGxCO0FBQUEsTUFJTUksYUFBYTNCLFVBQVV5QixXQUFWLEVBQXVCRixXQUF2QixDQUpuQjtBQUFBLE1BS01NLE9BQU8zQixRQUFRRCxPQUFPeUIsU0FBUCxFQUFrQkMsVUFBbEIsQ0FBUixJQUF5QyxDQUx0RDs7QUFPQSxTQUFPRSxJQUFQO0FBQ0Q7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZjVCLGNBQVlBLFVBREc7QUFFZkssZUFBYUEsV0FGRTtBQUdmRyxpQkFBZUEsYUFIQTtBQUlmRyxrQkFBZ0JBLGNBSkQ7QUFLZlEsbUJBQWlCQSxlQUxGO0FBTWZNLGlCQUFlQTtBQU5BLENBQWpCIiwiZmlsZSI6ImZhY2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICB2ZWN0b3JVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvdmVjdG9yJyk7XG5cbmNvbnN0IHsgVkVSVElDRVNfTEVOR1RIIH0gPSBjb25zdGFudHMsXG4gICAgICB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgc3VidHJhY3QzLCBjcm9zczMsIGxlbmd0aDMgfSA9IHZlY3RvclV0aWxpdGllcztcblxuZnVuY3Rpb24gY2xvbmVFZGdlcyhlZGdlcykge1xuICBlZGdlcyA9IGVkZ2VzLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgZWRnZSA9IGVkZ2UuY2xvbmUoKTtcblxuICAgIHJldHVybiBlZGdlO1xuICB9KTtcblxuICByZXR1cm4gZWRnZXM7XG59XG5cbmZ1bmN0aW9uIGNsb25lTm9ybWFsKG5vcm1hbCkge1xuICBub3JtYWwgPSBub3JtYWwuc2xpY2UoKTsgIC8vL1xuXG4gIHJldHVybiBub3JtYWw7XG59XG5cbmZ1bmN0aW9uIGNsb25lVmVydGljZXModmVydGljZXMpIHtcbiAgdmVydGljZXMgPSB2ZXJ0aWNlcy5tYXAoZnVuY3Rpb24odmVydGV4KSB7XG4gICAgdmVydGV4ID0gdmVydGV4LnNsaWNlKCk7ICAvLy9cblxuICAgIHJldHVybiB2ZXJ0ZXg7XG4gIH0pO1xuXG4gIHJldHVybiB2ZXJ0aWNlcztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlRWRnZXModmVydGljZXMsIEVkZ2UpIHtcbiAgY29uc3QgZWRnZXMgPSB2ZXJ0aWNlcy5tYXAoZnVuY3Rpb24odmVydGV4LCBpbmRleCkge1xuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleCwgLy8vXG4gICAgICAgICAgZW5kSW5kZXggPSAoc3RhcnRJbmRleCArIDEpICUgVkVSVElDRVNfTEVOR1RILFxuICAgICAgICAgIHN0YXJ0VmVydGV4ID0gdmVydGljZXNbc3RhcnRJbmRleF0sXG4gICAgICAgICAgZW5kVmVydGV4ID0gdmVydGljZXNbZW5kSW5kZXhdLFxuICAgICAgICAgIGVkZ2UgPSBFZGdlLmZyb21WZXJ0aWNlcyhzdGFydFZlcnRleCwgZW5kVmVydGV4KTtcblxuICAgIHJldHVybiBlZGdlO1xuICB9KTtcblxuICByZXR1cm4gZWRnZXM7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vcm1hbCh2ZXJ0aWNlcykge1xuICBjb25zdCBmaXJzdFZlcnRleCA9IGZpcnN0KHZlcnRpY2VzKSxcbiAgICAgICAgc2Vjb25kVmVydGV4ID0gc2Vjb25kKHZlcnRpY2VzKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh2ZXJ0aWNlcyksXG4gICAgICAgIGZpcnN0RWRnZSA9IHN1YnRyYWN0MyhzZWNvbmRWZXJ0ZXgsIGZpcnN0VmVydGV4KSxcbiAgICAgICAgc2Vjb25kRWRnZSA9IHN1YnRyYWN0Myh0aGlyZFZlcnRleCwgZmlyc3RWZXJ0ZXgpLFxuICAgICAgICBub3JtYWwgPSBjcm9zczMoZmlyc3RFZGdlLCBzZWNvbmRFZGdlKTtcblxuICByZXR1cm4gbm9ybWFsO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVBcmVhKHZlcnRpY2VzKSB7XG4gIGNvbnN0IGZpcnN0VmVydGV4ID0gZmlyc3QodmVydGljZXMpLFxuICAgICAgICBzZWNvbmRWZXJ0ZXggPSBzZWNvbmQodmVydGljZXMpLFxuICAgICAgICB0aGlyZFZlcnRleCA9IHRoaXJkKHZlcnRpY2VzKSxcbiAgICAgICAgZmlyc3RFZGdlID0gc3VidHJhY3QzKHNlY29uZFZlcnRleCwgZmlyc3RWZXJ0ZXgpLFxuICAgICAgICBzZWNvbmRFZGdlID0gc3VidHJhY3QzKHRoaXJkVmVydGV4LCBmaXJzdFZlcnRleCksXG4gICAgICAgIGFyZWEgPSBsZW5ndGgzKGNyb3NzMyhmaXJzdEVkZ2UsIHNlY29uZEVkZ2UpKSAvIDI7XG5cbiAgcmV0dXJuIGFyZWE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjbG9uZUVkZ2VzOiBjbG9uZUVkZ2VzLFxuICBjbG9uZU5vcm1hbDogY2xvbmVOb3JtYWwsXG4gIGNsb25lVmVydGljZXM6IGNsb25lVmVydGljZXMsXG4gIGNhbGN1bGF0ZUVkZ2VzOiBjYWxjdWxhdGVFZGdlcyxcbiAgY2FsY3VsYXRlTm9ybWFsOiBjYWxjdWxhdGVOb3JtYWwsXG4gIGNhbGN1bGF0ZUFyZWE6IGNhbGN1bGF0ZUFyZWFcbn07XG4iXX0=