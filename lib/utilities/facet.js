'use strict';

var constants = require('../constants'),
    vectorMaths = require('../maths/vector'),
    arrayUtilities = require('../utilities/array');

var VERTICES_LENGTH = constants.VERTICES_LENGTH,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    subtract3 = vectorMaths.subtract3,
    cross3 = vectorMaths.cross3,
    length3 = vectorMaths.length3;


function cloneEdges(edges) {
  edges = edges.map(function (edge) {
    edge = edge.clone();

    return edge;
  });

  return edges;
}

function cloneNormal(normal) {
  normal = normal.clone();

  return normal;
}

function cloneVertices(vertices) {
  vertices = vertices.map(function (vertex) {
    vertex = vertex.clone();

    return vertex;
  });

  return vertices;
}

function calculateEdges(vertices, Edge) {
  var edges = vertices.map(function (vertex, index) {
    var startIndex = index,
        ///
    endIndex = (startIndex + 1) % VERTICES_LENGTH,
        startVertex = vertices[startIndex],
        endVertex = vertices[endIndex],
        edge = Edge.fromStartVertexAndEndVertex(startVertex, endVertex);

    return edge;
  });

  return edges;
}

function calculateNormal(vertices, Normal) {
  var normal = Normal.fromVertices(vertices);

  return normal;
}

function calculateArea(vertices) {
  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      firstVertexPosition = firstVertex.getPosition(),
      secondVertexPosition = secondVertex.getPosition(),
      thirdVertexPosition = thirdVertex.getPosition(),
      firstExtent = subtract3(secondVertexPosition, firstVertexPosition),
      secondExtent = subtract3(thirdVertexPosition, firstVertexPosition),
      area = length3(cross3(firstExtent, secondExtent)) / 2;

  return area;
}

module.exports = {
  cloneEdges: cloneEdges,
  cloneNormal: cloneNormal,
  cloneVertices: cloneVertices,
  calculateEdges: calculateEdges,
  calculateNormal: calculateNormal,
  calculateArea: calculateArea
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmFjZXQuanMiXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVxdWlyZSIsInZlY3Rvck1hdGhzIiwiYXJyYXlVdGlsaXRpZXMiLCJWRVJUSUNFU19MRU5HVEgiLCJmaXJzdCIsInNlY29uZCIsInRoaXJkIiwic3VidHJhY3QzIiwiY3Jvc3MzIiwibGVuZ3RoMyIsImNsb25lRWRnZXMiLCJlZGdlcyIsIm1hcCIsImVkZ2UiLCJjbG9uZSIsImNsb25lTm9ybWFsIiwibm9ybWFsIiwiY2xvbmVWZXJ0aWNlcyIsInZlcnRpY2VzIiwidmVydGV4IiwiY2FsY3VsYXRlRWRnZXMiLCJFZGdlIiwiaW5kZXgiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJzdGFydFZlcnRleCIsImVuZFZlcnRleCIsImZyb21TdGFydFZlcnRleEFuZEVuZFZlcnRleCIsImNhbGN1bGF0ZU5vcm1hbCIsIk5vcm1hbCIsImZyb21WZXJ0aWNlcyIsImNhbGN1bGF0ZUFyZWEiLCJmaXJzdFZlcnRleCIsInNlY29uZFZlcnRleCIsInRoaXJkVmVydGV4IiwiZmlyc3RWZXJ0ZXhQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwic2Vjb25kVmVydGV4UG9zaXRpb24iLCJ0aGlyZFZlcnRleFBvc2l0aW9uIiwiZmlyc3RFeHRlbnQiLCJzZWNvbmRFeHRlbnQiLCJhcmVhIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxjQUFSLENBQWxCO0FBQUEsSUFDTUMsY0FBY0QsUUFBUSxpQkFBUixDQURwQjtBQUFBLElBRU1FLGlCQUFpQkYsUUFBUSxvQkFBUixDQUZ2Qjs7QUFJTSxJQUFFRyxlQUFGLEdBQXNCSixTQUF0QixDQUFFSSxlQUFGO0FBQUEsSUFDRUMsS0FERixHQUMyQkYsY0FEM0IsQ0FDRUUsS0FERjtBQUFBLElBQ1NDLE1BRFQsR0FDMkJILGNBRDNCLENBQ1NHLE1BRFQ7QUFBQSxJQUNpQkMsS0FEakIsR0FDMkJKLGNBRDNCLENBQ2lCSSxLQURqQjtBQUFBLElBRUVDLFNBRkYsR0FFaUNOLFdBRmpDLENBRUVNLFNBRkY7QUFBQSxJQUVhQyxNQUZiLEdBRWlDUCxXQUZqQyxDQUVhTyxNQUZiO0FBQUEsSUFFcUJDLE9BRnJCLEdBRWlDUixXQUZqQyxDQUVxQlEsT0FGckI7OztBQUlOLFNBQVNDLFVBQVQsQ0FBb0JDLEtBQXBCLEVBQTJCO0FBQ3pCQSxVQUFRQSxNQUFNQyxHQUFOLENBQVUsVUFBU0MsSUFBVCxFQUFlO0FBQy9CQSxXQUFPQSxLQUFLQyxLQUFMLEVBQVA7O0FBRUEsV0FBT0QsSUFBUDtBQUNELEdBSk8sQ0FBUjs7QUFNQSxTQUFPRixLQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksV0FBVCxDQUFxQkMsTUFBckIsRUFBNkI7QUFDM0JBLFdBQVNBLE9BQU9GLEtBQVAsRUFBVDs7QUFFQSxTQUFPRSxNQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsYUFBVCxDQUF1QkMsUUFBdkIsRUFBaUM7QUFDL0JBLGFBQVdBLFNBQVNOLEdBQVQsQ0FBYSxVQUFTTyxNQUFULEVBQWlCO0FBQ3ZDQSxhQUFTQSxPQUFPTCxLQUFQLEVBQVQ7O0FBRUEsV0FBT0ssTUFBUDtBQUNELEdBSlUsQ0FBWDs7QUFNQSxTQUFPRCxRQUFQO0FBQ0Q7O0FBRUQsU0FBU0UsY0FBVCxDQUF3QkYsUUFBeEIsRUFBa0NHLElBQWxDLEVBQXdDO0FBQ3RDLE1BQU1WLFFBQVFPLFNBQVNOLEdBQVQsQ0FBYSxVQUFTTyxNQUFULEVBQWlCRyxLQUFqQixFQUF3QjtBQUNqRCxRQUFNQyxhQUFhRCxLQUFuQjtBQUFBLFFBQTBCO0FBQ3BCRSxlQUFXLENBQUNELGFBQWEsQ0FBZCxJQUFtQnBCLGVBRHBDO0FBQUEsUUFFTXNCLGNBQWNQLFNBQVNLLFVBQVQsQ0FGcEI7QUFBQSxRQUdNRyxZQUFZUixTQUFTTSxRQUFULENBSGxCO0FBQUEsUUFJTVgsT0FBT1EsS0FBS00sMkJBQUwsQ0FBaUNGLFdBQWpDLEVBQThDQyxTQUE5QyxDQUpiOztBQU1BLFdBQU9iLElBQVA7QUFDRCxHQVJhLENBQWQ7O0FBVUEsU0FBT0YsS0FBUDtBQUNEOztBQUVELFNBQVNpQixlQUFULENBQXlCVixRQUF6QixFQUFtQ1csTUFBbkMsRUFBMkM7QUFDekMsTUFBTWIsU0FBU2EsT0FBT0MsWUFBUCxDQUFvQlosUUFBcEIsQ0FBZjs7QUFFQSxTQUFPRixNQUFQO0FBQ0Q7O0FBRUQsU0FBU2UsYUFBVCxDQUF1QmIsUUFBdkIsRUFBaUM7QUFDL0IsTUFBTWMsY0FBYzVCLE1BQU1jLFFBQU4sQ0FBcEI7QUFBQSxNQUNNZSxlQUFlNUIsT0FBT2EsUUFBUCxDQURyQjtBQUFBLE1BRU1nQixjQUFjNUIsTUFBTVksUUFBTixDQUZwQjtBQUFBLE1BR01pQixzQkFBc0JILFlBQVlJLFdBQVosRUFINUI7QUFBQSxNQUlNQyx1QkFBdUJKLGFBQWFHLFdBQWIsRUFKN0I7QUFBQSxNQUtNRSxzQkFBc0JKLFlBQVlFLFdBQVosRUFMNUI7QUFBQSxNQU1NRyxjQUFjaEMsVUFBVThCLG9CQUFWLEVBQWdDRixtQkFBaEMsQ0FOcEI7QUFBQSxNQU9NSyxlQUFlakMsVUFBVStCLG1CQUFWLEVBQStCSCxtQkFBL0IsQ0FQckI7QUFBQSxNQVFNTSxPQUFPaEMsUUFBUUQsT0FBTytCLFdBQVAsRUFBb0JDLFlBQXBCLENBQVIsSUFBNkMsQ0FSMUQ7O0FBVUEsU0FBT0MsSUFBUDtBQUNEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZqQyxjQUFZQSxVQURHO0FBRWZLLGVBQWFBLFdBRkU7QUFHZkUsaUJBQWVBLGFBSEE7QUFJZkcsa0JBQWdCQSxjQUpEO0FBS2ZRLG1CQUFpQkEsZUFMRjtBQU1mRyxpQkFBZUE7QUFOQSxDQUFqQiIsImZpbGUiOiJmYWNldC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vY29uc3RhbnRzJyksXG4gICAgICB2ZWN0b3JNYXRocyA9IHJlcXVpcmUoJy4uL21hdGhzL3ZlY3RvcicpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKTtcblxuY29uc3QgeyBWRVJUSUNFU19MRU5HVEggfSA9IGNvbnN0YW50cyxcbiAgICAgIHsgZmlyc3QsIHNlY29uZCwgdGhpcmQgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBzdWJ0cmFjdDMsIGNyb3NzMywgbGVuZ3RoMyB9ID0gdmVjdG9yTWF0aHM7XG5cbmZ1bmN0aW9uIGNsb25lRWRnZXMoZWRnZXMpIHtcbiAgZWRnZXMgPSBlZGdlcy5tYXAoZnVuY3Rpb24oZWRnZSkge1xuICAgIGVkZ2UgPSBlZGdlLmNsb25lKCk7XG5cbiAgICByZXR1cm4gZWRnZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5mdW5jdGlvbiBjbG9uZU5vcm1hbChub3JtYWwpIHtcbiAgbm9ybWFsID0gbm9ybWFsLmNsb25lKCk7XG4gIFxuICByZXR1cm4gbm9ybWFsO1xufVxuXG5mdW5jdGlvbiBjbG9uZVZlcnRpY2VzKHZlcnRpY2VzKSB7XG4gIHZlcnRpY2VzID0gdmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgIHZlcnRleCA9IHZlcnRleC5jbG9uZSgpO1xuXG4gICAgcmV0dXJuIHZlcnRleDtcbiAgfSk7XG5cbiAgcmV0dXJuIHZlcnRpY2VzO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVFZGdlcyh2ZXJ0aWNlcywgRWRnZSkge1xuICBjb25zdCBlZGdlcyA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgsIGluZGV4KSB7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IGluZGV4LCAvLy9cbiAgICAgICAgICBlbmRJbmRleCA9IChzdGFydEluZGV4ICsgMSkgJSBWRVJUSUNFU19MRU5HVEgsXG4gICAgICAgICAgc3RhcnRWZXJ0ZXggPSB2ZXJ0aWNlc1tzdGFydEluZGV4XSxcbiAgICAgICAgICBlbmRWZXJ0ZXggPSB2ZXJ0aWNlc1tlbmRJbmRleF0sXG4gICAgICAgICAgZWRnZSA9IEVkZ2UuZnJvbVN0YXJ0VmVydGV4QW5kRW5kVmVydGV4KHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgpO1xuXG4gICAgcmV0dXJuIGVkZ2U7XG4gIH0pO1xuXG4gIHJldHVybiBlZGdlcztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlTm9ybWFsKHZlcnRpY2VzLCBOb3JtYWwpIHtcbiAgY29uc3Qgbm9ybWFsID0gTm9ybWFsLmZyb21WZXJ0aWNlcyh2ZXJ0aWNlcyk7XG5cbiAgcmV0dXJuIG5vcm1hbDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlQXJlYSh2ZXJ0aWNlcykge1xuICBjb25zdCBmaXJzdFZlcnRleCA9IGZpcnN0KHZlcnRpY2VzKSxcbiAgICAgICAgc2Vjb25kVmVydGV4ID0gc2Vjb25kKHZlcnRpY2VzKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh2ZXJ0aWNlcyksXG4gICAgICAgIGZpcnN0VmVydGV4UG9zaXRpb24gPSBmaXJzdFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICBzZWNvbmRWZXJ0ZXhQb3NpdGlvbiA9IHNlY29uZFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICB0aGlyZFZlcnRleFBvc2l0aW9uID0gdGhpcmRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgZmlyc3RFeHRlbnQgPSBzdWJ0cmFjdDMoc2Vjb25kVmVydGV4UG9zaXRpb24sIGZpcnN0VmVydGV4UG9zaXRpb24pLFxuICAgICAgICBzZWNvbmRFeHRlbnQgPSBzdWJ0cmFjdDModGhpcmRWZXJ0ZXhQb3NpdGlvbiwgZmlyc3RWZXJ0ZXhQb3NpdGlvbiksXG4gICAgICAgIGFyZWEgPSBsZW5ndGgzKGNyb3NzMyhmaXJzdEV4dGVudCwgc2Vjb25kRXh0ZW50KSkgLyAyO1xuXG4gIHJldHVybiBhcmVhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2xvbmVFZGdlczogY2xvbmVFZGdlcyxcbiAgY2xvbmVOb3JtYWw6IGNsb25lTm9ybWFsLFxuICBjbG9uZVZlcnRpY2VzOiBjbG9uZVZlcnRpY2VzLFxuICBjYWxjdWxhdGVFZGdlczogY2FsY3VsYXRlRWRnZXMsXG4gIGNhbGN1bGF0ZU5vcm1hbDogY2FsY3VsYXRlTm9ybWFsLFxuICBjYWxjdWxhdGVBcmVhOiBjYWxjdWxhdGVBcmVhXG59O1xuIl19