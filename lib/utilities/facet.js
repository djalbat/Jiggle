'use strict';

var constants = require('../constants'),
    arrayUtilities = require('../utilities/array'),
    vectorUtilities = require('../utilities/vector');

var VERTICES_LENGTH = constants.VERTICES_LENGTH,
    subtract3 = vectorUtilities.subtract3,
    cross3 = vectorUtilities.cross3,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third;


function cloneEdges(edges) {
  edges = edges.map(function (edge) {
    edge = edge.clone();

    return edge;
  });

  return edges;
}

function cloneNormal(normal) {
  normal = normal.slice(); ///

  return normal;
}

function cloneVertices(vertices) {
  vertices = vertices.map(function (vertex) {
    vertex = vertex.slice(); ///

    return vertex;
  });

  return vertices;
}

function calculateEdges(vertices, Edge) {
  var edges = vertices.map(function (vertex, index) {
    var startIndex = index,
        ///
    endIndex = (startIndex + 1) % VERTICES_LENGTH,
        startVertex = vertices[startIndex],
        endVertex = vertices[endIndex],
        edge = Edge.fromVertices(startVertex, endVertex);

    return edge;
  });

  return edges;
}

function calculateNormal(vertices) {
  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      firstEdge = subtract3(secondVertex, firstVertex),
      secondEdge = subtract3(thirdVertex, firstVertex),
      normal = cross3(firstEdge, secondEdge);

  return normal;
}

module.exports = {
  cloneEdges: cloneEdges,
  cloneNormal: cloneNormal,
  cloneVertices: cloneVertices,
  calculateEdges: calculateEdges,
  calculateNormal: calculateNormal
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmFjZXQuanMiXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwidmVjdG9yVXRpbGl0aWVzIiwiVkVSVElDRVNfTEVOR1RIIiwic3VidHJhY3QzIiwiY3Jvc3MzIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsImNsb25lRWRnZXMiLCJlZGdlcyIsIm1hcCIsImVkZ2UiLCJjbG9uZSIsImNsb25lTm9ybWFsIiwibm9ybWFsIiwic2xpY2UiLCJjbG9uZVZlcnRpY2VzIiwidmVydGljZXMiLCJ2ZXJ0ZXgiLCJjYWxjdWxhdGVFZGdlcyIsIkVkZ2UiLCJpbmRleCIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsInN0YXJ0VmVydGV4IiwiZW5kVmVydGV4IiwiZnJvbVZlcnRpY2VzIiwiY2FsY3VsYXRlTm9ybWFsIiwiZmlyc3RWZXJ0ZXgiLCJzZWNvbmRWZXJ0ZXgiLCJ0aGlyZFZlcnRleCIsImZpcnN0RWRnZSIsInNlY29uZEVkZ2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLGNBQVIsQ0FBbEI7QUFBQSxJQUNNQyxpQkFBaUJELFFBQVEsb0JBQVIsQ0FEdkI7QUFBQSxJQUVNRSxrQkFBa0JGLFFBQVEscUJBQVIsQ0FGeEI7O0FBSU0sSUFBRUcsZUFBRixHQUFzQkosU0FBdEIsQ0FBRUksZUFBRjtBQUFBLElBQ0VDLFNBREYsR0FDd0JGLGVBRHhCLENBQ0VFLFNBREY7QUFBQSxJQUNhQyxNQURiLEdBQ3dCSCxlQUR4QixDQUNhRyxNQURiO0FBQUEsSUFFRUMsS0FGRixHQUUyQkwsY0FGM0IsQ0FFRUssS0FGRjtBQUFBLElBRVNDLE1BRlQsR0FFMkJOLGNBRjNCLENBRVNNLE1BRlQ7QUFBQSxJQUVpQkMsS0FGakIsR0FFMkJQLGNBRjNCLENBRWlCTyxLQUZqQjs7O0FBSU4sU0FBU0MsVUFBVCxDQUFvQkMsS0FBcEIsRUFBMkI7QUFDekJBLFVBQVFBLE1BQU1DLEdBQU4sQ0FBVSxVQUFTQyxJQUFULEVBQWU7QUFDL0JBLFdBQU9BLEtBQUtDLEtBQUwsRUFBUDs7QUFFQSxXQUFPRCxJQUFQO0FBQ0QsR0FKTyxDQUFSOztBQU1BLFNBQU9GLEtBQVA7QUFDRDs7QUFFRCxTQUFTSSxXQUFULENBQXFCQyxNQUFyQixFQUE2QjtBQUMzQkEsV0FBU0EsT0FBT0MsS0FBUCxFQUFULENBRDJCLENBQ0Q7O0FBRTFCLFNBQU9ELE1BQVA7QUFDRDs7QUFFRCxTQUFTRSxhQUFULENBQXVCQyxRQUF2QixFQUFpQztBQUMvQkEsYUFBV0EsU0FBU1AsR0FBVCxDQUFhLFVBQVNRLE1BQVQsRUFBaUI7QUFDdkNBLGFBQVNBLE9BQU9ILEtBQVAsRUFBVCxDQUR1QyxDQUNiOztBQUUxQixXQUFPRyxNQUFQO0FBQ0QsR0FKVSxDQUFYOztBQU1BLFNBQU9ELFFBQVA7QUFDRDs7QUFFRCxTQUFTRSxjQUFULENBQXdCRixRQUF4QixFQUFrQ0csSUFBbEMsRUFBd0M7QUFDdEMsTUFBTVgsUUFBUVEsU0FBU1AsR0FBVCxDQUFhLFVBQVNRLE1BQVQsRUFBaUJHLEtBQWpCLEVBQXdCO0FBQ2pELFFBQU1DLGFBQWFELEtBQW5CO0FBQUEsUUFBMEI7QUFDcEJFLGVBQVcsQ0FBQ0QsYUFBYSxDQUFkLElBQW1CcEIsZUFEcEM7QUFBQSxRQUVNc0IsY0FBY1AsU0FBU0ssVUFBVCxDQUZwQjtBQUFBLFFBR01HLFlBQVlSLFNBQVNNLFFBQVQsQ0FIbEI7QUFBQSxRQUlNWixPQUFPUyxLQUFLTSxZQUFMLENBQWtCRixXQUFsQixFQUErQkMsU0FBL0IsQ0FKYjs7QUFNQSxXQUFPZCxJQUFQO0FBQ0QsR0FSYSxDQUFkOztBQVVBLFNBQU9GLEtBQVA7QUFDRDs7QUFFRCxTQUFTa0IsZUFBVCxDQUF5QlYsUUFBekIsRUFBbUM7QUFDakMsTUFBTVcsY0FBY3ZCLE1BQU1ZLFFBQU4sQ0FBcEI7QUFBQSxNQUNNWSxlQUFldkIsT0FBT1csUUFBUCxDQURyQjtBQUFBLE1BRU1hLGNBQWN2QixNQUFNVSxRQUFOLENBRnBCO0FBQUEsTUFHTWMsWUFBWTVCLFVBQVUwQixZQUFWLEVBQXdCRCxXQUF4QixDQUhsQjtBQUFBLE1BSU1JLGFBQWE3QixVQUFVMkIsV0FBVixFQUF1QkYsV0FBdkIsQ0FKbkI7QUFBQSxNQUtNZCxTQUFTVixPQUFPMkIsU0FBUCxFQUFrQkMsVUFBbEIsQ0FMZjs7QUFPQSxTQUFPbEIsTUFBUDtBQUNEOztBQUVEbUIsT0FBT0MsT0FBUCxHQUFpQjtBQUNmMUIsY0FBWUEsVUFERztBQUVmSyxlQUFhQSxXQUZFO0FBR2ZHLGlCQUFlQSxhQUhBO0FBSWZHLGtCQUFnQkEsY0FKRDtBQUtmUSxtQkFBaUJBO0FBTEYsQ0FBakIiLCJmaWxlIjoiZmFjZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIHZlY3RvclV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy92ZWN0b3InKTtcblxuY29uc3QgeyBWRVJUSUNFU19MRU5HVEggfSA9IGNvbnN0YW50cyxcbiAgICAgIHsgc3VidHJhY3QzLCBjcm9zczMgfSA9IHZlY3RvclV0aWxpdGllcyxcbiAgICAgIHsgZmlyc3QsIHNlY29uZCwgdGhpcmQgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBjbG9uZUVkZ2VzKGVkZ2VzKSB7XG4gIGVkZ2VzID0gZWRnZXMubWFwKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICBlZGdlID0gZWRnZS5jbG9uZSgpO1xuXG4gICAgcmV0dXJuIGVkZ2U7XG4gIH0pO1xuXG4gIHJldHVybiBlZGdlcztcbn1cblxuZnVuY3Rpb24gY2xvbmVOb3JtYWwobm9ybWFsKSB7XG4gIG5vcm1hbCA9IG5vcm1hbC5zbGljZSgpOyAgLy8vXG5cbiAgcmV0dXJuIG5vcm1hbDtcbn1cblxuZnVuY3Rpb24gY2xvbmVWZXJ0aWNlcyh2ZXJ0aWNlcykge1xuICB2ZXJ0aWNlcyA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICB2ZXJ0ZXggPSB2ZXJ0ZXguc2xpY2UoKTsgIC8vL1xuXG4gICAgcmV0dXJuIHZlcnRleDtcbiAgfSk7XG5cbiAgcmV0dXJuIHZlcnRpY2VzO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVFZGdlcyh2ZXJ0aWNlcywgRWRnZSkge1xuICBjb25zdCBlZGdlcyA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgsIGluZGV4KSB7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IGluZGV4LCAvLy9cbiAgICAgICAgICBlbmRJbmRleCA9IChzdGFydEluZGV4ICsgMSkgJSBWRVJUSUNFU19MRU5HVEgsXG4gICAgICAgICAgc3RhcnRWZXJ0ZXggPSB2ZXJ0aWNlc1tzdGFydEluZGV4XSxcbiAgICAgICAgICBlbmRWZXJ0ZXggPSB2ZXJ0aWNlc1tlbmRJbmRleF0sXG4gICAgICAgICAgZWRnZSA9IEVkZ2UuZnJvbVZlcnRpY2VzKHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgpO1xuXG4gICAgcmV0dXJuIGVkZ2U7XG4gIH0pO1xuXG4gIHJldHVybiBlZGdlcztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlTm9ybWFsKHZlcnRpY2VzKSB7XG4gIGNvbnN0IGZpcnN0VmVydGV4ID0gZmlyc3QodmVydGljZXMpLFxuICAgICAgICBzZWNvbmRWZXJ0ZXggPSBzZWNvbmQodmVydGljZXMpLFxuICAgICAgICB0aGlyZFZlcnRleCA9IHRoaXJkKHZlcnRpY2VzKSxcbiAgICAgICAgZmlyc3RFZGdlID0gc3VidHJhY3QzKHNlY29uZFZlcnRleCwgZmlyc3RWZXJ0ZXgpLFxuICAgICAgICBzZWNvbmRFZGdlID0gc3VidHJhY3QzKHRoaXJkVmVydGV4LCBmaXJzdFZlcnRleCksXG4gICAgICAgIG5vcm1hbCA9IGNyb3NzMyhmaXJzdEVkZ2UsIHNlY29uZEVkZ2UpO1xuXG4gIHJldHVybiBub3JtYWw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjbG9uZUVkZ2VzOiBjbG9uZUVkZ2VzLFxuICBjbG9uZU5vcm1hbDogY2xvbmVOb3JtYWwsXG4gIGNsb25lVmVydGljZXM6IGNsb25lVmVydGljZXMsXG4gIGNhbGN1bGF0ZUVkZ2VzOiBjYWxjdWxhdGVFZGdlcyxcbiAgY2FsY3VsYXRlTm9ybWFsOiBjYWxjdWxhdGVOb3JtYWxcbn07XG4iXX0=