"use strict";

var constants = require("../constants"),
    vectorMaths = require("../maths/vector"),
    arrayUtilities = require("../utilities/array");

var VERTICES_LENGTH = constants.VERTICES_LENGTH,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    subtract3 = vectorMaths.subtract3,
    cross3 = vectorMaths.cross3,
    length3 = vectorMaths.length3;

function cloneEdges(edges) {
  edges = edges.map(function (edge) {
    return edge.clone();
  });
  return edges;
}

function cloneNormal(normal) {
  normal = normal.clone();
  return normal;
}

function cloneVertices(vertices) {
  vertices = vertices.map(function (vertex) {
    return vertex.clone();
  });
  return vertices;
}

function calculateEdges(vertices, Edge) {
  var edges = vertices.map(function (vertex, index) {
    var startIndex = index,
        ///
    endIndex = (startIndex + 1) % VERTICES_LENGTH,
        startVertex = vertices[startIndex],
        endVertex = vertices[endIndex],
        edge = Edge.fromStartVertexAndEndVertex(startVertex, endVertex);
    return edge;
  });
  return edges;
}

function calculateNormal(vertices, Normal) {
  var normal = Normal.fromVertices(vertices);
  return normal;
}

function calculateArea(vertices) {
  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      firstVertexPosition = firstVertex.getPosition(),
      secondVertexPosition = secondVertex.getPosition(),
      thirdVertexPosition = thirdVertex.getPosition(),
      firstExtent = subtract3(secondVertexPosition, firstVertexPosition),
      secondExtent = subtract3(thirdVertexPosition, firstVertexPosition),
      area = length3(cross3(firstExtent, secondExtent)) / 2;
  return area;
}

module.exports = {
  cloneEdges: cloneEdges,
  cloneNormal: cloneNormal,
  cloneVertices: cloneVertices,
  calculateEdges: calculateEdges,
  calculateNormal: calculateNormal,
  calculateArea: calculateArea
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZhY2V0LmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJ2ZWN0b3JNYXRocyIsImFycmF5VXRpbGl0aWVzIiwiVkVSVElDRVNfTEVOR1RIIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsInN1YnRyYWN0MyIsImNyb3NzMyIsImxlbmd0aDMiLCJjbG9uZUVkZ2VzIiwiZWRnZXMiLCJtYXAiLCJlZGdlIiwiY2xvbmUiLCJjbG9uZU5vcm1hbCIsIm5vcm1hbCIsImNsb25lVmVydGljZXMiLCJ2ZXJ0aWNlcyIsInZlcnRleCIsImNhbGN1bGF0ZUVkZ2VzIiwiRWRnZSIsImluZGV4Iiwic3RhcnRJbmRleCIsImVuZEluZGV4Iiwic3RhcnRWZXJ0ZXgiLCJlbmRWZXJ0ZXgiLCJmcm9tU3RhcnRWZXJ0ZXhBbmRFbmRWZXJ0ZXgiLCJjYWxjdWxhdGVOb3JtYWwiLCJOb3JtYWwiLCJmcm9tVmVydGljZXMiLCJjYWxjdWxhdGVBcmVhIiwiZmlyc3RWZXJ0ZXgiLCJzZWNvbmRWZXJ0ZXgiLCJ0aGlyZFZlcnRleCIsImZpcnN0VmVydGV4UG9zaXRpb24iLCJnZXRQb3NpdGlvbiIsInNlY29uZFZlcnRleFBvc2l0aW9uIiwidGhpcmRWZXJ0ZXhQb3NpdGlvbiIsImZpcnN0RXh0ZW50Iiwic2Vjb25kRXh0ZW50IiwiYXJlYSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLGNBQUQsQ0FBekI7QUFBQSxJQUNNQyxXQUFXLEdBQUdELE9BQU8sQ0FBQyxpQkFBRCxDQUQzQjtBQUFBLElBRU1FLGNBQWMsR0FBR0YsT0FBTyxDQUFDLG9CQUFELENBRjlCOztBQUlNLElBQUVHLGVBQUYsR0FBc0JKLFNBQXRCLENBQUVJLGVBQUY7QUFBQSxJQUNFQyxLQURGLEdBQzJCRixjQUQzQixDQUNFRSxLQURGO0FBQUEsSUFDU0MsTUFEVCxHQUMyQkgsY0FEM0IsQ0FDU0csTUFEVDtBQUFBLElB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RUFBQUEsY0FBYyxFQUFkQSxjQUplO0FBS2ZRLEVBQUFBLGVBQWUsRUFBZkEsZUFMZTtBQU1mRyxFQUFBQSxhQUFhLEVBQWJBO0FBTmUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKSxcbiAgICAgIHZlY3Rvck1hdGhzID0gcmVxdWlyZShcIi4uL21hdGhzL3ZlY3RvclwiKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZShcIi4uL3V0aWxpdGllcy9hcnJheVwiKTtcblxuY29uc3QgeyBWRVJUSUNFU19MRU5HVEggfSA9IGNvbnN0YW50cyxcbiAgICAgIHsgZmlyc3QsIHNlY29uZCwgdGhpcmQgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBzdWJ0cmFjdDMsIGNyb3NzMywgbGVuZ3RoMyB9ID0gdmVjdG9yTWF0aHM7XG5cbmZ1bmN0aW9uIGNsb25lRWRnZXMoZWRnZXMpIHtcbiAgZWRnZXMgPSBlZGdlcy5tYXAoKGVkZ2UpID0+IGVkZ2UuY2xvbmUoKSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5mdW5jdGlvbiBjbG9uZU5vcm1hbChub3JtYWwpIHtcbiAgbm9ybWFsID0gbm9ybWFsLmNsb25lKCk7XG4gIFxuICByZXR1cm4gbm9ybWFsO1xufVxuXG5mdW5jdGlvbiBjbG9uZVZlcnRpY2VzKHZlcnRpY2VzKSB7XG4gIHZlcnRpY2VzID0gdmVydGljZXMubWFwKCh2ZXJ0ZXgpID0+IHZlcnRleC5jbG9uZSgpKTtcblxuICByZXR1cm4gdmVydGljZXM7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUVkZ2VzKHZlcnRpY2VzLCBFZGdlKSB7XG4gIGNvbnN0IGVkZ2VzID0gdmVydGljZXMubWFwKCh2ZXJ0ZXgsIGluZGV4KSA9PiB7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IGluZGV4LCAvLy9cbiAgICAgICAgICBlbmRJbmRleCA9IChzdGFydEluZGV4ICsgMSkgJSBWRVJUSUNFU19MRU5HVEgsXG4gICAgICAgICAgc3RhcnRWZXJ0ZXggPSB2ZXJ0aWNlc1tzdGFydEluZGV4XSxcbiAgICAgICAgICBlbmRWZXJ0ZXggPSB2ZXJ0aWNlc1tlbmRJbmRleF0sXG4gICAgICAgICAgZWRnZSA9IEVkZ2UuZnJvbVN0YXJ0VmVydGV4QW5kRW5kVmVydGV4KHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgpO1xuXG4gICAgcmV0dXJuIGVkZ2U7XG4gIH0pO1xuXG4gIHJldHVybiBlZGdlcztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlTm9ybWFsKHZlcnRpY2VzLCBOb3JtYWwpIHtcbiAgY29uc3Qgbm9ybWFsID0gTm9ybWFsLmZyb21WZXJ0aWNlcyh2ZXJ0aWNlcyk7XG5cbiAgcmV0dXJuIG5vcm1hbDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlQXJlYSh2ZXJ0aWNlcykge1xuICBjb25zdCBmaXJzdFZlcnRleCA9IGZpcnN0KHZlcnRpY2VzKSxcbiAgICAgICAgc2Vjb25kVmVydGV4ID0gc2Vjb25kKHZlcnRpY2VzKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh2ZXJ0aWNlcyksXG4gICAgICAgIGZpcnN0VmVydGV4UG9zaXRpb24gPSBmaXJzdFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICBzZWNvbmRWZXJ0ZXhQb3NpdGlvbiA9IHNlY29uZFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICB0aGlyZFZlcnRleFBvc2l0aW9uID0gdGhpcmRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgZmlyc3RFeHRlbnQgPSBzdWJ0cmFjdDMoc2Vjb25kVmVydGV4UG9zaXRpb24sIGZpcnN0VmVydGV4UG9zaXRpb24pLFxuICAgICAgICBzZWNvbmRFeHRlbnQgPSBzdWJ0cmFjdDModGhpcmRWZXJ0ZXhQb3NpdGlvbiwgZmlyc3RWZXJ0ZXhQb3NpdGlvbiksXG4gICAgICAgIGFyZWEgPSBsZW5ndGgzKGNyb3NzMyhmaXJzdEV4dGVudCwgc2Vjb25kRXh0ZW50KSkgLyAyO1xuXG4gIHJldHVybiBhcmVhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2xvbmVFZGdlcyxcbiAgY2xvbmVOb3JtYWwsXG4gIGNsb25lVmVydGljZXMsXG4gIGNhbGN1bGF0ZUVkZ2VzLFxuICBjYWxjdWxhdGVOb3JtYWwsXG4gIGNhbGN1bGF0ZUFyZWFcbn07XG4iXX0=