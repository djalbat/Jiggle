'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Edge = require('../edge'),
    constants = require('../constants'),
    arrayUtilities = require('../utilities/array'),
    vectorUtilities = require('../utilities/vector'),
    rotationUtilities = require('../utilities/rotation');

var VERTICES_LENGTH = constants.VERTICES_LENGTH,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    subtract3 = vectorUtilities.subtract3,
    cross3 = vectorUtilities.cross3,
    calculateInverseRotationQuaternion = rotationUtilities.calculateInverseRotationQuaternion,
    rotateImaginaryQuaternion = rotationUtilities.rotateImaginaryQuaternion;


function cloneEdges(edges) {
  edges = edges.map(function (edge) {
    edge = edge.clone();

    return edge;
  });

  return edges;
}

function cloneNormal(normal) {
  return normal.slice();
}

function cloneVertices(vertices) {
  vertices = vertices.map(function (vertex) {
    vertex = vertex.slice(); ///

    return vertex;
  });

  return vertices;
}

function calculateEdges(vertices) {
  var edges = vertices.map(function (vertex, index) {
    var startIndex = index,
        ///
    endIndex = (startIndex + 1) % VERTICES_LENGTH,
        startVertex = vertices[startIndex],
        endVertex = vertices[endIndex],
        edge = Edge.fromVertices(startVertex, endVertex);

    return edge;
  });

  return edges;
}

function calculateNormal(vertices) {
  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      firstEdge = subtract3(secondVertex, firstVertex),
      secondEdge = subtract3(thirdVertex, firstVertex),
      normal = cross3(firstEdge, secondEdge);

  return normal;
}

function rotateVertices(vertices, rotationQuaternion) {
  var inverseRotationQuaternion = calculateInverseRotationQuaternion(rotationQuaternion);

  vertices = vertices.map(function (vertex) {
    vertex = rotateVertex(vertex, rotationQuaternion, inverseRotationQuaternion);

    return vertex;
  });

  return vertices;
}

module.exports = {
  cloneEdges: cloneEdges,
  cloneNormal: cloneNormal,
  cloneVertices: cloneVertices,
  calculateEdges: calculateEdges,
  calculateNormal: calculateNormal,
  rotateVertices: rotateVertices
};

function rotateVertex(vertex, rotationQuaternion, inverseRotationQuaternion) {
  var imaginaryQuaternion = [0].concat(_toConsumableArray(vertex)),
      ///
  rotatedImaginaryQuaternion = rotateImaginaryQuaternion(imaginaryQuaternion, rotationQuaternion, inverseRotationQuaternion);

  vertex = rotatedImaginaryQuaternion.slice(1); ///

  return vertex;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmFjZXQuanMiXSwibmFtZXMiOlsiRWRnZSIsInJlcXVpcmUiLCJjb25zdGFudHMiLCJhcnJheVV0aWxpdGllcyIsInZlY3RvclV0aWxpdGllcyIsInJvdGF0aW9uVXRpbGl0aWVzIiwiVkVSVElDRVNfTEVOR1RIIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsInN1YnRyYWN0MyIsImNyb3NzMyIsImNhbGN1bGF0ZUludmVyc2VSb3RhdGlvblF1YXRlcm5pb24iLCJyb3RhdGVJbWFnaW5hcnlRdWF0ZXJuaW9uIiwiY2xvbmVFZGdlcyIsImVkZ2VzIiwibWFwIiwiZWRnZSIsImNsb25lIiwiY2xvbmVOb3JtYWwiLCJub3JtYWwiLCJzbGljZSIsImNsb25lVmVydGljZXMiLCJ2ZXJ0aWNlcyIsInZlcnRleCIsImNhbGN1bGF0ZUVkZ2VzIiwiaW5kZXgiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJzdGFydFZlcnRleCIsImVuZFZlcnRleCIsImZyb21WZXJ0aWNlcyIsImNhbGN1bGF0ZU5vcm1hbCIsImZpcnN0VmVydGV4Iiwic2Vjb25kVmVydGV4IiwidGhpcmRWZXJ0ZXgiLCJmaXJzdEVkZ2UiLCJzZWNvbmRFZGdlIiwicm90YXRlVmVydGljZXMiLCJyb3RhdGlvblF1YXRlcm5pb24iLCJpbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uIiwicm90YXRlVmVydGV4IiwibW9kdWxlIiwiZXhwb3J0cyIsImltYWdpbmFyeVF1YXRlcm5pb24iLCJyb3RhdGVkSW1hZ2luYXJ5UXVhdGVybmlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLFNBQVIsQ0FBYjtBQUFBLElBQ01DLFlBQVlELFFBQVEsY0FBUixDQURsQjtBQUFBLElBRU1FLGlCQUFpQkYsUUFBUSxvQkFBUixDQUZ2QjtBQUFBLElBR01HLGtCQUFrQkgsUUFBUSxxQkFBUixDQUh4QjtBQUFBLElBSU1JLG9CQUFvQkosUUFBUSx1QkFB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QUFNZk0sa0JBQWdCQTtBQU5ELENBQWpCOztBQVVBLFNBQVNHLFlBQVQsQ0FBc0JqQixNQUF0QixFQUE4QmUsa0JBQTlCLEVBQWtEQyx5QkFBbEQsRUFBNkU7QUFDM0UsTUFBTUksdUJBQXVCLENBQXZCLDRCQUE2QnBCLE1BQTdCLEVBQU47QUFBQSxNQUE0QztBQUN0Q3FCLCtCQUE2QmhDLDBCQUEwQitCLG1CQUExQixFQUErQ0wsa0JBQS9DLEVBQW1FQyx5QkFBbkUsQ0FEbkM7O0FBR0FoQixXQUFTcUIsMkJBQTJCeEIsS0FBM0IsQ0FBaUMsQ0FBakMsQ0FBVCxDQUoyRSxDQUk3Qjs7QUFFOUMsU0FBT0csTUFBUDtBQUNEIiwiZmlsZSI6ImZhY2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFZGdlID0gcmVxdWlyZSgnLi4vZWRnZScpLFxuICAgICAgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vY29uc3RhbnRzJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgdmVjdG9yVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3ZlY3RvcicpLFxuICAgICAgcm90YXRpb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvcm90YXRpb24nKTtcblxuY29uc3QgeyBWRVJUSUNFU19MRU5HVEggfSA9IGNvbnN0YW50cyxcbiAgICAgIHsgZmlyc3QsIHNlY29uZCwgdGhpcmQgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBzdWJ0cmFjdDMsIGNyb3NzMyB9ID0gdmVjdG9yVXRpbGl0aWVzLFxuICAgICAgeyBjYWxjdWxhdGVJbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uLCByb3RhdGVJbWFnaW5hcnlRdWF0ZXJuaW9uIH0gPSByb3RhdGlvblV0aWxpdGllcztcblxuZnVuY3Rpb24gY2xvbmVFZGdlcyhlZGdlcykge1xuICBlZGdlcyA9IGVkZ2VzLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgZWRnZSA9IGVkZ2UuY2xvbmUoKTtcblxuICAgIHJldHVybiBlZGdlO1xuICB9KTtcblxuICByZXR1cm4gZWRnZXM7XG59XG5cbmZ1bmN0aW9uIGNsb25lTm9ybWFsKG5vcm1hbCkgeyByZXR1cm4gbm9ybWFsLnNsaWNlKCk7IH1cblxuZnVuY3Rpb24gY2xvbmVWZXJ0aWNlcyh2ZXJ0aWNlcykge1xuICB2ZXJ0aWNlcyA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICB2ZXJ0ZXggPSB2ZXJ0ZXguc2xpY2UoKTsgIC8vL1xuXG4gICAgcmV0dXJuIHZlcnRleDtcbiAgfSk7XG5cbiAgcmV0dXJuIHZlcnRpY2VzO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVFZGdlcyh2ZXJ0aWNlcykge1xuICBjb25zdCBlZGdlcyA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgsIGluZGV4KSB7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IGluZGV4LCAvLy9cbiAgICAgICAgICBlbmRJbmRleCA9IChzdGFydEluZGV4ICsgMSkgJSBWRVJUSUNFU19MRU5HVEgsXG4gICAgICAgICAgc3RhcnRWZXJ0ZXggPSB2ZXJ0aWNlc1tzdGFydEluZGV4XSxcbiAgICAgICAgICBlbmRWZXJ0ZXggPSB2ZXJ0aWNlc1tlbmRJbmRleF0sXG4gICAgICAgICAgZWRnZSA9IEVkZ2UuZnJvbVZlcnRpY2VzKHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgpO1xuXG4gICAgcmV0dXJuIGVkZ2U7XG4gIH0pO1xuXG4gIHJldHVybiBlZGdlcztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlTm9ybWFsKHZlcnRpY2VzKSB7XG4gIGNvbnN0IGZpcnN0VmVydGV4ID0gZmlyc3QodmVydGljZXMpLFxuICAgICAgICBzZWNvbmRWZXJ0ZXggPSBzZWNvbmQodmVydGljZXMpLFxuICAgICAgICB0aGlyZFZlcnRleCA9IHRoaXJkKHZlcnRpY2VzKSxcbiAgICAgICAgZmlyc3RFZGdlID0gc3VidHJhY3QzKHNlY29uZFZlcnRleCwgZmlyc3RWZXJ0ZXgpLFxuICAgICAgICBzZWNvbmRFZGdlID0gc3VidHJhY3QzKHRoaXJkVmVydGV4LCBmaXJzdFZlcnRleCksXG4gICAgICAgIG5vcm1hbCA9IGNyb3NzMyhmaXJzdEVkZ2UsIHNlY29uZEVkZ2UpO1xuXG4gIHJldHVybiBub3JtYWw7XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZVZlcnRpY2VzKHZlcnRpY2VzLCByb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgY29uc3QgaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbiA9IGNhbGN1bGF0ZUludmVyc2VSb3RhdGlvblF1YXRlcm5pb24ocm90YXRpb25RdWF0ZXJuaW9uKTtcblxuICB2ZXJ0aWNlcyA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICB2ZXJ0ZXggPSByb3RhdGVWZXJ0ZXgodmVydGV4LCByb3RhdGlvblF1YXRlcm5pb24sIGludmVyc2VSb3RhdGlvblF1YXRlcm5pb24pO1xuXG4gICAgcmV0dXJuIHZlcnRleDtcbiAgfSk7XG4gIFxuICByZXR1cm4gdmVydGljZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjbG9uZUVkZ2VzOiBjbG9uZUVkZ2VzLFxuICBjbG9uZU5vcm1hbDogY2xvbmVOb3JtYWwsXG4gIGNsb25lVmVydGljZXM6IGNsb25lVmVydGljZXMsXG4gIGNhbGN1bGF0ZUVkZ2VzOiBjYWxjdWxhdGVFZGdlcyxcbiAgY2FsY3VsYXRlTm9ybWFsOiBjYWxjdWxhdGVOb3JtYWwsXG4gIHJvdGF0ZVZlcnRpY2VzOiByb3RhdGVWZXJ0aWNlc1xufTtcblxuXG5mdW5jdGlvbiByb3RhdGVWZXJ0ZXgodmVydGV4LCByb3RhdGlvblF1YXRlcm5pb24sIGludmVyc2VSb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgY29uc3QgaW1hZ2luYXJ5UXVhdGVybmlvbiA9IFswLCAuLi52ZXJ0ZXhdLCAvLy9cbiAgICAgICAgcm90YXRlZEltYWdpbmFyeVF1YXRlcm5pb24gPSByb3RhdGVJbWFnaW5hcnlRdWF0ZXJuaW9uKGltYWdpbmFyeVF1YXRlcm5pb24sIHJvdGF0aW9uUXVhdGVybmlvbiwgaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbik7XG5cbiAgdmVydGV4ID0gcm90YXRlZEltYWdpbmFyeVF1YXRlcm5pb24uc2xpY2UoMSk7IC8vL1xuXG4gIHJldHVybiB2ZXJ0ZXg7XG59XG4iXX0=