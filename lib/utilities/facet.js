'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Edge = require('../edge'),
    constants = require('../constants'),
    arrayUtilities = require('../utilities/array'),
    vectorUtilities = require('../utilities/vector'),
    rotationUtilities = require('../utilities/rotation');

var VERTICES_LENGTH = constants.VERTICES_LENGTH,
    subtract3 = vectorUtilities.subtract3,
    cross3 = vectorUtilities.cross3,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    calculateInverseRotationQuaternion = rotationUtilities.calculateInverseRotationQuaternion,
    rotateImaginaryQuaternion = rotationUtilities.rotateImaginaryQuaternion;


function cloneEdges(edges) {
  edges = edges.map(function (edge) {
    edge = edge.clone();

    return edge;
  });

  return edges;
}

function cloneNormal(normal) {
  return normal.slice();
}

function cloneVertices(vertices) {
  vertices = vertices.map(function (vertex) {
    vertex = vertex.slice(); ///

    return vertex;
  });

  return vertices;
}

function calculateEdges(vertices) {
  var edges = vertices.map(function (vertex, index) {
    var startIndex = index,
        ///
    endIndex = (startIndex + 1) % VERTICES_LENGTH,
        startVertex = vertices[startIndex],
        endVertex = vertices[endIndex],
        edge = Edge.fromVertices(startVertex, endVertex);

    return edge;
  });

  return edges;
}

function calculateNormal(vertices) {
  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      firstEdge = subtract3(secondVertex, firstVertex),
      secondEdge = subtract3(thirdVertex, firstVertex),
      normal = cross3(firstEdge, secondEdge);

  return normal;
}

function rotateVertices(vertices, rotationQuaternion) {
  var inverseRotationQuaternion = calculateInverseRotationQuaternion(rotationQuaternion);

  vertices = vertices.map(function (vertex) {
    vertex = rotateVertex(vertex, rotationQuaternion, inverseRotationQuaternion);

    return vertex;
  });

  return vertices;
}

module.exports = {
  cloneEdges: cloneEdges,
  cloneNormal: cloneNormal,
  cloneVertices: cloneVertices,
  calculateEdges: calculateEdges,
  calculateNormal: calculateNormal,
  rotateVertices: rotateVertices
};

function rotateVertex(vertex, rotationQuaternion, inverseRotationQuaternion) {
  var imaginaryQuaternion = [0].concat(_toConsumableArray(vertex)),
      ///
  rotatedImaginaryQuaternion = rotateImaginaryQuaternion(imaginaryQuaternion, rotationQuaternion, inverseRotationQuaternion);

  vertex = rotatedImaginaryQuaternion.slice(1); ///

  return vertex;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmFjZXQuanMiXSwibmFtZXMiOlsiRWRnZSIsInJlcXVpcmUiLCJjb25zdGFudHMiLCJhcnJheVV0aWxpdGllcyIsInZlY3RvclV0aWxpdGllcyIsInJvdGF0aW9uVXRpbGl0aWVzIiwiVkVSVElDRVNfTEVOR1RIIiwic3VidHJhY3QzIiwiY3Jvc3MzIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsImNhbGN1bGF0ZUludmVyc2VSb3RhdGlvblF1YXRlcm5pb24iLCJyb3RhdGVJbWFnaW5hcnlRdWF0ZXJuaW9uIiwiY2xvbmVFZGdlcyIsImVkZ2VzIiwibWFwIiwiZWRnZSIsImNsb25lIiwiY2xvbmVOb3JtYWwiLCJub3JtYWwiLCJzbGljZSIsImNsb25lVmVydGljZXMiLCJ2ZXJ0aWNlcyIsInZlcnRleCIsImNhbGN1bGF0ZUVkZ2VzIiwiaW5kZXgiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJzdGFydFZlcnRleCIsImVuZFZlcnRleCIsImZyb21WZXJ0aWNlcyIsImNhbGN1bGF0ZU5vcm1hbCIsImZpcnN0VmVydGV4Iiwic2Vjb25kVmVydGV4IiwidGhpcmRWZXJ0ZXgiLCJmaXJzdEVkZ2UiLCJzZWNvbmRFZGdlIiwicm90YXRlVmVydGljZXMiLCJyb3RhdGlvblF1YXRlcm5pb24iLCJpbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uIiwicm90YXRlVmVydGV4IiwibW9kdWxlIiwiZXhwb3J0cyIsImltYWdpbmFyeVF1YXRlcm5pb24iLCJyb3RhdGVkSW1hZ2luYXJ5UXVhdGVybmlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLFNBQVIsQ0FBYjtBQUFBLElBQ01DLFlBQVlELFFBQVEsY0FBUixDQURsQjtBQUFBLElBRU1FLGlCQUFpQkYsUUFBUSxvQkFBUixDQUZ2QjtBQUFBLElBR01HLGtCQUFrQkgsUUFBUSxxQkFBUixDQUh4QjtBQUFBLElBSU1JLG9CQUFvQkosUUFBUSx1QkFB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QU1mTSxrQkFBZ0JBO0FBTkQsQ0FBakI7O0FBVUEsU0FBU0csWUFBVCxDQUFzQmpCLE1BQXRCLEVBQThCZSxrQkFBOUIsRUFBa0RDLHlCQUFsRCxFQUE2RTtBQUMzRSxNQUFNSSx1QkFBdUIsQ0FBdkIsNEJBQTZCcEIsTUFBN0IsRUFBTjtBQUFBLE1BQTRDO0FBQ3RDcUIsK0JBQTZCaEMsMEJBQTBCK0IsbUJBQTFCLEVBQStDTCxrQkFBL0MsRUFBbUVDLHlCQUFuRSxDQURuQzs7QUFHQWhCLFdBQVNxQiwyQkFBMkJ4QixLQUEzQixDQUFpQyxDQUFqQyxDQUFULENBSjJFLENBSTdCOztBQUU5QyxTQUFPRyxNQUFQO0FBQ0QiLCJmaWxlIjoiZmFjZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEVkZ2UgPSByZXF1aXJlKCcuLi9lZGdlJyksXG4gICAgICBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICB2ZWN0b3JVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvdmVjdG9yJyksXG4gICAgICByb3RhdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9yb3RhdGlvbicpO1xuXG5jb25zdCB7IFZFUlRJQ0VTX0xFTkdUSCB9ID0gY29uc3RhbnRzLFxuICAgICAgeyBzdWJ0cmFjdDMsIGNyb3NzMyB9ID0gdmVjdG9yVXRpbGl0aWVzLFxuICAgICAgeyBmaXJzdCwgc2Vjb25kLCB0aGlyZCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGNhbGN1bGF0ZUludmVyc2VSb3RhdGlvblF1YXRlcm5pb24sIHJvdGF0ZUltYWdpbmFyeVF1YXRlcm5pb24gfSA9IHJvdGF0aW9uVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBjbG9uZUVkZ2VzKGVkZ2VzKSB7XG4gIGVkZ2VzID0gZWRnZXMubWFwKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICBlZGdlID0gZWRnZS5jbG9uZSgpO1xuXG4gICAgcmV0dXJuIGVkZ2U7XG4gIH0pO1xuXG4gIHJldHVybiBlZGdlcztcbn1cblxuZnVuY3Rpb24gY2xvbmVOb3JtYWwobm9ybWFsKSB7IHJldHVybiBub3JtYWwuc2xpY2UoKTsgfVxuXG5mdW5jdGlvbiBjbG9uZVZlcnRpY2VzKHZlcnRpY2VzKSB7XG4gIHZlcnRpY2VzID0gdmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgIHZlcnRleCA9IHZlcnRleC5zbGljZSgpOyAgLy8vXG5cbiAgICByZXR1cm4gdmVydGV4O1xuICB9KTtcblxuICByZXR1cm4gdmVydGljZXM7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUVkZ2VzKHZlcnRpY2VzKSB7XG4gIGNvbnN0IGVkZ2VzID0gdmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCwgaW5kZXgpIHtcbiAgICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXgsIC8vL1xuICAgICAgICAgIGVuZEluZGV4ID0gKHN0YXJ0SW5kZXggKyAxKSAlIFZFUlRJQ0VTX0xFTkdUSCxcbiAgICAgICAgICBzdGFydFZlcnRleCA9IHZlcnRpY2VzW3N0YXJ0SW5kZXhdLFxuICAgICAgICAgIGVuZFZlcnRleCA9IHZlcnRpY2VzW2VuZEluZGV4XSxcbiAgICAgICAgICBlZGdlID0gRWRnZS5mcm9tVmVydGljZXMoc3RhcnRWZXJ0ZXgsIGVuZFZlcnRleCk7XG5cbiAgICByZXR1cm4gZWRnZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVOb3JtYWwodmVydGljZXMpIHtcbiAgY29uc3QgZmlyc3RWZXJ0ZXggPSBmaXJzdCh2ZXJ0aWNlcyksXG4gICAgICAgIHNlY29uZFZlcnRleCA9IHNlY29uZCh2ZXJ0aWNlcyksXG4gICAgICAgIHRoaXJkVmVydGV4ID0gdGhpcmQodmVydGljZXMpLFxuICAgICAgICBmaXJzdEVkZ2UgPSBzdWJ0cmFjdDMoc2Vjb25kVmVydGV4LCBmaXJzdFZlcnRleCksXG4gICAgICAgIHNlY29uZEVkZ2UgPSBzdWJ0cmFjdDModGhpcmRWZXJ0ZXgsIGZpcnN0VmVydGV4KSxcbiAgICAgICAgbm9ybWFsID0gY3Jvc3MzKGZpcnN0RWRnZSwgc2Vjb25kRWRnZSk7XG5cbiAgcmV0dXJuIG5vcm1hbDtcbn1cblxuZnVuY3Rpb24gcm90YXRlVmVydGljZXModmVydGljZXMsIHJvdGF0aW9uUXVhdGVybmlvbikge1xuICBjb25zdCBpbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uID0gY2FsY3VsYXRlSW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbihyb3RhdGlvblF1YXRlcm5pb24pO1xuXG4gIHZlcnRpY2VzID0gdmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgIHZlcnRleCA9IHJvdGF0ZVZlcnRleCh2ZXJ0ZXgsIHJvdGF0aW9uUXVhdGVybmlvbiwgaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbik7XG5cbiAgICByZXR1cm4gdmVydGV4O1xuICB9KTtcbiAgXG4gIHJldHVybiB2ZXJ0aWNlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNsb25lRWRnZXM6IGNsb25lRWRnZXMsXG4gIGNsb25lTm9ybWFsOiBjbG9uZU5vcm1hbCxcbiAgY2xvbmVWZXJ0aWNlczogY2xvbmVWZXJ0aWNlcyxcbiAgY2FsY3VsYXRlRWRnZXM6IGNhbGN1bGF0ZUVkZ2VzLFxuICBjYWxjdWxhdGVOb3JtYWw6IGNhbGN1bGF0ZU5vcm1hbCxcbiAgcm90YXRlVmVydGljZXM6IHJvdGF0ZVZlcnRpY2VzXG59O1xuXG5cbmZ1bmN0aW9uIHJvdGF0ZVZlcnRleCh2ZXJ0ZXgsIHJvdGF0aW9uUXVhdGVybmlvbiwgaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbikge1xuICBjb25zdCBpbWFnaW5hcnlRdWF0ZXJuaW9uID0gWzAsIC4uLnZlcnRleF0sIC8vL1xuICAgICAgICByb3RhdGVkSW1hZ2luYXJ5UXVhdGVybmlvbiA9IHJvdGF0ZUltYWdpbmFyeVF1YXRlcm5pb24oaW1hZ2luYXJ5UXVhdGVybmlvbiwgcm90YXRpb25RdWF0ZXJuaW9uLCBpbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uKTtcblxuICB2ZXJ0ZXggPSByb3RhdGVkSW1hZ2luYXJ5UXVhdGVybmlvbi5zbGljZSgxKTsgLy8vXG5cbiAgcmV0dXJuIHZlcnRleDtcbn1cbiJdfQ==