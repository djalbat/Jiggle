'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var mat4 = require('../maths/mat4'),
    vec4 = require('../maths/vec4'),
    constants = require('../constants'),
    arrayUtilities = require('../utilities/array');

var DEGREES_TO_RADIANS = constants.DEGREES_TO_RADIANS,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    create = mat4.create,
    scale = mat4.scale,
    rotate = mat4.rotate,
    translate = mat4.translate,
    transform = vec4.transform,
    xAxis = [1, 0, 0],
    yAxis = [0, 1, 0],
    zAxis = [0, 0, 1],
    defaultWidth = 1,
    defaultDepth = 1,
    defaultHeight = 1,
    defaultPosition = [0, 0, 0],
    defaultRotations = [0, 0, 0];


function composeTransform(width, height, depth, position, rotations) {
  var scale = composeScale(width, height, depth),
      rotate = composeRotate(rotations),
      translate = composeTranslate(position);

  return function (vec) {
    return translate(rotate(scale(vec)));
  };
}

module.exports = module.exports = {
  composeTransform: composeTransform
};

function compose(mat4) {
  return function (vec) {
    return transform([].concat(_toConsumableArray(vec), [1]), mat4).slice(0, 3);
  };
}

function composeScale() {
  var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultWidth;
  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultHeight;
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDepth;

  var mat4 = create();

  scale(mat4, mat4, [width, height, depth]);

  return compose(mat4);
}

function composeRotate() {
  var rotations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultRotations;

  var mat4 = create(),
      firstRotation = first(rotations),
      secondRotation = second(rotations),
      thirdRotation = third(rotations),
      xAngle = firstRotation * DEGREES_TO_RADIANS,
      ///
  yAngle = secondRotation * DEGREES_TO_RADIANS,
      ///
  zAngle = thirdRotation * DEGREES_TO_RADIANS; ///

  rotate(mat4, mat4, xAngle, xAxis);
  rotate(mat4, mat4, yAngle, yAxis);
  rotate(mat4, mat4, zAngle, zAxis);

  return compose(mat4);
}

function composeTranslate() {
  var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPosition;

  var mat4 = create();

  translate(mat4, mat4, position);

  return compose(mat4);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdHJhbnNmb3JtLmpzIl0sIm5hbWVzIjpbIm1hdDQiLCJyZXF1aXJlIiwidmVjNCIsImNvbnN0YW50cyIsImFycmF5VXRpbGl0aWVzIiwiREVHUkVFU19UT19SQURJQU5TIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsImNyZWF0ZSIsInNjYWxlIiwicm90YXRlIiwidHJhbnNsYXRlIiwidHJhbnNmb3JtIiwieEF4aXMiLCJ5QXhpcyIsInpBeGlzIiwiZGVmYXVsdFdpZHRoIiwiZGVmYXVsdERlcHRoIiwiZGVmYXVsdEhlaWdodCIsImRlZmF1bHRQb3NpdGlvbiIsImRlZmF1bHRSb3RhdGlvbnMiLCJjb21wb3NlVHJhbnNmb3JtIiwid2lkdGgiLCJoZWlnaHQiLCJkZXB0aCIsInBvc2l0aW9uIiwicm90YXRpb25zIiwiY29tcG9zZVNjYWxlIiwiY29tcG9zZVJvdGF0ZSIsImNvbXBvc2VUcmFuc2xhdGUiLCJ2ZWMiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29tcG9zZSIsInNsaWNlIiwiZmlyc3RSb3RhdGlvbiIsInNlY29uZFJvdGF0aW9uIiwidGhpcmRSb3RhdGlvbiIsInhBbmdsZSIsInlBbmdsZSIsInpBbmdsZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLGVBQVIsQ0FBYjtBQUFBLElBQ01DLE9BQU9ELFFBQVEsZUFBUixDQURiO0FBQUEsSUFFTUUsWUFBWUYsUUFBUSxjQUFSLENBRmxCO0FBQUEsSUFHTUcsaUJBQWlCSCxRQUFRLG9CQUFSLENBSHZCOztBQUtNLElBQUVJLGtCQUFGLEdBQXlCRixTQUF6QixDQUFFRSxrQkFBRjtBQUFBLElBQ0VDLEtBREYsR0FDMkJGLGNBRDNCLENBQ0VFLEtBREY7QUFBQSxJQUNTQyxNQURULEdBQzJCSCxjQUQzQixDQUNTRyxNQURUO0FBQUEsSUFDaUJDLEtBRGpCLEdBQzJCSixjQUQzQixDQUNpQkksS0FEakI7QUFBQSxJQUVFQyxNQUZGLEdB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S0FBM0I7QUFDQUosU0FBT1gsSUFBUCxFQUFhQSxJQUFiLEVBQW1CeUMsTUFBbkIsRUFBMkJ6QixLQUEzQjs7QUFFQSxTQUFPa0IsUUFBUWxDLElBQVIsQ0FBUDtBQUNEOztBQUVELFNBQVM4QixnQkFBVCxHQUFzRDtBQUFBLE1BQTVCSixRQUE0Qix1RUFBakJOLGVBQWlCOztBQUNwRCxNQUFNcEIsT0FBT1MsUUFBYjs7QUFFQUcsWUFBVVosSUFBVixFQUFnQkEsSUFBaEIsRUFBc0IwQixRQUF0Qjs7QUFFQSxTQUFPUSxRQUFRbEMsSUFBUixDQUFQO0FBQ0QiLCJmaWxlIjoidHJhbnNmb3JtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBtYXQ0ID0gcmVxdWlyZSgnLi4vbWF0aHMvbWF0NCcpLFxuICAgICAgdmVjNCA9IHJlcXVpcmUoJy4uL21hdGhzL3ZlYzQnKSxcbiAgICAgIGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKTtcblxuY29uc3QgeyBERUdSRUVTX1RPX1JBRElBTlMgfSA9IGNvbnN0YW50cyxcbiAgICAgIHsgZmlyc3QsIHNlY29uZCwgdGhpcmQgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBjcmVhdGUsIHNjYWxlLCByb3RhdGUsIHRyYW5zbGF0ZSB9ID0gbWF0NCxcbiAgICAgIHsgdHJhbnNmb3JtIH0gPSB2ZWM0LFxuICAgICAgeEF4aXMgPSBbIDEsIDAsIDAgXSxcbiAgICAgIHlBeGlzID0gWyAwLCAxLCAwIF0sXG4gICAgICB6QXhpcyA9IFsgMCwgMCwgMSBdLFxuICAgICAgZGVmYXVsdFdpZHRoID0gMSxcbiAgICAgIGRlZmF1bHREZXB0aCA9IDEsXG4gICAgICBkZWZhdWx0SGVpZ2h0ID0gMSxcbiAgICAgIGRlZmF1bHRQb3NpdGlvbiA9IFsgMCwgMCwgMCBdLFxuICAgICAgZGVmYXVsdFJvdGF0aW9ucyA9IFsgMCwgMCwgMCBdO1xuXG5mdW5jdGlvbiBjb21wb3NlVHJhbnNmb3JtKHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBwb3NpdGlvbiwgcm90YXRpb25zKSB7XG4gIGNvbnN0IHNjYWxlID0gY29tcG9zZVNjYWxlKHdpZHRoLCBoZWlnaHQsIGRlcHRoKSxcbiAgICAgICAgcm90YXRlID0gY29tcG9zZVJvdGF0ZShyb3RhdGlvbnMpLFxuICAgICAgICB0cmFuc2xhdGUgPSBjb21wb3NlVHJhbnNsYXRlKHBvc2l0aW9uKTtcblxuICByZXR1cm4gZnVuY3Rpb24odmVjKSB7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZShyb3RhdGUoc2NhbGUodmVjKSkpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBjb21wb3NlVHJhbnNmb3JtOiBjb21wb3NlVHJhbnNmb3JtXG59O1xuXG5mdW5jdGlvbiBjb21wb3NlKG1hdDQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZlYykge1xuICAgIHJldHVybiB0cmFuc2Zvcm0oWy4uLnZlYywgMV0sIG1hdDQpLnNsaWNlKDAsIDMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb21wb3NlU2NhbGUod2lkdGggPSBkZWZhdWx0V2lkdGgsIGhlaWdodCA9IGRlZmF1bHRIZWlnaHQsIGRlcHRoID0gZGVmYXVsdERlcHRoKSB7XG4gIGNvbnN0IG1hdDQgPSBjcmVhdGUoKTtcblxuICBzY2FsZShtYXQ0LCBtYXQ0LCBbIHdpZHRoLCBoZWlnaHQsIGRlcHRoIF0pO1xuXG4gIHJldHVybiBjb21wb3NlKG1hdDQpO1xufVxuXG5mdW5jdGlvbiBjb21wb3NlUm90YXRlKHJvdGF0aW9ucyA9IGRlZmF1bHRSb3RhdGlvbnMpIHtcbiAgY29uc3QgbWF0NCA9IGNyZWF0ZSgpLFxuICAgICAgZmlyc3RSb3RhdGlvbiA9IGZpcnN0KHJvdGF0aW9ucyksXG4gICAgICBzZWNvbmRSb3RhdGlvbiA9IHNlY29uZChyb3RhdGlvbnMpLFxuICAgICAgdGhpcmRSb3RhdGlvbiA9IHRoaXJkKHJvdGF0aW9ucyksXG4gICAgICB4QW5nbGUgPSBmaXJzdFJvdGF0aW9uICogREVHUkVFU19UT19SQURJQU5TLCAgLy8vXG4gICAgICB5QW5nbGUgPSBzZWNvbmRSb3RhdGlvbiAqIERFR1JFRVNfVE9fUkFESUFOUywgLy8vXG4gICAgICB6QW5nbGUgPSB0aGlyZFJvdGF0aW9uICogREVHUkVFU19UT19SQURJQU5TOyAgLy8vXG5cbiAgcm90YXRlKG1hdDQsIG1hdDQsIHhBbmdsZSwgeEF4aXMpO1xuICByb3RhdGUobWF0NCwgbWF0NCwgeUFuZ2xlLCB5QXhpcyk7XG4gIHJvdGF0ZShtYXQ0LCBtYXQ0LCB6QW5nbGUsIHpBeGlzKTtcblxuICByZXR1cm4gY29tcG9zZShtYXQ0KTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZVRyYW5zbGF0ZShwb3NpdGlvbiA9IGRlZmF1bHRQb3NpdGlvbikge1xuICBjb25zdCBtYXQ0ID0gY3JlYXRlKCk7XG5cbiAgdHJhbnNsYXRlKG1hdDQsIG1hdDQsIHBvc2l0aW9uKTtcblxuICByZXR1cm4gY29tcG9zZShtYXQ0KTtcbn1cbiJdfQ==