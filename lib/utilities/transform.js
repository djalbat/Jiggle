'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var constants = require('../constants'),
    vectorMaths = require('../maths/vector'),
    matrixMaths = require('../maths/matrix'),
    arrayUtilities = require('../utilities/array');

var DEGREES_TO_RADIANS = constants.DEGREES_TO_RADIANS,
    transform4 = vectorMaths.transform4,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    identity4 = matrixMaths.identity4,
    scale4 = matrixMaths.scale4,
    rotate4 = matrixMaths.rotate4,
    translate4 = matrixMaths.translate4,
    xAxis = [1, 0, 0],
    yAxis = [0, 1, 0],
    zAxis = [0, 0, 1],
    defaultWidth = 1,
    defaultDepth = 1,
    defaultHeight = 1,
    defaultPosition = [0, 0, 0],
    defaultRotations = [0, 0, 0];


function composeTransform(width, height, depth, position, rotations) {
  var scale = composeScale(width, height, depth),
      rotate = composeRotate(rotations),
      translate = composeTranslate(position);

  return function (vector) {
    return translate(rotate(scale(vector)));
  };
}

module.exports = module.exports = {
  composeTransform: composeTransform
};

function compose(matrix) {
  return function (vector) {
    return transform4([].concat(_toConsumableArray(vector), [1]), matrix).slice(0, 3);
  };
}

function composeScale() {
  var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultWidth;
  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultHeight;
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDepth;

  var matrix = identity4();

  matrix = scale4(matrix, [width, height, depth]);

  return compose(matrix);
}

function composeRotate() {
  var rotations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultRotations;

  var firstRotation = first(rotations),
      secondRotation = second(rotations),
      thirdRotation = third(rotations),
      xAngle = firstRotation * DEGREES_TO_RADIANS,
      ///
  yAngle = secondRotation * DEGREES_TO_RADIANS,
      ///
  zAngle = thirdRotation * DEGREES_TO_RADIANS; ///

  var matrix = identity4();

  matrix = rotate4(matrix, xAngle, xAxis);
  matrix = rotate4(matrix, yAngle, yAxis);
  matrix = rotate4(matrix, zAngle, zAxis);

  return compose(matrix);
}

function composeTranslate() {
  var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPosition;

  var matrix = identity4();

  matrix = translate4(matrix, position);

  return compose(matrix);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdHJhbnNmb3JtLmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJ2ZWN0b3JNYXRocyIsIm1hdHJpeE1hdGhzIiwiYXJyYXlVdGlsaXRpZXMiLCJERUdSRUVTX1RPX1JBRElBTlMiLCJ0cmFuc2Zvcm00IiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsImlkZW50aXR5NCIsInNjYWxlNCIsInJvdGF0ZTQiLCJ0cmFuc2xhdGU0IiwieEF4aXMiLCJ5QXhpcyIsInpBeGlzIiwiZGVmYXVsdFdpZHRoIiwiZGVmYXVsdERlcHRoIiwiZGVmYXVsdEhlaWdodCIsImRlZmF1bHRQb3NpdGlvbiIsImRlZmF1bHRSb3RhdGlvbnMiLCJjb21wb3NlVHJhbnNmb3JtIiwid2lkdGgiLCJoZWlnaHQiLCJkZXB0aCIsInBvc2l0aW9uIiwicm90YXRpb25zIiwic2NhbGUiLCJjb21wb3NlU2NhbGUiLCJyb3RhdGUiLCJjb21wb3NlUm90YXRlIiwidHJhbnNsYXRlIiwiY29tcG9zZVRyYW5zbGF0ZSIsInZlY3RvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb21wb3NlIiwibWF0cml4Iiwic2xpY2UiLCJmaXJzdFJvdGF0aW9uIiwic2Vjb25kUm90YXRpb24iLCJ0aGlyZFJvdGF0aW9uIiwieEFuZ2xlIiwieUFuZ2xlIiwiekFuZ2xlIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQU1BLFlBQVlDLFFBQVEsY0FBUixDQUFsQjtBQUFBLElBQ01DLGNBQWNELFFBQVEsaUJBQVIsQ0FEcEI7QUFBQSxJQUVNRSxjQUFjRixRQUFRLGlCQUFSLENBRnBCO0FBQUEsSUFHTUcsaUJBQWlCSCxRQUFRLG9CQUFSLENBSHZCOztBQUtNLElBQUVJLGtCQUFGLEdBQXlCTCxTQUF6QixDQUFFSyxrQkFBRjtBQUFBLElBQ0VDLFVBREYsR0FDaUJKLFdBRGpCLENBQ0VJLFVBREY7QUFBQSxJQUVFQyxLQUZGLEdBRTJCSCxjQUYzQixDQUVFRyxL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Q0FBVDtBQUNBd0IsV0FBUzFCLFFBQVEwQixNQUFSLEVBQWdCTSxNQUFoQixFQUF3QjdCLEtBQXhCLENBQVQ7QUFDQXVCLFdBQVMxQixRQUFRMEIsTUFBUixFQUFnQk8sTUFBaEIsRUFBd0I3QixLQUF4QixDQUFUOztBQUVBLFNBQU9xQixRQUFRQyxNQUFSLENBQVA7QUFDRDs7QUFFRCxTQUFTTCxnQkFBVCxHQUFzRDtBQUFBLE1BQTVCUCxRQUE0Qix1RUFBakJOLGVBQWlCOztBQUNwRCxNQUFJa0IsU0FBUzVCLFdBQWI7O0FBRUE0QixXQUFTekIsV0FBV3lCLE1BQVgsRUFBbUJaLFFBQW5CLENBQVQ7O0FBRUEsU0FBT1csUUFBUUMsTUFBUixDQUFQO0FBQ0QiLCJmaWxlIjoidHJhbnNmb3JtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIHZlY3Rvck1hdGhzID0gcmVxdWlyZSgnLi4vbWF0aHMvdmVjdG9yJyksXG4gICAgICBtYXRyaXhNYXRocyA9IHJlcXVpcmUoJy4uL21hdGhzL21hdHJpeCcpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKTtcblxuY29uc3QgeyBERUdSRUVTX1RPX1JBRElBTlMgfSA9IGNvbnN0YW50cyxcbiAgICAgIHsgdHJhbnNmb3JtNCB9ID0gdmVjdG9yTWF0aHMsXG4gICAgICB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgaWRlbnRpdHk0LCBzY2FsZTQsIHJvdGF0ZTQsIHRyYW5zbGF0ZTQgfSA9IG1hdHJpeE1hdGhzLFxuICAgICAgeEF4aXMgPSBbIDEsIDAsIDAgXSxcbiAgICAgIHlBeGlzID0gWyAwLCAxLCAwIF0sXG4gICAgICB6QXhpcyA9IFsgMCwgMCwgMSBdLFxuICAgICAgZGVmYXVsdFdpZHRoID0gMSxcbiAgICAgIGRlZmF1bHREZXB0aCA9IDEsXG4gICAgICBkZWZhdWx0SGVpZ2h0ID0gMSxcbiAgICAgIGRlZmF1bHRQb3NpdGlvbiA9IFsgMCwgMCwgMCBdLFxuICAgICAgZGVmYXVsdFJvdGF0aW9ucyA9IFsgMCwgMCwgMCBdO1xuXG5mdW5jdGlvbiBjb21wb3NlVHJhbnNmb3JtKHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBwb3NpdGlvbiwgcm90YXRpb25zKSB7XG4gIGNvbnN0IHNjYWxlID0gY29tcG9zZVNjYWxlKHdpZHRoLCBoZWlnaHQsIGRlcHRoKSxcbiAgICAgICAgcm90YXRlID0gY29tcG9zZVJvdGF0ZShyb3RhdGlvbnMpLFxuICAgICAgICB0cmFuc2xhdGUgPSBjb21wb3NlVHJhbnNsYXRlKHBvc2l0aW9uKTtcblxuICByZXR1cm4gZnVuY3Rpb24odmVjdG9yKSB7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZShyb3RhdGUoc2NhbGUodmVjdG9yKSkpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBjb21wb3NlVHJhbnNmb3JtXG59O1xuXG5mdW5jdGlvbiBjb21wb3NlKG1hdHJpeCkge1xuICByZXR1cm4gZnVuY3Rpb24odmVjdG9yKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybTQoWy4uLnZlY3RvciwgMV0sIG1hdHJpeCkuc2xpY2UoMCwgMyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VTY2FsZSh3aWR0aCA9IGRlZmF1bHRXaWR0aCwgaGVpZ2h0ID0gZGVmYXVsdEhlaWdodCwgZGVwdGggPSBkZWZhdWx0RGVwdGgpIHtcbiAgbGV0IG1hdHJpeCA9IGlkZW50aXR5NCgpO1xuXG4gIG1hdHJpeCA9IHNjYWxlNChtYXRyaXgsIFsgd2lkdGgsIGhlaWdodCwgZGVwdGggXSk7XG5cbiAgcmV0dXJuIGNvbXBvc2UobWF0cml4KTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZVJvdGF0ZShyb3RhdGlvbnMgPSBkZWZhdWx0Um90YXRpb25zKSB7XG4gIGNvbnN0IGZpcnN0Um90YXRpb24gPSBmaXJzdChyb3RhdGlvbnMpLFxuICAgICAgICBzZWNvbmRSb3RhdGlvbiA9IHNlY29uZChyb3RhdGlvbnMpLFxuICAgICAgICB0aGlyZFJvdGF0aW9uID0gdGhpcmQocm90YXRpb25zKSxcbiAgICAgICAgeEFuZ2xlID0gZmlyc3RSb3RhdGlvbiAqIERFR1JFRVNfVE9fUkFESUFOUywgIC8vL1xuICAgICAgICB5QW5nbGUgPSBzZWNvbmRSb3RhdGlvbiAqIERFR1JFRVNfVE9fUkFESUFOUywgLy8vXG4gICAgICAgIHpBbmdsZSA9IHRoaXJkUm90YXRpb24gKiBERUdSRUVTX1RPX1JBRElBTlM7ICAvLy9cblxuICBsZXQgbWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgbWF0cml4ID0gcm90YXRlNChtYXRyaXgsIHhBbmdsZSwgeEF4aXMpO1xuICBtYXRyaXggPSByb3RhdGU0KG1hdHJpeCwgeUFuZ2xlLCB5QXhpcyk7XG4gIG1hdHJpeCA9IHJvdGF0ZTQobWF0cml4LCB6QW5nbGUsIHpBeGlzKTtcblxuICByZXR1cm4gY29tcG9zZShtYXRyaXgpO1xufVxuXG5mdW5jdGlvbiBjb21wb3NlVHJhbnNsYXRlKHBvc2l0aW9uID0gZGVmYXVsdFBvc2l0aW9uKSB7XG4gIGxldCBtYXRyaXggPSBpZGVudGl0eTQoKTtcblxuICBtYXRyaXggPSB0cmFuc2xhdGU0KG1hdHJpeCwgcG9zaXRpb24pO1xuXG4gIHJldHVybiBjb21wb3NlKG1hdHJpeCk7XG59XG4iXX0=