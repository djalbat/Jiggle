'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var constants = require('../constants'),
    vectorMaths = require('../maths/vector'),
    matrixMaths = require('../maths/matrix');

var transform4 = vectorMaths.transform4,
    DEGREES_TO_RADIANS = constants.DEGREES_TO_RADIANS,
    identity4 = matrixMaths.identity4,
    scale4 = matrixMaths.scale4,
    rotate4 = matrixMaths.rotate4,
    translate4 = matrixMaths.translate4,
    multiply4 = matrixMaths.multiply4;


function composeTransform(scale, rotations, position) {
  var matrix = null;

  if (scale !== null) {
    var scaleMatrix = calculateScaleMatrix(scale);

    matrix = matrix === null ? scaleMatrix : multiply4(scaleMatrix, matrix);
  }

  if (rotations !== null) {
    var rotationsMatrix = calculateRotationsMatrix(rotations);

    matrix = matrix === null ? rotationsMatrix : multiply4(rotationsMatrix, matrix);
  }

  if (position !== null) {
    var positionMatrix = calculatePositionMatrix(position);

    matrix = matrix === null ? positionMatrix : multiply4(positionMatrix, matrix);
  }

  var transform = matrix === null ? function (vector) {
    return vector;
  } : function (vector) {
    return transform4([].concat(_toConsumableArray(vector), [1]), matrix).slice(0, 3);
  };

  return transform;
}

module.exports = module.exports = {
  composeTransform: composeTransform
};

function calculateScaleMatrix(scale) {
  var scaleMatrix = identity4();

  scaleMatrix = scale4(scaleMatrix, scale);

  return scaleMatrix;
}

function calculatePositionMatrix(position) {
  var positionMatrix = identity4();

  positionMatrix = translate4(positionMatrix, position);

  return positionMatrix;
}

function calculateRotationsMatrix(rotations) {
  var rotationsMatrix = identity4();

  var xAngle = rotations[0] * DEGREES_TO_RADIANS,
      yAngle = rotations[1] * DEGREES_TO_RADIANS,
      zAngle = rotations[2] * DEGREES_TO_RADIANS,
      xAxis = [1, 0, 0],
      yAxis = [0, 1, 0],
      zAxis = [0, 0, 1];

  rotationsMatrix = rotate4(rotationsMatrix, xAngle, xAxis);
  rotationsMatrix = rotate4(rotationsMatrix, yAngle, yAxis);
  rotationsMatrix = rotate4(rotationsMatrix, zAngle, zAxis);

  return rotationsMatrix;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdHJhbnNmb3JtLmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJ2ZWN0b3JNYXRocyIsIm1hdHJpeE1hdGhzIiwidHJhbnNmb3JtNCIsIkRFR1JFRVNfVE9fUkFESUFOUyIsImlkZW50aXR5NCIsInNjYWxlNCIsInJvdGF0ZTQiLCJ0cmFuc2xhdGU0IiwibXVsdGlwbHk0IiwiY29tcG9zZVRyYW5zZm9ybSIsInNjYWxlIiwicm90YXRpb25zIiwicG9zaXRpb24iLCJtYXRyaXgiLCJzY2FsZU1hdHJpeCIsImNhbGN1bGF0ZVNjYWxlTWF0cml4Iiwicm90YXRpb25zTWF0cml4IiwiY2FsY3VsYXRlUm90YXRpb25zTWF0cml4IiwicG9zaXRpb25NYXRyaXgiLCJjYWxjdWxhdGVQb3NpdGlvbk1hdHJpeCIsInRyYW5zZm9ybSIsInZlY3RvciIsInNsaWNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInhBbmdsZSIsInlBbmdsZSIsInpBbmdsZSIsInhBeGlzIiwieUF4aXMiLCJ6QXhpcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLGNBQVIsQ0FBbEI7QUFBQSxJQUNNQyxjQUFjRCxRQUFRLGlCQUFSLENBRHBCO0FBQUEsSUFFTUUsY0FBY0YsUUFBUSxpQkFBUixDQUZwQjs7QUFJTSxJQUFFRyxVQUFGLEdBQWlCRixXQUFqQixDQUFFRSxVQUFGO0FBQUEsSUFDRUMsa0JBREYsR0FDeUJMLFNBRHpCLENBQ0VLLGtCQURGO0FBQUEsSUFFRUMsU0FGRixHQUV3REgsV0FGeEQsQ0FFRUcsU0FGRjtBQUFBLElBRWFDLE1BRmIsR0FFd0RKLFdBRnhELENBRWFJLE1BRmI7QUFBQSxJQUVxQkMsT0FGckIsR0FFd0RMLFdBRnhELENBRXFCSyxPQUZyQjtBQUFBLElBRThCQyxVQUY5QixHQUV3RE4sV0FGeEQsQ0FFOEJNLFVBRjlCO0FBQUEsSUFFMENDLFNBRjFDLEdBRXdEUCxXQUZ4RCxDQUUwQ08sU0FGMUM7OztBQUlOLFNBQVNDLGdCQUFULENBQTBCQyxLQUExQixFQUFpQ0MsU0FBakMsRUFBNENDLFFBQTVDLEVBQXNEO0FBQ3BELE1BQUlDLFNBQVMsSUFBYjs7QUFFQSxNQUFJSCxVQUFVLElBQWQsRUFBb0I7QUFDbEIsUUFBTUksY0FBY0MscUJBQXFCTCxLQUFyQixDQUFwQjs7QUFFQUcsYUFBVUEsV0FBVyxJQUFaLEdBQ0VDLFdBREYsR0FFSU4sVUFBVU0sV0FBVixFQUF1QkQsTUFBdkIsQ0FGYjtBQUdEOztBQUVELE1BQUlGLGNBQWMsSUFBbEIsRUFBd0I7QUFDdEIsUUFBTUssa0JBQWtCQyx5QkFBeUJOLFNBQXpCLENBQXhCOztBQUVBRSxhQUFVQSxXQUFXLElBQVosR0FDRUcsZUFERixHQUVJUixVQUFVUSxlQUFWLEVBQTJCSCxNQUEzQixDQUZiO0FBSUQ7O0FBRUQsTUFBSUQsYUFBYSxJQUFqQixFQUF1QjtBQUNyQixRQUFNTSxpQkFBaUJDLHdCQUF3QlAsUUFBeEIsQ0FBdkI7O0FBRUFDLGFBQVVBLFdBQVcsSUFBWixHQUNHSyxjQURILEdBRUtWLFVBQVVVLGNBQVYsRUFBMEJMLE1BQTFCLENBRmQ7QUFHRDs7QUFFRCxNQUFNTyxZQUFhUCxXQUFXLElBQVosR0FDRSxVQUFDUSxNQUFEO0FBQUEsV0FBWUEsTUFBWjtBQUFBLEdBREYsR0FFSSxVQUFDQSxNQUFEO0FBQUEsV0FBWW5CLHdDQUFlbUIsTUFBZixJQUF1QixDQUF2QixJQUEyQlIsTUFBM0IsRUFBbUNTLEtBQW5DLENBQXlDLENBQXpDLEVBQTRDLENBQTVDLENBQVo7QUFBQSxHQUZ0Qjs7QUFJQSxTQUFPRixTQUFQO0FBQ0Q7O0FBRURHLE9BQU9DLE9BQVAsR0FBaUJELE9BQU9DLE9BQVAsR0FBaUI7QUFDaENmO0FBRGdDLENBQWxDOztBQUlBLFNBQVNNLG9CQUFULENBQThCTCxLQUE5QixFQUFxQztBQUNuQyxNQUFJSSxjQUFjVixXQUFsQjs7QUFFQVUsZ0JBQWNULE9BQU9TLFdBQVAsRUFBb0JKLEtBQXBCLENBQWQ7O0FBRUEsU0FBT0ksV0FBUDtBQUNEOztBQUVELFNBQVNLLHVCQUFULENBQWlDUCxRQUFqQyxFQUEyQztBQUN6QyxNQUFJTSxpQkFBaUJkLFdBQXJCOztBQUVBYyxtQkFBaUJYLFdBQVdXLGNBQVgsRUFBMkJOLFFBQTNCLENBQWpCOztBQUVBLFNBQU9NLGNBQVA7QUFDRDs7QUFFRCxTQUFTRCx3QkFBVCxDQUFrQ04sU0FBbEMsRUFBNkM7QUFDM0MsTUFBSUssa0JBQWtCWixXQUF0Qjs7QUFFQSxNQUFNcUIsU0FBU2QsVUFBVyxDQUFYLElBQWlCUixrQkFBaEM7QUFBQSxNQUNNdUIsU0FBU2YsVUFBVyxDQUFYLElBQWlCUixrQkFEaEM7QUFBQSxNQUVNd0IsU0FBU2hCLFVBQVcsQ0FBWCxJQUFpQlIsa0JBRmhDO0FBQUEsTUFJTXlCLFFBQVEsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FKZDtBQUFBLE1BS01DLFFBQVEsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FMZDtBQUFBLE1BTU1DLFFBQVEsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FOZDs7QUFRQWQsb0JBQWtCVixRQUFRVSxlQUFSLEVBQXlCUyxNQUF6QixFQUFpQ0csS0FBakMsQ0FBbEI7QUFDQVosb0JBQWtCVixRQUFRVSxlQUFSLEVBQXlCVSxNQUF6QixFQUFpQ0csS0FBakMsQ0FBbEI7QUFDQWIsb0JBQWtCVixRQUFRVSxlQUFSLEVBQXlCVyxNQUF6QixFQUFpQ0csS0FBakMsQ0FBbEI7O0FBRUEsU0FBT2QsZUFBUDtBQUNEIiwiZmlsZSI6InRyYW5zZm9ybS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vY29uc3RhbnRzJyksXG4gICAgICB2ZWN0b3JNYXRocyA9IHJlcXVpcmUoJy4uL21hdGhzL3ZlY3RvcicpLFxuICAgICAgbWF0cml4TWF0aHMgPSByZXF1aXJlKCcuLi9tYXRocy9tYXRyaXgnKTtcblxuY29uc3QgeyB0cmFuc2Zvcm00IH0gPSB2ZWN0b3JNYXRocyxcbiAgICAgIHsgREVHUkVFU19UT19SQURJQU5TIH0gPSBjb25zdGFudHMsXG4gICAgICB7IGlkZW50aXR5NCwgc2NhbGU0LCByb3RhdGU0LCB0cmFuc2xhdGU0LCBtdWx0aXBseTQgfSA9IG1hdHJpeE1hdGhzO1xuXG5mdW5jdGlvbiBjb21wb3NlVHJhbnNmb3JtKHNjYWxlLCByb3RhdGlvbnMsIHBvc2l0aW9uKSB7XG4gIGxldCBtYXRyaXggPSBudWxsO1xuXG4gIGlmIChzY2FsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHNjYWxlTWF0cml4ID0gY2FsY3VsYXRlU2NhbGVNYXRyaXgoc2NhbGUpO1xuXG4gICAgbWF0cml4ID0gKG1hdHJpeCA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgc2NhbGVNYXRyaXggOlxuICAgICAgICAgICAgICAgICBtdWx0aXBseTQoc2NhbGVNYXRyaXgsIG1hdHJpeCk7XG4gIH1cblxuICBpZiAocm90YXRpb25zICE9PSBudWxsKSB7XG4gICAgY29uc3Qgcm90YXRpb25zTWF0cml4ID0gY2FsY3VsYXRlUm90YXRpb25zTWF0cml4KHJvdGF0aW9ucyk7XG5cbiAgICBtYXRyaXggPSAobWF0cml4ID09PSBudWxsKSA/XG4gICAgICAgICAgICAgICByb3RhdGlvbnNNYXRyaXggOlxuICAgICAgICAgICAgICAgICBtdWx0aXBseTQocm90YXRpb25zTWF0cml4LCBtYXRyaXgpO1xuXG4gIH1cblxuICBpZiAocG9zaXRpb24gIT09IG51bGwpIHtcbiAgICBjb25zdCBwb3NpdGlvbk1hdHJpeCA9IGNhbGN1bGF0ZVBvc2l0aW9uTWF0cml4KHBvc2l0aW9uKTtcblxuICAgIG1hdHJpeCA9IChtYXRyaXggPT09IG51bGwpID9cbiAgICAgICAgICAgICAgICBwb3NpdGlvbk1hdHJpeCA6XG4gICAgICAgICAgICAgICAgICBtdWx0aXBseTQocG9zaXRpb25NYXRyaXgsIG1hdHJpeCk7XG4gIH1cblxuICBjb25zdCB0cmFuc2Zvcm0gPSAobWF0cml4ID09PSBudWxsKSA/XG4gICAgICAgICAgICAgICAgICAgICAgKHZlY3RvcikgPT4gdmVjdG9yIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICh2ZWN0b3IpID0+IHRyYW5zZm9ybTQoWy4uLnZlY3RvciwgMV0sIG1hdHJpeCkuc2xpY2UoMCwgMyk7XG5cbiAgcmV0dXJuIHRyYW5zZm9ybTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29tcG9zZVRyYW5zZm9ybVxufTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlU2NhbGVNYXRyaXgoc2NhbGUpIHtcbiAgbGV0IHNjYWxlTWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgc2NhbGVNYXRyaXggPSBzY2FsZTQoc2NhbGVNYXRyaXgsIHNjYWxlKTtcblxuICByZXR1cm4gc2NhbGVNYXRyaXg7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uTWF0cml4KHBvc2l0aW9uKSB7XG4gIGxldCBwb3NpdGlvbk1hdHJpeCA9IGlkZW50aXR5NCgpO1xuXG4gIHBvc2l0aW9uTWF0cml4ID0gdHJhbnNsYXRlNChwb3NpdGlvbk1hdHJpeCwgcG9zaXRpb24pO1xuXG4gIHJldHVybiBwb3NpdGlvbk1hdHJpeDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlUm90YXRpb25zTWF0cml4KHJvdGF0aW9ucykge1xuICBsZXQgcm90YXRpb25zTWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgY29uc3QgeEFuZ2xlID0gcm90YXRpb25zWyAwIF0gKiBERUdSRUVTX1RPX1JBRElBTlMsXG4gICAgICAgIHlBbmdsZSA9IHJvdGF0aW9uc1sgMSBdICogREVHUkVFU19UT19SQURJQU5TLFxuICAgICAgICB6QW5nbGUgPSByb3RhdGlvbnNbIDIgXSAqIERFR1JFRVNfVE9fUkFESUFOUyxcblxuICAgICAgICB4QXhpcyA9IFsgMSwgMCwgMCBdLFxuICAgICAgICB5QXhpcyA9IFsgMCwgMSwgMCBdLFxuICAgICAgICB6QXhpcyA9IFsgMCwgMCwgMSBdO1xuXG4gIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB4QW5nbGUsIHhBeGlzKTtcbiAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHlBbmdsZSwgeUF4aXMpO1xuICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgekFuZ2xlLCB6QXhpcyk7XG5cbiAgcmV0dXJuIHJvdGF0aW9uc01hdHJpeDtcbn1cbiJdfQ==