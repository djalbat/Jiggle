'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var vectorMaths = require('../maths/vector'),
    matrixMaths = require('../maths/matrix'),
    matrixUtilities = require('../utilities/matrix');

var multiply4 = matrixMaths.multiply4,
    transform4 = vectorMaths.transform4,
    scaleMatrixFromScale = matrixUtilities.scaleMatrixFromScale,
    positionMatrixFromPosition = matrixUtilities.positionMatrixFromPosition,
    rotationsMatrixFromRotations = matrixUtilities.rotationsMatrixFromRotations;


function composeTransform(scale, rotations, position) {
  var matrix = null;

  if (scale !== null) {
    var scaleMatrix = scaleMatrixFromScale(scale);

    matrix = matrix === null ? scaleMatrix : multiply4(scaleMatrix, matrix);
  }

  if (rotations !== null) {
    var rotationsMatrix = rotationsMatrixFromRotations(rotations);

    matrix = matrix === null ? rotationsMatrix : multiply4(rotationsMatrix, matrix);
  }

  if (position !== null) {
    var positionMatrix = positionMatrixFromPosition(position);

    matrix = matrix === null ? positionMatrix : multiply4(positionMatrix, matrix);
  }

  var transform = matrix === null ? function (vector) {
    return vector;
  } : function (vector) {
    return transform4([].concat(_toConsumableArray(vector), [1]), matrix).slice(0, 3);
  };

  return transform;
}

module.exports = module.exports = {
  composeTransform: composeTransform
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdHJhbnNmb3JtLmpzIl0sIm5hbWVzIjpbInZlY3Rvck1hdGhzIiwicmVxdWlyZSIsIm1hdHJpeE1hdGhzIiwibWF0cml4VXRpbGl0aWVzIiwibXVsdGlwbHk0IiwidHJhbnNmb3JtNCIsInNjYWxlTWF0cml4RnJvbVNjYWxlIiwicG9zaXRpb25NYXRyaXhGcm9tUG9zaXRpb24iLCJyb3RhdGlvbnNNYXRyaXhGcm9tUm90YXRpb25zIiwiY29tcG9zZVRyYW5zZm9ybSIsInNjYWxlIiwicm90YXRpb25zIiwicG9zaXRpb24iLCJtYXRyaXgiLCJzY2FsZU1hdHJpeCIsInJvdGF0aW9uc01hdHJpeCIsInBvc2l0aW9uTWF0cml4IiwidHJhbnNmb3JtIiwidmVjdG9yIiwic2xpY2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQU1BLGNBQWNDLFFBQVEsaUJBQVIsQ0FBcEI7QUFBQSxJQUNNQyxjQUFjRCxRQUFRLGlCQUFSLENBRHBCO0FBQUEsSUFFTUUsa0JBQWtCRixRQUFRLHFCQUFSLENBRnhCOztBQUlNLElBQUVHLFNBQUYsR0FBZ0JGLFdBQWhCLENBQUVFLFNBQUY7QUFBQSxJQUNFQyxVQURGLEdBQ2lCTCxXQURqQixDQUNFSyxVQURGO0FBQUEsSUFFRUMsb0JBRkYsR0FFcUZILGVBRnJGLENBRUVHLG9CQUZGO0FBQUEsSUFFd0JDLDBCQUZ4QixHQUVxRkosZUFGckYsQ0FFd0JJLDBCQUZ4QjtBQUFBLElBRW9EQyw0QkFGcEQsR0FFcUZMLGVBRnJGLENBRW9ESyw0QkFGcEQ7OztBQUlOLFNBQVNDLGdCQUFULENBQTBCQyxLQUExQixFQUFpQ0MsU0FBakMsRUFBNENDLFFBQTVDLEVBQXNEO0FBQ3BELE1BQUlDLFNBQVMsSUFBYjs7QUFFQSxNQUFJSCxVQUFVLElBQWQsRUFBb0I7QUFDbEIsUUFBTUksY0FBY1IscUJBQXFCSSxLQUFyQixDQUFwQjs7QUFFQUcsYUFBVUEsV0FBVyxJQUFaLEdBQ0VDLFdBREYsR0FFSVYsVUFBVVUsV0FBVixFQUF1QkQsTUFBdkIsQ0FGYjtBQUdEOztBQUVELE1BQUlGLGNBQWMsSUFBbEIsRUFBd0I7QUFDdEIsUUFBTUksa0JBQWtCUCw2QkFBNkJHLFNBQTdCLENBQXhCOztBQUVBRSxhQUFVQSxXQUFXLElBQVosR0FDRUUsZUFERixHQUVJWCxVQUFVVyxlQUFWLEVBQTJCRixNQUEzQixDQUZiO0FBSUQ7O0FBRUQsTUFBSUQsYUFBYSxJQUFqQixFQUF1QjtBQUNyQixRQUFNSSxpQkFBaUJULDJCQUEyQkssUUFBM0IsQ0FBdkI7O0FBRUFDLGFBQVVBLFdBQVcsSUFBWixHQUNHRyxjQURILEdBRUtaLFVBQVVZLGNBQVYsRUFBMEJILE1BQTFCLENBRmQ7QUFHRDs7QUFFRCxNQUFNSSxZQUFhSixXQUFXLElBQVosR0FDRSxVQUFDSyxNQUFEO0FBQUEsV0FBWUEsTUFBWjtBQUFBLEdBREYsR0FFSSxVQUFDQSxNQUFEO0FBQUEsV0FBWWIsd0NBQWdCYSxNQUFoQixJQUF3QixDQUF4QixJQUE2QkwsTUFBN0IsRUFBcUNNLEtBQXJDLENBQTJDLENBQTNDLEVBQThDLENBQTlDLENBQVo7QUFBQSxHQUZ0Qjs7QUFJQSxTQUFPRixTQUFQO0FBQ0Q7O0FBRURHLE9BQU9DLE9BQVAsR0FBaUJELE9BQU9DLE9BQVAsR0FBaUI7QUFDaENaO0FBRGdDLENBQWxDIiwiZmlsZSI6InRyYW5zZm9ybS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdmVjdG9yTWF0aHMgPSByZXF1aXJlKCcuLi9tYXRocy92ZWN0b3InKSxcbiAgICAgIG1hdHJpeE1hdGhzID0gcmVxdWlyZSgnLi4vbWF0aHMvbWF0cml4JyksXG4gICAgICBtYXRyaXhVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvbWF0cml4Jyk7XG5cbmNvbnN0IHsgbXVsdGlwbHk0IH0gPSBtYXRyaXhNYXRocyxcbiAgICAgIHsgdHJhbnNmb3JtNCB9ID0gdmVjdG9yTWF0aHMsXG4gICAgICB7IHNjYWxlTWF0cml4RnJvbVNjYWxlLCBwb3NpdGlvbk1hdHJpeEZyb21Qb3NpdGlvbiwgcm90YXRpb25zTWF0cml4RnJvbVJvdGF0aW9ucyB9ID0gbWF0cml4VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBjb21wb3NlVHJhbnNmb3JtKHNjYWxlLCByb3RhdGlvbnMsIHBvc2l0aW9uKSB7XG4gIGxldCBtYXRyaXggPSBudWxsO1xuXG4gIGlmIChzY2FsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHNjYWxlTWF0cml4ID0gc2NhbGVNYXRyaXhGcm9tU2NhbGUoc2NhbGUpO1xuXG4gICAgbWF0cml4ID0gKG1hdHJpeCA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgc2NhbGVNYXRyaXggOlxuICAgICAgICAgICAgICAgICBtdWx0aXBseTQoc2NhbGVNYXRyaXgsIG1hdHJpeCk7XG4gIH1cblxuICBpZiAocm90YXRpb25zICE9PSBudWxsKSB7XG4gICAgY29uc3Qgcm90YXRpb25zTWF0cml4ID0gcm90YXRpb25zTWF0cml4RnJvbVJvdGF0aW9ucyhyb3RhdGlvbnMpO1xuXG4gICAgbWF0cml4ID0gKG1hdHJpeCA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgcm90YXRpb25zTWF0cml4IDpcbiAgICAgICAgICAgICAgICAgbXVsdGlwbHk0KHJvdGF0aW9uc01hdHJpeCwgbWF0cml4KTtcblxuICB9XG5cbiAgaWYgKHBvc2l0aW9uICE9PSBudWxsKSB7XG4gICAgY29uc3QgcG9zaXRpb25NYXRyaXggPSBwb3NpdGlvbk1hdHJpeEZyb21Qb3NpdGlvbihwb3NpdGlvbik7XG5cbiAgICBtYXRyaXggPSAobWF0cml4ID09PSBudWxsKSA/XG4gICAgICAgICAgICAgICAgcG9zaXRpb25NYXRyaXggOlxuICAgICAgICAgICAgICAgICAgbXVsdGlwbHk0KHBvc2l0aW9uTWF0cml4LCBtYXRyaXgpO1xuICB9XG5cbiAgY29uc3QgdHJhbnNmb3JtID0gKG1hdHJpeCA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgICAgICh2ZWN0b3IpID0+IHZlY3RvciA6XG4gICAgICAgICAgICAgICAgICAgICAgICAodmVjdG9yKSA9PiB0cmFuc2Zvcm00KFsgLi4udmVjdG9yLCAxIF0sIG1hdHJpeCkuc2xpY2UoMCwgMyk7XG5cbiAgcmV0dXJuIHRyYW5zZm9ybTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29tcG9zZVRyYW5zZm9ybVxufTtcbiJdfQ==