'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var constants = require('../constants'),
    vectorMaths = require('../maths/vector'),
    matrixMaths = require('../maths/matrix'),
    arrayUtilities = require('../utilities/array');

var DEGREES_TO_RADIANS = constants.DEGREES_TO_RADIANS,
    transform4 = vectorMaths.transform4,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    identity4 = matrixMaths.identity4,
    scale4 = matrixMaths.scale4,
    rotate4 = matrixMaths.rotate4,
    translate4 = matrixMaths.translate4,
    xAxis = [1, 0, 0],
    yAxis = [0, 1, 0],
    zAxis = [0, 0, 1],
    defaultWidth = 1,
    defaultDepth = 1,
    defaultHeight = 1,
    defaultPosition = [0, 0, 0],
    defaultRotations = [0, 0, 0];


function composeTransform(width, height, depth, position, rotations) {
  var scale = composeScale(width, height, depth),
      rotate = composeRotate(rotations),
      translate = composeTranslate(position);

  return function (vector) {
    return translate(rotate(scale(vector)));
  };
}

module.exports = module.exports = {
  composeTransform: composeTransform
};

function compose(matrix) {
  return function (vector) {
    return transform4([].concat(_toConsumableArray(vector), [1]), matrix).slice(0, 3);
  };
}

function composeScale() {
  var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultWidth;
  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultHeight;
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDepth;

  var matrix = identity4();

  matrix = scale4(matrix, [width, height, depth]);

  return compose(matrix);
}

function composeRotate() {
  var rotations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultRotations;

  var firstRotation = first(rotations),
      secondRotation = second(rotations),
      thirdRotation = third(rotations),
      xAngle = firstRotation * DEGREES_TO_RADIANS,
      ///
  yAngle = secondRotation * DEGREES_TO_RADIANS,
      ///
  zAngle = thirdRotation * DEGREES_TO_RADIANS; ///

  var matrix = identity4();

  matrix = rotate4(matrix, xAngle, xAxis);
  matrix = rotate4(matrix, yAngle, yAxis);
  matrix = rotate4(matrix, zAngle, zAxis);

  return compose(matrix);
}

function composeTranslate() {
  var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPosition;

  var matrix = identity4();

  matrix = translate4(matrix, position);

  return compose(matrix);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdHJhbnNmb3JtLmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJ2ZWN0b3JNYXRocyIsIm1hdHJpeE1hdGhzIiwiYXJyYXlVdGlsaXRpZXMiLCJERUdSRUVTX1RPX1JBRElBTlMiLCJ0cmFuc2Zvcm00IiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsImlkZW50aXR5NCIsInNjYWxlNCIsInJvdGF0ZTQiLCJ0cmFuc2xhdGU0IiwieEF4aXMiLCJ5QXhpcyIsInpBeGlzIiwiZGVmYXVsdFdpZHRoIiwiZGVmYXVsdERlcHRoIiwiZGVmYXVsdEhlaWdodCIsImRlZmF1bHRQb3NpdGlvbiIsImRlZmF1bHRSb3RhdGlvbnMiLCJjb21wb3NlVHJhbnNmb3JtIiwid2lkdGgiLCJoZWlnaHQiLCJkZXB0aCIsInBvc2l0aW9uIiwicm90YXRpb25zIiwic2NhbGUiLCJjb21wb3NlU2NhbGUiLCJyb3RhdGUiLCJjb21wb3NlUm90YXRlIiwidHJhbnNsYXRlIiwiY29tcG9zZVRyYW5zbGF0ZSIsInZlY3RvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb21wb3NlIiwibWF0cml4Iiwic2xpY2UiLCJmaXJzdFJvdGF0aW9uIiwic2Vjb25kUm90YXRpb24iLCJ0aGlyZFJvdGF0aW9uIiwieEFuZ2xlIiwieUFuZ2xlIiwiekFuZ2xlIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQU1BLFlBQVlDLFFBQVEsY0FBUixDQUFsQjtBQUFBLElBQ01DLGNBQWNELFFBQVEsaUJBQVIsQ0FEcEI7QUFBQSxJQUVNRSxjQUFjRixRQUFRLGlCQUFSLENBRnBCO0FBQUEsSUFHTUcsaUJBQWlCSCxRQUFRLG9CQUFSLENBSHZCOztBQUtNLElBQUVJLGtCQUFGLEdBQXlCTCxTQUF6QixDQUFFSyxrQkFBRjtBQUFBLElBQ0VDLFVBREYsR0FDaUJKLFdBRGpCLENBQ0VJLFVBREY7QUFBQSxJQUVFQyxLQUZGLEdBRTJCSCxjQUYzQixDQUVFRyxL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LEtBQXhCLENBQVQ7QUFDQXdCLFdBQVMxQixRQUFRMEIsTUFBUixFQUFnQk0sTUFBaEIsRUFBd0I3QixLQUF4QixDQUFUO0FBQ0F1QixXQUFTMUIsUUFBUTBCLE1BQVIsRUFBZ0JPLE1BQWhCLEVBQXdCN0IsS0FBeEIsQ0FBVDs7QUFFQSxTQUFPcUIsUUFBUUMsTUFBUixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0wsZ0JBQVQsR0FBc0Q7QUFBQSxNQUE1QlAsUUFBNEIsdUVBQWpCTixlQUFpQjs7QUFDcEQsTUFBSWtCLFNBQVM1QixXQUFiOztBQUVBNEIsV0FBU3pCLFdBQVd5QixNQUFYLEVBQW1CWixRQUFuQixDQUFUOztBQUVBLFNBQU9XLFFBQVFDLE1BQVIsQ0FBUDtBQUNEIiwiZmlsZSI6InRyYW5zZm9ybS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vY29uc3RhbnRzJyksXG4gICAgICB2ZWN0b3JNYXRocyA9IHJlcXVpcmUoJy4uL21hdGhzL3ZlY3RvcicpLFxuICAgICAgbWF0cml4TWF0aHMgPSByZXF1aXJlKCcuLi9tYXRocy9tYXRyaXgnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5Jyk7XG5cbmNvbnN0IHsgREVHUkVFU19UT19SQURJQU5TIH0gPSBjb25zdGFudHMsXG4gICAgICB7IHRyYW5zZm9ybTQgfSA9IHZlY3Rvck1hdGhzLFxuICAgICAgeyBmaXJzdCwgc2Vjb25kLCB0aGlyZCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGlkZW50aXR5NCwgc2NhbGU0LCByb3RhdGU0LCB0cmFuc2xhdGU0IH0gPSBtYXRyaXhNYXRocyxcbiAgICAgIHhBeGlzID0gWyAxLCAwLCAwIF0sXG4gICAgICB5QXhpcyA9IFsgMCwgMSwgMCBdLFxuICAgICAgekF4aXMgPSBbIDAsIDAsIDEgXSxcbiAgICAgIGRlZmF1bHRXaWR0aCA9IDEsXG4gICAgICBkZWZhdWx0RGVwdGggPSAxLFxuICAgICAgZGVmYXVsdEhlaWdodCA9IDEsXG4gICAgICBkZWZhdWx0UG9zaXRpb24gPSBbIDAsIDAsIDAgXSxcbiAgICAgIGRlZmF1bHRSb3RhdGlvbnMgPSBbIDAsIDAsIDAgXTtcblxuZnVuY3Rpb24gY29tcG9zZVRyYW5zZm9ybSh3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgcG9zaXRpb24sIHJvdGF0aW9ucykge1xuICBjb25zdCBzY2FsZSA9IGNvbXBvc2VTY2FsZSh3aWR0aCwgaGVpZ2h0LCBkZXB0aCksXG4gICAgICAgIHJvdGF0ZSA9IGNvbXBvc2VSb3RhdGUocm90YXRpb25zKSxcbiAgICAgICAgdHJhbnNsYXRlID0gY29tcG9zZVRyYW5zbGF0ZShwb3NpdGlvbik7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHZlY3Rvcikge1xuICAgIHJldHVybiB0cmFuc2xhdGUocm90YXRlKHNjYWxlKHZlY3RvcikpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29tcG9zZVRyYW5zZm9ybTogY29tcG9zZVRyYW5zZm9ybVxufTtcblxuZnVuY3Rpb24gY29tcG9zZShtYXRyaXgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZlY3Rvcikge1xuICAgIHJldHVybiB0cmFuc2Zvcm00KFsuLi52ZWN0b3IsIDFdLCBtYXRyaXgpLnNsaWNlKDAsIDMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb21wb3NlU2NhbGUod2lkdGggPSBkZWZhdWx0V2lkdGgsIGhlaWdodCA9IGRlZmF1bHRIZWlnaHQsIGRlcHRoID0gZGVmYXVsdERlcHRoKSB7XG4gIGxldCBtYXRyaXggPSBpZGVudGl0eTQoKTtcblxuICBtYXRyaXggPSBzY2FsZTQobWF0cml4LCBbIHdpZHRoLCBoZWlnaHQsIGRlcHRoIF0pO1xuXG4gIHJldHVybiBjb21wb3NlKG1hdHJpeCk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VSb3RhdGUocm90YXRpb25zID0gZGVmYXVsdFJvdGF0aW9ucykge1xuICBjb25zdCBmaXJzdFJvdGF0aW9uID0gZmlyc3Qocm90YXRpb25zKSxcbiAgICAgICAgc2Vjb25kUm90YXRpb24gPSBzZWNvbmQocm90YXRpb25zKSxcbiAgICAgICAgdGhpcmRSb3RhdGlvbiA9IHRoaXJkKHJvdGF0aW9ucyksXG4gICAgICAgIHhBbmdsZSA9IGZpcnN0Um90YXRpb24gKiBERUdSRUVTX1RPX1JBRElBTlMsICAvLy9cbiAgICAgICAgeUFuZ2xlID0gc2Vjb25kUm90YXRpb24gKiBERUdSRUVTX1RPX1JBRElBTlMsIC8vL1xuICAgICAgICB6QW5nbGUgPSB0aGlyZFJvdGF0aW9uICogREVHUkVFU19UT19SQURJQU5TOyAgLy8vXG5cbiAgbGV0IG1hdHJpeCA9IGlkZW50aXR5NCgpO1xuXG4gIG1hdHJpeCA9IHJvdGF0ZTQobWF0cml4LCB4QW5nbGUsIHhBeGlzKTtcbiAgbWF0cml4ID0gcm90YXRlNChtYXRyaXgsIHlBbmdsZSwgeUF4aXMpO1xuICBtYXRyaXggPSByb3RhdGU0KG1hdHJpeCwgekFuZ2xlLCB6QXhpcyk7XG5cbiAgcmV0dXJuIGNvbXBvc2UobWF0cml4KTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZVRyYW5zbGF0ZShwb3NpdGlvbiA9IGRlZmF1bHRQb3NpdGlvbikge1xuICBsZXQgbWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgbWF0cml4ID0gdHJhbnNsYXRlNChtYXRyaXgsIHBvc2l0aW9uKTtcblxuICByZXR1cm4gY29tcG9zZShtYXRyaXgpO1xufVxuIl19