'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var mat4 = require('../maths/mat4'),
    vec4 = require('../maths/vec4'),
    constants = require('../constants'),
    arrayUtilities = require('../utilities/array');

var DEGREES_TO_RADIANS = constants.DEGREES_TO_RADIANS,
    create = mat4.create,
    translate = mat4.translate,
    scale = mat4.scale,
    rotate = mat4.rotate,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    transform = vec4.transform,
    defaultWidth = 1,
    defaultDepth = 1,
    defaultHeight = 1,
    xAxis = [1, 0, 0],
    yAxis = [0, 1, 0],
    zAxis = [0, 0, 1],
    defaultOffset = [0, 0, 0],
    defaultRotations = [0, 0, 0];


function composeScaleRotateTranslate(width, height, depth, offset, rotations) {
  var scale = composeScale(width, height, depth),
      rotate = composeRotate(rotations),
      translate = composeTranslate(offset);

  return function (vec) {
    return translate(rotate(scale(vec)));
  };
}

function composeTranslate() {
  var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOffset;

  var mat4 = create();

  translate(mat4, mat4, offset);

  return composeTransform(mat4);
}

function composeScale() {
  var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultWidth;
  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultHeight;
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDepth;

  var mat4 = create();

  scale(mat4, mat4, [width, height, depth]);

  return composeTransform(mat4);
}

function composeRotate() {
  var rotations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultRotations;

  var mat4 = create(),
      firstRotation = first(rotations),
      secondRotation = second(rotations),
      thirdRotation = third(rotations),
      xAngle = firstRotation * DEGREES_TO_RADIANS,
      ///
  yAngle = secondRotation * DEGREES_TO_RADIANS,
      ///
  zAngle = thirdRotation * DEGREES_TO_RADIANS; ///

  rotate(mat4, mat4, xAngle, xAxis);
  rotate(mat4, mat4, yAngle, yAxis);
  rotate(mat4, mat4, zAngle, zAxis);

  return composeTransform(mat4);
}

module.exports = module.exports = {
  composeScaleRotateTranslate: composeScaleRotateTranslate,
  composeScale: composeScale,
  composeRotate: composeRotate,
  composeTranslate: composeTranslate
};

function composeTransform(mat4) {
  return function (vec) {
    return transform([].concat(_toConsumableArray(vec), [1]), mat4).slice(0, 3);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdHJhbnNmb3JtLmpzIl0sIm5hbWVzIjpbIm1hdDQiLCJyZXF1aXJlIiwidmVjNCIsImNvbnN0YW50cyIsImFycmF5VXRpbGl0aWVzIiwiREVHUkVFU19UT19SQURJQU5TIiwiY3JlYXRlIiwidHJhbnNsYXRlIiwic2NhbGUiLCJyb3RhdGUiLCJmaXJzdCIsInNlY29uZCIsInRoaXJkIiwidHJhbnNmb3JtIiwiZGVmYXVsdFdpZHRoIiwiZGVmYXVsdERlcHRoIiwiZGVmYXVsdEhlaWdodCIsInhBeGlzIiwieUF4aXMiLCJ6QXhpcyIsImRlZmF1bHRPZmZzZXQiLCJkZWZhdWx0Um90YXRpb25zIiwiY29tcG9zZVNjYWxlUm90YXRlVHJhbnNsYXRlIiwid2lkdGgiLCJoZWlnaHQiLCJkZXB0aCIsIm9mZnNldCIsInJvdGF0aW9ucyIsImNvbXBvc2VTY2FsZSIsImNvbXBvc2VSb3RhdGUiLCJjb21wb3NlVHJhbnNsYXRlIiwidmVjIiwiY29tcG9zZVRyYW5zZm9ybSIsImZpcnN0Um90YXRpb24iLCJzZWNvbmRSb3RhdGlvbiIsInRoaXJkUm90YXRpb24iLCJ4QW5nbGUiLCJ5QW5nbGUiLCJ6QW5nbGUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2xpY2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxlQUFSLENBQWI7QUFBQSxJQUNNQyxPQUFPRCxRQUFRLGVBQVIsQ0FEYjtBQUFBLElBRU1FLFlBQVlGLFFBQVEsY0FBUixDQUZsQjtBQUFBLElBR01HLGlCQUFpQkgsUUFBUSxvQkFBUixDQUh2Qjs7QUFLTSxJQUFFSSxrQkFBRixHQUF5QkYsU0FBekIsQ0FBRUUsa0JBQUY7QUFBQSxJQUNFQyxNQURGLEdBQ3VDTixJQUR2QyxDQUNFTSxNQURGO0FBQUEsSUFDVUMsU0FEVixHQUN1Q1AsSUFEdkMsQ0FDVU8sU0FEVjtBQUFBLElBQ3FCQyxLQURyQixHQUN1Q1IsSUFEdkMsQ0FDcUJRLEtBRHJCO0FB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O0FBRUEsU0FBT2EsaUJBQWlCaEMsSUFBakIsQ0FBUDtBQUNEOztBQUVEdUMsT0FBT0MsT0FBUCxHQUFpQkQsT0FBT0MsT0FBUCxHQUFpQjtBQUNoQ2xCLCtCQUE2QkEsMkJBREc7QUFFaENNLGdCQUFjQSxZQUZrQjtBQUdoQ0MsaUJBQWVBLGFBSGlCO0FBSWhDQyxvQkFBa0JBO0FBSmMsQ0FBbEM7O0FBT0EsU0FBU0UsZ0JBQVQsQ0FBMEJoQyxJQUExQixFQUFnQztBQUM5QixTQUFPLFVBQVMrQixHQUFULEVBQWM7QUFDbkIsV0FBT2xCLHVDQUFja0IsR0FBZCxJQUFtQixDQUFuQixJQUF1Qi9CLElBQXZCLEVBQTZCeUMsS0FBN0IsQ0FBbUMsQ0FBbkMsRUFBc0MsQ0FBdEMsQ0FBUDtBQUNELEdBRkQ7QUFHRCIsImZpbGUiOiJ0cmFuc2Zvcm0uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG1hdDQgPSByZXF1aXJlKCcuLi9tYXRocy9tYXQ0JyksXG4gICAgICB2ZWM0ID0gcmVxdWlyZSgnLi4vbWF0aHMvdmVjNCcpLFxuICAgICAgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vY29uc3RhbnRzJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpO1xuXG5jb25zdCB7IERFR1JFRVNfVE9fUkFESUFOUyB9ID0gY29uc3RhbnRzLFxuICAgICAgeyBjcmVhdGUsIHRyYW5zbGF0ZSwgc2NhbGUsIHJvdGF0ZSB9ID0gbWF0NCxcbiAgICAgIHsgZmlyc3QsIHNlY29uZCwgdGhpcmQgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyB0cmFuc2Zvcm0gfSA9IHZlYzQsXG4gICAgICBkZWZhdWx0V2lkdGggPSAxLFxuICAgICAgZGVmYXVsdERlcHRoID0gMSxcbiAgICAgIGRlZmF1bHRIZWlnaHQgPSAxLFxuICAgICAgeEF4aXMgPSBbIDEsIDAsIDAgXSxcbiAgICAgIHlBeGlzID0gWyAwLCAxLCAwIF0sXG4gICAgICB6QXhpcyA9IFsgMCwgMCwgMSBdLFxuICAgICAgZGVmYXVsdE9mZnNldCA9IFsgMCwgMCwgMCBdLFxuICAgICAgZGVmYXVsdFJvdGF0aW9ucyA9IFsgMCwgMCwgMCBdO1xuXG5mdW5jdGlvbiBjb21wb3NlU2NhbGVSb3RhdGVUcmFuc2xhdGUod2lkdGgsIGhlaWdodCwgZGVwdGgsIG9mZnNldCwgcm90YXRpb25zKSB7XG4gIGNvbnN0IHNjYWxlID0gY29tcG9zZVNjYWxlKHdpZHRoLCBoZWlnaHQsIGRlcHRoKSxcbiAgICAgICAgcm90YXRlID0gY29tcG9zZVJvdGF0ZShyb3RhdGlvbnMpLFxuICAgICAgICB0cmFuc2xhdGUgPSBjb21wb3NlVHJhbnNsYXRlKG9mZnNldCk7XG4gIFxuICByZXR1cm4gZnVuY3Rpb24odmVjKSB7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZShyb3RhdGUoc2NhbGUodmVjKSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VUcmFuc2xhdGUob2Zmc2V0ID0gZGVmYXVsdE9mZnNldCkge1xuICBjb25zdCBtYXQ0ID0gY3JlYXRlKCk7XG5cbiAgdHJhbnNsYXRlKG1hdDQsIG1hdDQsIG9mZnNldCk7XG5cbiAgcmV0dXJuIGNvbXBvc2VUcmFuc2Zvcm0obWF0NCk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VTY2FsZSh3aWR0aCA9IGRlZmF1bHRXaWR0aCwgaGVpZ2h0ID0gZGVmYXVsdEhlaWdodCwgZGVwdGggPSBkZWZhdWx0RGVwdGgpIHtcbiAgY29uc3QgbWF0NCA9IGNyZWF0ZSgpO1xuXG4gIHNjYWxlKG1hdDQsIG1hdDQsIFt3aWR0aCwgaGVpZ2h0LCBkZXB0aF0pO1xuXG4gIHJldHVybiBjb21wb3NlVHJhbnNmb3JtKG1hdDQpO1xufVxuXG5mdW5jdGlvbiBjb21wb3NlUm90YXRlKHJvdGF0aW9ucyA9IGRlZmF1bHRSb3RhdGlvbnMpIHtcbiAgY29uc3QgbWF0NCA9IGNyZWF0ZSgpLFxuICAgICAgICBmaXJzdFJvdGF0aW9uID0gZmlyc3Qocm90YXRpb25zKSxcbiAgICAgICAgc2Vjb25kUm90YXRpb24gPSBzZWNvbmQocm90YXRpb25zKSxcbiAgICAgICAgdGhpcmRSb3RhdGlvbiA9IHRoaXJkKHJvdGF0aW9ucyksXG4gICAgICAgIHhBbmdsZSA9IGZpcnN0Um90YXRpb24gKiBERUdSRUVTX1RPX1JBRElBTlMsICAvLy9cbiAgICAgICAgeUFuZ2xlID0gc2Vjb25kUm90YXRpb24gKiBERUdSRUVTX1RPX1JBRElBTlMsIC8vL1xuICAgICAgICB6QW5nbGUgPSB0aGlyZFJvdGF0aW9uICogREVHUkVFU19UT19SQURJQU5TOyAgLy8vXG5cbiAgcm90YXRlKG1hdDQsIG1hdDQsIHhBbmdsZSwgeEF4aXMpO1xuICByb3RhdGUobWF0NCwgbWF0NCwgeUFuZ2xlLCB5QXhpcyk7XG4gIHJvdGF0ZShtYXQ0LCBtYXQ0LCB6QW5nbGUsIHpBeGlzKTtcblxuICByZXR1cm4gY29tcG9zZVRyYW5zZm9ybShtYXQ0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29tcG9zZVNjYWxlUm90YXRlVHJhbnNsYXRlOiBjb21wb3NlU2NhbGVSb3RhdGVUcmFuc2xhdGUsXG4gIGNvbXBvc2VTY2FsZTogY29tcG9zZVNjYWxlLFxuICBjb21wb3NlUm90YXRlOiBjb21wb3NlUm90YXRlLFxuICBjb21wb3NlVHJhbnNsYXRlOiBjb21wb3NlVHJhbnNsYXRlXG59O1xuXG5mdW5jdGlvbiBjb21wb3NlVHJhbnNmb3JtKG1hdDQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZlYykge1xuICAgIHJldHVybiB0cmFuc2Zvcm0oWy4uLnZlYywgMV0sIG1hdDQpLnNsaWNlKDAsIDMpO1xuICB9O1xufVxuIl19