'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var constants = require('../constants'),
    vectorMaths = require('../maths/vector'),
    matrixMaths = require('../maths/matrix');

var transform4 = vectorMaths.transform4,
    DEGREES_TO_RADIANS = constants.DEGREES_TO_RADIANS,
    identity4 = matrixMaths.identity4,
    scale4 = matrixMaths.scale4,
    rotate4 = matrixMaths.rotate4,
    translate4 = matrixMaths.translate4;


var xAxis = [1, 0, 0],
    yAxis = [0, 1, 0],
    zAxis = [0, 0, 1],
    defaultSize = [1, 1, 1],
    defaultPosition = [0, 0, 0],
    defaultRotations = [0, 0, 0];

function composeTransform(size, position, rotations) {
  var scale = composeScale(size),
      rotate = composeRotate(rotations),
      translate = composeTranslate(position);

  return function (vector) {
    return translate(rotate(scale(vector)));
  };
}

module.exports = module.exports = {
  composeTransform: composeTransform
};

function compose(matrix) {
  return function (vector) {
    return transform4([].concat(_toConsumableArray(vector), [1]), matrix).slice(0, 3);
  };
}

function composeScale() {
  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;

  var matrix = identity4();

  matrix = scale4(matrix, size);

  return compose(matrix);
}

function composeRotate() {
  var rotations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultRotations;

  var matrix = identity4();

  var xAngle = rotations[0] * DEGREES_TO_RADIANS,
      ///
  yAngle = rotations[1] * DEGREES_TO_RADIANS,
      ///
  zAngle = rotations[2] * DEGREES_TO_RADIANS; ///

  matrix = rotate4(matrix, xAngle, xAxis);
  matrix = rotate4(matrix, yAngle, yAxis);
  matrix = rotate4(matrix, zAngle, zAxis);

  return compose(matrix);
}

function composeTranslate() {
  var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPosition;

  var matrix = identity4();

  matrix = translate4(matrix, position);

  return compose(matrix);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdHJhbnNmb3JtLmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJ2ZWN0b3JNYXRocyIsIm1hdHJpeE1hdGhzIiwidHJhbnNmb3JtNCIsIkRFR1JFRVNfVE9fUkFESUFOUyIsImlkZW50aXR5NCIsInNjYWxlNCIsInJvdGF0ZTQiLCJ0cmFuc2xhdGU0IiwieEF4aXMiLCJ5QXhpcyIsInpBeGlzIiwiZGVmYXVsdFNpemUiLCJkZWZhdWx0UG9zaXRpb24iLCJkZWZhdWx0Um90YXRpb25zIiwiY29tcG9zZVRyYW5zZm9ybSIsInNpemUiLCJwb3NpdGlvbiIsInJvdGF0aW9ucyIsInNjYWxlIiwiY29tcG9zZVNjYWxlIiwicm90YXRlIiwiY29tcG9zZVJvdGF0ZSIsInRyYW5zbGF0ZSIsImNvbXBvc2VUcmFuc2xhdGUiLCJ2ZWN0b3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29tcG9zZSIsIm1hdHJpeCIsInNsaWNlIiwieEFuZ2xlIiwieUFuZ2xlIiwiekFuZ2xlIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQU1BLFlBQVlDLFFBQVEsY0FBUixDQUFsQjtBQUFBLElBQ01DLGNBQWNELFFBQVEsaUJBQVIsQ0FEcEI7QUFBQSxJQUVNRSxjQUFjRixRQUFRLGlCQUFSLENBRnBCOztBQUlNLElBQUVHLFVBQUYsR0FBaUJGLFdBQWpCLENBQUVFLFVBQUY7QUFBQSxJQUNFQyxrQkFERixHQUN5QkwsU0FEekIsQ0FDRUssa0JBREY7QUFBQSxJQUVFQyxTQUZGLEdBRTZDSCxXQUY3QyxDQUVFRyxTQUZGO0FBQUEsSUFFYUMsTUFGYixHQUU2Q0osV0FGN0MsQ0FFYUksTUFGYjtBQUFBLElBRXFCQyxPQUZyQixHQUU2Q0wsV0FGN0MsQ0FFcUJLLE9BRnJCO0FBQUEsSUFFOEJDLFVBRjlCLEdBRTZDTixXQUY3QyxDQUU4Qk0sVUFGOUI7OztBQUlOLElBQU1DLFFBQVEsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FBZDtBQUFBLElBQ01DLFFBQVEsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FEZDtBQUFBLElBRU1DLFFBQVEsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FGZDtBQUFBLElBR01DLGNBQWMsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FIcEI7QUFBQSxJQUlNQyxrQkFBa0IsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FKeEI7QUFBQSxJQUtNQyxtQkFBbUIsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FMekI7O0FBT0EsU0FBU0MsZ0JBQVQsQ0FBMEJDLElBQTFCLEVBQWdDQyxRQUFoQyxFQUEwQ0MsU0FBMUMsRUFBcUQ7QUFDbkQsTUFBTUMsUUFBUUMsYUFBYUosSUFBYixDQUFkO0FBQUEsTUFDTUssU0FBU0MsY0FBY0osU0FBZCxDQURmO0FBQUEsTUFFTUssWUFBWUMsaUJBQWlCUCxRQUFqQixDQUZsQjs7QUFJQSxTQUFPLFVBQUNRLE1BQUQ7QUFBQSxXQUFZRixVQUFVRixPQUFPRixNQUFNTSxNQUFOLENBQVAsQ0FBVixDQUFaO0FBQUEsR0FBUDtBQUNEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCRCxPQUFPQyxPQUFQLEdBQWlCO0FBQ2hDWjtBQURnQyxDQUFsQzs7QUFJQSxTQUFTYSxPQUFULENBQWlCQyxNQUFqQixFQUF5QjtBQUN2QixTQUFPLFVBQUNKLE1BQUQ7QUFBQSxXQUFZdEIsd0NBQWVzQixNQUFmLElBQXVCLENBQXZCLElBQTJCSSxNQUEzQixFQUFtQ0MsS0FBbkMsQ0FBeUMsQ0FBekMsRUFBNEMsQ0FBNUMsQ0FBWjtBQUFBLEdBQVA7QUFDRDs7QUFFRCxTQUFTVixZQUFULEdBQTBDO0FBQUEsTUFBcEJKLElBQW9CLHVFQUFiSixXQUFhOztBQUN4QyxNQUFJaUIsU0FBU3hCLFdBQWI7O0FBRUF3QixXQUFTdkIsT0FBT3VCLE1BQVAsRUFBZWIsSUFBZixDQUFUOztBQUVBLFNBQU9ZLFFBQVFDLE1BQVIsQ0FBUDtBQUNEOztBQUVELFNBQVNQLGFBQVQsR0FBcUQ7QUFBQSxNQUE5QkosU0FBOEIsdUVBQWxCSixnQkFBa0I7O0FBQ25ELE1BQUllLFNBQVN4QixXQUFiOztBQUVBLE1BQU0wQixTQUFTYixVQUFXLENBQVgsSUFBaUJkLGtCQUFoQztBQUFBLE1BQW9EO0FBQzlDNEIsV0FBU2QsVUFBVyxDQUFYLElBQWlCZCxrQkFEaEM7QUFBQSxNQUNvRDtBQUM5QzZCLFdBQVNmLFVBQVcsQ0FBWCxJQUFpQmQsa0JBRmhDLENBSG1ELENBS0M7O0FBRXBEeUIsV0FBU3RCLFFBQVFzQixNQUFSLEVBQWdCRSxNQUFoQixFQUF3QnRCLEtBQXhCLENBQVQ7QUFDQW9CLFdBQVN0QixRQUFRc0IsTUFBUixFQUFnQkcsTUFBaEIsRUFBd0J0QixLQUF4QixDQUFUO0FBQ0FtQixXQUFTdEIsUUFBUXNCLE1BQVIsRUFBZ0JJLE1BQWhCLEVBQXdCdEIsS0FBeEIsQ0FBVDs7QUFFQSxTQUFPaUIsUUFBUUMsTUFBUixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0wsZ0JBQVQsR0FBc0Q7QUFBQSxNQUE1QlAsUUFBNEIsdUVBQWpCSixlQUFpQjs7QUFDcEQsTUFBSWdCLFNBQVN4QixXQUFiOztBQUVBd0IsV0FBU3JCLFdBQVdxQixNQUFYLEVBQW1CWixRQUFuQixDQUFUOztBQUVBLFNBQU9XLFFBQVFDLE1BQVIsQ0FBUDtBQUNEIiwiZmlsZSI6InRyYW5zZm9ybS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vY29uc3RhbnRzJyksXG4gICAgICB2ZWN0b3JNYXRocyA9IHJlcXVpcmUoJy4uL21hdGhzL3ZlY3RvcicpLFxuICAgICAgbWF0cml4TWF0aHMgPSByZXF1aXJlKCcuLi9tYXRocy9tYXRyaXgnKTtcblxuY29uc3QgeyB0cmFuc2Zvcm00IH0gPSB2ZWN0b3JNYXRocyxcbiAgICAgIHsgREVHUkVFU19UT19SQURJQU5TIH0gPSBjb25zdGFudHMsXG4gICAgICB7IGlkZW50aXR5NCwgc2NhbGU0LCByb3RhdGU0LCB0cmFuc2xhdGU0IH0gPSBtYXRyaXhNYXRocztcblxuY29uc3QgeEF4aXMgPSBbIDEsIDAsIDAgXSxcbiAgICAgIHlBeGlzID0gWyAwLCAxLCAwIF0sXG4gICAgICB6QXhpcyA9IFsgMCwgMCwgMSBdLFxuICAgICAgZGVmYXVsdFNpemUgPSBbIDEsIDEsIDEgXSxcbiAgICAgIGRlZmF1bHRQb3NpdGlvbiA9IFsgMCwgMCwgMCBdLFxuICAgICAgZGVmYXVsdFJvdGF0aW9ucyA9IFsgMCwgMCwgMCBdO1xuXG5mdW5jdGlvbiBjb21wb3NlVHJhbnNmb3JtKHNpemUsIHBvc2l0aW9uLCByb3RhdGlvbnMpIHtcbiAgY29uc3Qgc2NhbGUgPSBjb21wb3NlU2NhbGUoc2l6ZSksXG4gICAgICAgIHJvdGF0ZSA9IGNvbXBvc2VSb3RhdGUocm90YXRpb25zKSxcbiAgICAgICAgdHJhbnNsYXRlID0gY29tcG9zZVRyYW5zbGF0ZShwb3NpdGlvbik7XG5cbiAgcmV0dXJuICh2ZWN0b3IpID0+IHRyYW5zbGF0ZShyb3RhdGUoc2NhbGUodmVjdG9yKSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBjb21wb3NlVHJhbnNmb3JtXG59O1xuXG5mdW5jdGlvbiBjb21wb3NlKG1hdHJpeCkge1xuICByZXR1cm4gKHZlY3RvcikgPT4gdHJhbnNmb3JtNChbLi4udmVjdG9yLCAxXSwgbWF0cml4KS5zbGljZSgwLCAzKTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZVNjYWxlKHNpemUgPSBkZWZhdWx0U2l6ZSkge1xuICBsZXQgbWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgbWF0cml4ID0gc2NhbGU0KG1hdHJpeCwgc2l6ZSk7XG5cbiAgcmV0dXJuIGNvbXBvc2UobWF0cml4KTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZVJvdGF0ZShyb3RhdGlvbnMgPSBkZWZhdWx0Um90YXRpb25zKSB7XG4gIGxldCBtYXRyaXggPSBpZGVudGl0eTQoKTtcblxuICBjb25zdCB4QW5nbGUgPSByb3RhdGlvbnNbIDAgXSAqIERFR1JFRVNfVE9fUkFESUFOUywgLy8vXG4gICAgICAgIHlBbmdsZSA9IHJvdGF0aW9uc1sgMSBdICogREVHUkVFU19UT19SQURJQU5TLCAvLy9cbiAgICAgICAgekFuZ2xlID0gcm90YXRpb25zWyAyIF0gKiBERUdSRUVTX1RPX1JBRElBTlM7IC8vL1xuXG4gIG1hdHJpeCA9IHJvdGF0ZTQobWF0cml4LCB4QW5nbGUsIHhBeGlzKTtcbiAgbWF0cml4ID0gcm90YXRlNChtYXRyaXgsIHlBbmdsZSwgeUF4aXMpO1xuICBtYXRyaXggPSByb3RhdGU0KG1hdHJpeCwgekFuZ2xlLCB6QXhpcyk7XG5cbiAgcmV0dXJuIGNvbXBvc2UobWF0cml4KTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZVRyYW5zbGF0ZShwb3NpdGlvbiA9IGRlZmF1bHRQb3NpdGlvbikge1xuICBsZXQgbWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgbWF0cml4ID0gdHJhbnNsYXRlNChtYXRyaXgsIHBvc2l0aW9uKTtcblxuICByZXR1cm4gY29tcG9zZShtYXRyaXgpO1xufVxuIl19