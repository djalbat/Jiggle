'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var constants = require('../constants'),
    vectorMaths = require('../maths/vector'),
    matrixMaths = require('../maths/matrix');

var transform4 = vectorMaths.transform4,
    DEGREES_TO_RADIANS = constants.DEGREES_TO_RADIANS,
    identity4 = matrixMaths.identity4,
    scale4 = matrixMaths.scale4,
    rotate4 = matrixMaths.rotate4,
    translate4 = matrixMaths.translate4,
    multiply4 = matrixMaths.multiply4;


function composeTransform(scale, position, rotations) {
  var matrix = null;

  if (scale !== null) {
    var scaleMatrix = calculateScaleMatrix(scale);

    matrix = matrix === null ? scaleMatrix : multiply4(scaleMatrix, matrix);
  }

  if (rotations !== null) {
    var rotationsMatrix = calculateRotationsMatrix(rotations);

    matrix = matrix === null ? rotationsMatrix : multiply4(rotationsMatrix, matrix);
  }

  if (position !== null) {
    var positionMatrix = calculatePositionMatrix(position);

    matrix = matrix === null ? positionMatrix : multiply4(positionMatrix, matrix);
  }

  var transform = matrix === null ? function (vector) {
    return vector;
  } : function (vector) {
    return transform4([].concat(_toConsumableArray(vector), [1]), matrix).slice(0, 3);
  };

  return transform;
}

module.exports = module.exports = {
  composeTransform: composeTransform
};

function calculateScaleMatrix(scale) {
  var scaleMatrix = identity4();

  scaleMatrix = scale4(scaleMatrix, scale);

  return scaleMatrix;
}

function calculatePositionMatrix(position) {
  var positionMatrix = identity4();

  positionMatrix = translate4(positionMatrix, position);

  return positionMatrix;
}

function calculateRotationsMatrix(rotations) {
  var rotationsMatrix = identity4();

  var xAngle = rotations[0] * DEGREES_TO_RADIANS,
      yAngle = rotations[1] * DEGREES_TO_RADIANS,
      zAngle = rotations[2] * DEGREES_TO_RADIANS,
      xAxis = [1, 0, 0],
      yAxis = [0, 1, 0],
      zAxis = [0, 0, 1];

  rotationsMatrix = rotate4(rotationsMatrix, xAngle, xAxis);
  rotationsMatrix = rotate4(rotationsMatrix, yAngle, yAxis);
  rotationsMatrix = rotate4(rotationsMatrix, zAngle, zAxis);

  return rotationsMatrix;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdHJhbnNmb3JtLmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJ2ZWN0b3JNYXRocyIsIm1hdHJpeE1hdGhzIiwidHJhbnNmb3JtNCIsIkRFR1JFRVNfVE9fUkFESUFOUyIsImlkZW50aXR5NCIsInNjYWxlNCIsInJvdGF0ZTQiLCJ0cmFuc2xhdGU0IiwibXVsdGlwbHk0IiwiY29tcG9zZVRyYW5zZm9ybSIsInNjYWxlIiwicG9zaXRpb24iLCJyb3RhdGlvbnMiLCJtYXRyaXgiLCJzY2FsZU1hdHJpeCIsImNhbGN1bGF0ZVNjYWxlTWF0cml4Iiwicm90YXRpb25zTWF0cml4IiwiY2FsY3VsYXRlUm90YXRpb25zTWF0cml4IiwicG9zaXRpb25NYXRyaXgiLCJjYWxjdWxhdGVQb3NpdGlvbk1hdHJpeCIsInRyYW5zZm9ybSIsInZlY3RvciIsInNsaWNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInhBbmdsZSIsInlBbmdsZSIsInpBbmdsZSIsInhBeGlzIiwieUF4aXMiLCJ6QXhpcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLGNBQVIsQ0FBbEI7QUFBQSxJQUNNQyxjQUFjRCxRQUFRLGlCQUFSLENBRHBCO0FBQUEsSUFFTUUsY0FBY0YsUUFBUSxpQkFBUixDQUZwQjs7QUFJTSxJQUFFRyxVQUFGLEdBQWlCRixXQUFqQixDQUFFRSxVQUFGO0FBQUEsSUFDRUMsa0JBREYsR0FDeUJMLFNBRHpCLENBQ0VLLGtCQURGO0FBQUEsSUFFRUMsU0FGRixHQUV3REgsV0FGeEQsQ0FFRUcsU0FGRjtBQUFBLElBRWFDLE1BRmIsR0FFd0RKLFdBRnhELENBRWFJLE1BRmI7QUFBQSxJQUVxQkMsT0FGckIsR0FFd0RMLFdBRnhELENBRXFCSyxPQUZyQjtBQUFBLElBRThCQyxVQUY5QixHQUV3RE4sV0FGeEQsQ0FFOEJNLFVBRjlCO0FBQUEsSUFFMENDLFNBRjFDLEdBRXdEUCxXQUZ4RCxDQUUwQ08sU0FGMUM7OztBQUlOLFNBQVNDLGdCQUFULENBQTBCQyxLQUExQixFQUFpQ0MsUUFBakMsRUFBMkNDLFNBQTNDLEVBQXNEO0FBQ3BELE1BQUlDLFNBQVMsSUFBYjs7QUFFQSxNQUFJSCxVQUFVLElBQWQsRUFBb0I7QUFDbEIsUUFBTUksY0FBY0MscUJBQXFCTCxLQUFyQixDQUFwQjs7QUFFQUcsYUFBVUEsV0FBVyxJQUFaLEdBQ0VDLFdBREYsR0FFSU4sVUFBVU0sV0FBVixFQUF1QkQsTUFBdkIsQ0FGYjtBQUdEOztBQUVELE1BQUlELGNBQWMsSUFBbEIsRUFBd0I7QUFDdEIsUUFBTUksa0JBQWtCQyx5QkFBeUJMLFNBQXpCLENBQXhCOztBQUVBQyxhQUFVQSxXQUFXLElBQVosR0FDRUcsZUFERixHQUVJUixVQUFVUSxlQUFWLEVBQTJCSCxNQUEzQixDQUZiO0FBSUQ7O0FBRUQsTUFBSUYsYUFBYSxJQUFqQixFQUF1QjtBQUNyQixRQUFNTyxpQkFBaUJDLHdCQUF3QlIsUUFBeEIsQ0FBdkI7O0FBRUFFLGFBQVVBLFdBQVcsSUFBWixHQUNHSyxjQURILEdBRUtWLFVBQVVVLGNBQVYsRUFBMEJMLE1BQTFCLENBRmQ7QUFHRDs7QUFFRCxNQUFNTyxZQUFhUCxXQUFXLElBQVosR0FDRSxVQUFDUSxNQUFEO0FBQUEsV0FBWUEsTUFBWjtBQUFBLEdBREYsR0FFSSxVQUFDQSxNQUFEO0FBQUEsV0FBWW5CLHdDQUFlbUIsTUFBZixJQUF1QixDQUF2QixJQUEyQlIsTUFBM0IsRUFBbUNTLEtBQW5DLENBQXlDLENBQXpDLEVBQTRDLENBQTVDLENBQVo7QUFBQSxHQUZ0Qjs7QUFJQSxTQUFPRixTQUFQO0FBQ0Q7O0FBRURHLE9BQU9DLE9BQVAsR0FBaUJELE9BQU9DLE9BQVAsR0FBaUI7QUFDaENmO0FBRGdDLENBQWxDOztBQUlBLFNBQVNNLG9CQUFULENBQThCTCxLQUE5QixFQUFxQztBQUNuQyxNQUFJSSxjQUFjVixXQUFsQjs7QUFFQVUsZ0JBQWNULE9BQU9TLFdBQVAsRUFBb0JKLEtBQXBCLENBQWQ7O0FBRUEsU0FBT0ksV0FBUDtBQUNEOztBQUVELFNBQVNLLHVCQUFULENBQWlDUixRQUFqQyxFQUEyQztBQUN6QyxNQUFJTyxpQkFBaUJkLFdBQXJCOztBQUVBYyxtQkFBaUJYLFdBQVdXLGNBQVgsRUFBMkJQLFFBQTNCLENBQWpCOztBQUVBLFNBQU9PLGNBQVA7QUFDRDs7QUFFRCxTQUFTRCx3QkFBVCxDQUFrQ0wsU0FBbEMsRUFBNkM7QUFDM0MsTUFBSUksa0JBQWtCWixXQUF0Qjs7QUFFQSxNQUFNcUIsU0FBU2IsVUFBVyxDQUFYLElBQWlCVCxrQkFBaEM7QUFBQSxNQUNNdUIsU0FBU2QsVUFBVyxDQUFYLElBQWlCVCxrQkFEaEM7QUFBQSxNQUVNd0IsU0FBU2YsVUFBVyxDQUFYLElBQWlCVCxrQkFGaEM7QUFBQSxNQUlNeUIsUUFBUSxDQUFFLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixDQUpkO0FBQUEsTUFLTUMsUUFBUSxDQUFFLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixDQUxkO0FBQUEsTUFNTUMsUUFBUSxDQUFFLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixDQU5kOztBQVFBZCxvQkFBa0JWLFFBQVFVLGVBQVIsRUFBeUJTLE1BQXpCLEVBQWlDRyxLQUFqQyxDQUFsQjtBQUNBWixvQkFBa0JWLFFBQVFVLGVBQVIsRUFBeUJVLE1BQXpCLEVBQWlDRyxLQUFqQyxDQUFsQjtBQUNBYixvQkFBa0JWLFFBQVFVLGVBQVIsRUFBeUJXLE1BQXpCLEVBQWlDRyxLQUFqQyxDQUFsQjs7QUFFQSxTQUFPZCxlQUFQO0FBQ0QiLCJmaWxlIjoidHJhbnNmb3JtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIHZlY3Rvck1hdGhzID0gcmVxdWlyZSgnLi4vbWF0aHMvdmVjdG9yJyksXG4gICAgICBtYXRyaXhNYXRocyA9IHJlcXVpcmUoJy4uL21hdGhzL21hdHJpeCcpO1xuXG5jb25zdCB7IHRyYW5zZm9ybTQgfSA9IHZlY3Rvck1hdGhzLFxuICAgICAgeyBERUdSRUVTX1RPX1JBRElBTlMgfSA9IGNvbnN0YW50cyxcbiAgICAgIHsgaWRlbnRpdHk0LCBzY2FsZTQsIHJvdGF0ZTQsIHRyYW5zbGF0ZTQsIG11bHRpcGx5NCB9ID0gbWF0cml4TWF0aHM7XG5cbmZ1bmN0aW9uIGNvbXBvc2VUcmFuc2Zvcm0oc2NhbGUsIHBvc2l0aW9uLCByb3RhdGlvbnMpIHtcbiAgbGV0IG1hdHJpeCA9IG51bGw7XG5cbiAgaWYgKHNjYWxlICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc2NhbGVNYXRyaXggPSBjYWxjdWxhdGVTY2FsZU1hdHJpeChzY2FsZSk7XG5cbiAgICBtYXRyaXggPSAobWF0cml4ID09PSBudWxsKSA/XG4gICAgICAgICAgICAgICBzY2FsZU1hdHJpeCA6XG4gICAgICAgICAgICAgICAgIG11bHRpcGx5NChzY2FsZU1hdHJpeCwgbWF0cml4KTtcbiAgfVxuXG4gIGlmIChyb3RhdGlvbnMgIT09IG51bGwpIHtcbiAgICBjb25zdCByb3RhdGlvbnNNYXRyaXggPSBjYWxjdWxhdGVSb3RhdGlvbnNNYXRyaXgocm90YXRpb25zKTtcblxuICAgIG1hdHJpeCA9IChtYXRyaXggPT09IG51bGwpID9cbiAgICAgICAgICAgICAgIHJvdGF0aW9uc01hdHJpeCA6XG4gICAgICAgICAgICAgICAgIG11bHRpcGx5NChyb3RhdGlvbnNNYXRyaXgsIG1hdHJpeCk7XG5cbiAgfVxuXG4gIGlmIChwb3NpdGlvbiAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHBvc2l0aW9uTWF0cml4ID0gY2FsY3VsYXRlUG9zaXRpb25NYXRyaXgocG9zaXRpb24pO1xuXG4gICAgbWF0cml4ID0gKG1hdHJpeCA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uTWF0cml4IDpcbiAgICAgICAgICAgICAgICAgIG11bHRpcGx5NChwb3NpdGlvbk1hdHJpeCwgbWF0cml4KTtcbiAgfVxuXG4gIGNvbnN0IHRyYW5zZm9ybSA9IChtYXRyaXggPT09IG51bGwpID9cbiAgICAgICAgICAgICAgICAgICAgICAodmVjdG9yKSA9PiB2ZWN0b3IgOlxuICAgICAgICAgICAgICAgICAgICAgICAgKHZlY3RvcikgPT4gdHJhbnNmb3JtNChbLi4udmVjdG9yLCAxXSwgbWF0cml4KS5zbGljZSgwLCAzKTtcblxuICByZXR1cm4gdHJhbnNmb3JtO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBjb21wb3NlVHJhbnNmb3JtXG59O1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVTY2FsZU1hdHJpeChzY2FsZSkge1xuICBsZXQgc2NhbGVNYXRyaXggPSBpZGVudGl0eTQoKTtcblxuICBzY2FsZU1hdHJpeCA9IHNjYWxlNChzY2FsZU1hdHJpeCwgc2NhbGUpO1xuXG4gIHJldHVybiBzY2FsZU1hdHJpeDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlUG9zaXRpb25NYXRyaXgocG9zaXRpb24pIHtcbiAgbGV0IHBvc2l0aW9uTWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgcG9zaXRpb25NYXRyaXggPSB0cmFuc2xhdGU0KHBvc2l0aW9uTWF0cml4LCBwb3NpdGlvbik7XG5cbiAgcmV0dXJuIHBvc2l0aW9uTWF0cml4O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVSb3RhdGlvbnNNYXRyaXgocm90YXRpb25zKSB7XG4gIGxldCByb3RhdGlvbnNNYXRyaXggPSBpZGVudGl0eTQoKTtcblxuICBjb25zdCB4QW5nbGUgPSByb3RhdGlvbnNbIDAgXSAqIERFR1JFRVNfVE9fUkFESUFOUyxcbiAgICAgICAgeUFuZ2xlID0gcm90YXRpb25zWyAxIF0gKiBERUdSRUVTX1RPX1JBRElBTlMsXG4gICAgICAgIHpBbmdsZSA9IHJvdGF0aW9uc1sgMiBdICogREVHUkVFU19UT19SQURJQU5TLFxuXG4gICAgICAgIHhBeGlzID0gWyAxLCAwLCAwIF0sXG4gICAgICAgIHlBeGlzID0gWyAwLCAxLCAwIF0sXG4gICAgICAgIHpBeGlzID0gWyAwLCAwLCAxIF07XG5cbiAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHhBbmdsZSwgeEF4aXMpO1xuICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgeUFuZ2xlLCB5QXhpcyk7XG4gIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB6QW5nbGUsIHpBeGlzKTtcblxuICByZXR1cm4gcm90YXRpb25zTWF0cml4O1xufVxuIl19