'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var constants = require('../constants'),
    vectorMaths = require('../maths/vector'),
    matrixMaths = require('../maths/matrix');

var transform4 = vectorMaths.transform4,
    DEGREES_TO_RADIANS = constants.DEGREES_TO_RADIANS,
    identity4 = matrixMaths.identity4,
    scale4 = matrixMaths.scale4,
    rotate4 = matrixMaths.rotate4,
    translate4 = matrixMaths.translate4,
    multiply4 = matrixMaths.multiply4;


var xAxis = [1, 0, 0],
    yAxis = [0, 1, 0],
    zAxis = [0, 0, 1];

function composeTransform(scale, position, rotations) {
  var matrix = null;

  if (scale !== null) {
    var scaleMatrix = calculateScaleMatrix(scale);

    matrix = matrix === null ? scaleMatrix : multiply4(scaleMatrix, matrix);
  }

  if (rotations !== null) {
    var rotationsMatrix = calculateRotationsMatrix(rotations);

    matrix = matrix === null ? rotationsMatrix : multiply4(rotationsMatrix, matrix);
  }

  if (position !== null) {
    var positionMatrix = calculatePositionMatrix(position);

    matrix = matrix === null ? positionMatrix : multiply4(positionMatrix, matrix);
  }

  var transform = matrix === null ? function (vector) {
    return vector;
  } : function (vector) {
    return transform4([].concat(_toConsumableArray(vector), [1]), matrix).slice(0, 3);
  };

  return transform;
}

module.exports = module.exports = {
  composeTransform: composeTransform
};

function calculateScaleMatrix(scale) {
  var scaleMatrix = identity4();

  scaleMatrix = scale4(scaleMatrix, scale);

  return scaleMatrix;
}

function calculatePositionMatrix(position) {
  var positionMatrix = identity4();

  positionMatrix = translate4(positionMatrix, position);

  return positionMatrix;
}

function calculateRotationsMatrix(rotations) {
  var rotationsMatrix = identity4();

  var xAngle = rotations[0] * DEGREES_TO_RADIANS,
      yAngle = rotations[1] * DEGREES_TO_RADIANS,
      zAngle = rotations[2] * DEGREES_TO_RADIANS;

  rotationsMatrix = rotate4(rotationsMatrix, xAngle, xAxis);
  rotationsMatrix = rotate4(rotationsMatrix, yAngle, yAxis);
  rotationsMatrix = rotate4(rotationsMatrix, zAngle, zAxis);

  return rotationsMatrix;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdHJhbnNmb3JtLmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJ2ZWN0b3JNYXRocyIsIm1hdHJpeE1hdGhzIiwidHJhbnNmb3JtNCIsIkRFR1JFRVNfVE9fUkFESUFOUyIsImlkZW50aXR5NCIsInNjYWxlNCIsInJvdGF0ZTQiLCJ0cmFuc2xhdGU0IiwibXVsdGlwbHk0IiwieEF4aXMiLCJ5QXhpcyIsInpBeGlzIiwiY29tcG9zZVRyYW5zZm9ybSIsInNjYWxlIiwicG9zaXRpb24iLCJyb3RhdGlvbnMiLCJtYXRyaXgiLCJzY2FsZU1hdHJpeCIsImNhbGN1bGF0ZVNjYWxlTWF0cml4Iiwicm90YXRpb25zTWF0cml4IiwiY2FsY3VsYXRlUm90YXRpb25zTWF0cml4IiwicG9zaXRpb25NYXRyaXgiLCJjYWxjdWxhdGVQb3NpdGlvbk1hdHJpeCIsInRyYW5zZm9ybSIsInZlY3RvciIsInNsaWNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInhBbmdsZSIsInlBbmdsZSIsInpBbmdsZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLGNBQVIsQ0FBbEI7QUFBQSxJQUNNQyxjQUFjRCxRQUFRLGlCQUFSLENBRHBCO0FBQUEsSUFFTUUsY0FBY0YsUUFBUSxpQkFBUixDQUZwQjs7QUFJTSxJQUFFRyxVQUFGLEdBQWlCRixXQUFqQixDQUFFRSxVQUFGO0FBQUEsSUFDRUMsa0JBREYsR0FDeUJMLFNBRHpCLENBQ0VLLGtCQURGO0FBQUEsSUFFRUMsU0FGRixHQUV3REgsV0FGeEQsQ0FFRUcsU0FGRjtBQUFBLElBRWFDLE1BRmIsR0FFd0RKLFdBRnhELENBRWFJLE1BRmI7QUFBQSxJQUVxQkMsT0FGckIsR0FFd0RMLFdBRnhELENBRXFCSyxPQUZyQjtBQUFBLElBRThCQyxVQUY5QixHQUV3RE4sV0FGeEQsQ0FFOEJNLFVBRjlCO0FBQUEsSUFFMENDLFNBRjFDLEdBRXdEUCxXQUZ4RCxDQUUwQ08sU0FGMUM7OztBQUlOLElBQU1DLFFBQVEsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FBZDtBQUFBLElBQ01DLFFBQVEsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FEZDtBQUFBLElBRU1DLFFBQVEsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FGZDs7QUFJQSxTQUFTQyxnQkFBVCxDQUEwQkMsS0FBMUIsRUFBaUNDLFFBQWpDLEVBQTJDQyxTQUEzQyxFQUFzRDtBQUNwRCxNQUFJQyxTQUFTLElBQWI7O0FBRUEsTUFBSUgsVUFBVSxJQUFkLEVBQW9CO0FBQ2xCLFFBQU1JLGNBQWNDLHFCQUFxQkwsS0FBckIsQ0FBcEI7O0FBRUFHLGFBQVVBLFdBQVcsSUFBWixHQUNFQyxXQURGLEdBRUlULFVBQVVTLFdBQVYsRUFBdUJELE1BQXZCLENBRmI7QUFHRDs7QUFFRCxNQUFJRCxjQUFjLElBQWxCLEVBQXdCO0FBQ3RCLFFBQU1JLGtCQUFrQkMseUJBQXlCTCxTQUF6QixDQUF4Qjs7QUFFQUMsYUFBVUEsV0FBVyxJQUFaLEdBQ0VHLGVBREYsR0FFSVgsVUFBVVcsZUFBVixFQUEyQkgsTUFBM0IsQ0FGYjtBQUlEOztBQUVELE1BQUlGLGFBQWEsSUFBakIsRUFBdUI7QUFDckIsUUFBTU8saUJBQWlCQyx3QkFBd0JSLFFBQXhCLENBQXZCOztBQUVBRSxhQUFVQSxXQUFXLElBQVosR0FDR0ssY0FESCxHQUVLYixVQUFVYSxjQUFWLEVBQTBCTCxNQUExQixDQUZkO0FBR0Q7O0FBRUQsTUFBTU8sWUFBYVAsV0FBVyxJQUFaLEdBQ0UsVUFBQ1EsTUFBRDtBQUFBLFdBQVlBLE1BQVo7QUFBQSxHQURGLEdBRUksVUFBQ0EsTUFBRDtBQUFBLFdBQVl0Qix3Q0FBZXNCLE1BQWYsSUFBdUIsQ0FBdkIsSUFBMkJSLE1BQTNCLEVBQW1DUyxLQUFuQyxDQUF5QyxDQUF6QyxFQUE0QyxDQUE1QyxDQUFaO0FBQUEsR0FGdEI7O0FBSUEsU0FBT0YsU0FBUDtBQUNEOztBQUVERyxPQUFPQyxPQUFQLEdBQWlCRCxPQUFPQyxPQUFQLEdBQWlCO0FBQ2hDZjtBQURnQyxDQUFsQzs7QUFJQSxTQUFTTSxvQkFBVCxDQUE4QkwsS0FBOUIsRUFBcUM7QUFDbkMsTUFBSUksY0FBY2IsV0FBbEI7O0FBRUFhLGdCQUFjWixPQUFPWSxXQUFQLEVBQW9CSixLQUFwQixDQUFkOztBQUVBLFNBQU9JLFdBQVA7QUFDRDs7QUFFRCxTQUFTSyx1QkFBVCxDQUFpQ1IsUUFBakMsRUFBMkM7QUFDekMsTUFBSU8saUJBQWlCakIsV0FBckI7O0FBRUFpQixtQkFBaUJkLFdBQVdjLGNBQVgsRUFBMkJQLFFBQTNCLENBQWpCOztBQUVBLFNBQU9PLGNBQVA7QUFDRDs7QUFFRCxTQUFTRCx3QkFBVCxDQUFrQ0wsU0FBbEMsRUFBNkM7QUFDM0MsTUFBSUksa0JBQWtCZixXQUF0Qjs7QUFFQSxNQUFNd0IsU0FBU2IsVUFBVyxDQUFYLElBQWlCWixrQkFBaEM7QUFBQSxNQUNNMEIsU0FBU2QsVUFBVyxDQUFYLElBQWlCWixrQkFEaEM7QUFBQSxNQUVNMkIsU0FBU2YsVUFBVyxDQUFYLElBQWlCWixrQkFGaEM7O0FBSUFnQixvQkFBa0JiLFFBQVFhLGVBQVIsRUFBeUJTLE1BQXpCLEVBQWlDbkIsS0FBakMsQ0FBbEI7QUFDQVUsb0JBQWtCYixRQUFRYSxlQUFSLEVBQXlCVSxNQUF6QixFQUFpQ25CLEtBQWpDLENBQWxCO0FBQ0FTLG9CQUFrQmIsUUFBUWEsZUFBUixFQUF5QlcsTUFBekIsRUFBaUNuQixLQUFqQyxDQUFsQjs7QUFFQSxTQUFPUSxlQUFQO0FBQ0QiLCJmaWxlIjoidHJhbnNmb3JtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIHZlY3Rvck1hdGhzID0gcmVxdWlyZSgnLi4vbWF0aHMvdmVjdG9yJyksXG4gICAgICBtYXRyaXhNYXRocyA9IHJlcXVpcmUoJy4uL21hdGhzL21hdHJpeCcpO1xuXG5jb25zdCB7IHRyYW5zZm9ybTQgfSA9IHZlY3Rvck1hdGhzLFxuICAgICAgeyBERUdSRUVTX1RPX1JBRElBTlMgfSA9IGNvbnN0YW50cyxcbiAgICAgIHsgaWRlbnRpdHk0LCBzY2FsZTQsIHJvdGF0ZTQsIHRyYW5zbGF0ZTQsIG11bHRpcGx5NCB9ID0gbWF0cml4TWF0aHM7XG5cbmNvbnN0IHhBeGlzID0gWyAxLCAwLCAwIF0sXG4gICAgICB5QXhpcyA9IFsgMCwgMSwgMCBdLFxuICAgICAgekF4aXMgPSBbIDAsIDAsIDEgXTtcblxuZnVuY3Rpb24gY29tcG9zZVRyYW5zZm9ybShzY2FsZSwgcG9zaXRpb24sIHJvdGF0aW9ucykge1xuICBsZXQgbWF0cml4ID0gbnVsbDtcblxuICBpZiAoc2NhbGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBzY2FsZU1hdHJpeCA9IGNhbGN1bGF0ZVNjYWxlTWF0cml4KHNjYWxlKTtcblxuICAgIG1hdHJpeCA9IChtYXRyaXggPT09IG51bGwpID9cbiAgICAgICAgICAgICAgIHNjYWxlTWF0cml4IDpcbiAgICAgICAgICAgICAgICAgbXVsdGlwbHk0KHNjYWxlTWF0cml4LCBtYXRyaXgpO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9ucyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHJvdGF0aW9uc01hdHJpeCA9IGNhbGN1bGF0ZVJvdGF0aW9uc01hdHJpeChyb3RhdGlvbnMpO1xuXG4gICAgbWF0cml4ID0gKG1hdHJpeCA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgcm90YXRpb25zTWF0cml4IDpcbiAgICAgICAgICAgICAgICAgbXVsdGlwbHk0KHJvdGF0aW9uc01hdHJpeCwgbWF0cml4KTtcblxuICB9XG5cbiAgaWYgKHBvc2l0aW9uICE9PSBudWxsKSB7XG4gICAgY29uc3QgcG9zaXRpb25NYXRyaXggPSBjYWxjdWxhdGVQb3NpdGlvbk1hdHJpeChwb3NpdGlvbik7XG5cbiAgICBtYXRyaXggPSAobWF0cml4ID09PSBudWxsKSA/XG4gICAgICAgICAgICAgICAgcG9zaXRpb25NYXRyaXggOlxuICAgICAgICAgICAgICAgICAgbXVsdGlwbHk0KHBvc2l0aW9uTWF0cml4LCBtYXRyaXgpO1xuICB9XG5cbiAgY29uc3QgdHJhbnNmb3JtID0gKG1hdHJpeCA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgICAgICh2ZWN0b3IpID0+IHZlY3RvciA6XG4gICAgICAgICAgICAgICAgICAgICAgICAodmVjdG9yKSA9PiB0cmFuc2Zvcm00KFsuLi52ZWN0b3IsIDFdLCBtYXRyaXgpLnNsaWNlKDAsIDMpO1xuXG4gIHJldHVybiB0cmFuc2Zvcm07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbXBvc2VUcmFuc2Zvcm1cbn07XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVNjYWxlTWF0cml4KHNjYWxlKSB7XG4gIGxldCBzY2FsZU1hdHJpeCA9IGlkZW50aXR5NCgpO1xuXG4gIHNjYWxlTWF0cml4ID0gc2NhbGU0KHNjYWxlTWF0cml4LCBzY2FsZSk7XG5cbiAgcmV0dXJuIHNjYWxlTWF0cml4O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVQb3NpdGlvbk1hdHJpeChwb3NpdGlvbikge1xuICBsZXQgcG9zaXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTtcblxuICBwb3NpdGlvbk1hdHJpeCA9IHRyYW5zbGF0ZTQocG9zaXRpb25NYXRyaXgsIHBvc2l0aW9uKTtcblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVJvdGF0aW9uc01hdHJpeChyb3RhdGlvbnMpIHtcbiAgbGV0IHJvdGF0aW9uc01hdHJpeCA9IGlkZW50aXR5NCgpO1xuXG4gIGNvbnN0IHhBbmdsZSA9IHJvdGF0aW9uc1sgMCBdICogREVHUkVFU19UT19SQURJQU5TLFxuICAgICAgICB5QW5nbGUgPSByb3RhdGlvbnNbIDEgXSAqIERFR1JFRVNfVE9fUkFESUFOUyxcbiAgICAgICAgekFuZ2xlID0gcm90YXRpb25zWyAyIF0gKiBERUdSRUVTX1RPX1JBRElBTlM7XG5cbiAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHhBbmdsZSwgeEF4aXMpO1xuICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgeUFuZ2xlLCB5QXhpcyk7XG4gIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB6QW5nbGUsIHpBeGlzKTtcblxuICByZXR1cm4gcm90YXRpb25zTWF0cml4O1xufVxuIl19