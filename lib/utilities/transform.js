'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var constants = require('../constants'),
    vectorMaths = require('../maths/vector'),
    matrixMaths = require('../maths/matrix'),
    matrixUtilities = require('../utilities/matrix');

var transform4 = vectorMaths.transform4,
    DEGREES_TO_RADIANS = constants.DEGREES_TO_RADIANS,
    rotationsMatrixFromAngles = matrixUtilities.rotationsMatrixFromAngles,
    identity4 = matrixMaths.identity4,
    scale4 = matrixMaths.scale4,
    translate4 = matrixMaths.translate4,
    multiply4 = matrixMaths.multiply4;


function composeTransform(scale, rotations, position) {
  var matrix = null;

  if (scale !== null) {
    var scaleMatrix = scaleMatrixFromScale(scale);

    matrix = matrix === null ? scaleMatrix : multiply4(scaleMatrix, matrix);
  }

  if (rotations !== null) {
    var rotationsMatrix = rotationsMatrixFromRotations(rotations);

    matrix = matrix === null ? rotationsMatrix : multiply4(rotationsMatrix, matrix);
  }

  if (position !== null) {
    var positionMatrix = positionMatrixFromPosition(position);

    matrix = matrix === null ? positionMatrix : multiply4(positionMatrix, matrix);
  }

  var transform = matrix === null ? function (vector) {
    return vector;
  } : function (vector) {
    return transform4([].concat(_toConsumableArray(vector), [1]), matrix).slice(0, 3);
  };

  return transform;
}

module.exports = module.exports = {
  composeTransform: composeTransform
};

function scaleMatrixFromScale(scale) {
  var scaleMatrix = identity4();

  scaleMatrix = scale4(scaleMatrix, scale);

  return scaleMatrix;
}

function positionMatrixFromPosition(position) {
  var positionMatrix = identity4();

  positionMatrix = translate4(positionMatrix, position);

  return positionMatrix;
}

function rotationsMatrixFromRotations(rotations) {
  var angles = [rotations[0] * DEGREES_TO_RADIANS, rotations[1] * DEGREES_TO_RADIANS, rotations[2] * DEGREES_TO_RADIANS],
      rotationsMatrix = rotationsMatrixFromAngles(angles);

  return rotationsMatrix;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdHJhbnNmb3JtLmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJ2ZWN0b3JNYXRocyIsIm1hdHJpeE1hdGhzIiwibWF0cml4VXRpbGl0aWVzIiwidHJhbnNmb3JtNCIsIkRFR1JFRVNfVE9fUkFESUFOUyIsInJvdGF0aW9uc01hdHJpeEZyb21BbmdsZXMiLCJpZGVudGl0eTQiLCJzY2FsZTQiLCJ0cmFuc2xhdGU0IiwibXVsdGlwbHk0IiwiY29tcG9zZVRyYW5zZm9ybSIsInNjYWxlIiwicm90YXRpb25zIiwicG9zaXRpb24iLCJtYXRyaXgiLCJzY2FsZU1hdHJpeCIsInNjYWxlTWF0cml4RnJvbVNjYWxlIiwicm90YXRpb25zTWF0cml4Iiwicm90YXRpb25zTWF0cml4RnJvbVJvdGF0aW9ucyIsInBvc2l0aW9uTWF0cml4IiwicG9zaXRpb25NYXRyaXhGcm9tUG9zaXRpb24iLCJ0cmFuc2Zvcm0iLCJ2ZWN0b3IiLCJzbGljZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhbmdsZXMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxjQUFSLENBQWxCO0FBQUEsSUFDTUMsY0FBY0QsUUFBUSxpQkFBUixDQURwQjtBQUFBLElBRU1FLGNBQWNGLFFBQVEsaUJBQVIsQ0FGcEI7QUFBQSxJQUdNRyxrQkFBa0JILFFBQVEscUJBQVIsQ0FIeEI7O0FBS00sSUFBRUksVUFBRixHQUFpQkgsV0FBakIsQ0FBRUcsVUFBRjtBQUFBLElBQ0VDLGtCQURGLEdBQ3lCTixTQUR6QixDQUNFTSxrQkFERjtBQUFBLElBRUVDLHlCQUZGLEdBRWdDSCxlQUZoQyxDQUVFRyx5QkFGRjtBQUFBLElBR0VDLFNBSEYsR0FHK0NMLFdBSC9DLENBR0VLLFNBSEY7QUFBQSxJQUdhQyxNQUhiLEdBRytDTixXQUgvQyxDQUdhTSxNQUhiO0FBQUEsSUFHcUJDLFVBSHJCLEdBRytDUCxXQUgvQyxDQUdxQk8sVUFIckI7QUFBQSxJQUdpQ0MsU0FIakMsR0FHK0NSLFdBSC9DLENBR2lDUSxTQUhqQzs7O0FBS04sU0FBU0MsZ0JBQVQsQ0FBMEJDLEtBQTFCLEVBQWlDQyxTQUFqQyxFQUE0Q0MsUUFBNUMsRUFBc0Q7QUFDcEQsTUFBSUMsU0FBUyxJQUFiOztBQUVBLE1BQUlILFVBQVUsSUFBZCxFQUFvQjtBQUNsQixRQUFNSSxjQUFjQyxxQkFBcUJMLEtBQXJCLENBQXBCOztBQUVBRyxhQUFVQSxXQUFXLElBQVosR0FDRUMsV0FERixHQUVJTixVQUFVTSxXQUFWLEVBQXVCRCxNQUF2QixDQUZiO0FBR0Q7O0FBRUQsTUFBSUYsY0FBYyxJQUFsQixFQUF3QjtBQUN0QixRQUFNSyxrQkFBa0JDLDZCQUE2Qk4sU0FBN0IsQ0FBeEI7O0FBRUFFLGFBQVVBLFdBQVcsSUFBWixHQUNFRyxlQURGLEdBRUlSLFVBQVVRLGVBQVYsRUFBMkJILE1BQTNCLENBRmI7QUFJRDs7QUFFRCxNQUFJRCxhQUFhLElBQWpCLEVBQXVCO0FBQ3JCLFFBQU1NLGlCQUFpQkMsMkJBQTJCUCxRQUEzQixDQUF2Qjs7QUFFQUMsYUFBVUEsV0FBVyxJQUFaLEdBQ0dLLGNBREgsR0FFS1YsVUFBVVUsY0FBVixFQUEwQkwsTUFBMUIsQ0FGZDtBQUdEOztBQUVELE1BQU1PLFlBQWFQLFdBQVcsSUFBWixHQUNFLFVBQUNRLE1BQUQ7QUFBQSxXQUFZQSxNQUFaO0FBQUEsR0FERixHQUVJLFVBQUNBLE1BQUQ7QUFBQSxXQUFZbkIsd0NBQWVtQixNQUFmLElBQXVCLENBQXZCLElBQTJCUixNQUEzQixFQUFtQ1MsS0FBbkMsQ0FBeUMsQ0FBekMsRUFBNEMsQ0FBNUMsQ0FBWjtBQUFBLEdBRnRCOztBQUlBLFNBQU9GLFNBQVA7QUFDRDs7QUFFREcsT0FBT0MsT0FBUCxHQUFpQkQsT0FBT0MsT0FBUCxHQUFpQjtBQUNoQ2Y7QUFEZ0MsQ0FBbEM7O0FBSUEsU0FBU00sb0JBQVQsQ0FBOEJMLEtBQTlCLEVBQXFDO0FBQ25DLE1BQUlJLGNBQWNULFdBQWxCOztBQUVBUyxnQkFBY1IsT0FBT1EsV0FBUCxFQUFvQkosS0FBcEIsQ0FBZDs7QUFFQSxTQUFPSSxXQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssMEJBQVQsQ0FBb0NQLFFBQXBDLEVBQThDO0FBQzVDLE1BQUlNLGlCQUFpQmIsV0FBckI7O0FBRUFhLG1CQUFpQlgsV0FBV1csY0FBWCxFQUEyQk4sUUFBM0IsQ0FBakI7O0FBRUEsU0FBT00sY0FBUDtBQUNEOztBQUVELFNBQVNELDRCQUFULENBQXNDTixTQUF0QyxFQUFpRDtBQUMvQyxNQUFNYyxTQUFTLENBRVBkLFVBQVcsQ0FBWCxJQUFpQlIsa0JBRlYsRUFHUFEsVUFBVyxDQUFYLElBQWlCUixrQkFIVixFQUlQUSxVQUFXLENBQVgsSUFBaUJSLGtCQUpWLENBQWY7QUFBQSxNQU9NYSxrQkFBa0JaLDBCQUEwQnFCLE1BQTFCLENBUHhCOztBQVNBLFNBQU9ULGVBQVA7QUFDRCIsImZpbGUiOiJ0cmFuc2Zvcm0uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpLFxuICAgICAgdmVjdG9yTWF0aHMgPSByZXF1aXJlKCcuLi9tYXRocy92ZWN0b3InKSxcbiAgICAgIG1hdHJpeE1hdGhzID0gcmVxdWlyZSgnLi4vbWF0aHMvbWF0cml4JyksXG4gICAgICBtYXRyaXhVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvbWF0cml4Jyk7XG5cbmNvbnN0IHsgdHJhbnNmb3JtNCB9ID0gdmVjdG9yTWF0aHMsXG4gICAgICB7IERFR1JFRVNfVE9fUkFESUFOUyB9ID0gY29uc3RhbnRzLFxuICAgICAgeyByb3RhdGlvbnNNYXRyaXhGcm9tQW5nbGVzIH0gPSBtYXRyaXhVdGlsaXRpZXMsXG4gICAgICB7IGlkZW50aXR5NCwgc2NhbGU0LCB0cmFuc2xhdGU0LCBtdWx0aXBseTQgfSA9IG1hdHJpeE1hdGhzO1xuXG5mdW5jdGlvbiBjb21wb3NlVHJhbnNmb3JtKHNjYWxlLCByb3RhdGlvbnMsIHBvc2l0aW9uKSB7XG4gIGxldCBtYXRyaXggPSBudWxsO1xuXG4gIGlmIChzY2FsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHNjYWxlTWF0cml4ID0gc2NhbGVNYXRyaXhGcm9tU2NhbGUoc2NhbGUpO1xuXG4gICAgbWF0cml4ID0gKG1hdHJpeCA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgc2NhbGVNYXRyaXggOlxuICAgICAgICAgICAgICAgICBtdWx0aXBseTQoc2NhbGVNYXRyaXgsIG1hdHJpeCk7XG4gIH1cblxuICBpZiAocm90YXRpb25zICE9PSBudWxsKSB7XG4gICAgY29uc3Qgcm90YXRpb25zTWF0cml4ID0gcm90YXRpb25zTWF0cml4RnJvbVJvdGF0aW9ucyhyb3RhdGlvbnMpO1xuXG4gICAgbWF0cml4ID0gKG1hdHJpeCA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgcm90YXRpb25zTWF0cml4IDpcbiAgICAgICAgICAgICAgICAgbXVsdGlwbHk0KHJvdGF0aW9uc01hdHJpeCwgbWF0cml4KTtcblxuICB9XG5cbiAgaWYgKHBvc2l0aW9uICE9PSBudWxsKSB7XG4gICAgY29uc3QgcG9zaXRpb25NYXRyaXggPSBwb3NpdGlvbk1hdHJpeEZyb21Qb3NpdGlvbihwb3NpdGlvbik7XG5cbiAgICBtYXRyaXggPSAobWF0cml4ID09PSBudWxsKSA/XG4gICAgICAgICAgICAgICAgcG9zaXRpb25NYXRyaXggOlxuICAgICAgICAgICAgICAgICAgbXVsdGlwbHk0KHBvc2l0aW9uTWF0cml4LCBtYXRyaXgpO1xuICB9XG5cbiAgY29uc3QgdHJhbnNmb3JtID0gKG1hdHJpeCA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgICAgICh2ZWN0b3IpID0+IHZlY3RvciA6XG4gICAgICAgICAgICAgICAgICAgICAgICAodmVjdG9yKSA9PiB0cmFuc2Zvcm00KFsuLi52ZWN0b3IsIDFdLCBtYXRyaXgpLnNsaWNlKDAsIDMpO1xuXG4gIHJldHVybiB0cmFuc2Zvcm07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbXBvc2VUcmFuc2Zvcm1cbn07XG5cbmZ1bmN0aW9uIHNjYWxlTWF0cml4RnJvbVNjYWxlKHNjYWxlKSB7XG4gIGxldCBzY2FsZU1hdHJpeCA9IGlkZW50aXR5NCgpO1xuXG4gIHNjYWxlTWF0cml4ID0gc2NhbGU0KHNjYWxlTWF0cml4LCBzY2FsZSk7XG5cbiAgcmV0dXJuIHNjYWxlTWF0cml4O1xufVxuXG5mdW5jdGlvbiBwb3NpdGlvbk1hdHJpeEZyb21Qb3NpdGlvbihwb3NpdGlvbikge1xuICBsZXQgcG9zaXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTtcblxuICBwb3NpdGlvbk1hdHJpeCA9IHRyYW5zbGF0ZTQocG9zaXRpb25NYXRyaXgsIHBvc2l0aW9uKTtcblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmZ1bmN0aW9uIHJvdGF0aW9uc01hdHJpeEZyb21Sb3RhdGlvbnMocm90YXRpb25zKSB7XG4gIGNvbnN0IGFuZ2xlcyA9IFtcblxuICAgICAgICAgIHJvdGF0aW9uc1sgMCBdICogREVHUkVFU19UT19SQURJQU5TLFxuICAgICAgICAgIHJvdGF0aW9uc1sgMSBdICogREVHUkVFU19UT19SQURJQU5TLFxuICAgICAgICAgIHJvdGF0aW9uc1sgMiBdICogREVHUkVFU19UT19SQURJQU5TLFxuXG4gICAgICAgIF0sXG4gICAgICAgIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0aW9uc01hdHJpeEZyb21BbmdsZXMoYW5nbGVzKTtcblxuICByZXR1cm4gcm90YXRpb25zTWF0cml4O1xufVxuIl19