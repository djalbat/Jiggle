'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var constants = require('../constants'),
    vectorMaths = require('../maths/vector'),
    matrixMaths = require('../maths/matrix');

var transform4 = vectorMaths.transform4,
    DEGREES_TO_RADIANS = constants.DEGREES_TO_RADIANS,
    identity4 = matrixMaths.identity4,
    scale4 = matrixMaths.scale4,
    rotate4 = matrixMaths.rotate4,
    translate4 = matrixMaths.translate4;


var xAxis = [1, 0, 0],
    yAxis = [0, 1, 0],
    zAxis = [0, 0, 1],
    defaultScale = [1, 1, 1],
    defaultPosition = [0, 0, 0],
    defaultRotations = [0, 0, 0];

function composeTransform(scale, position, rotations) {
  scale = composeScale(scale); ///

  var rotate = composeRotate(rotations),
      translate = composeTranslate(position);

  return function (vector) {
    return translate(rotate(scale(vector)));
  };
}

module.exports = module.exports = {
  composeTransform: composeTransform
};

function compose(matrix) {
  return function (vector) {
    return transform4([].concat(_toConsumableArray(vector), [1]), matrix).slice(0, 3);
  };
}

function composeScale() {
  var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultScale;

  var matrix = identity4();

  matrix = scale4(matrix, scale);

  return compose(matrix);
}

function composeRotate() {
  var rotations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultRotations;

  var matrix = identity4();

  var xAngle = rotations[0] * DEGREES_TO_RADIANS,
      ///
  yAngle = rotations[1] * DEGREES_TO_RADIANS,
      ///
  zAngle = rotations[2] * DEGREES_TO_RADIANS; ///

  matrix = rotate4(matrix, xAngle, xAxis);
  matrix = rotate4(matrix, yAngle, yAxis);
  matrix = rotate4(matrix, zAngle, zAxis);

  return compose(matrix);
}

function composeTranslate() {
  var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPosition;

  var matrix = identity4();

  matrix = translate4(matrix, position);

  return compose(matrix);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdHJhbnNmb3JtLmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJ2ZWN0b3JNYXRocyIsIm1hdHJpeE1hdGhzIiwidHJhbnNmb3JtNCIsIkRFR1JFRVNfVE9fUkFESUFOUyIsImlkZW50aXR5NCIsInNjYWxlNCIsInJvdGF0ZTQiLCJ0cmFuc2xhdGU0IiwieEF4aXMiLCJ5QXhpcyIsInpBeGlzIiwiZGVmYXVsdFNjYWxlIiwiZGVmYXVsdFBvc2l0aW9uIiwiZGVmYXVsdFJvdGF0aW9ucyIsImNvbXBvc2VUcmFuc2Zvcm0iLCJzY2FsZSIsInBvc2l0aW9uIiwicm90YXRpb25zIiwiY29tcG9zZVNjYWxlIiwicm90YXRlIiwiY29tcG9zZVJvdGF0ZSIsInRyYW5zbGF0ZSIsImNvbXBvc2VUcmFuc2xhdGUiLCJ2ZWN0b3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29tcG9zZSIsIm1hdHJpeCIsInNsaWNlIiwieEFuZ2xlIiwieUFuZ2xlIiwiekFuZ2xlIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQU1BLFlBQVlDLFFBQVEsY0FBUixDQUFsQjtBQUFBLElBQ01DLGNBQWNELFFBQVEsaUJBQVIsQ0FEcEI7QUFBQSxJQUVNRSxjQUFjRixRQUFRLGlCQUFSLENBRnBCOztBQUlNLElBQUVHLFVBQUYsR0FBaUJGLFdBQWpCLENBQUVFLFVBQUY7QUFBQSxJQUNFQyxrQkFERixHQUN5QkwsU0FEekIsQ0FDRUssa0JBREY7QUFBQSxJQUVFQyxTQUZGLEdBRTZDSCxXQUY3QyxDQUVFRyxTQUZGO0FBQUEsSUFFYUMsTUFGYixHQUU2Q0osV0FGN0MsQ0FFYUksTUFGYjtBQUFBLElBRXFCQyxPQUZyQixHQUU2Q0wsV0FGN0MsQ0FFcUJLLE9BRnJCO0FBQUEsSUFFOEJDLFVBRjlCLEdBRTZDTixXQUY3QyxDQUU4Qk0sVUFGOUI7OztBQUlOLElBQU1DLFFBQVEsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FBZDtBQUFBLElBQ01DLFFBQVEsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FEZDtBQUFBLElBRU1DLFFBQVEsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FGZDtBQUFBLElBR01DLGVBQWUsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FIckI7QUFBQSxJQUlNQyxrQkFBa0IsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FKeEI7QUFBQSxJQUtNQyxtQkFBbUIsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FMekI7O0FBT0EsU0FBU0MsZ0JBQVQsQ0FBMEJDLEtBQTFCLEVBQWlDQyxRQUFqQyxFQUEyQ0MsU0FBM0MsRUFBc0Q7QUFDcERGLFVBQVFHLGFBQWFILEtBQWIsQ0FBUixDQURvRCxDQUN0Qjs7QUFFOUIsTUFBTUksU0FBU0MsY0FBY0gsU0FBZCxDQUFmO0FBQUEsTUFDTUksWUFBWUMsaUJBQWlCTixRQUFqQixDQURsQjs7QUFHQSxTQUFPLFVBQUNPLE1BQUQ7QUFBQSxXQUFZRixVQUFVRixPQUFPSixNQUFNUSxNQUFOLENBQVAsQ0FBVixDQUFaO0FBQUEsR0FBUDtBQUNEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCRCxPQUFPQyxPQUFQLEdBQWlCO0FBQ2hDWDtBQURnQyxDQUFsQzs7QUFJQSxTQUFTWSxPQUFULENBQWlCQyxNQUFqQixFQUF5QjtBQUN2QixTQUFPLFVBQUNKLE1BQUQ7QUFBQSxXQUFZckIsd0NBQWVxQixNQUFmLElBQXVCLENBQXZCLElBQTJCSSxNQUEzQixFQUFtQ0MsS0FBbkMsQ0FBeUMsQ0FBekMsRUFBNEMsQ0FBNUMsQ0FBWjtBQUFBLEdBQVA7QUFDRDs7QUFFRCxTQUFTVixZQUFULEdBQTRDO0FBQUEsTUFBdEJILEtBQXNCLHVFQUFkSixZQUFjOztBQUMxQyxNQUFJZ0IsU0FBU3ZCLFdBQWI7O0FBRUF1QixXQUFTdEIsT0FBT3NCLE1BQVAsRUFBZVosS0FBZixDQUFUOztBQUVBLFNBQU9XLFFBQVFDLE1BQVIsQ0FBUDtBQUNEOztBQUVELFNBQVNQLGFBQVQsR0FBcUQ7QUFBQSxNQUE5QkgsU0FBOEIsdUVBQWxCSixnQkFBa0I7O0FBQ25ELE1BQUljLFNBQVN2QixXQUFiOztBQUVBLE1BQU15QixTQUFTWixVQUFXLENBQVgsSUFBaUJkLGtCQUFoQztBQUFBLE1BQW9EO0FBQzlDMkIsV0FBU2IsVUFBVyxDQUFYLElBQWlCZCxrQkFEaEM7QUFBQSxNQUNvRDtBQUM5QzRCLFdBQVNkLFVBQVcsQ0FBWCxJQUFpQmQsa0JBRmhDLENBSG1ELENBS0M7O0FBRXBEd0IsV0FBU3JCLFFBQVFxQixNQUFSLEVBQWdCRSxNQUFoQixFQUF3QnJCLEtBQXhCLENBQVQ7QUFDQW1CLFdBQVNyQixRQUFRcUIsTUFBUixFQUFnQkcsTUFBaEIsRUFBd0JyQixLQUF4QixDQUFUO0FBQ0FrQixXQUFTckIsUUFBUXFCLE1BQVIsRUFBZ0JJLE1BQWhCLEVBQXdCckIsS0FBeEIsQ0FBVDs7QUFFQSxTQUFPZ0IsUUFBUUMsTUFBUixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0wsZ0JBQVQsR0FBc0Q7QUFBQSxNQUE1Qk4sUUFBNEIsdUVBQWpCSixlQUFpQjs7QUFDcEQsTUFBSWUsU0FBU3ZCLFdBQWI7O0FBRUF1QixXQUFTcEIsV0FBV29CLE1BQVgsRUFBbUJYLFFBQW5CLENBQVQ7O0FBRUEsU0FBT1UsUUFBUUMsTUFBUixDQUFQO0FBQ0QiLCJmaWxlIjoidHJhbnNmb3JtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIHZlY3Rvck1hdGhzID0gcmVxdWlyZSgnLi4vbWF0aHMvdmVjdG9yJyksXG4gICAgICBtYXRyaXhNYXRocyA9IHJlcXVpcmUoJy4uL21hdGhzL21hdHJpeCcpO1xuXG5jb25zdCB7IHRyYW5zZm9ybTQgfSA9IHZlY3Rvck1hdGhzLFxuICAgICAgeyBERUdSRUVTX1RPX1JBRElBTlMgfSA9IGNvbnN0YW50cyxcbiAgICAgIHsgaWRlbnRpdHk0LCBzY2FsZTQsIHJvdGF0ZTQsIHRyYW5zbGF0ZTQgfSA9IG1hdHJpeE1hdGhzO1xuXG5jb25zdCB4QXhpcyA9IFsgMSwgMCwgMCBdLFxuICAgICAgeUF4aXMgPSBbIDAsIDEsIDAgXSxcbiAgICAgIHpBeGlzID0gWyAwLCAwLCAxIF0sXG4gICAgICBkZWZhdWx0U2NhbGUgPSBbIDEsIDEsIDEgXSxcbiAgICAgIGRlZmF1bHRQb3NpdGlvbiA9IFsgMCwgMCwgMCBdLFxuICAgICAgZGVmYXVsdFJvdGF0aW9ucyA9IFsgMCwgMCwgMCBdO1xuXG5mdW5jdGlvbiBjb21wb3NlVHJhbnNmb3JtKHNjYWxlLCBwb3NpdGlvbiwgcm90YXRpb25zKSB7XG4gIHNjYWxlID0gY29tcG9zZVNjYWxlKHNjYWxlKTsgIC8vL1xuXG4gIGNvbnN0IHJvdGF0ZSA9IGNvbXBvc2VSb3RhdGUocm90YXRpb25zKSxcbiAgICAgICAgdHJhbnNsYXRlID0gY29tcG9zZVRyYW5zbGF0ZShwb3NpdGlvbik7XG5cbiAgcmV0dXJuICh2ZWN0b3IpID0+IHRyYW5zbGF0ZShyb3RhdGUoc2NhbGUodmVjdG9yKSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBjb21wb3NlVHJhbnNmb3JtXG59O1xuXG5mdW5jdGlvbiBjb21wb3NlKG1hdHJpeCkge1xuICByZXR1cm4gKHZlY3RvcikgPT4gdHJhbnNmb3JtNChbLi4udmVjdG9yLCAxXSwgbWF0cml4KS5zbGljZSgwLCAzKTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZVNjYWxlKHNjYWxlID0gZGVmYXVsdFNjYWxlKSB7XG4gIGxldCBtYXRyaXggPSBpZGVudGl0eTQoKTtcblxuICBtYXRyaXggPSBzY2FsZTQobWF0cml4LCBzY2FsZSk7XG5cbiAgcmV0dXJuIGNvbXBvc2UobWF0cml4KTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZVJvdGF0ZShyb3RhdGlvbnMgPSBkZWZhdWx0Um90YXRpb25zKSB7XG4gIGxldCBtYXRyaXggPSBpZGVudGl0eTQoKTtcblxuICBjb25zdCB4QW5nbGUgPSByb3RhdGlvbnNbIDAgXSAqIERFR1JFRVNfVE9fUkFESUFOUywgLy8vXG4gICAgICAgIHlBbmdsZSA9IHJvdGF0aW9uc1sgMSBdICogREVHUkVFU19UT19SQURJQU5TLCAvLy9cbiAgICAgICAgekFuZ2xlID0gcm90YXRpb25zWyAyIF0gKiBERUdSRUVTX1RPX1JBRElBTlM7IC8vL1xuXG4gIG1hdHJpeCA9IHJvdGF0ZTQobWF0cml4LCB4QW5nbGUsIHhBeGlzKTtcbiAgbWF0cml4ID0gcm90YXRlNChtYXRyaXgsIHlBbmdsZSwgeUF4aXMpO1xuICBtYXRyaXggPSByb3RhdGU0KG1hdHJpeCwgekFuZ2xlLCB6QXhpcyk7XG5cbiAgcmV0dXJuIGNvbXBvc2UobWF0cml4KTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZVRyYW5zbGF0ZShwb3NpdGlvbiA9IGRlZmF1bHRQb3NpdGlvbikge1xuICBsZXQgbWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgbWF0cml4ID0gdHJhbnNsYXRlNChtYXRyaXgsIHBvc2l0aW9uKTtcblxuICByZXR1cm4gY29tcG9zZShtYXRyaXgpO1xufVxuIl19