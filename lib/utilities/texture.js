'use strict';

var matrixMaths = require('../maths/matrix'),
    vectorMaths = require('../maths/vector'),
    arrayUtilities = require('../utilities/array'),
    verticesUtilities = require('../utilities/vertices'),
    quaternionUtilities = require('../utilities/quaternion');

var invert2 = matrixMaths.invert2,
    invert3 = matrixMaths.invert3,
    rotateVertices = verticesUtilities.rotateVertices,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    add2 = vectorMaths.add2,
    multiply2 = vectorMaths.multiply2,
    transform2 = vectorMaths.transform2,
    transform3 = vectorMaths.transform3,
    calculateArbitraryRotationQuaternion = quaternionUtilities.calculateArbitraryRotationQuaternion;


function cloneTextureCoordinates(textureCoordinates) {
  textureCoordinates = textureCoordinates.map(function (textureCoordinates) {
    ///
    textureCoordinates = textureCoordinates.slice();

    return textureCoordinates;
  });

  return textureCoordinates;
}

function calculateVertexTextureCoordinates(textureCoordinates, left, bottom, width, height) {
  textureCoordinates = textureCoordinates.map(function (textureCoordinates) {
    ///
    textureCoordinates = add2(multiply2(textureCoordinates, [width, height]), [left, bottom]);

    return textureCoordinates;
  });

  return textureCoordinates;
}

function calculateAdjustedTextureCoordinates(vertices, normal, parentVertices, textureCoordinates) {
  var arbitraryRotationQuaternion = calculateArbitraryRotationQuaternion(normal),
      rotationQuaternion = arbitraryRotationQuaternion;

  vertices = rotateVertices(vertices, rotationQuaternion);

  parentVertices = rotateVertices(parentVertices, rotationQuaternion);

  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      firstParentVertex = first(parentVertices),
      secondParentVertex = second(parentVertices),
      thirdParentVertex = third(parentVertices),
      firstTextureCoordinate = first(textureCoordinates),
      secondTextureCoordinate = second(textureCoordinates),
      thirdTextureCoordinate = third(textureCoordinates),
      firstVertexPosition = firstVertex.getPosition(),
      secondVertexPosition = secondVertex.getPosition(),
      thirdVertexPosition = thirdVertex.getPosition(),
      firstParentVertexPosition = firstParentVertex.getPosition(),
      secondParentVertexPosition = secondParentVertex.getPosition(),
      thirdParentVertexPosition = thirdParentVertex.getPosition(),
      R1x = firstVertexPosition[0],
      ///
  R1y = firstVertexPosition[1],
      ///
  R2x = secondVertexPosition[0],
      ///
  R2y = secondVertexPosition[1],
      ///
  R3x = thirdVertexPosition[0],
      ///
  R3y = thirdVertexPosition[1],
      ///
  P1x = firstParentVertexPosition[0],
      ///
  P2x = secondParentVertexPosition[0],
      ///
  P3x = thirdParentVertexPosition[0],
      ///
  P1y = firstParentVertexPosition[1],
      ///
  P2y = secondParentVertexPosition[1],
      ///
  P3y = thirdParentVertexPosition[1],
      ///
  P1u = firstTextureCoordinate[0],
      ///
  P1v = firstTextureCoordinate[1],
      ///
  P2u = secondTextureCoordinate[0],
      ///
  P2v = secondTextureCoordinate[1],
      ///
  P3u = thirdTextureCoordinate[0],
      ///
  P3v = thirdTextureCoordinate[1],
      ///
  textureCoordinatesMatrix = invert3([1, 1, 1, P1u, P2u, P3u, P1v, P2v, P3v]),
      firstTransformedParentVerticesComponent = transform3([P1x, P2x, P3x], textureCoordinatesMatrix),
      secondTransformedParentVerticesComponent = transform3([P1y, P2y, P3y], textureCoordinatesMatrix),
      Ox = firstTransformedParentVerticesComponent[0],
      ///
  Ux = firstTransformedParentVerticesComponent[1],
      ///
  Vx = firstTransformedParentVerticesComponent[2],
      ///
  Oy = secondTransformedParentVerticesComponent[0],
      ///
  Uy = secondTransformedParentVerticesComponent[1],
      ///
  Vy = secondTransformedParentVerticesComponent[2],
      ///
  transformedParentVerticesMatrix = invert2([Ux, Uy, Vx, Vy]),
      firstAdjustedTextureCoordinatesComponent = transform2([R1x - Ox, R1y - Oy], transformedParentVerticesMatrix),
      secondAdjustedTextureCoordinatesComponent = transform2([R2x - Ox, R2y - Oy], transformedParentVerticesMatrix),
      thirdAdjustedTextureCoordinatesComponent = transform2([R3x - Ox, R3y - Oy], transformedParentVerticesMatrix),
      adjustedTextureCoordinates = [firstAdjustedTextureCoordinatesComponent, secondAdjustedTextureCoordinatesComponent, thirdAdjustedTextureCoordinatesComponent];

  return adjustedTextureCoordinates;
}

function textureCoordinatesFromTextureCoordinatesAndIndex(textureCoordinates, index) {
  ///
  textureCoordinates = textureCoordinates.slice(index * 3, index * 3 + 3); ///

  return textureCoordinates;
}

module.exports = {
  cloneTextureCoordinates: cloneTextureCoordinates,
  calculateVertexTextureCoordinates: calculateVertexTextureCoordinates,
  calculateAdjustedTextureCoordinates: calculateAdjustedTextureCoordinates,
  textureCoordinatesFromTextureCoordinatesAndIndex: textureCoordinatesFromTextureCoordinatesAndIndex
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdGV4dHVyZS5qcyJdLCJuYW1lcyI6WyJtYXRyaXhNYXRocyIsInJlcXVpcmUiLCJ2ZWN0b3JNYXRocyIsImFycmF5VXRpbGl0aWVzIiwidmVydGljZXNVdGlsaXRpZXMiLCJxdWF0ZXJuaW9uVXRpbGl0aWVzIiwiaW52ZXJ0MiIsImludmVydDMiLCJyb3RhdGVWZXJ0aWNlcyIsImZpcnN0Iiwic2Vjb25kIiwidGhpcmQiLCJhZGQyIiwibXVsdGlwbHkyIiwidHJhbnNmb3JtMiIsInRyYW5zZm9ybTMiLCJjYWxjdWxhdGVBcmJpdHJhcnlSb3RhdGlvblF1YXRlcm5pb24iLCJjbG9uZVRleHR1cmVDb29yZGluYXRlcyIsInRleHR1cmVDb29yZGluYXRlcyIsIm1hcCIsInNsaWNlIiwiY2FsY3VsYXRlVmVydGV4VGV4dHVyZUNvb3JkaW5hdGVzIiwibGVmdCIsImJvdHRvbSIsIndpZHRoIiwiaGVpZ2h0IiwiY2FsY3VsYXRlQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZXMiLCJ2ZXJ0aWNlcyIsIm5vcm1hbCIsInBhcmVudFZlcnRpY2VzIiwiYXJiaXRyYXJ5Um90YXRpb25RdWF0ZXJuaW9uIiwicm90YXRpb25RdWF0ZXJuaW9uIiwiZmlyc3RWZXJ0ZXgiLCJzZWNvbmRWZXJ0ZXgiLCJ0aGlyZFZlcnRleCIsImZpcnN0UGFyZW50VmVydGV4Iiwic2Vjb25kUGFyZW50VmVydGV4IiwidGhpcmRQYXJlbnRWZXJ0ZXgiLCJmaXJzdFRleHR1cmVDb29yZGluYXRlIiwic2Vjb25kVGV4dHVyZUNvb3JkaW5hdGUiLCJ0aGlyZFRleHR1cmVDb29yZGluYXRlIiwiZmlyc3RWZXJ0ZXhQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwic2Vjb25kVmVydGV4UG9zaXRpb24iLCJ0aGlyZFZlcnRleFBvc2l0aW9uIiwiZmlyc3RQYXJlbnRWZXJ0ZXhQb3NpdGlvbiIsInNlY29uZFBhcmVudFZlcnRleFBvc2l0aW9uIiwidGhpcmRQYXJlbnRWZXJ0ZXhQb3NpdGlvbiIsIlIxeCIsIlIxeSIsIlIyeCIsIlIyeSIsIlIzeCIsIlIzeSIsIlAxeCIsIlAyeCIsIlAzeCIsIlAxeSIsIlAyeSIsIlAzeSIsIlAxdSIsIlAxdiIsIlAydSIsIlAydiIsIlAzdSIsIlAzdiIsInRleHR1cmVDb29yZGluYXRlc01hdHJpeCIsImZpcnN0VHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc0NvbXBvbmVudCIsInNlY29uZFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnQiLCJPeCIsIlV4IiwiVngiLCJPeSIsIlV5IiwiVnkiLCJ0cmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzTWF0cml4IiwiZmlyc3RBZGp1c3RlZFRleHR1cmVDb29yZGluYXRlc0NvbXBvbmVudCIsInNlY29uZEFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVzQ29tcG9uZW50IiwidGhpcmRBZGp1c3RlZFRleHR1cmVDb29yZGluYXRlc0NvbXBvbmVudCIsImFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVzIiwidGV4dHVyZUNvb3JkaW5hdGVzRnJvbVRleHR1cmVDb29yZGluYXRlc0FuZEluZGV4IiwiaW5kZXgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxjQUFjQyxRQUFRLGlCQUFSLENBQXBCO0FBQUEsSUFDTUMsY0FBY0QsUUFBUSxpQkFBUixDQURwQjtBQUFBLElBRU1FLGlCQUFpQkYsUUFBUSxvQkFBUixDQUZ2QjtBQUFBLElBR01HLG9CQUFvQkgsUUFBUSx1QkFBUixDQUgxQjtBQUFBLElBSU1JLHNCQUFzQkosUUFBUSx5QkFBUixDQUo1Qjs7SUFNUUssTyxHQUFxQk4sVyxDQUFyQk0sTztJQUFTQyxPLEdBQVlQLFcsQ0FBWk8sTztJQUNUQyxjLEdBQW1CSixpQixDQUFuQkksYztJQUNBQyxLLEdBQXlCTixjLENBQXpCTSxLO0lBQU9DLE0sR0FBa0JQLGMsQ0FBbEJPLE07SUFBUUMsSyxHQUFVUixjLENBQVZRLEs7SUFDZkMsSSxHQUE0Q1YsVyxD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QXpDLENBdkNYO0FBQUEsTUF1Q3lEO0FBQ25ESyxPQUFLTCx5Q0FBeUMsQ0FBekMsQ0F4Q1g7QUFBQSxNQXdDeUQ7QUFDbkRNLE9BQUtOLHlDQUF5QyxDQUF6QyxDQXpDWDtBQUFBLE1BeUN5RDtBQUNuRE8sb0NBQWtDckUsUUFBUSxDQUFFZ0UsRUFBRixFQUFNRyxFQUFOLEVBQVVGLEVBQVYsRUFBY0csRUFBZCxDQUFSLENBMUN4QztBQUFBLE1BMkNNRSwyQ0FBMkM5RCxXQUFXLENBQUVrQyxNQUFNcUIsRUFBUixFQUFZcEIsTUFBTXVCLEVBQWxCLENBQVgsRUFBbUNHLCtCQUFuQyxDQTNDakQ7QUFBQSxNQTRDTUUsNENBQTRDL0QsV0FBVyxDQUFFb0MsTUFBTW1CLEVBQVIsRUFBWWxCLE1BQU1xQixFQUFsQixDQUFYLEVBQW1DRywrQkFBbkMsQ0E1Q2xEO0FBQUEsTUE2Q01HLDJDQUEyQ2hFLFdBQVcsQ0FBRXNDLE1BQU1pQixFQUFSLEVBQVloQixNQUFNbUIsRUFBbEIsQ0FBWCxFQUFtQ0csK0JBQW5DLENBN0NqRDtBQUFBLE1BOENNSSw2QkFBNkIsQ0FDM0JILHdDQUQyQixFQUUzQkMseUNBRjJCLEVBRzNCQyx3Q0FIMkIsQ0E5Q25DOztBQW9EQSxTQUFPQywwQkFBUDtBQUNEOztBQUVELFNBQVNDLGdEQUFULENBQTBEOUQsa0JBQTFELEVBQThFK0QsS0FBOUUsRUFBcUY7QUFBRztBQUN0Ri9ELHVCQUFxQkEsbUJBQW1CRSxLQUFuQixDQUF5QjZELFFBQVEsQ0FBakMsRUFBb0NBLFFBQVEsQ0FBUixHQUFZLENBQWhELENBQXJCLENBRG1GLENBQ1Q7O0FBRTFFLFNBQU8vRCxrQkFBUDtBQUNEOztBQUVEZ0UsT0FBT0MsT0FBUCxHQUFpQjtBQUNmbEUsa0RBRGU7QUFFZkksc0VBRmU7QUFHZkssMEVBSGU7QUFJZnNEO0FBSmUsQ0FBakIiLCJmaWxlIjoidGV4dHVyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbWF0cml4TWF0aHMgPSByZXF1aXJlKCcuLi9tYXRocy9tYXRyaXgnKSxcbiAgICAgIHZlY3Rvck1hdGhzID0gcmVxdWlyZSgnLi4vbWF0aHMvdmVjdG9yJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgdmVydGljZXNVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvdmVydGljZXMnKSxcbiAgICAgIHF1YXRlcm5pb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvcXVhdGVybmlvbicpO1xuXG5jb25zdCB7IGludmVydDIsIGludmVydDMgfSA9IG1hdHJpeE1hdGhzLFxuICAgICAgeyByb3RhdGVWZXJ0aWNlcyB9ID0gdmVydGljZXNVdGlsaXRpZXMsXG4gICAgICB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgYWRkMiwgbXVsdGlwbHkyLCB0cmFuc2Zvcm0yLCB0cmFuc2Zvcm0zIH0gPSB2ZWN0b3JNYXRocyxcbiAgICAgIHsgY2FsY3VsYXRlQXJiaXRyYXJ5Um90YXRpb25RdWF0ZXJuaW9uIH0gPSBxdWF0ZXJuaW9uVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBjbG9uZVRleHR1cmVDb29yZGluYXRlcyh0ZXh0dXJlQ29vcmRpbmF0ZXMpIHtcbiAgdGV4dHVyZUNvb3JkaW5hdGVzID0gdGV4dHVyZUNvb3JkaW5hdGVzLm1hcChmdW5jdGlvbih0ZXh0dXJlQ29vcmRpbmF0ZXMpIHsgIC8vL1xuICAgIHRleHR1cmVDb29yZGluYXRlcyA9IHRleHR1cmVDb29yZGluYXRlcy5zbGljZSgpO1xuXG4gICAgcmV0dXJuIHRleHR1cmVDb29yZGluYXRlcztcbiAgfSk7XG5cbiAgcmV0dXJuIHRleHR1cmVDb29yZGluYXRlcztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlVmVydGV4VGV4dHVyZUNvb3JkaW5hdGVzKHRleHR1cmVDb29yZGluYXRlcywgbGVmdCwgYm90dG9tLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIHRleHR1cmVDb29yZGluYXRlcyA9IHRleHR1cmVDb29yZGluYXRlcy5tYXAoZnVuY3Rpb24odGV4dHVyZUNvb3JkaW5hdGVzKSB7ICAvLy9cbiAgICB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSBhZGQyKG11bHRpcGx5Mih0ZXh0dXJlQ29vcmRpbmF0ZXMsIFsgd2lkdGgsIGhlaWdodCBdICksIFsgbGVmdCwgYm90dG9tIF0pO1xuXG4gICAgcmV0dXJuIHRleHR1cmVDb29yZGluYXRlcztcbiAgfSk7XG5cbiAgcmV0dXJuIHRleHR1cmVDb29yZGluYXRlcztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZXModmVydGljZXMsIG5vcm1hbCwgcGFyZW50VmVydGljZXMsIHRleHR1cmVDb29yZGluYXRlcykge1xuICBjb25zdCBhcmJpdHJhcnlSb3RhdGlvblF1YXRlcm5pb24gPSBjYWxjdWxhdGVBcmJpdHJhcnlSb3RhdGlvblF1YXRlcm5pb24obm9ybWFsKSxcbiAgICAgICAgcm90YXRpb25RdWF0ZXJuaW9uID0gYXJiaXRyYXJ5Um90YXRpb25RdWF0ZXJuaW9uO1xuXG4gIHZlcnRpY2VzID0gcm90YXRlVmVydGljZXModmVydGljZXMsIHJvdGF0aW9uUXVhdGVybmlvbik7XG5cbiAgcGFyZW50VmVydGljZXMgPSByb3RhdGVWZXJ0aWNlcyhwYXJlbnRWZXJ0aWNlcywgcm90YXRpb25RdWF0ZXJuaW9uKTtcblxuICBjb25zdCBmaXJzdFZlcnRleCA9IGZpcnN0KHZlcnRpY2VzKSxcbiAgICAgICAgc2Vjb25kVmVydGV4ID0gc2Vjb25kKHZlcnRpY2VzKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh2ZXJ0aWNlcyksXG4gICAgICAgIGZpcnN0UGFyZW50VmVydGV4ID0gZmlyc3QocGFyZW50VmVydGljZXMpLFxuICAgICAgICBzZWNvbmRQYXJlbnRWZXJ0ZXggPSBzZWNvbmQocGFyZW50VmVydGljZXMpLFxuICAgICAgICB0aGlyZFBhcmVudFZlcnRleCA9IHRoaXJkKHBhcmVudFZlcnRpY2VzKSxcbiAgICAgICAgZmlyc3RUZXh0dXJlQ29vcmRpbmF0ZSA9IGZpcnN0KHRleHR1cmVDb29yZGluYXRlcyksXG4gICAgICAgIHNlY29uZFRleHR1cmVDb29yZGluYXRlID0gc2Vjb25kKHRleHR1cmVDb29yZGluYXRlcyksXG4gICAgICAgIHRoaXJkVGV4dHVyZUNvb3JkaW5hdGUgPSB0aGlyZCh0ZXh0dXJlQ29vcmRpbmF0ZXMpLFxuICAgICAgICBmaXJzdFZlcnRleFBvc2l0aW9uID0gZmlyc3RWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgc2Vjb25kVmVydGV4UG9zaXRpb24gPSBzZWNvbmRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXhQb3NpdGlvbiA9IHRoaXJkVmVydGV4LmdldFBvc2l0aW9uKCksXG4gICAgICAgIGZpcnN0UGFyZW50VmVydGV4UG9zaXRpb24gPSBmaXJzdFBhcmVudFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICBzZWNvbmRQYXJlbnRWZXJ0ZXhQb3NpdGlvbiA9IHNlY29uZFBhcmVudFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICB0aGlyZFBhcmVudFZlcnRleFBvc2l0aW9uID0gdGhpcmRQYXJlbnRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgUjF4ID0gZmlyc3RWZXJ0ZXhQb3NpdGlvblswXSwgIC8vL1xuICAgICAgICBSMXkgPSBmaXJzdFZlcnRleFBvc2l0aW9uWzFdLCAgLy8vXG4gICAgICAgIFIyeCA9IHNlY29uZFZlcnRleFBvc2l0aW9uWzBdLCAvLy9cbiAgICAgICAgUjJ5ID0gc2Vjb25kVmVydGV4UG9zaXRpb25bMV0sIC8vL1xuICAgICAgICBSM3ggPSB0aGlyZFZlcnRleFBvc2l0aW9uWzBdLCAgLy8vXG4gICAgICAgIFIzeSA9IHRoaXJkVmVydGV4UG9zaXRpb25bMV0sICAvLy9cbiAgICAgICAgUDF4ID0gZmlyc3RQYXJlbnRWZXJ0ZXhQb3NpdGlvblswXSwgLy8vXG4gICAgICAgIFAyeCA9IHNlY29uZFBhcmVudFZlcnRleFBvc2l0aW9uWzBdLCAvLy9cbiAgICAgICAgUDN4ID0gdGhpcmRQYXJlbnRWZXJ0ZXhQb3NpdGlvblswXSwgLy8vXG4gICAgICAgIFAxeSA9IGZpcnN0UGFyZW50VmVydGV4UG9zaXRpb25bMV0sIC8vL1xuICAgICAgICBQMnkgPSBzZWNvbmRQYXJlbnRWZXJ0ZXhQb3NpdGlvblsxXSwgLy8vXG4gICAgICAgIFAzeSA9IHRoaXJkUGFyZW50VmVydGV4UG9zaXRpb25bMV0sIC8vL1xuICAgICAgICBQMXUgPSBmaXJzdFRleHR1cmVDb29yZGluYXRlWzBdLCAvLy9cbiAgICAgICAgUDF2ID0gZmlyc3RUZXh0dXJlQ29vcmRpbmF0ZVsxXSwgLy8vXG4gICAgICAgIFAydSA9IHNlY29uZFRleHR1cmVDb29yZGluYXRlWzBdLCAvLy9cbiAgICAgICAgUDJ2ID0gc2Vjb25kVGV4dHVyZUNvb3JkaW5hdGVbMV0sIC8vL1xuICAgICAgICBQM3UgPSB0aGlyZFRleHR1cmVDb29yZGluYXRlWzBdLCAvLy9cbiAgICAgICAgUDN2ID0gdGhpcmRUZXh0dXJlQ29vcmRpbmF0ZVsxXSwgLy8vXG4gICAgICAgIHRleHR1cmVDb29yZGluYXRlc01hdHJpeCA9IGludmVydDMoWyAxLCAxLCAxLCBQMXUsIFAydSwgUDN1LCBQMXYsIFAydiwgUDN2IF0pLFxuICAgICAgICBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnQgPSB0cmFuc2Zvcm0zKFsgUDF4LCBQMngsIFAzeCBdLCB0ZXh0dXJlQ29vcmRpbmF0ZXNNYXRyaXgpLFxuICAgICAgICBzZWNvbmRUcmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzQ29tcG9uZW50ID0gdHJhbnNmb3JtMyhbIFAxeSwgUDJ5LCBQM3kgXSwgdGV4dHVyZUNvb3JkaW5hdGVzTWF0cml4KSxcbiAgICAgICAgT3ggPSBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMF0sICAvLy9cbiAgICAgICAgVXggPSBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMV0sICAvLy9cbiAgICAgICAgVnggPSBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMl0sICAvLy9cbiAgICAgICAgT3kgPSBzZWNvbmRUcmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzQ29tcG9uZW50WzBdLCAgLy8vXG4gICAgICAgIFV5ID0gc2Vjb25kVHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc0NvbXBvbmVudFsxXSwgIC8vL1xuICAgICAgICBWeSA9IHNlY29uZFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMl0sICAvLy9cbiAgICAgICAgdHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc01hdHJpeCA9IGludmVydDIoWyBVeCwgVXksIFZ4LCBWeSBdKSxcbiAgICAgICAgZmlyc3RBZGp1c3RlZFRleHR1cmVDb29yZGluYXRlc0NvbXBvbmVudCA9IHRyYW5zZm9ybTIoWyBSMXggLSBPeCwgUjF5IC0gT3kgXSwgdHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc01hdHJpeCksXG4gICAgICAgIHNlY29uZEFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVzQ29tcG9uZW50ID0gdHJhbnNmb3JtMihbIFIyeCAtIE94LCBSMnkgLSBPeSBdLCB0cmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzTWF0cml4KSxcbiAgICAgICAgdGhpcmRBZGp1c3RlZFRleHR1cmVDb29yZGluYXRlc0NvbXBvbmVudCA9IHRyYW5zZm9ybTIoWyBSM3ggLSBPeCwgUjN5IC0gT3kgXSwgdHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc01hdHJpeCksXG4gICAgICAgIGFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVzID0gW1xuICAgICAgICAgIGZpcnN0QWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZXNDb21wb25lbnQsXG4gICAgICAgICAgc2Vjb25kQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZXNDb21wb25lbnQsXG4gICAgICAgICAgdGhpcmRBZGp1c3RlZFRleHR1cmVDb29yZGluYXRlc0NvbXBvbmVudCxcbiAgICAgICAgXTtcblxuICByZXR1cm4gYWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZXM7XG59XG5cbmZ1bmN0aW9uIHRleHR1cmVDb29yZGluYXRlc0Zyb21UZXh0dXJlQ29vcmRpbmF0ZXNBbmRJbmRleCh0ZXh0dXJlQ29vcmRpbmF0ZXMsIGluZGV4KSB7ICAvLy9cbiAgdGV4dHVyZUNvb3JkaW5hdGVzID0gdGV4dHVyZUNvb3JkaW5hdGVzLnNsaWNlKGluZGV4ICogMywgaW5kZXggKiAzICsgMyk7ICAvLy9cblxuICByZXR1cm4gdGV4dHVyZUNvb3JkaW5hdGVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2xvbmVUZXh0dXJlQ29vcmRpbmF0ZXMsXG4gIGNhbGN1bGF0ZVZlcnRleFRleHR1cmVDb29yZGluYXRlcyxcbiAgY2FsY3VsYXRlQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZXMsXG4gIHRleHR1cmVDb29yZGluYXRlc0Zyb21UZXh0dXJlQ29vcmRpbmF0ZXNBbmRJbmRleFxufTtcbiJdfQ==