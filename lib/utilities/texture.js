"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloneTextureCoordinateTuples = cloneTextureCoordinateTuples;
exports.calculateMappedTextureCoordinateTuples = calculateMappedTextureCoordinateTuples;
exports.calculateAdjustedTextureCoordinateTuples = calculateAdjustedTextureCoordinateTuples;

var _vertices = require("../utilities/vertices");

var _matrix = require("../maths/matrix");

var _array = require("../utilities/array");

var _quaternion = require("../utilities/quaternion");

var _vector = require("../maths/vector");

function cloneTextureCoordinateTuples(textureCoordinateTuples) {
  textureCoordinateTuples = textureCoordinateTuples.map(function (textureCoordinateTuple) {
    return textureCoordinateTuple.slice();
  }); ///

  return textureCoordinateTuples;
}

function calculateMappedTextureCoordinateTuples(textureCoordinateTuples, extent) {
  var left = extent.left,
      bottom = extent.bottom,
      width = extent.width,
      height = extent.height,
      mappedTextureCoordinateTuples = textureCoordinateTuples.map(function (textureCoordinateTuple) {
    return (0, _vector.add2)((0, _vector.multiply2)(textureCoordinateTuple, [width, height]), [left, bottom]);
  }); ///

  return mappedTextureCoordinateTuples;
}

function calculateAdjustedTextureCoordinateTuples(vertices, normal, parentVertices, textureCoordinateTuples) {
  var arbitraryRotationQuaternion = (0, _quaternion.calculateArbitraryRotationQuaternion)(normal),
      rotationQuaternion = arbitraryRotationQuaternion; ///

  var tempVertices = (0, _vertices.rotateVertices)(vertices, rotationQuaternion);
  parentVertices = (0, _vertices.rotateVertices)(parentVertices, rotationQuaternion);
  vertices = tempVertices; ///

  var firstVertex = (0, _array.first)(vertices),
      secondVertex = (0, _array.second)(vertices),
      thirdVertex = (0, _array.third)(vertices),
      firstParentVertex = (0, _array.first)(parentVertices),
      secondParentVertex = (0, _array.second)(parentVertices),
      thirdParentVertex = (0, _array.third)(parentVertices),
      firstTextureCoordinateTuple = (0, _array.first)(textureCoordinateTuples),
      secondTextureCoordinateTuple = (0, _array.second)(textureCoordinateTuples),
      thirdTextureCoordinateTuple = (0, _array.third)(textureCoordinateTuples),
      firstVertexPosition = firstVertex.getPosition(),
      secondVertexPosition = secondVertex.getPosition(),
      thirdVertexPosition = thirdVertex.getPosition(),
      firstParentVertexPosition = firstParentVertex.getPosition(),
      secondParentVertexPosition = secondParentVertex.getPosition(),
      thirdParentVertexPosition = thirdParentVertex.getPosition(),
      R1x = firstVertexPosition[0],
      ///
  R1y = firstVertexPosition[1],
      ///
  R2x = secondVertexPosition[0],
      ///
  R2y = secondVertexPosition[1],
      ///
  R3x = thirdVertexPosition[0],
      ///
  R3y = thirdVertexPosition[1],
      ///
  P1x = firstParentVertexPosition[0],
      ///
  P2x = secondParentVertexPosition[0],
      ///
  P3x = thirdParentVertexPosition[0],
      ///
  P1y = firstParentVertexPosition[1],
      ///
  P2y = secondParentVertexPosition[1],
      ///
  P3y = thirdParentVertexPosition[1],
      ///
  P1u = firstTextureCoordinateTuple[0],
      ///
  P1v = firstTextureCoordinateTuple[1],
      ///
  P2u = secondTextureCoordinateTuple[0],
      ///
  P2v = secondTextureCoordinateTuple[1],
      ///
  P3u = thirdTextureCoordinateTuple[0],
      ///
  P3v = thirdTextureCoordinateTuple[1],
      ///
  textureCoordinatesMatrix = (0, _matrix.invert3)([1, 1, 1, P1u, P2u, P3u, P1v, P2v, P3v]),
      firstTransformedParentVerticesComponent = (0, _vector.transform3)([P1x, P2x, P3x], textureCoordinatesMatrix),
      secondTransformedParentVerticesComponent = (0, _vector.transform3)([P1y, P2y, P3y], textureCoordinatesMatrix),
      Ox = firstTransformedParentVerticesComponent[0],
      ///
  Ux = firstTransformedParentVerticesComponent[1],
      ///
  Vx = firstTransformedParentVerticesComponent[2],
      ///
  Oy = secondTransformedParentVerticesComponent[0],
      ///
  Uy = secondTransformedParentVerticesComponent[1],
      ///
  Vy = secondTransformedParentVerticesComponent[2],
      ///
  transformedParentVerticesMatrix = (0, _matrix.invert2)([Ux, Uy, Vx, Vy]),
      firstAdjustedTextureCoordinate = (0, _vector.transform2)([R1x - Ox, R1y - Oy], transformedParentVerticesMatrix),
      secondAdjustedTextureCoordinate = (0, _vector.transform2)([R2x - Ox, R2y - Oy], transformedParentVerticesMatrix),
      thirdAdjustedTextureCoordinate = (0, _vector.transform2)([R3x - Ox, R3y - Oy], transformedParentVerticesMatrix),
      adjustedTextureCoordinateTuple = [firstAdjustedTextureCoordinate, secondAdjustedTextureCoordinate, thirdAdjustedTextureCoordinate];
  return adjustedTextureCoordinateTuple;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHR1cmUuanMiXSwibmFtZXMiOlsiY2xvbmVUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcyIsInRleHR1cmVDb29yZGluYXRlVHVwbGVzIiwibWFwIiwidGV4dHVyZUNvb3JkaW5hdGVUdXBsZSIsInNsaWNlIiwiY2FsY3VsYXRlTWFwcGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMiLCJleHRlbnQiLCJsZWZ0IiwiYm90dG9tIiwid2lkdGgiLCJoZWlnaHQiLCJtYXBwZWRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcyIsImNhbGN1bGF0ZUFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMiLCJ2ZXJ0aWNlcyIsIm5vcm1hbCIsInBhcmVudFZlcnRpY2VzIiwiYXJiaXRyYXJ5Um90YXRpb25RdWF0ZXJuaW9uIiwicm90YXRpb25RdWF0ZXJuaW9uIiwidGVtcFZlcnRpY2VzIiwiZmlyc3RWZXJ0ZXgiLCJzZWNvbmRWZXJ0ZXgiLCJ0aGlyZFZlcnRleCIsImZpcnN0UGFyZW50VmVydGV4Iiwic2Vjb25kUGFyZW50VmVydGV4IiwidGhpcmRQYXJlbnRWZXJ0ZXgiLCJmaXJzdFRleHR1cmVDb29yZGluYXRlVHVwbGUiLCJzZWNvbmRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlIiwidGhpcmRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlIiwiZmlyc3RWZXJ0ZXhQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwic2Vjb25kVmVydGV4UG9zaXRpb24iLCJ0aGlyZFZlcnRleFBvc2l0aW9uIiwiZmlyc3RQYXJlbnRWZXJ0ZXhQb3NpdGlvbiIsInNlY29uZFBhcmVudFZlcnRleFBvc2l0aW9uIiwidGhpcmRQYXJlbnRWZXJ0ZXhQb3NpdGlvbiIsIlIxeCIsIlIxeSIsIlIyeCIsIlIyeSIsIlIzeCIsIlIzeSIsIlAxeCIsIlAyeCIsIlAzeCIsIlAxeSIsIlAyeSIsIlAzeSIsIlAxdSIsIlAxdiIsIlAydSIsIlAydiIsIlAzdSIsIlAzdiIsInRleHR1cmVDb29yZGluYXRlc01hdHJpeCIsImZpcnN0VHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc0NvbXBvbmVudCIsInNlY29uZFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnQiLCJPeCIsIlV4IiwiVngiLCJPeSIsIlV5IiwiVnkiLCJ0cmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzTWF0cml4IiwiZmlyc3RBZGp1c3RlZFRleHR1cmVDb29yZGluYXRlIiwic2Vjb25kQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZSIsInRoaXJkQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZSIsImFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVPLFNBQVNBLDRCQUFULENBQXNDQyx1QkFBdEMsRUFBK0Q7QUFDcEVBLEVBQUFBLHVCQUF1QixHQUFHQSx1QkFBdUIsQ0FBQ0MsR0FBeEIsQ0FBNEIsVUFBQ0Msc0JBQUQ7QUFBQSxXQUE0QkEsc0JBQXNCLENBQUNDLEtBQXZCLEVBQTVCO0FBQUEsR0FBNUIsQ0FBMUIsQ0FEb0UsQ0FDZ0Q7O0FBRXBILFNBQU9ILHVCQUFQO0FBQ0Q7O0FBRU0sU0FBU0ksc0NBQVQsQ0FBZ0RKLHVCQUFoRCxFQUF5RUssTUFBekUsRUFBaUY7QUFBQSxNQUM5RUMsSUFEOEUsR0FDOUNELE1BRDhDLENBQzlFQyxJQUQ4RTtBQUFBLE1BQ3hFQyxNQUR3RSxHQUM5Q0YsTUFEOEMsQ0FDeEVFLE1BRHdFO0FBQUEsTUFDaEVDLEtBRGdFLEdBQzlDSCxNQUQ4QyxDQUNoRUcsS0FEZ0U7QUFBQSxNQUN6REMsTUFEeUQsR0FDOUNKLE1BRDhDLENBQ3pESSxNQUR5RDtBQUFBLE1BRWhGQyw2QkFGZ0YsR0FFaERWLHVCQUF1QixDQUFDQyxHQUF4QixDQUE0QixVQUFDQyxzQkFBRDtBQUFBLFdBQTRCLGtCQUFLLHVCQUFVQSxzQkFBVixFQUFrQyxDQUFFTSxLQUFGLEVBQVNDLE1BQVQsQ0FBbEMsQ0FBTCxFQUE0RCxDQUFFSCxJ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QUFDbkRLLEVBQUFBLEVBQUUsR0FBR0wsd0NBQXdDLENBQUMsQ0FBRCxDQXhDbkQ7QUFBQSxNQXdDeUQ7QUFDbkRNLEVBQUFBLEVBQUUsR0FBR04sd0NBQXdDLENBQUMsQ0FBRCxDQXpDbkQ7QUFBQSxNQXlDeUQ7QUFDbkRPLEVBQUFBLCtCQUErQixHQUFHLHFCQUFRLENBQUVMLEVBQUYsRUFBTUcsRUFBTixFQUFVRixFQUFWLEVBQWNHLEVBQWQsQ0FBUixDQTFDeEM7QUFBQSxNQTJDTUUsOEJBQThCLEdBQUcsd0JBQVcsQ0FBRTVCLEdBQUcsR0FBR3FCLEVBQVIsRUFBWXBCLEdBQUcsR0FBR3VCLEVBQWxCLENBQVgsRUFBbUNHLCtCQUFuQyxDQTNDdkM7QUFBQSxNQTRDTUUsK0JBQStCLEdBQUcsd0JBQVcsQ0FBRTNCLEdBQUcsR0FBR21CLEVBQVIsRUFBWWxCLEdBQUcsR0FBR3FCLEVBQWxCLENBQVgsRUFBbUNHLCtCQUFuQyxDQTVDeEM7QUFBQSxNQTZDTUcsOEJBQThCLEdBQUcsd0JBQVcsQ0FBRTFCLEdBQUcsR0FBR2lCLEVBQVIsRUFBWWhCLEdBQUcsR0FBR21CLEVBQWxCLENBQVgsRUFBbUNHLCtCQUFuQyxDQTdDdkM7QUFBQSxNQThDTUksOEJBQThCLEdBQUcsQ0FDL0JILDhCQUQrQixFQUUvQkMsK0JBRitCLEVBRy9CQyw4QkFIK0IsQ0E5Q3ZDO0FBb0RBLFNBQU9DLDhCQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcm90YXRlVmVydGljZXMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3ZlcnRpY2VzXCI7XG5pbXBvcnQgeyBpbnZlcnQyLCBpbnZlcnQzIH0gZnJvbSBcIi4uL21hdGhzL21hdHJpeFwiO1xuaW1wb3J0IHsgZmlyc3QsIHNlY29uZCwgdGhpcmQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBjYWxjdWxhdGVBcmJpdHJhcnlSb3RhdGlvblF1YXRlcm5pb24gfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1YXRlcm5pb25cIjtcbmltcG9ydCB7IGFkZDIsIG11bHRpcGx5MiwgdHJhbnNmb3JtMiwgdHJhbnNmb3JtMyB9IGZyb20gXCIuLi9tYXRocy92ZWN0b3JcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lVGV4dHVyZUNvb3JkaW5hdGVUdXBsZXModGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMpIHtcbiAgdGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMgPSB0ZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcy5tYXAoKHRleHR1cmVDb29yZGluYXRlVHVwbGUpID0+IHRleHR1cmVDb29yZGluYXRlVHVwbGUuc2xpY2UoKSk7ICAvLy9cblxuICByZXR1cm4gdGV4dHVyZUNvb3JkaW5hdGVUdXBsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVNYXBwZWRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcyh0ZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcywgZXh0ZW50KSB7XG4gIGNvbnN0IHsgbGVmdCwgYm90dG9tLCB3aWR0aCwgaGVpZ2h0IH0gPSBleHRlbnQsXG4gICAgICAgIG1hcHBlZFRleHR1cmVDb29yZGluYXRlVHVwbGVzID0gdGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMubWFwKCh0ZXh0dXJlQ29vcmRpbmF0ZVR1cGxlKSA9PiBhZGQyKG11bHRpcGx5Mih0ZXh0dXJlQ29vcmRpbmF0ZVR1cGxlLCBbIHdpZHRoLCBoZWlnaHQgXSApLCBbIGxlZnQsIGJvdHRvbSBdKSk7IC8vL1xuXG4gIHJldHVybiBtYXBwZWRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZXModmVydGljZXMsIG5vcm1hbCwgcGFyZW50VmVydGljZXMsIHRleHR1cmVDb29yZGluYXRlVHVwbGVzKSB7XG4gIGNvbnN0IGFyYml0cmFyeVJvdGF0aW9uUXVhdGVybmlvbiA9IGNhbGN1bGF0ZUFyYml0cmFyeVJvdGF0aW9uUXVhdGVybmlvbihub3JtYWwpLFxuICAgICAgICByb3RhdGlvblF1YXRlcm5pb24gPSBhcmJpdHJhcnlSb3RhdGlvblF1YXRlcm5pb247IC8vL1xuXG4gIGNvbnN0IHRlbXBWZXJ0aWNlcyA9IHJvdGF0ZVZlcnRpY2VzKHZlcnRpY2VzLCByb3RhdGlvblF1YXRlcm5pb24pO1xuXG4gIHBhcmVudFZlcnRpY2VzID0gcm90YXRlVmVydGljZXMocGFyZW50VmVydGljZXMsIHJvdGF0aW9uUXVhdGVybmlvbik7XG5cbiAgdmVydGljZXMgPSB0ZW1wVmVydGljZXM7ICAvLy9cblxuICBjb25zdCBmaXJzdFZlcnRleCA9IGZpcnN0KHZlcnRpY2VzKSxcbiAgICAgICAgc2Vjb25kVmVydGV4ID0gc2Vjb25kKHZlcnRpY2VzKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh2ZXJ0aWNlcyksXG4gICAgICAgIGZpcnN0UGFyZW50VmVydGV4ID0gZmlyc3QocGFyZW50VmVydGljZXMpLFxuICAgICAgICBzZWNvbmRQYXJlbnRWZXJ0ZXggPSBzZWNvbmQocGFyZW50VmVydGljZXMpLFxuICAgICAgICB0aGlyZFBhcmVudFZlcnRleCA9IHRoaXJkKHBhcmVudFZlcnRpY2VzKSxcbiAgICAgICAgZmlyc3RUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlID0gZmlyc3QodGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMpLFxuICAgICAgICBzZWNvbmRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlID0gc2Vjb25kKHRleHR1cmVDb29yZGluYXRlVHVwbGVzKSxcbiAgICAgICAgdGhpcmRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlID0gdGhpcmQodGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMpLFxuICAgICAgICBmaXJzdFZlcnRleFBvc2l0aW9uID0gZmlyc3RWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgc2Vjb25kVmVydGV4UG9zaXRpb24gPSBzZWNvbmRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXhQb3NpdGlvbiA9IHRoaXJkVmVydGV4LmdldFBvc2l0aW9uKCksXG4gICAgICAgIGZpcnN0UGFyZW50VmVydGV4UG9zaXRpb24gPSBmaXJzdFBhcmVudFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICBzZWNvbmRQYXJlbnRWZXJ0ZXhQb3NpdGlvbiA9IHNlY29uZFBhcmVudFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICB0aGlyZFBhcmVudFZlcnRleFBvc2l0aW9uID0gdGhpcmRQYXJlbnRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgUjF4ID0gZmlyc3RWZXJ0ZXhQb3NpdGlvblswXSwgIC8vL1xuICAgICAgICBSMXkgPSBmaXJzdFZlcnRleFBvc2l0aW9uWzFdLCAgLy8vXG4gICAgICAgIFIyeCA9IHNlY29uZFZlcnRleFBvc2l0aW9uWzBdLCAvLy9cbiAgICAgICAgUjJ5ID0gc2Vjb25kVmVydGV4UG9zaXRpb25bMV0sIC8vL1xuICAgICAgICBSM3ggPSB0aGlyZFZlcnRleFBvc2l0aW9uWzBdLCAgLy8vXG4gICAgICAgIFIzeSA9IHRoaXJkVmVydGV4UG9zaXRpb25bMV0sICAvLy9cbiAgICAgICAgUDF4ID0gZmlyc3RQYXJlbnRWZXJ0ZXhQb3NpdGlvblswXSwgLy8vXG4gICAgICAgIFAyeCA9IHNlY29uZFBhcmVudFZlcnRleFBvc2l0aW9uWzBdLCAvLy9cbiAgICAgICAgUDN4ID0gdGhpcmRQYXJlbnRWZXJ0ZXhQb3NpdGlvblswXSwgLy8vXG4gICAgICAgIFAxeSA9IGZpcnN0UGFyZW50VmVydGV4UG9zaXRpb25bMV0sIC8vL1xuICAgICAgICBQMnkgPSBzZWNvbmRQYXJlbnRWZXJ0ZXhQb3NpdGlvblsxXSwgLy8vXG4gICAgICAgIFAzeSA9IHRoaXJkUGFyZW50VmVydGV4UG9zaXRpb25bMV0sIC8vL1xuICAgICAgICBQMXUgPSBmaXJzdFRleHR1cmVDb29yZGluYXRlVHVwbGVbMF0sIC8vL1xuICAgICAgICBQMXYgPSBmaXJzdFRleHR1cmVDb29yZGluYXRlVHVwbGVbMV0sIC8vL1xuICAgICAgICBQMnUgPSBzZWNvbmRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlWzBdLCAvLy9cbiAgICAgICAgUDJ2ID0gc2Vjb25kVGV4dHVyZUNvb3JkaW5hdGVUdXBsZVsxXSwgLy8vXG4gICAgICAgIFAzdSA9IHRoaXJkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZVswXSwgLy8vXG4gICAgICAgIFAzdiA9IHRoaXJkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZVsxXSwgLy8vXG4gICAgICAgIHRleHR1cmVDb29yZGluYXRlc01hdHJpeCA9IGludmVydDMoWyAxLCAxLCAxLCBQMXUsIFAydSwgUDN1LCBQMXYsIFAydiwgUDN2IF0pLFxuICAgICAgICBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnQgPSB0cmFuc2Zvcm0zKFsgUDF4LCBQMngsIFAzeCBdLCB0ZXh0dXJlQ29vcmRpbmF0ZXNNYXRyaXgpLFxuICAgICAgICBzZWNvbmRUcmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzQ29tcG9uZW50ID0gdHJhbnNmb3JtMyhbIFAxeSwgUDJ5LCBQM3kgXSwgdGV4dHVyZUNvb3JkaW5hdGVzTWF0cml4KSxcbiAgICAgICAgT3ggPSBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMF0sICAvLy9cbiAgICAgICAgVXggPSBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMV0sICAvLy9cbiAgICAgICAgVnggPSBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMl0sICAvLy9cbiAgICAgICAgT3kgPSBzZWNvbmRUcmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzQ29tcG9uZW50WzBdLCAgLy8vXG4gICAgICAgIFV5ID0gc2Vjb25kVHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc0NvbXBvbmVudFsxXSwgIC8vL1xuICAgICAgICBWeSA9IHNlY29uZFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMl0sICAvLy9cbiAgICAgICAgdHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc01hdHJpeCA9IGludmVydDIoWyBVeCwgVXksIFZ4LCBWeSBdKSxcbiAgICAgICAgZmlyc3RBZGp1c3RlZFRleHR1cmVDb29yZGluYXRlID0gdHJhbnNmb3JtMihbIFIxeCAtIE94LCBSMXkgLSBPeSBdLCB0cmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzTWF0cml4KSxcbiAgICAgICAgc2Vjb25kQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZSA9IHRyYW5zZm9ybTIoWyBSMnggLSBPeCwgUjJ5IC0gT3kgXSwgdHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc01hdHJpeCksXG4gICAgICAgIHRoaXJkQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZSA9IHRyYW5zZm9ybTIoWyBSM3ggLSBPeCwgUjN5IC0gT3kgXSwgdHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc01hdHJpeCksXG4gICAgICAgIGFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZSA9IFtcbiAgICAgICAgICBmaXJzdEFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGUsXG4gICAgICAgICAgc2Vjb25kQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZSxcbiAgICAgICAgICB0aGlyZEFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGUsXG4gICAgICAgIF07XG5cbiAgcmV0dXJuIGFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZTtcbn1cbiJdfQ==