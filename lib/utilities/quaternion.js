'use strict';

var vec3 = require('../maths/vec3'),
    arrayUtilities = require('../utilities/array'),
    angleUtilities = require('../utilities/angle');

var normalise = vec3.normalise,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    fourth = arrayUtilities.fourth,
    calculateHalfAngleCosine = angleUtilities.calculateHalfAngleCosine,
    calculateHalfAngleSine = angleUtilities.calculateHalfAngleSine;


function rotateImaginaryQuaternion(imaginaryQuaternion, rotationQuaternion, inverseRotationQuaternion) {
  var rotatedImaginaryQuaternion = hamiltonProduct(hamiltonProduct(rotationQuaternion, imaginaryQuaternion), inverseRotationQuaternion);

  return rotatedImaginaryQuaternion;
}

function calculateRotationQuaternion(normal) {
  var angleCosineBetweenNormalAndZAxis = calculateAngleCosineBetweenNormalAndZAxis(normal),
      crossProductOfNormalWithZAxis = calculateCrossProductOfNormalWithZAxis(normal),
      angleOfRotationCosine = angleCosineBetweenNormalAndZAxis,
      angleOfRotationCosineAbsoluteValue = Math.abs(angleOfRotationCosine),
      axisOfRotation = angleOfRotationCosineAbsoluteValue === 1 ? [1, 0, 0] : ///
  crossProductOfNormalWithZAxis,
      unitAxisOfRotation = normalise(axisOfRotation),
      halfAngleOfRotationCosine = calculateHalfAngleCosine(angleOfRotationCosine),
      halfAngleOfRotationSine = calculateHalfAngleSine(angleOfRotationCosine),
      unitAxisOfRotationComponents = unitAxisOfRotation,
      ///
  firstAxisOfRotationComponent = first(unitAxisOfRotationComponents),
      secondAxisOfRotationComponent = second(unitAxisOfRotationComponents),
      thirdAxisOfRotationComponent = third(unitAxisOfRotationComponents),
      rotationQuaternion = [halfAngleOfRotationCosine, firstAxisOfRotationComponent * halfAngleOfRotationSine, secondAxisOfRotationComponent * halfAngleOfRotationSine, thirdAxisOfRotationComponent * halfAngleOfRotationSine];

  return rotationQuaternion;
}

function calculateInverseRotationQuaternion(rotationQuaternion) {
  var rotationQuaternionComponents = rotationQuaternion,
      ///
  firstRotationQuaternionComponent = first(rotationQuaternionComponents),
      secondRotationQuaternionComponent = second(rotationQuaternionComponents),
      thirdRotationQuaternionComponent = third(rotationQuaternionComponents),
      fourthRotationQuaternionComponent = fourth(rotationQuaternionComponents),
      inverseRotationQuaternion = [firstRotationQuaternionComponent, -secondRotationQuaternionComponent, -thirdRotationQuaternionComponent, -fourthRotationQuaternionComponent];

  return inverseRotationQuaternion;
}

function calculateForwardsRotationQuaternion(rotationQuaternion) {
  var forwardsRotationQuaternion = rotationQuaternion.slice();

  return forwardsRotationQuaternion;
}

function calculateBackwardsRotationQuaternion(rotationQuaternion) {
  var rotationQuaternionComponents = rotationQuaternion.slice(),
      ///
  backwardsRotationQuaternionComponents = rotationQuaternionComponents.map(function (rotationQuaternionComponent, index) {
    var backwardsRotationQuaternionComponent = index < 1 ? ///
    +rotationQuaternionComponent : -rotationQuaternionComponent;

    return backwardsRotationQuaternionComponent;
  }),
      backwardsRotationQuaternion = backwardsRotationQuaternionComponents;

  return backwardsRotationQuaternion;
}

module.exports = {
  rotateImaginaryQuaternion: rotateImaginaryQuaternion,
  calculateRotationQuaternion: calculateRotationQuaternion,
  calculateInverseRotationQuaternion: calculateInverseRotationQuaternion,
  calculateForwardsRotationQuaternion: calculateForwardsRotationQuaternion,
  calculateBackwardsRotationQuaternion: calculateBackwardsRotationQuaternion
};

function calculateAngleCosineBetweenNormalAndZAxis(normal) {
  var unitNormal = normalise(normal),
      unitNormalComponents = unitNormal,
      ///
  thirdUnitNormalComponent = third(unitNormalComponents),
      angleCosineBetweenNormalAndZAxis = thirdUnitNormalComponent; ///

  return angleCosineBetweenNormalAndZAxis;
}

function calculateCrossProductOfNormalWithZAxis(normal) {
  var normalComponents = normal,
      ///
  firstNormalComponent = first(normalComponents),
      secondNormalComponent = second(normalComponents),
      crossProductOfNormalWithZAxis = [+secondNormalComponent, -firstNormalComponent, 0];

  return crossProductOfNormalWithZAxis;
}

function hamiltonProduct(quaternionA, quaternionB) {
  var quaternionAComponents = quaternionA,
      ///
  quaternionBComponents = quaternionB,
      ///
  firstQuaternionAComponent = first(quaternionAComponents),
      secondQuaternionAComponent = second(quaternionAComponents),
      thirdQuaternionAComponent = third(quaternionAComponents),
      fourthQuaternionAComponent = fourth(quaternionAComponents),
      firstQuaternionBComponent = first(quaternionBComponents),
      secondQuaternionBComponent = second(quaternionBComponents),
      thirdQuaternionBComponent = third(quaternionBComponents),
      fourthQuaternionBComponent = fourth(quaternionBComponents),
      a1 = firstQuaternionAComponent,
      b1 = secondQuaternionAComponent,
      c1 = thirdQuaternionAComponent,
      d1 = fourthQuaternionAComponent,
      a2 = firstQuaternionBComponent,
      b2 = secondQuaternionBComponent,
      c2 = thirdQuaternionBComponent,
      d2 = fourthQuaternionBComponent,
      a = a1 * a2 - b1 * b2 - c1 * c2 - d1 * d2,
      b = a1 * b2 + b1 * a2 + c1 * d2 - d1 * c2,
      c = a1 * c2 - b1 * d2 + c1 * a2 + d1 * b2,
      d = a1 * d2 + b1 * c2 - c1 * b2 + d1 * a2,
      quaternion = [a, b, c, d];

  return quaternion;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcXVhdGVybmlvbi5qcyJdLCJuYW1lcyI6WyJ2ZWMzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiYW5nbGVVdGlsaXRpZXMiLCJub3JtYWxpc2UiLCJmaXJzdCIsInNlY29uZCIsInRoaXJkIiwiZm91cnRoIiwiY2FsY3VsYXRlSGFsZkFuZ2xlQ29zaW5lIiwiY2FsY3VsYXRlSGFsZkFuZ2xlU2luZSIsInJvdGF0ZUltYWdpbmFyeVF1YXRlcm5pb24iLCJpbWFnaW5hcnlRdWF0ZXJuaW9uIiwicm90YXRpb25RdWF0ZXJuaW9uIiwiaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbiIsInJvdGF0ZWRJbWFnaW5hcnlRdWF0ZXJuaW9uIiwiaGFtaWx0b25Qcm9kdWN0IiwiY2FsY3VsYXRlUm90YXRpb25RdWF0ZXJuaW9uIiwibm9ybWFsIiwiYW5nbGVDb3NpbmVCZXR3ZWVuTm9ybWFsQW5kWkF4aXMiLCJjYWxjdWxhdGVBbmdsZUNvc2luZUJldHdlZW5Ob3JtYWxBbmRaQXhpcyIsImNyb3NzUHJvZHVjdE9mTm9ybWFsV2l0aFpBeGlzIiwiY2FsY3VsYXRlQ3Jvc3NQcm9kdWN0T2ZOb3JtYWxXaXRoWkF4aXMiLCJhbmdsZU9mUm90YXRpb25Db3NpbmUiLCJhbmdsZU9mUm90YXRpb25Db3NpbmVBYnNvbHV0ZVZhbHVlIiwiTWF0aCIsImFicyIsImF4aXNPZlJvdGF0aW9uIiwidW5pdEF4aXNPZlJvdGF0aW9uIiwiaGFsZkFuZ2xlT2ZSb3RhdGlvbkNvc2luZSIsImhhbGZBbmdsZU9mUm90YXRpb25TaW5lIiwidW5pdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50cyIsImZpcnN0QXhpc09mUm90YXRpb25Db21wb25lbnQiLCJzZWNvbmRBeGlzT2ZSb3RhdGlvbkNvbXBvbmVudCIsInRoaXJkQXhpc09mUm90YXRpb25Db21wb25lbnQiLCJjYWxjdWxhdGVJbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uIiwicm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50cyIsImZpcnN0Um90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50Iiwic2Vjb25kUm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50IiwidGhpcmRSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQiLCJmb3VydGhSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQiLCJjYWxjdWxhdGVGb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiIsImZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uIiwic2xpY2UiLCJjYWxjdWxhdGVCYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb24iLCJiYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnRzIiwibWFwIiwicm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50IiwiaW5kZXgiLCJiYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQiLCJiYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb24iLCJtb2R1bGUiLCJleHBvcnRzIiwidW5pdE5vcm1hbCIsInVuaXROb3JtYWxDb21wb25lbnRzIiwidGhpcmRVbml0Tm9ybWFsQ29tcG9uZW50Iiwibm9ybWFsQ29tcG9uZW50cyIsImZpcnN0Tm9ybWFsQ29tcG9uZW50Iiwic2Vjb25kTm9ybWFsQ29tcG9uZW50IiwicXVhdGVybmlvbkEiLCJxdWF0ZXJuaW9uQiIsInF1YXRlcm5pb25BQ29tcG9uZW50cyIsInF1YXRlcm5pb25CQ29tcG9uZW50cyIsImZpcnN0UXVhdGVybmlvbkFDb21wb25lbnQiLCJzZWNvbmRRdWF0ZXJuaW9uQUNvbXBvbmVudCIsInRoaXJkUXVhdGVybmlvbkFDb21wb25lbnQiLCJmb3VydGhRdWF0ZXJuaW9uQUNvbXBvbmVudCIsImZpcnN0UXVhdGVybmlvbkJDb21wb25lbnQiLCJzZWNvbmRRdWF0ZXJuaW9uQkNvbXBvbmVudCIsInRoaXJkUXVhdGVybmlvbkJDb21wb25lbnQiLCJmb3VydGhRdWF0ZXJuaW9uQkNvbXBvbmVudCIsImExIiwiYjEiLCJjMSIsImQxIiwiYTIi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QWYsR0FBb0JKLEtBQUtHLEVBQXpCLEdBQThCRixLQUFLQyxFQXJCN0M7QUFBQSxNQXNCTVEsYUFBYSxDQUFFSixDQUFGLEVBQUtDLENBQUwsRUFBUUMsQ0FBUixFQUFXQyxDQUFYLENBdEJuQjs7QUF3QkEsU0FBT0MsVUFBUDtBQUNEIiwiZmlsZSI6InF1YXRlcm5pb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHZlYzMgPSByZXF1aXJlKCcuLi9tYXRocy92ZWMzJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgYW5nbGVVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYW5nbGUnKTtcblxuY29uc3QgeyBub3JtYWxpc2UgfSA9IHZlYzMsXG4gICAgICB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkLCBmb3VydGggfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBjYWxjdWxhdGVIYWxmQW5nbGVDb3NpbmUsIGNhbGN1bGF0ZUhhbGZBbmdsZVNpbmUgfSA9IGFuZ2xlVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiByb3RhdGVJbWFnaW5hcnlRdWF0ZXJuaW9uKGltYWdpbmFyeVF1YXRlcm5pb24sIHJvdGF0aW9uUXVhdGVybmlvbiwgaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbikge1xuICBjb25zdCByb3RhdGVkSW1hZ2luYXJ5UXVhdGVybmlvbiA9IGhhbWlsdG9uUHJvZHVjdChoYW1pbHRvblByb2R1Y3Qocm90YXRpb25RdWF0ZXJuaW9uLCBpbWFnaW5hcnlRdWF0ZXJuaW9uKSwgaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbik7XG5cbiAgcmV0dXJuIHJvdGF0ZWRJbWFnaW5hcnlRdWF0ZXJuaW9uO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVSb3RhdGlvblF1YXRlcm5pb24obm9ybWFsKSB7XG4gIGNvbnN0IGFuZ2xlQ29zaW5lQmV0d2Vlbk5vcm1hbEFuZFpBeGlzID0gY2FsY3VsYXRlQW5nbGVDb3NpbmVCZXR3ZWVuTm9ybWFsQW5kWkF4aXMobm9ybWFsKSxcbiAgICAgICAgY3Jvc3NQcm9kdWN0T2ZOb3JtYWxXaXRoWkF4aXMgPSBjYWxjdWxhdGVDcm9zc1Byb2R1Y3RPZk5vcm1hbFdpdGhaQXhpcyhub3JtYWwpLFxuICAgICAgICBhbmdsZU9mUm90YXRpb25Db3NpbmUgPSBhbmdsZUNvc2luZUJldHdlZW5Ob3JtYWxBbmRaQXhpcyxcbiAgICAgICAgYW5nbGVPZlJvdGF0aW9uQ29zaW5lQWJzb2x1dGVWYWx1ZSA9IE1hdGguYWJzKGFuZ2xlT2ZSb3RhdGlvbkNvc2luZSksXG4gICAgICAgIGF4aXNPZlJvdGF0aW9uID0gKGFuZ2xlT2ZSb3RhdGlvbkNvc2luZUFic29sdXRlVmFsdWUgPT09IDEpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxLCAwLCAwXSA6IC8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcm9zc1Byb2R1Y3RPZk5vcm1hbFdpdGhaQXhpcyxcbiAgICAgICAgdW5pdEF4aXNPZlJvdGF0aW9uID0gbm9ybWFsaXNlKGF4aXNPZlJvdGF0aW9uKSxcbiAgICAgICAgaGFsZkFuZ2xlT2ZSb3RhdGlvbkNvc2luZSA9IGNhbGN1bGF0ZUhhbGZBbmdsZUNvc2luZShhbmdsZU9mUm90YXRpb25Db3NpbmUpLFxuICAgICAgICBoYWxmQW5nbGVPZlJvdGF0aW9uU2luZSA9IGNhbGN1bGF0ZUhhbGZBbmdsZVNpbmUoYW5nbGVPZlJvdGF0aW9uQ29zaW5lKSxcbiAgICAgICAgdW5pdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50cyA9IHVuaXRBeGlzT2ZSb3RhdGlvbiwgIC8vL1xuICAgICAgICBmaXJzdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50ID0gZmlyc3QodW5pdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50cyksXG4gICAgICAgIHNlY29uZEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50ID0gc2Vjb25kKHVuaXRBeGlzT2ZSb3RhdGlvbkNvbXBvbmVudHMpLFxuICAgICAgICB0aGlyZEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50ID0gdGhpcmQodW5pdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50cyksXG4gICAgICAgIHJvdGF0aW9uUXVhdGVybmlvbiA9IFtcbiAgICAgICAgICBoYWxmQW5nbGVPZlJvdGF0aW9uQ29zaW5lLFxuICAgICAgICAgIGZpcnN0QXhpc09mUm90YXRpb25Db21wb25lbnQgKiBoYWxmQW5nbGVPZlJvdGF0aW9uU2luZSxcbiAgICAgICAgICBzZWNvbmRBeGlzT2ZSb3RhdGlvbkNvbXBvbmVudCAqIGhhbGZBbmdsZU9mUm90YXRpb25TaW5lLFxuICAgICAgICAgIHRoaXJkQXhpc09mUm90YXRpb25Db21wb25lbnQgKiBoYWxmQW5nbGVPZlJvdGF0aW9uU2luZVxuICAgICAgICBdO1xuXG4gIHJldHVybiByb3RhdGlvblF1YXRlcm5pb247XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUludmVyc2VSb3RhdGlvblF1YXRlcm5pb24ocm90YXRpb25RdWF0ZXJuaW9uKSB7XG4gIGNvbnN0IHJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudHMgPSByb3RhdGlvblF1YXRlcm5pb24sICAvLy9cbiAgICAgICAgZmlyc3RSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQgPSBmaXJzdChyb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnRzKSxcbiAgICAgICAgc2Vjb25kUm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50ID0gc2Vjb25kKHJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudHMpLFxuICAgICAgICB0aGlyZFJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCA9IHRoaXJkKHJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudHMpLFxuICAgICAgICBmb3VydGhSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQgPSBmb3VydGgocm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50cyksXG4gICAgICAgIGludmVyc2VSb3RhdGlvblF1YXRlcm5pb24gPSBbXG4gICAgICAgICAgZmlyc3RSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQsXG4gICAgICAgICAgLXNlY29uZFJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCxcbiAgICAgICAgICAtdGhpcmRSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQsXG4gICAgICAgICAgLWZvdXJ0aFJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudFxuICAgICAgICBdO1xuXG4gIHJldHVybiBpbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVGb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbihyb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgY29uc3QgZm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb24gPSByb3RhdGlvblF1YXRlcm5pb24uc2xpY2UoKTtcblxuICByZXR1cm4gZm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb247XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbihyb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgY29uc3Qgcm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50cyA9IHJvdGF0aW9uUXVhdGVybmlvbi5zbGljZSgpLCAvLy9cbiAgICAgICAgYmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50cyA9IHJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudHMubWFwKGZ1bmN0aW9uKHJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCwgaW5kZXgpIHtcbiAgICAgICAgICBjb25zdCBiYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQgPSAoaW5kZXggPCAxKSA/ICAvLy9cbiAgICAgICAgICAgICAgK3JvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCA6XG4gICAgICAgICAgICAgIC1yb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQ7XG4gIFxuICAgICAgICAgIHJldHVybiBiYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQ7XG4gICAgICAgIH0pLFxuICAgICAgICBiYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb24gPSBiYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnRzO1xuXG4gIHJldHVybiBiYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb247XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJvdGF0ZUltYWdpbmFyeVF1YXRlcm5pb246IHJvdGF0ZUltYWdpbmFyeVF1YXRlcm5pb24sXG4gIGNhbGN1bGF0ZVJvdGF0aW9uUXVhdGVybmlvbjogY2FsY3VsYXRlUm90YXRpb25RdWF0ZXJuaW9uLFxuICBjYWxjdWxhdGVJbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uOiBjYWxjdWxhdGVJbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uLFxuICBjYWxjdWxhdGVGb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbjogY2FsY3VsYXRlRm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb24sXG4gIGNhbGN1bGF0ZUJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbjogY2FsY3VsYXRlQmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uXG59O1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVBbmdsZUNvc2luZUJldHdlZW5Ob3JtYWxBbmRaQXhpcyhub3JtYWwpIHtcbiAgY29uc3QgdW5pdE5vcm1hbCA9IG5vcm1hbGlzZShub3JtYWwpLFxuICAgICAgICB1bml0Tm9ybWFsQ29tcG9uZW50cyA9IHVuaXROb3JtYWwsICAvLy9cbiAgICAgICAgdGhpcmRVbml0Tm9ybWFsQ29tcG9uZW50ID0gdGhpcmQodW5pdE5vcm1hbENvbXBvbmVudHMpLFxuICAgICAgICBhbmdsZUNvc2luZUJldHdlZW5Ob3JtYWxBbmRaQXhpcyA9IHRoaXJkVW5pdE5vcm1hbENvbXBvbmVudDsgIC8vL1xuXG4gIHJldHVybiBhbmdsZUNvc2luZUJldHdlZW5Ob3JtYWxBbmRaQXhpcztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlQ3Jvc3NQcm9kdWN0T2ZOb3JtYWxXaXRoWkF4aXMobm9ybWFsKSB7XG4gIGNvbnN0IG5vcm1hbENvbXBvbmVudHMgPSBub3JtYWwsICAvLy9cbiAgICAgICAgZmlyc3ROb3JtYWxDb21wb25lbnQgPSBmaXJzdChub3JtYWxDb21wb25lbnRzKSxcbiAgICAgICAgc2Vjb25kTm9ybWFsQ29tcG9uZW50ID0gc2Vjb25kKG5vcm1hbENvbXBvbmVudHMpLFxuICAgICAgICBjcm9zc1Byb2R1Y3RPZk5vcm1hbFdpdGhaQXhpcyA9IFtcbiAgICAgICAgICArc2Vjb25kTm9ybWFsQ29tcG9uZW50LFxuICAgICAgICAgIC1maXJzdE5vcm1hbENvbXBvbmVudCxcbiAgICAgICAgICAwXG4gICAgICAgIF07XG5cbiAgcmV0dXJuIGNyb3NzUHJvZHVjdE9mTm9ybWFsV2l0aFpBeGlzO1xufVxuXG5mdW5jdGlvbiBoYW1pbHRvblByb2R1Y3QocXVhdGVybmlvbkEsIHF1YXRlcm5pb25CKSB7XG4gIGNvbnN0IHF1YXRlcm5pb25BQ29tcG9uZW50cyA9IHF1YXRlcm5pb25BLCAgLy8vXG4gICAgICAgIHF1YXRlcm5pb25CQ29tcG9uZW50cyA9IHF1YXRlcm5pb25CLCAgLy8vXG4gICAgICAgIGZpcnN0UXVhdGVybmlvbkFDb21wb25lbnQgPSBmaXJzdChxdWF0ZXJuaW9uQUNvbXBvbmVudHMpLFxuICAgICAgICBzZWNvbmRRdWF0ZXJuaW9uQUNvbXBvbmVudCA9IHNlY29uZChxdWF0ZXJuaW9uQUNvbXBvbmVudHMpLFxuICAgICAgICB0aGlyZFF1YXRlcm5pb25BQ29tcG9uZW50ID0gdGhpcmQocXVhdGVybmlvbkFDb21wb25lbnRzKSxcbiAgICAgICAgZm91cnRoUXVhdGVybmlvbkFDb21wb25lbnQgPSBmb3VydGgocXVhdGVybmlvbkFDb21wb25lbnRzKSxcbiAgICAgICAgZmlyc3RRdWF0ZXJuaW9uQkNvbXBvbmVudCA9IGZpcnN0KHF1YXRlcm5pb25CQ29tcG9uZW50cyksXG4gICAgICAgIHNlY29uZFF1YXRlcm5pb25CQ29tcG9uZW50ID0gc2Vjb25kKHF1YXRlcm5pb25CQ29tcG9uZW50cyksXG4gICAgICAgIHRoaXJkUXVhdGVybmlvbkJDb21wb25lbnQgPSB0aGlyZChxdWF0ZXJuaW9uQkNvbXBvbmVudHMpLFxuICAgICAgICBmb3VydGhRdWF0ZXJuaW9uQkNvbXBvbmVudCA9IGZvdXJ0aChxdWF0ZXJuaW9uQkNvbXBvbmVudHMpLFxuICAgICAgICBhMSA9IGZpcnN0UXVhdGVybmlvbkFDb21wb25lbnQsXG4gICAgICAgIGIxID0gc2Vjb25kUXVhdGVybmlvbkFDb21wb25lbnQsXG4gICAgICAgIGMxID0gdGhpcmRRdWF0ZXJuaW9uQUNvbXBvbmVudCxcbiAgICAgICAgZDEgPSBmb3VydGhRdWF0ZXJuaW9uQUNvbXBvbmVudCxcbiAgICAgICAgYTIgPSBmaXJzdFF1YXRlcm5pb25CQ29tcG9uZW50LFxuICAgICAgICBiMiA9IHNlY29uZFF1YXRlcm5pb25CQ29tcG9uZW50LFxuICAgICAgICBjMiA9IHRoaXJkUXVhdGVybmlvbkJDb21wb25lbnQsXG4gICAgICAgIGQyID0gZm91cnRoUXVhdGVybmlvbkJDb21wb25lbnQsXG4gICAgICAgIGEgPSBhMSAqIGEyIC0gYjEgKiBiMiAtIGMxICogYzIgLSBkMSAqIGQyLFxuICAgICAgICBiID0gYTEgKiBiMiArIGIxICogYTIgKyBjMSAqIGQyIC0gZDEgKiBjMixcbiAgICAgICAgYyA9IGExICogYzIgLSBiMSAqIGQyICsgYzEgKiBhMiArIGQxICogYjIsXG4gICAgICAgIGQgPSBhMSAqIGQyICsgYjEgKiBjMiAtIGMxICogYjIgKyBkMSAqIGEyLFxuICAgICAgICBxdWF0ZXJuaW9uID0gWyBhLCBiLCBjLCBkIF07XG5cbiAgcmV0dXJuIHF1YXRlcm5pb247XG59XG4iXX0=