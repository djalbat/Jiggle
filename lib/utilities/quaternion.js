"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rotateImaginaryQuaternion = rotateImaginaryQuaternion;
exports.calculateInverseRotationQuaternion = calculateInverseRotationQuaternion;
exports.calculateForwardsRotationQuaternion = calculateForwardsRotationQuaternion;
exports.calculateBackwardsRotationQuaternion = calculateBackwardsRotationQuaternion;
exports.calculateArbitraryRotationQuaternion = calculateArbitraryRotationQuaternion;
exports.calculateRotationAboutZAxisQuaternion = calculateRotationAboutZAxisQuaternion;

var _vector = require("../maths/vector");

var _approximate = require("../utilities/approximate");

var _array = require("../utilities/array");

var _angle = require("../utilities/angle");

function rotateImaginaryQuaternion(imaginaryQuaternion, rotationQuaternion, inverseRotationQuaternion) {
  return hamiltonProduct(hamiltonProduct(rotationQuaternion, imaginaryQuaternion), inverseRotationQuaternion);
}

function calculateInverseRotationQuaternion(rotationQuaternion) {
  var rotationQuaternionComponents = rotationQuaternion,
      ///
  firstRotationQuaternionComponent = (0, _array.first)(rotationQuaternionComponents),
      secondRotationQuaternionComponent = (0, _array.second)(rotationQuaternionComponents),
      thirdRotationQuaternionComponent = (0, _array.third)(rotationQuaternionComponents),
      fourthRotationQuaternionComponent = (0, _array.fourth)(rotationQuaternionComponents),
      inverseRotationQuaternion = [firstRotationQuaternionComponent, -secondRotationQuaternionComponent, -thirdRotationQuaternionComponent, -fourthRotationQuaternionComponent];
  return inverseRotationQuaternion;
}

function calculateForwardsRotationQuaternion(rotationQuaternion) {
  var forwardsRotationQuaternion = rotationQuaternion; ///

  return forwardsRotationQuaternion;
}

function calculateBackwardsRotationQuaternion(rotationQuaternion) {
  var inverseRotationQuaternion = calculateInverseRotationQuaternion(rotationQuaternion),
      backwardsRotationQuaternion = inverseRotationQuaternion; ///

  return backwardsRotationQuaternion;
}

function calculateArbitraryRotationQuaternion(normal) {
  var extent = normal.getExtent(),
      unitNormal = extent,
      ///
  zAxis = [0, 0, 1],
      dotProductOfUnitNormalAndZAxis = (0, _vector.dot3)(unitNormal, zAxis),
      crossProductOfUnitNormalAndZAxis = (0, _vector.cross3)(unitNormal, zAxis),
      angleOfRotationCosine = dotProductOfUnitNormalAndZAxis,
      ///
  angleOfRotationCosineAbsoluteValue = Math.abs(angleOfRotationCosine),
      angleOfRotationCosineAbsoluteValueApproximatelyEqualToOne = (0, _approximate.isApproximatelyEqualToOne)(angleOfRotationCosineAbsoluteValue),
      axisOfRotation = angleOfRotationCosineAbsoluteValueApproximatelyEqualToOne ? [1, 0, 0] : ///
  crossProductOfUnitNormalAndZAxis,
      unitAxisOfRotation = (0, _vector.normalise3)(axisOfRotation),
      halfAngleOfRotationCosine = (0, _angle.calculateHalfAngleCosine)(angleOfRotationCosine),
      halfAngleOfRotationSine = (0, _angle.calculateHalfAngleSine)(angleOfRotationCosine),
      unitAxisOfRotationComponents = unitAxisOfRotation,
      ///
  firstAxisOfRotationComponent = (0, _array.first)(unitAxisOfRotationComponents),
      secondAxisOfRotationComponent = (0, _array.second)(unitAxisOfRotationComponents),
      thirdAxisOfRotationComponent = (0, _array.third)(unitAxisOfRotationComponents),
      arbitraryRotationQuaternion = [halfAngleOfRotationCosine, firstAxisOfRotationComponent * halfAngleOfRotationSine, secondAxisOfRotationComponent * halfAngleOfRotationSine, thirdAxisOfRotationComponent * halfAngleOfRotationSine];
  return arbitraryRotationQuaternion;
}

function calculateRotationAboutZAxisQuaternion(maskingEdge) {
  var maskingEdgeExtent = maskingEdge.getExtent(),
      unitMaskingEdgeExtent = (0, _vector.normalise3)(maskingEdgeExtent),
      unitMaskingEdgeExtentComponents = unitMaskingEdgeExtent,
      ///
  firstUnitMaskingEdgeExtentComponent = (0, _array.first)(unitMaskingEdgeExtentComponents),
      secondUnitMaskingEdgeExtentComponent = (0, _array.second)(unitMaskingEdgeExtentComponents),
      angleOfRotationSine = firstUnitMaskingEdgeExtentComponent,
      ///
  angleOfRotationCosine = secondUnitMaskingEdgeExtentComponent,
      ///
  halfAngleOfRotationCosine = (0, _angle.calculateHalfAngleCosine)(angleOfRotationCosine),
      halfAngleOfRotationSine = angleOfRotationSine > 0 ? +(0, _angle.calculateHalfAngleSine)(angleOfRotationCosine) : -(0, _angle.calculateHalfAngleSine)(angleOfRotationCosine),
      rotationAboutZAxisQuaternion = [halfAngleOfRotationCosine, 0, 0, halfAngleOfRotationSine];
  return rotationAboutZAxisQuaternion;
}

function hamiltonProduct(quaternionA, quaternionB) {
  var a1 = quaternionA[0],
      b1 = quaternionA[1],
      c1 = quaternionA[2],
      d1 = quaternionA[3],
      a2 = quaternionB[0],
      b2 = quaternionB[1],
      c2 = quaternionB[2],
      d2 = quaternionB[3],
      a = a1 * a2 - b1 * b2 - c1 * c2 - d1 * d2,
      b = a1 * b2 + b1 * a2 + c1 * d2 - d1 * c2,
      c = a1 * c2 - b1 * d2 + c1 * a2 + d1 * b2,
      d = a1 * d2 + b1 * c2 - c1 * b2 + d1 * a2,
      quaternion = [a, b, c, d];
  return quaternion;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1YXRlcm5pb24uanMiXSwibmFtZXMiOlsicm90YXRlSW1hZ2luYXJ5UXVhdGVybmlvbiIsImltYWdpbmFyeVF1YXRlcm5pb24iLCJyb3RhdGlvblF1YXRlcm5pb24iLCJpbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uIiwiaGFtaWx0b25Qcm9kdWN0IiwiY2FsY3VsYXRlSW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbiIsInJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudHMiLCJmaXJzdFJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCIsInNlY29uZFJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCIsInRoaXJkUm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50IiwiZm91cnRoUm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50IiwiY2FsY3VsYXRlRm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb24iLCJmb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiIsImNhbGN1bGF0ZUJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiIsImJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiIsImNhbGN1bGF0ZUFyYml0cmFyeVJvdGF0aW9uUXVhdGVybmlvbiIsIm5vcm1hbCIsImV4dGVudCIsImdldEV4dGVudCIsInVuaXROb3JtYWwiLCJ6QXhpcyIsImRvdFByb2R1Y3RPZlVuaXROb3JtYWxBbmRaQXhpcyIsImNyb3NzUHJvZHVjdE9mVW5pdE5vcm1hbEFuZFpBeGlzIiwiYW5nbGVPZlJvdGF0aW9uQ29zaW5lIiwiYW5nbGVPZlJvdGF0aW9uQ29zaW5lQWJzb2x1dGVWYWx1ZSIsIk1hdGgiLCJhYnMiLCJhbmdsZU9mUm90YXRpb25Db3NpbmVBYnNvbHV0ZVZhbHVlQXBwcm94aW1hdGVseUVxdWFsVG9PbmUiLCJheGlzT2ZSb3RhdGlvbiIsInVuaXRBeGlzT2ZSb3RhdGlvbiIsImhhbGZBbmdsZU9mUm90YXRpb25Db3NpbmUiLCJoYWxmQW5nbGVPZlJvdGF0aW9uU2luZSIsInVuaXRBeGlzT2ZSb3RhdGlvbkNvbXBvbmVudHMiLCJmaXJzdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50Iiwic2Vjb25kQXhpc09mUm90YXRpb25Db21wb25lbnQiLCJ0aGlyZEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50IiwiYXJiaXRyYXJ5Um90YXRpb25RdWF0ZXJuaW9uIiwiY2FsY3VsYXRlUm90YXRpb25BYm91dFpBeGlzUXVhdGVybmlvbiIsIm1hc2tpbmdFZGdlIiwibWFza2luZ0VkZ2VFeHRlbnQiLCJ1bml0TWFza2luZ0VkZ2VFeHRlbnQiLCJ1bml0TWFza2luZ0VkZ2VFeHRlbnRDb21wb25lbnRzIiwiZmlyc3RVbml0TWFza2luZ0VkZ2VFeHRlbnRDb21wb25lbnQiLCJzZWNvbmRVbml0TWFza2luZ0VkZ2VFeHRlbnRDb21wb25lbnQiLCJhbmdsZU9mUm90YXRpb25TaW5lIiwicm90YXRpb25BYm91dFpBeGlzUXVhdGVybmlvbiIsInF1YXRlcm5pb25BIiwicXVhdGVybmlvbkIiLCJhMSIsImIxIiwiYzEiLCJkMSIsImEyIiwiYjIiLCJjMiIsImQyIiwiYSIsImIiLCJjIiwiZCIsInF1YXRlcm5pb24iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFTyxTQUFTQSx5QkFBVCxDQUFtQ0MsbUJBQW5DLEVBQXdEQyxrQkFBeEQsRUFBNEVDLHlCQUE1RSxFQUF1RztBQUFFLFNBQU9DLGVBQWUsQ0FBQ0EsZUFBZSxDQUFDRixrQkFBRCxFQUFxQkQsbUJBQXJCLENBQWhCLEVBQTJERSx5QkFBM0QsQ0FBdEI7QUFBOEc7O0FBRXZOLFNBQVNFLGtDQUFULENBQTRDSCxrQkFBNUMsRUFBZ0U7QUFDckUsTUFBTUksNEJBQTRCLEdBQUdKLGtCQUFyQztBQUFBLE1BQTBEO0FBQ3BESyxFQUFBQSxnQ0FBZ0MsR0FBRyxrQkFBTUQsNEJBQU4sQ0FEekM7QUFBQSxNQUVNRSxpQ0FBaUMsR0FBRyxtQkFBT0YsNEJBQVAsQ0FGMUM7QUFBQSxNQUdNRyxnQ0FBZ0Ms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TCxFQUFFLEdBQUdFLEVBQXpCLEdBQThCRCxFQUFFLEdBQUdFLEVBVjdDO0FBQUEsTUFXTU0sQ0FBQyxHQUFHWCxFQUFFLEdBQUdPLEVBQUwsR0FBVU4sRUFBRSxHQUFHSyxFQUFmLEdBQW9CSixFQUFFLEdBQUdHLEVBQXpCLEdBQThCRixFQUFFLEdBQUdDLEVBWDdDO0FBQUEsTUFZTVEsVUFBVSxHQUFHLENBQUVKLENBQUYsRUFBS0MsQ0FBTCxFQUFRQyxDQUFSLEVBQVdDLENBQVgsQ0FabkI7QUFjQSxTQUFPQyxVQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZG90MywgY3Jvc3MzLCBub3JtYWxpc2UzIH0gZnJvbSBcIi4uL21hdGhzL3ZlY3RvclwiO1xuaW1wb3J0IHsgaXNBcHByb3hpbWF0ZWx5RXF1YWxUb09uZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXBwcm94aW1hdGVcIjtcbmltcG9ydCB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkLCBmb3VydGggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBjYWxjdWxhdGVIYWxmQW5nbGVDb3NpbmUsIGNhbGN1bGF0ZUhhbGZBbmdsZVNpbmUgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FuZ2xlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVJbWFnaW5hcnlRdWF0ZXJuaW9uKGltYWdpbmFyeVF1YXRlcm5pb24sIHJvdGF0aW9uUXVhdGVybmlvbiwgaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbikgeyByZXR1cm4gaGFtaWx0b25Qcm9kdWN0KGhhbWlsdG9uUHJvZHVjdChyb3RhdGlvblF1YXRlcm5pb24sIGltYWdpbmFyeVF1YXRlcm5pb24pLCBpbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlSW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbihyb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgY29uc3Qgcm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50cyA9IHJvdGF0aW9uUXVhdGVybmlvbiwgIC8vL1xuICAgICAgICBmaXJzdFJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCA9IGZpcnN0KHJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudHMpLFxuICAgICAgICBzZWNvbmRSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQgPSBzZWNvbmQocm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50cyksXG4gICAgICAgIHRoaXJkUm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50ID0gdGhpcmQocm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50cyksXG4gICAgICAgIGZvdXJ0aFJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCA9IGZvdXJ0aChyb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnRzKSxcbiAgICAgICAgaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbiA9IFtcbiAgICAgICAgICBmaXJzdFJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCxcbiAgICAgICAgICAtc2Vjb25kUm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50LFxuICAgICAgICAgIC10aGlyZFJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCxcbiAgICAgICAgICAtZm91cnRoUm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50XG4gICAgICAgIF07XG5cbiAgcmV0dXJuIGludmVyc2VSb3RhdGlvblF1YXRlcm5pb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVGb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbihyb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgY29uc3QgZm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb24gPSByb3RhdGlvblF1YXRlcm5pb247ICAvLy9cblxuICByZXR1cm4gZm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVCYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb24ocm90YXRpb25RdWF0ZXJuaW9uKSB7XG4gIGNvbnN0IGludmVyc2VSb3RhdGlvblF1YXRlcm5pb24gPSBjYWxjdWxhdGVJbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uKHJvdGF0aW9uUXVhdGVybmlvbiksXG4gICAgICAgIGJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiA9IGludmVyc2VSb3RhdGlvblF1YXRlcm5pb247ICAvLy9cblxuICByZXR1cm4gYmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVBcmJpdHJhcnlSb3RhdGlvblF1YXRlcm5pb24obm9ybWFsKSB7XG4gIGNvbnN0IGV4dGVudCA9IG5vcm1hbC5nZXRFeHRlbnQoKSxcbiAgICAgICAgdW5pdE5vcm1hbCA9IGV4dGVudCwgIC8vL1xuICAgICAgICB6QXhpcyA9IFsgMCwgMCwgMSBdLFxuICAgICAgICBkb3RQcm9kdWN0T2ZVbml0Tm9ybWFsQW5kWkF4aXMgPSBkb3QzKHVuaXROb3JtYWwsIHpBeGlzKSxcbiAgICAgICAgY3Jvc3NQcm9kdWN0T2ZVbml0Tm9ybWFsQW5kWkF4aXMgPSBjcm9zczModW5pdE5vcm1hbCwgekF4aXMpLFxuICAgICAgICBhbmdsZU9mUm90YXRpb25Db3NpbmUgPSBkb3RQcm9kdWN0T2ZVbml0Tm9ybWFsQW5kWkF4aXMsIC8vL1xuICAgICAgICBhbmdsZU9mUm90YXRpb25Db3NpbmVBYnNvbHV0ZVZhbHVlID0gTWF0aC5hYnMoYW5nbGVPZlJvdGF0aW9uQ29zaW5lKSxcbiAgICAgICAgYW5nbGVPZlJvdGF0aW9uQ29zaW5lQWJzb2x1dGVWYWx1ZUFwcHJveGltYXRlbHlFcXVhbFRvT25lID0gaXNBcHByb3hpbWF0ZWx5RXF1YWxUb09uZShhbmdsZU9mUm90YXRpb25Db3NpbmVBYnNvbHV0ZVZhbHVlKSxcbiAgICAgICAgYXhpc09mUm90YXRpb24gPSBhbmdsZU9mUm90YXRpb25Db3NpbmVBYnNvbHV0ZVZhbHVlQXBwcm94aW1hdGVseUVxdWFsVG9PbmUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICBbIDEsIDAsIDAgXSA6IC8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzUHJvZHVjdE9mVW5pdE5vcm1hbEFuZFpBeGlzLFxuICAgICAgICB1bml0QXhpc09mUm90YXRpb24gPSBub3JtYWxpc2UzKGF4aXNPZlJvdGF0aW9uKSxcbiAgICAgICAgaGFsZkFuZ2xlT2ZSb3RhdGlvbkNvc2luZSA9IGNhbGN1bGF0ZUhhbGZBbmdsZUNvc2luZShhbmdsZU9mUm90YXRpb25Db3NpbmUpLFxuICAgICAgICBoYWxmQW5nbGVPZlJvdGF0aW9uU2luZSA9IGNhbGN1bGF0ZUhhbGZBbmdsZVNpbmUoYW5nbGVPZlJvdGF0aW9uQ29zaW5lKSxcbiAgICAgICAgdW5pdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50cyA9IHVuaXRBeGlzT2ZSb3RhdGlvbiwgIC8vL1xuICAgICAgICBmaXJzdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50ID0gZmlyc3QodW5pdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50cyksXG4gICAgICAgIHNlY29uZEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50ID0gc2Vjb25kKHVuaXRBeGlzT2ZSb3RhdGlvbkNvbXBvbmVudHMpLFxuICAgICAgICB0aGlyZEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50ID0gdGhpcmQodW5pdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50cyksXG4gICAgICAgIGFyYml0cmFyeVJvdGF0aW9uUXVhdGVybmlvbiA9IFtcbiAgICAgICAgICBoYWxmQW5nbGVPZlJvdGF0aW9uQ29zaW5lLFxuICAgICAgICAgIGZpcnN0QXhpc09mUm90YXRpb25Db21wb25lbnQgKiBoYWxmQW5nbGVPZlJvdGF0aW9uU2luZSxcbiAgICAgICAgICBzZWNvbmRBeGlzT2ZSb3RhdGlvbkNvbXBvbmVudCAqIGhhbGZBbmdsZU9mUm90YXRpb25TaW5lLFxuICAgICAgICAgIHRoaXJkQXhpc09mUm90YXRpb25Db21wb25lbnQgKiBoYWxmQW5nbGVPZlJvdGF0aW9uU2luZVxuICAgICAgICBdO1xuXG4gIHJldHVybiBhcmJpdHJhcnlSb3RhdGlvblF1YXRlcm5pb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVSb3RhdGlvbkFib3V0WkF4aXNRdWF0ZXJuaW9uKG1hc2tpbmdFZGdlKSB7XG4gIGNvbnN0IG1hc2tpbmdFZGdlRXh0ZW50ID0gbWFza2luZ0VkZ2UuZ2V0RXh0ZW50KCksXG4gICAgICAgIHVuaXRNYXNraW5nRWRnZUV4dGVudCA9IG5vcm1hbGlzZTMobWFza2luZ0VkZ2VFeHRlbnQpLFxuICAgICAgICB1bml0TWFza2luZ0VkZ2VFeHRlbnRDb21wb25lbnRzID0gdW5pdE1hc2tpbmdFZGdlRXh0ZW50LCAgLy8vXG4gICAgICAgIGZpcnN0VW5pdE1hc2tpbmdFZGdlRXh0ZW50Q29tcG9uZW50ID0gZmlyc3QodW5pdE1hc2tpbmdFZGdlRXh0ZW50Q29tcG9uZW50cyksXG4gICAgICAgIHNlY29uZFVuaXRNYXNraW5nRWRnZUV4dGVudENvbXBvbmVudCA9IHNlY29uZCh1bml0TWFza2luZ0VkZ2VFeHRlbnRDb21wb25lbnRzKSxcbiAgICAgICAgYW5nbGVPZlJvdGF0aW9uU2luZSA9IGZpcnN0VW5pdE1hc2tpbmdFZGdlRXh0ZW50Q29tcG9uZW50LCAgLy8vXG4gICAgICAgIGFuZ2xlT2ZSb3RhdGlvbkNvc2luZSA9IHNlY29uZFVuaXRNYXNraW5nRWRnZUV4dGVudENvbXBvbmVudCwgIC8vL1xuICAgICAgICBoYWxmQW5nbGVPZlJvdGF0aW9uQ29zaW5lID0gY2FsY3VsYXRlSGFsZkFuZ2xlQ29zaW5lKGFuZ2xlT2ZSb3RhdGlvbkNvc2luZSksXG4gICAgICAgIGhhbGZBbmdsZU9mUm90YXRpb25TaW5lID0gKGFuZ2xlT2ZSb3RhdGlvblNpbmUgPiAwICkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArY2FsY3VsYXRlSGFsZkFuZ2xlU2luZShhbmdsZU9mUm90YXRpb25Db3NpbmUpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtY2FsY3VsYXRlSGFsZkFuZ2xlU2luZShhbmdsZU9mUm90YXRpb25Db3NpbmUpLFxuICAgICAgICByb3RhdGlvbkFib3V0WkF4aXNRdWF0ZXJuaW9uID0gW1xuICAgICAgICAgIGhhbGZBbmdsZU9mUm90YXRpb25Db3NpbmUsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIGhhbGZBbmdsZU9mUm90YXRpb25TaW5lXG4gICAgICAgIF07XG5cbiAgcmV0dXJuIHJvdGF0aW9uQWJvdXRaQXhpc1F1YXRlcm5pb247XG59XG5cbmZ1bmN0aW9uIGhhbWlsdG9uUHJvZHVjdChxdWF0ZXJuaW9uQSwgcXVhdGVybmlvbkIpIHtcbiAgY29uc3QgYTEgPSBxdWF0ZXJuaW9uQVswXSxcbiAgICAgICAgYjEgPSBxdWF0ZXJuaW9uQVsxXSxcbiAgICAgICAgYzEgPSBxdWF0ZXJuaW9uQVsyXSxcbiAgICAgICAgZDEgPSBxdWF0ZXJuaW9uQVszXSxcbiAgICAgICAgYTIgPSBxdWF0ZXJuaW9uQlswXSxcbiAgICAgICAgYjIgPSBxdWF0ZXJuaW9uQlsxXSxcbiAgICAgICAgYzIgPSBxdWF0ZXJuaW9uQlsyXSxcbiAgICAgICAgZDIgPSBxdWF0ZXJuaW9uQlszXSxcbiAgICAgICAgYSA9IGExICogYTIgLSBiMSAqIGIyIC0gYzEgKiBjMiAtIGQxICogZDIsXG4gICAgICAgIGIgPSBhMSAqIGIyICsgYjEgKiBhMiArIGMxICogZDIgLSBkMSAqIGMyLFxuICAgICAgICBjID0gYTEgKiBjMiAtIGIxICogZDIgKyBjMSAqIGEyICsgZDEgKiBiMixcbiAgICAgICAgZCA9IGExICogZDIgKyBiMSAqIGMyIC0gYzEgKiBiMiArIGQxICogYTIsXG4gICAgICAgIHF1YXRlcm5pb24gPSBbIGEsIGIsIGMsIGQgXTtcblxuICByZXR1cm4gcXVhdGVybmlvbjtcbn1cbiJdfQ==