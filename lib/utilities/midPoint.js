"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var vectorMaths = require("../maths/vector");

var add3 = vectorMaths.add3,
    scale3 = vectorMaths.scale3;

function calculateMidPointPosition(vertices) {
  var midPointPosition = vertices.reduce(function (midPointPosition, vertex) {
    var vertexPosition = vertex.getPosition(),
        scaledVertexPosition = scale3(vertexPosition, 1 / 3);
    midPointPosition = add3(midPointPosition, scaledVertexPosition);
    return midPointPosition;
  }, [0, 0, 0]);
  return midPointPosition;
}

function projectMidPointPositionOntoXYPlane(midPointPosition) {
  midPointPosition = [].concat(_toConsumableArray(midPointPosition.slice(0, 2)), [0]); ///

  return midPointPosition;
}

function isMidPointPositionToOneSideOfMaskingEdges(midPointPosition, maskingEdges) {
  var midPointPositionToTheLeftOfMaskingEdges = isMidPointPositionToTheLeftOfMaskingEdges(midPointPosition, maskingEdges),
      midPointPositionToTheRightOfMaskingEdges = isMidPointPositionToTheRightOfMaskingEdges(midPointPosition, maskingEdges),
      midPointPositionToOneSideOfMaskingEdges = midPointPositionToTheLeftOfMaskingEdges || midPointPositionToTheRightOfMaskingEdges; ///

  return midPointPositionToOneSideOfMaskingEdges;
}

module.exports = module.exports = {
  calculateMidPointPosition: calculateMidPointPosition,
  projectMidPointPositionOntoXYPlane: projectMidPointPositionOntoXYPlane,
  isMidPointPositionToOneSideOfMaskingEdges: isMidPointPositionToOneSideOfMaskingEdges
};

function isMidPointPositionToTheLeftOfMaskingEdges(midPointPosition, maskingEdges) {
  var midPointPositionToTheLeftOfMaskingEdges = maskingEdges.reduce(function (midPointPositionToTheLeftOfMaskingEdges, maskingEdge) {
    if (midPointPositionToTheLeftOfMaskingEdges) {
      var midPointPositionToTheLeftOfMaskingEdge = maskingEdge.isMidPointPositionToTheLeft(midPointPosition);
      midPointPositionToTheLeftOfMaskingEdges = midPointPositionToTheLeftOfMaskingEdge;
    }

    return midPointPositionToTheLeftOfMaskingEdges;
  }, true);
  return midPointPositionToTheLeftOfMaskingEdges;
}

function isMidPointPositionToTheRightOfMaskingEdges(midPointPosition, maskingEdges) {
  var midPointPositionToTheRightOfMaskingEdges = maskingEdges.reduce(function (midPointPositionToTheRightOfMaskingEdges, maskingEdge) {
    if (midPointPositionToTheRightOfMaskingEdges) {
      var midPointPositionToTheRightOfMaskingEdge = maskingEdge.isMidPointPositionToTheRight(midPointPosition);
      midPointPositionToTheRightOfMaskingEdges = midPointPositionToTheRightOfMaskingEdge;
    }

    return midPointPositionToTheRightOfMaskingEdges;
  }, true);
  return midPointPositionToTheRightOfMaskingEdges;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1pZFBvaW50LmpzIl0sIm5hbWVzIjpbInZlY3Rvck1hdGhzIiwicmVxdWlyZSIsImFkZDMiLCJzY2FsZTMiLCJjYWxjdWxhdGVNaWRQb2ludFBvc2l0aW9uIiwidmVydGljZXMiLCJtaWRQb2ludFBvc2l0aW9uIiwicmVkdWNlIiwidmVydGV4IiwidmVydGV4UG9zaXRpb24iLCJnZXRQb3NpdGlvbiIsInNjYWxlZFZlcnRleFBvc2l0aW9uIiwicHJvamVjdE1pZFBvaW50UG9zaXRpb25PbnRvWFlQbGFuZSIsInNsaWNlIiwiaXNNaWRQb2ludFBvc2l0aW9uVG9PbmVTaWRlT2ZNYXNraW5nRWRnZXMiLCJtYXNraW5nRWRnZXMiLCJtaWRQb2ludFBvc2l0aW9uVG9UaGVMZWZ0T2ZNYXNraW5nRWRnZXMiLCJpc01pZFBvaW50UG9zaXRpb25Ub1RoZUxlZnRPZk1hc2tpbmdFZGdlcyIsIm1pZFBvaW50UG9zaXRpb25Ub1RoZVJpZ2h0T2ZNYXNraW5nRWRnZXMiLCJpc01pZFBvaW50UG9zaXRpb25Ub1RoZVJpZ2h0T2ZNYXNraW5nRWRnZXMiLCJtaWRQb2ludFBvc2l0aW9uVG9PbmVTaWRlT2ZNYXNraW5nRWRnZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwibWFza2luZ0VkZ2UiLCJtaWRQb2ludFBvc2l0aW9uVG9UaGVMZWZ0T2ZNYXNraW5nRWRnZSIsImlzTWlkUG9pbnRQb3NpdGlvblRvVGhlTGVmdCIsIm1pZFBvaW50UG9zaXRpb25Ub1RoZVJpZ2h0T2ZNYXNraW5nRWRnZSIsImlzTWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBRUEsSUFBTUEsV0FBVyxHQUFHQyxPQUFPLENBQUMsaUJBQUQsQ0FBM0I7O0lBRVFDLEksR0FBaUJGLFcsQ0FBakJFLEk7SUFBTUMsTSxHQUFXSCxXLENBQVhHLE07O0FBRWQsU0FBU0MseUJBQVQsQ0FBbUNDLFFBQW5DLEVBQTZDO0FBQzNDLE1BQU1DLGdCQUFnQixHQUFHRCxRQUFRLENBQUNFLE1BQVQsQ0FBZ0IsVUFBQ0QsZ0JBQUQsRUFBbUJFLE1BQW5CLEVBQThCO0FBQ3JFLFFBQU1DLGNBQWMsR0FBR0QsTUFBTSxDQUFDRSxXQUFQLEVBQXZCO0FBQUEsUUFDTUMsb0JBQW9CLEdBQUdSLE1BQU0sQ0FBQ00sY0FBRCxFQUFpQixJQUFFLENBQW5CLENBRG5DO0FBR0FILElBQUFBLGdCQUFnQixHQUFHSixJQUFJLENBQUNJLGdCQUFELEVBQW1CSyxvQkFBbkIsQ0FBdkI7QUFFQSxXQUFPTCxnQkFBUDtBQUNELEdBUHdCLEVBT3RCLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBUHNCLENBQXpCO0FBU0EsU0FBT0EsZ0JBQVA7QUFDRDs7QUFFRCxTQUFTTSxrQ0FBVCxDQUE0Q04sZ0JBQTVDLEVBQThEO0FBQzVEQSxFQUFBQSxnQkFBZ0IsZ0NBQVFBLGdCQUFnQixDQUFDTyxLQUFqQixDQUF1QixDQUF2QixFQUEwQixDQUExQixDQUFSLElBQXNDLENBQXRDLEVBQWhCLENBRDRELENBQ0E7O0FBRTVELFNBQU9QLGdCQUFQO0FBQ0Q7O0FBRUQsU0FBU1EseUNBQVQsQ0FBbURSLGdCQUFuRCxFQUFxRVMsWUFBckUsRUFBbUY7QUFDakYsTUFBTUMsdUNBQXVDLEdBQUdDLHlDQUF5QyxDQUFDWCxnQkFBRCxFQUFtQlMsWUFBbkIsQ0FBekY7QUFBQSxNQUNNRyx3Q0FBd0MsR0FBR0MsMENBQTBDLENBQUNiLGdCQUFELEVBQW1CUyxZQUFuQixDQUQzRjtBQUFBLE1BRU1LLHVDQUF1QyxHQUFHSix1Q0FBdUMsSUFBSUUsd0NBRjNGLENBRGlGLENBR29EOztBQUVySSxTQUFPRSx1Q0FBUDtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJELE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNoQ2xCLEVBQUFBLHlCQUF5QixFQUF6QkEseUJBRGdDO0FBRWhDUSxFQUFBQSxrQ0FBa0MsRUFBbENBLGtDQUZnQztBQUdoQ0UsRUFBQUEseUNBQXlDLEVBQXpDQTtBQUhnQyxDQUFsQzs7QUFNQSxTQUFTRyx5Q0FBVCxDQUFtRFgsZ0JBQW5ELEVBQXFFUyxZQUFyRSxFQUFtRjtBQUNqRixNQUFNQyx1Q0FBdUMsR0FBR0QsWUFBWSxDQUFDUixNQUFiLENBQW9CLFVBQUNTLHVDQUFELEVBQTBDTyxXQUExQyxFQUEwRDtBQUM1SCxRQUFJUCx1Q0FBSixFQUE2QztBQUMzQyxVQUFNUSxzQ0FBc0MsR0FBR0QsV0FBVyxDQUFDRSwyQkFBWixDQUF3Q25CLGdCQUF4QyxDQUEvQztBQUVBVSxNQUFBQSx1Q0FBdUMsR0FBR1Esc0NBQTFDO0FBQ0Q7O0FBRUQsV0FBT1IsdUNBQVA7QUFDRCxHQVIrQyxFQVE3QyxJQVI2QyxDQUFoRDtBQVVBLFNBQU9BLHVDQUFQO0FBQ0Q7O0FBRUQsU0FBU0csMENBQVQsQ0FBb0RiLGdCQUFwRCxFQUFzRVMsWUFBdEUsRUFBb0Y7QUFDbEYsTUFBTUcsd0NBQXdDLEdBQUdILFlBQVksQ0FBQ1IsTUFBYixDQUFvQixVQUFDVyx3Q0FBRCxFQUEyQ0ssV0FBM0MsRUFBMkQ7QUFDOUgsUUFBSUwsd0NBQUosRUFBOEM7QUFDNUMsVUFBTVEsdUNBQXVDLEdBQUdILFdBQVcsQ0FBQ0ksNEJBQVosQ0FBeUNyQixnQkFBekMsQ0FBaEQ7QUFFQVksTUFBQUEsd0NBQXdDLEdBQUdRLHVDQUEzQztBQUNEOztBQUVELFdBQU9SLHdDQUFQO0FBQ0QsR0FSZ0QsRUFROUMsSUFSOEMsQ0FBakQ7QUFVQSxTQUFPQSx3Q0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHZlY3Rvck1hdGhzID0gcmVxdWlyZShcIi4uL21hdGhzL3ZlY3RvclwiKTtcblxuY29uc3QgeyBhZGQzLCBzY2FsZTMgfSA9IHZlY3Rvck1hdGhzO1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVNaWRQb2ludFBvc2l0aW9uKHZlcnRpY2VzKSB7XG4gIGNvbnN0IG1pZFBvaW50UG9zaXRpb24gPSB2ZXJ0aWNlcy5yZWR1Y2UoKG1pZFBvaW50UG9zaXRpb24sIHZlcnRleCkgPT4ge1xuICAgIGNvbnN0IHZlcnRleFBvc2l0aW9uID0gdmVydGV4LmdldFBvc2l0aW9uKCksXG4gICAgICAgICAgc2NhbGVkVmVydGV4UG9zaXRpb24gPSBzY2FsZTModmVydGV4UG9zaXRpb24sIDEvMyk7XG5cbiAgICBtaWRQb2ludFBvc2l0aW9uID0gYWRkMyhtaWRQb2ludFBvc2l0aW9uLCBzY2FsZWRWZXJ0ZXhQb3NpdGlvbik7XG5cbiAgICByZXR1cm4gbWlkUG9pbnRQb3NpdGlvbjtcbiAgfSwgWyAwLCAwLCAwIF0pO1xuXG4gIHJldHVybiBtaWRQb2ludFBvc2l0aW9uO1xufVxuXG5mdW5jdGlvbiBwcm9qZWN0TWlkUG9pbnRQb3NpdGlvbk9udG9YWVBsYW5lKG1pZFBvaW50UG9zaXRpb24pIHtcbiAgbWlkUG9pbnRQb3NpdGlvbiA9IFsgLi4ubWlkUG9pbnRQb3NpdGlvbi5zbGljZSgwLCAyKSwgMCBdOyAgLy8vXG5cbiAgcmV0dXJuIG1pZFBvaW50UG9zaXRpb247XG59XG5cbmZ1bmN0aW9uIGlzTWlkUG9pbnRQb3NpdGlvblRvT25lU2lkZU9mTWFza2luZ0VkZ2VzKG1pZFBvaW50UG9zaXRpb24sIG1hc2tpbmdFZGdlcykge1xuICBjb25zdCBtaWRQb2ludFBvc2l0aW9uVG9UaGVMZWZ0T2ZNYXNraW5nRWRnZXMgPSBpc01pZFBvaW50UG9zaXRpb25Ub1RoZUxlZnRPZk1hc2tpbmdFZGdlcyhtaWRQb2ludFBvc2l0aW9uLCBtYXNraW5nRWRnZXMpLFxuICAgICAgICBtaWRQb2ludFBvc2l0aW9uVG9UaGVSaWdodE9mTWFza2luZ0VkZ2VzID0gaXNNaWRQb2ludFBvc2l0aW9uVG9UaGVSaWdodE9mTWFza2luZ0VkZ2VzKG1pZFBvaW50UG9zaXRpb24sIG1hc2tpbmdFZGdlcyksXG4gICAgICAgIG1pZFBvaW50UG9zaXRpb25Ub09uZVNpZGVPZk1hc2tpbmdFZGdlcyA9IG1pZFBvaW50UG9zaXRpb25Ub1RoZUxlZnRPZk1hc2tpbmdFZGdlcyB8fCBtaWRQb2ludFBvc2l0aW9uVG9UaGVSaWdodE9mTWFza2luZ0VkZ2VzOyAvLy9cblxuICByZXR1cm4gbWlkUG9pbnRQb3NpdGlvblRvT25lU2lkZU9mTWFza2luZ0VkZ2VzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBjYWxjdWxhdGVNaWRQb2ludFBvc2l0aW9uLFxuICBwcm9qZWN0TWlkUG9pbnRQb3NpdGlvbk9udG9YWVBsYW5lLFxuICBpc01pZFBvaW50UG9zaXRpb25Ub09uZVNpZGVPZk1hc2tpbmdFZGdlc1xufTtcblxuZnVuY3Rpb24gaXNNaWRQb2ludFBvc2l0aW9uVG9UaGVMZWZ0T2ZNYXNraW5nRWRnZXMobWlkUG9pbnRQb3NpdGlvbiwgbWFza2luZ0VkZ2VzKSB7XG4gIGNvbnN0IG1pZFBvaW50UG9zaXRpb25Ub1RoZUxlZnRPZk1hc2tpbmdFZGdlcyA9IG1hc2tpbmdFZGdlcy5yZWR1Y2UoKG1pZFBvaW50UG9zaXRpb25Ub1RoZUxlZnRPZk1hc2tpbmdFZGdlcywgbWFza2luZ0VkZ2UpID0+IHtcbiAgICBpZiAobWlkUG9pbnRQb3NpdGlvblRvVGhlTGVmdE9mTWFza2luZ0VkZ2VzKSB7XG4gICAgICBjb25zdCBtaWRQb2ludFBvc2l0aW9uVG9UaGVMZWZ0T2ZNYXNraW5nRWRnZSA9IG1hc2tpbmdFZGdlLmlzTWlkUG9pbnRQb3NpdGlvblRvVGhlTGVmdChtaWRQb2ludFBvc2l0aW9uKTtcblxuICAgICAgbWlkUG9pbnRQb3NpdGlvblRvVGhlTGVmdE9mTWFza2luZ0VkZ2VzID0gbWlkUG9pbnRQb3NpdGlvblRvVGhlTGVmdE9mTWFza2luZ0VkZ2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1pZFBvaW50UG9zaXRpb25Ub1RoZUxlZnRPZk1hc2tpbmdFZGdlcztcbiAgfSwgdHJ1ZSk7XG5cbiAgcmV0dXJuIG1pZFBvaW50UG9zaXRpb25Ub1RoZUxlZnRPZk1hc2tpbmdFZGdlcztcbn1cblxuZnVuY3Rpb24gaXNNaWRQb2ludFBvc2l0aW9uVG9UaGVSaWdodE9mTWFza2luZ0VkZ2VzKG1pZFBvaW50UG9zaXRpb24sIG1hc2tpbmdFZGdlcykge1xuICBjb25zdCBtaWRQb2ludFBvc2l0aW9uVG9UaGVSaWdodE9mTWFza2luZ0VkZ2VzID0gbWFza2luZ0VkZ2VzLnJlZHVjZSgobWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlcywgbWFza2luZ0VkZ2UpID0+IHtcbiAgICBpZiAobWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlcykge1xuICAgICAgY29uc3QgbWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlID0gbWFza2luZ0VkZ2UuaXNNaWRQb2ludFBvc2l0aW9uVG9UaGVSaWdodChtaWRQb2ludFBvc2l0aW9uKTtcblxuICAgICAgbWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlcyA9IG1pZFBvaW50UG9zaXRpb25Ub1RoZVJpZ2h0T2ZNYXNraW5nRWRnZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlcztcbiAgfSwgdHJ1ZSk7XG5cbiAgcmV0dXJuIG1pZFBvaW50UG9zaXRpb25Ub1RoZVJpZ2h0T2ZNYXNraW5nRWRnZXM7XG59XG4iXX0=