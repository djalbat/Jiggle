'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities;

function permute(array, places) {
  var length = array.length,
      cut = length - places,
      leadingElements = array.slice(0, cut),
      trailingElements = array.slice(cut);
  array = [].concat(_toConsumableArray(trailingElements), _toConsumableArray(leadingElements));
  return array;
}

function flatten(arrays) {
  return arrays.reduce(function (elements, array) {
    return elements.concat(array);
  }, []);
}

function guarantee(arrayOrElement) {
  arrayOrElement = arrayOrElement || [];
  return arrayOrElement instanceof Array ? arrayOrElement : [arrayOrElement];
}

module.exports = Object.assign(arrayUtilities, {
  permute: permute,
  flatten: flatten,
  guarantee: guarantee
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LmpzIl0sIm5hbWVzIjpbIm5lY2Vzc2FyeSIsInJlcXVpcmUiLCJhcnJheVV0aWxpdGllcyIsInBlcm11dGUiLCJhcnJheSIsInBsYWNlcyIsImxlbmd0aCIsImN1dCIsImxlYWRpbmdFbGVtZW50cyIsInNsaWNlIiwidHJhaWxpbmdFbGVtZW50cyIsImZsYXR0ZW4iLCJhcnJheXMiLCJyZWR1Y2UiLCJlbGVtZW50cyIsImNvbmNhdCIsImd1YXJhbnRlZSIsImFycmF5T3JFbGVtZW50IiwiQXJyYXkiLCJtb2R1bGUiLCJleHBvcnRzIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0lBRVFDLGMsR0FBbUJGLFMsQ0FBbkJFLGM7O0FBRVIsU0FBU0MsT0FBVCxDQUFpQkMsS0FBakIsRUFBd0JDLE1BQXhCLEVBQWdDO0FBQzlCLE1BQU1DLE1BQU0sR0FBR0YsS0FBSyxDQUFDRSxNQUFyQjtBQUFBLE1BQ01DLEdBQUcsR0FBR0QsTUFBTSxHQUFHRCxNQURyQjtBQUFBLE1BRU1HLGVBQWUsR0FBR0osS0FBSyxDQUFDSyxLQUFOLENBQVksQ0FBWixFQUFlRixHQUFmLENBRnhCO0FBQUEsTUFHTUcsZ0JBQWdCLEdBQUdOLEtBQUssQ0FBQ0ssS0FBTixDQUFZRixHQUFaLENBSHpCO0FBS0FILEVBQUFBLEtBQUssZ0NBQVFNLGdCQUFSLHNCQUE2QkYsZUFBN0IsRUFBTDtBQUVBLFNBQU9KLEtBQVA7QUFDRDs7QUFFRCxTQUFTTyxPQUFULENBQWlCQyxNQUFqQixFQUF5QjtBQUN2QixTQUFPQSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxVQUFDQyxRQUFELEVBQVdWLEtBQVg7QUFBQSxXQUFxQlUsUUFBUSxDQUFDQyxNQUFULENBQWdCWCxLQUFoQixDQUFyQjtBQUFBLEdBQWQsRUFBMkQsRUFBM0QsQ0FBUDtBQUNEOztBQUVELFNBQVNZLFNBQVQsQ0FBbUJDLGNBQW5CLEVBQW1DO0FBQ2pDQSxFQUFBQSxjQUFjLEdBQUdBLGNBQWMsSUFBSSxFQUFuQztBQUVBLFNBQVFBLGNBQWMsWUFBWUMsS0FBM0IsR0FDRUQsY0FERixHQUVHLENBQUNBLGNBQUQsQ0FGVjtBQUdEOztBQUVERSxNQUFNLENBQUNDLE9BQVAsR0FBaUJDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjcEIsY0FBZCxFQUE4QjtBQUM3Q0MsRUFBQUEsT0FBTyxFQUFQQSxPQUQ2QztBQUU3Q1EsRUFBQUEsT0FBTyxFQUFQQSxPQUY2QztBQUc3Q0ssRUFBQUEsU0FBUyxFQUFUQTtBQUg2QyxDQUE5QixDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeTtcblxuZnVuY3Rpb24gcGVybXV0ZShhcnJheSwgcGxhY2VzKSB7XG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgY3V0ID0gbGVuZ3RoIC0gcGxhY2VzLFxuICAgICAgICBsZWFkaW5nRWxlbWVudHMgPSBhcnJheS5zbGljZSgwLCBjdXQpLFxuICAgICAgICB0cmFpbGluZ0VsZW1lbnRzID0gYXJyYXkuc2xpY2UoY3V0KTtcblxuICBhcnJheSA9IFsgLi4udHJhaWxpbmdFbGVtZW50cywgLi4ubGVhZGluZ0VsZW1lbnRzIF07XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuKGFycmF5cykge1xuICByZXR1cm4gYXJyYXlzLnJlZHVjZSgoZWxlbWVudHMsIGFycmF5KSA9PiBlbGVtZW50cy5jb25jYXQoYXJyYXkpLCBbXSk7XG59XG5cbmZ1bmN0aW9uIGd1YXJhbnRlZShhcnJheU9yRWxlbWVudCkge1xuICBhcnJheU9yRWxlbWVudCA9IGFycmF5T3JFbGVtZW50IHx8IFtdO1xuXG4gIHJldHVybiAoYXJyYXlPckVsZW1lbnQgaW5zdGFuY2VvZiBBcnJheSkgP1xuICAgICAgICAgICBhcnJheU9yRWxlbWVudCA6XG4gICAgICAgICAgICBbYXJyYXlPckVsZW1lbnRdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oYXJyYXlVdGlsaXRpZXMsIHtcbiAgcGVybXV0ZSxcbiAgZmxhdHRlbixcbiAgZ3VhcmFudGVlXG59KTtcbiJdfQ==