'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    splice = arrayUtilities.splice;


function chop(elements, arrayLength) {
  var arrays = [],
      elementsLength = elements.length,
      arraysLength = elementsLength / arrayLength;

  for (var index = 0; index < arraysLength; index++) {
    var array = [];

    for (var offset = 0; offset < arrayLength; offset++) {
      array[offset] = elements[index * arrayLength + offset];
    }

    arrays[index] = array;
  }

  return arrays;
}

function dilute(elements, array, test) {
  elements.forEach(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      array.push(element);
    }
  });
}

function permute(elements, places) {
  var length = elements.length,
      cut = length - places,
      leadingElements = elements.slice(0, cut),
      trailingElements = elements.slice(cut);

  elements = [].concat(_toConsumableArray(trailingElements), _toConsumableArray(leadingElements));

  return elements;
}

function flatten(arrays) {
  return arrays.reduce(function (elements, array) {
    return elements.concat(array);
  }, []);
}

module.exports = Object.assign(arrayUtilities, {
  chop: chop,
  dilute: dilute,
  permute: permute,
  flatten: flatten
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvYXJyYXkuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwic3BsaWNlIiwiY2hvcCIsImVsZW1lbnRzIiwiYXJyYXlMZW5ndGgiLCJhcnJheXMiLCJlbGVtZW50c0xlbmd0aCIsImxlbmd0aCIsImFycmF5c0xlbmd0aCIsImluZGV4IiwiYXJyYXkiLCJvZmZzZXQiLCJkaWx1dGUiLCJ0ZXN0IiwiZm9yRWFjaCIsImVsZW1lbnQiLCJwYXNzZWQiLCJwdXNoIiwicGVybXV0ZSIsInBsYWNlcyIsImN1dCIsImxlYWRpbmdFbGVtZW50cyIsInNsaWNlIiwidHJhaWxpbmdFbGVtZW50cyIsImZsYXR0ZW4iLCJyZWR1Y2UiLCJjb25jYXQiLCJtb2R1bGUiLCJleHBvcnRzIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjs7QUFFTSxJQUFFQyxjQUFGLEdBQXFCRixTQUFyQixDQUFFRSxjQUFGO0FBQUEsSUFDRUMsTUFERixHQUNhRCxjQURiLENBQ0VDLE1BREY7OztBQUdOLFNBQVNDLElBQVQsQ0FBY0MsUUFBZCxFQUF3QkMsV0FBeEIsRUFBcUM7QUFDbkMsTUFBTUMsU0FBUyxFQUFmO0FBQUEsTUFDTUMsaUJBQWlCSCxTQUFTSSxNQURoQztBQUFBLE1BRU1DLGVBQWVGLGlCQUFpQkYsV0FGdEM7O0FBSUEsT0FBSyxJQUFJSyxRQUFRLENBQWpCLEVBQW9CQSxRQUFRRCxZQUE1QixFQUEwQ0MsT0FBMUMsRUFBbUQ7QUFDakQsUUFBTUMsUUFBUSxFQUFkOztBQUVBLFNBQUssSUFBSUMsU0FBUyxDQUFsQixFQUFxQkEsU0FBU1AsV0FBOUIsRUFBMkNPLFFBQTNDLEVBQXFEO0FBQ25ERCxZQUFNQyxNQUFOLElBQWdCUixTQUFTTSxRQUFRTCxXQUFSLEdBQXNCTyxNQUEvQixDQUFoQjtBQUNEOztBQUVETixXQUFPSSxLQUFQLElBQWdCQyxLQUFoQjtBQUNEOztBQUVELFNBQU9MLE1BQVA7QUFDRDs7QUFFRCxTQUFTTyxNQUFULENBQWdCVCxRQUFoQixFQUEwQk8sS0FBMUIsRUFBaUNHLElBQWpDLEVBQXVDO0FBQ3JDVixXQUFTVyxPQUFULENBQWlCLFVBQVNDLE9BQVQsRUFBa0JOLEtBQWxCLEVBQXlCO0FBQ3hDLFFBQU1PLFNBQVNILEtBQUtFLE9BQUwsRUFBY04sS0FBZCxDQUFmOztBQUVBLFFBQUlPLE1BQUosRUFBWTtBQUNWTixZQUFNTyxJQUFOLENBQVdGLE9BQVg7QUFDRDtBQUNGLEdBTkQ7QUFPRDs7QUFFRCxTQUFTRyxPQUFULENBQWlCZixRQUFqQixFQUEyQmdCLE1BQTNCLEVBQW1DO0FBQ2pDLE1BQU1aLFNBQVNKLFNBQVNJLE1BQXhCO0FBQUEsTUFDTWEsTUFBTWIsU0FBU1ksTUFEckI7QUFBQSxNQUVNRSxrQkFBa0JsQixTQUFTbUIsS0FBVCxDQUFlLENBQWYsRUFBa0JGLEdBQWxCLENBRnhCO0FBQUEsTUFHTUcsbUJBQW1CcEIsU0FBU21CLEtBQVQsQ0FBZUYsR0FBZixDQUh6Qjs7QUFLQWpCLDBDQUFlb0IsZ0JBQWYsc0JBQW9DRixlQUFwQzs7QUFFQSxTQUFPbEIsUUFBUDtBQUNEOztBQUVELFNBQVNxQixPQUFULENBQWlCbkIsTUFBakIsRUFBeUI7QUFDdkIsU0FBT0EsT0FBT29CLE1BQVAsQ0FBYyxVQUFTdEIsUUFBVCxFQUFtQk8sS0FBbkIsRUFBMEI7QUFDN0MsV0FBT1AsU0FBU3VCLE1BQVQsQ0FBZ0JoQixLQUFoQixDQUFQO0FBQ0QsR0FGTSxFQUVKLEVBRkksQ0FBUDtBQUdEOztBQUVEaUIsT0FBT0MsT0FBUCxHQUFpQkMsT0FBT0MsTUFBUCxDQUFjOUIsY0FBZCxFQUE4QjtBQUM3Q0UsUUFBTUEsSUFEdUM7QUFFN0NVLFVBQVFBLE1BRnFDO0FBRzdDTSxXQUFTQSxPQUhvQztBQUk3Q00sV0FBU0E7QUFKb0MsQ0FBOUIsQ0FBakIiLCJmaWxlIjoiYXJyYXkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IHNwbGljZSB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGNob3AoZWxlbWVudHMsIGFycmF5TGVuZ3RoKSB7XG4gIGNvbnN0IGFycmF5cyA9IFtdLFxuICAgICAgICBlbGVtZW50c0xlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aCxcbiAgICAgICAgYXJyYXlzTGVuZ3RoID0gZWxlbWVudHNMZW5ndGggLyBhcnJheUxlbmd0aDtcblxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYXJyYXlzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcblxuICAgIGZvciAobGV0IG9mZnNldCA9IDA7IG9mZnNldCA8IGFycmF5TGVuZ3RoOyBvZmZzZXQrKykge1xuICAgICAgYXJyYXlbb2Zmc2V0XSA9IGVsZW1lbnRzW2luZGV4ICogYXJyYXlMZW5ndGggKyBvZmZzZXRdO1xuICAgIH1cblxuICAgIGFycmF5c1tpbmRleF0gPSBhcnJheTtcbiAgfVxuXG4gIHJldHVybiBhcnJheXM7XG59XG5cbmZ1bmN0aW9uIGRpbHV0ZShlbGVtZW50cywgYXJyYXksIHRlc3QpIHtcbiAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKHBhc3NlZCkge1xuICAgICAgYXJyYXkucHVzaChlbGVtZW50KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwZXJtdXRlKGVsZW1lbnRzLCBwbGFjZXMpIHtcbiAgY29uc3QgbGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoLFxuICAgICAgICBjdXQgPSBsZW5ndGggLSBwbGFjZXMsXG4gICAgICAgIGxlYWRpbmdFbGVtZW50cyA9IGVsZW1lbnRzLnNsaWNlKDAsIGN1dCksXG4gICAgICAgIHRyYWlsaW5nRWxlbWVudHMgPSBlbGVtZW50cy5zbGljZShjdXQpO1xuXG4gIGVsZW1lbnRzID0gWy4uLnRyYWlsaW5nRWxlbWVudHMsIC4uLmxlYWRpbmdFbGVtZW50c107XG5cbiAgcmV0dXJuIGVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuKGFycmF5cykge1xuICByZXR1cm4gYXJyYXlzLnJlZHVjZShmdW5jdGlvbihlbGVtZW50cywgYXJyYXkpIHtcbiAgICByZXR1cm4gZWxlbWVudHMuY29uY2F0KGFycmF5KTtcbiAgfSwgW10pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oYXJyYXlVdGlsaXRpZXMsIHtcbiAgY2hvcDogY2hvcCxcbiAgZGlsdXRlOiBkaWx1dGUsXG4gIHBlcm11dGU6IHBlcm11dGUsXG4gIGZsYXR0ZW46IGZsYXR0ZW4gIFxufSk7XG4iXX0=