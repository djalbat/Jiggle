'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    splice = arrayUtilities.splice;


function chop(elements, arrayLength) {
  var arrays = [],
      elementsLength = elements.length,
      arraysLength = elementsLength / arrayLength;

  for (var index = 0; index < arraysLength; index++) {
    var array = [];

    for (var offset = 0; offset < arrayLength; offset++) {
      array[offset] = elements[index * arrayLength + offset];
    }

    arrays[index] = array;
  }

  return arrays;
}

function dilute(elements, array, test) {
  elements.forEach(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      array.push(element);
    }
  });
}

function permute(elements, places) {
  var length = elements.length,
      cut = length - places,
      leadingElements = elements.slice(0, cut),
      trailingElements = elements.slice(cut);

  elements = [].concat(_toConsumableArray(trailingElements), _toConsumableArray(leadingElements));

  return elements;
}

function flatten(arrays) {
  return arrays.reduce(function (elements, array) {
    return elements.concat(array);
  }, []);
}

function guarantee(arrayOrElement) {
  return arrayOrElement instanceof Array ? arrayOrElement : [arrayOrElement];
}

function concatenate(elements, arrayOrElement) {
  var array = guarantee(arrayOrElement),
      start = 0,
      deleteCount = 0;

  splice(elements, start, deleteCount, array);
}

module.exports = Object.assign(arrayUtilities, {
  chop: chop,
  dilute: dilute,
  permute: permute,
  flatten: flatten,
  concatenate: concatenate
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvYXJyYXkuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwic3BsaWNlIiwiY2hvcCIsImVsZW1lbnRzIiwiYXJyYXlMZW5ndGgiLCJhcnJheXMiLCJlbGVtZW50c0xlbmd0aCIsImxlbmd0aCIsImFycmF5c0xlbmd0aCIsImluZGV4IiwiYXJyYXkiLCJvZmZzZXQiLCJkaWx1dGUiLCJ0ZXN0IiwiZm9yRWFjaCIsImVsZW1lbnQiLCJwYXNzZWQiLCJwdXNoIiwicGVybXV0ZSIsInBsYWNlcyIsImN1dCIsImxlYWRpbmdFbGVtZW50cyIsInNsaWNlIiwidHJhaWxpbmdFbGVtZW50cyIsImZsYXR0ZW4iLCJyZWR1Y2UiLCJjb25jYXQiLCJndWFyYW50ZWUiLCJhcnJheU9yRWxlbWVudCIsIkFycmF5IiwiY29uY2F0ZW5hdGUiLCJzdGFydCIsImRlbGV0ZUNvdW50IiwibW9kdWxlIiwiZXhwb3J0cyIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRU0sSUFBRUMsY0FBRixHQUFxQkYsU0FBckIsQ0FBRUUsY0FBRjtBQUFBLElBQ0VDLE1BREYsR0FDYUQsY0FEYixDQUNFQyxNQURGOzs7QUFHTixTQUFTQyxJQUFULENBQWNDLFFBQWQsRUFBd0JDLFdBQXhCLEVBQXFDO0FBQ25DLE1BQU1DLFNBQVMsRUFBZjtBQUFBLE1BQ01DLGlCQUFpQkgsU0FBU0ksTUFEaEM7QUFBQSxNQUVNQyxlQUFlRixpQkFBaUJGLFdBRnRDOztBQUlBLE9BQUssSUFBSUssUUFBUSxDQUFqQixFQUFvQkEsUUFBUUQsWUFBNUIsRUFBMENDLE9BQTFDLEVBQW1EO0FBQ2pELFFBQU1DLFFBQVEsRUFBZDs7QUFFQSxTQUFLLElBQUlDLFNBQVMsQ0FBbEIsRUFBcUJBLFNBQVNQLFdBQTlCLEVBQTJDTyxRQUEzQyxFQUFxRDtBQUNuREQsWUFBTUMsTUFBTixJQUFnQlIsU0FBU00sUUFBUUwsV0FBUixHQUFzQk8sTUFBL0IsQ0FBaEI7QUFDRDs7QUFFRE4sV0FBT0ksS0FBUCxJQUFnQkMsS0FBaEI7QUFDRDs7QUFFRCxTQUFPTCxNQUFQO0FBQ0Q7O0FBRUQsU0FBU08sTUFBVCxDQUFnQlQsUUFBaEIsRUFBMEJPLEtBQTFCLEVBQWlDRyxJQUFqQyxFQUF1QztBQUNyQ1YsV0FBU1csT0FBVCxDQUFpQixVQUFTQyxPQUFULEVBQWtCTixLQUFsQixFQUF5QjtBQUN4QyxRQUFNTyxTQUFTSCxLQUFLRSxPQUFMLEVBQWNOLEtBQWQsQ0FBZjs7QUFFQSxRQUFJTyxNQUFKLEVBQVk7QUFDVk4sWUFBTU8sSUFBTixDQUFXRixPQUFYO0FBQ0Q7QUFDRixHQU5EO0FBT0Q7O0FBRUQsU0FBU0csT0FBVCxDQUFpQmYsUUFBakIsRUFBMkJnQixNQUEzQixFQUFtQztBQUNqQyxNQUFNWixTQUFTSixTQUFTSSxNQUF4QjtBQUFBLE1BQ01hLE1BQU1iLFNBQVNZLE1BRHJCO0FBQUEsTUFFTUUsa0JBQWtCbEIsU0FBU21CLEtBQVQsQ0FBZSxDQUFmLEVBQWtCRixHQUFsQixDQUZ4QjtBQUFBLE1BR01HLG1CQUFtQnBCLFNBQVNtQixLQUFULENBQWVGLEdBQWYsQ0FIekI7O0FBS0FqQiwwQ0FBZW9CLGdCQUFmLHNCQUFvQ0YsZUFBcEM7O0FBRUEsU0FBT2xCLFFBQVA7QUFDRDs7QUFFRCxTQUFTcUIsT0FBVCxDQUFpQm5CLE1BQWpCLEVBQXlCO0FBQ3ZCLFNBQU9BLE9BQU9vQixNQUFQLENBQWMsVUFBU3RCLFFBQVQsRUFBbUJPLEtBQW5CLEVBQTBCO0FBQzdDLFdBQU9QLFNBQVN1QixNQUFULENBQWdCaEIsS0FBaEIsQ0FBUDtBQUNELEdBRk0sRUFFSixFQUZJLENBQVA7QUFHRDs7QUFFRCxTQUFTaUIsU0FBVCxDQUFtQkMsY0FBbkIsRUFBbUM7QUFDakMsU0FBUUEsMEJBQTBCQyxLQUEzQixHQUNHRCxjQURILEdBRUksQ0FBQ0EsY0FBRCxDQUZYO0FBR0Q7O0FBRUQsU0FBU0UsV0FBVCxDQUFxQjNCLFFBQXJCLEVBQStCeUIsY0FBL0IsRUFBK0M7QUFDN0MsTUFBTWxCLFFBQVFpQixVQUFVQyxjQUFWLENBQWQ7QUFBQSxNQUNNRyxRQUFRLENBRGQ7QUFBQSxNQUVNQyxjQUFjLENBRnBCOztBQUlBL0IsU0FBT0UsUUFBUCxFQUFpQjRCLEtBQWpCLEVBQXdCQyxXQUF4QixFQUFxQ3RCLEtBQXJDO0FBQ0Q7O0FBRUR1QixPQUFPQyxPQUFQLEdBQWlCQyxPQUFPQyxNQUFQLENBQWNwQyxjQUFkLEVBQThCO0FBQzdDRSxRQUFNQSxJQUR1QztBQUU3Q1UsVUFBUUEsTUFGcUM7QUFHN0NNLFdBQVNBLE9BSG9DO0FBSTdDTSxXQUFTQSxPQUpvQztBQUs3Q00sZUFBYUE7QUFMZ0MsQ0FBOUIsQ0FBakIiLCJmaWxlIjoiYXJyYXkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IHNwbGljZSB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGNob3AoZWxlbWVudHMsIGFycmF5TGVuZ3RoKSB7XG4gIGNvbnN0IGFycmF5cyA9IFtdLFxuICAgICAgICBlbGVtZW50c0xlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aCxcbiAgICAgICAgYXJyYXlzTGVuZ3RoID0gZWxlbWVudHNMZW5ndGggLyBhcnJheUxlbmd0aDtcblxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYXJyYXlzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcblxuICAgIGZvciAobGV0IG9mZnNldCA9IDA7IG9mZnNldCA8IGFycmF5TGVuZ3RoOyBvZmZzZXQrKykge1xuICAgICAgYXJyYXlbb2Zmc2V0XSA9IGVsZW1lbnRzW2luZGV4ICogYXJyYXlMZW5ndGggKyBvZmZzZXRdO1xuICAgIH1cblxuICAgIGFycmF5c1tpbmRleF0gPSBhcnJheTtcbiAgfVxuXG4gIHJldHVybiBhcnJheXM7XG59XG5cbmZ1bmN0aW9uIGRpbHV0ZShlbGVtZW50cywgYXJyYXksIHRlc3QpIHtcbiAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKHBhc3NlZCkge1xuICAgICAgYXJyYXkucHVzaChlbGVtZW50KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwZXJtdXRlKGVsZW1lbnRzLCBwbGFjZXMpIHtcbiAgY29uc3QgbGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoLFxuICAgICAgICBjdXQgPSBsZW5ndGggLSBwbGFjZXMsXG4gICAgICAgIGxlYWRpbmdFbGVtZW50cyA9IGVsZW1lbnRzLnNsaWNlKDAsIGN1dCksXG4gICAgICAgIHRyYWlsaW5nRWxlbWVudHMgPSBlbGVtZW50cy5zbGljZShjdXQpO1xuXG4gIGVsZW1lbnRzID0gWy4uLnRyYWlsaW5nRWxlbWVudHMsIC4uLmxlYWRpbmdFbGVtZW50c107XG5cbiAgcmV0dXJuIGVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuKGFycmF5cykge1xuICByZXR1cm4gYXJyYXlzLnJlZHVjZShmdW5jdGlvbihlbGVtZW50cywgYXJyYXkpIHtcbiAgICByZXR1cm4gZWxlbWVudHMuY29uY2F0KGFycmF5KTtcbiAgfSwgW10pO1xufVxuXG5mdW5jdGlvbiBndWFyYW50ZWUoYXJyYXlPckVsZW1lbnQpIHtcbiAgcmV0dXJuIChhcnJheU9yRWxlbWVudCBpbnN0YW5jZW9mIEFycmF5KSA/XG4gICAgICAgICAgICBhcnJheU9yRWxlbWVudCA6XG4gICAgICAgICAgICAgW2FycmF5T3JFbGVtZW50XTtcbn1cblxuZnVuY3Rpb24gY29uY2F0ZW5hdGUoZWxlbWVudHMsIGFycmF5T3JFbGVtZW50KSB7XG4gIGNvbnN0IGFycmF5ID0gZ3VhcmFudGVlKGFycmF5T3JFbGVtZW50KSxcbiAgICAgICAgc3RhcnQgPSAwLFxuICAgICAgICBkZWxldGVDb3VudCA9IDA7XG5cbiAgc3BsaWNlKGVsZW1lbnRzLCBzdGFydCwgZGVsZXRlQ291bnQsIGFycmF5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKGFycmF5VXRpbGl0aWVzLCB7XG4gIGNob3A6IGNob3AsXG4gIGRpbHV0ZTogZGlsdXRlLFxuICBwZXJtdXRlOiBwZXJtdXRlLFxuICBmbGF0dGVuOiBmbGF0dGVuLFxuICBjb25jYXRlbmF0ZTogY29uY2F0ZW5hdGUgIFxufSk7XG4iXX0=