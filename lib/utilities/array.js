"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var necessary = require("necessary");

var arrayUtilities = necessary.arrayUtilities;

function permute(array, places) {
  var length = array.length,
      cut = length - places,
      leadingElements = array.slice(0, cut),
      trailingElements = array.slice(cut);
  array = [].concat(_toConsumableArray(trailingElements), _toConsumableArray(leadingElements));
  return array;
}

function flatten(arrays) {
  return arrays.reduce(function (elements, array) {
    return elements.concat(array);
  }, []);
}

function guarantee(arrayOrElement) {
  arrayOrElement = arrayOrElement || [];
  return arrayOrElement instanceof Array ? arrayOrElement : [arrayOrElement];
}

module.exports = Object.assign(arrayUtilities, {
  permute: permute,
  flatten: flatten,
  guarantee: guarantee
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LmpzIl0sIm5hbWVzIjpbIm5lY2Vzc2FyeSIsInJlcXVpcmUiLCJhcnJheVV0aWxpdGllcyIsInBlcm11dGUiLCJhcnJheSIsInBsYWNlcyIsImxlbmd0aCIsImN1dCIsImxlYWRpbmdFbGVtZW50cyIsInNsaWNlIiwidHJhaWxpbmdFbGVtZW50cyIsImZsYXR0ZW4iLCJhcnJheXMiLCJyZWR1Y2UiLCJlbGVtZW50cyIsImNvbmNhdCIsImd1YXJhbnRlZSIsImFycmF5T3JFbGVtZW50IiwiQXJyYXkiLCJtb2R1bGUiLCJleHBvcnRzIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0lBRVFDLGMsR0FBbUJGLFMsQ0FBbkJFLGM7O0FBRVIsU0FBU0MsT0FBVCxDQUFpQkMsS0FBakIsRUFBd0JDLE1BQXhCLEVBQWdDO0FBQzlCLE1BQU1DLE1BQU0sR0FBR0YsS0FBSyxDQUFDRSxNQUFyQjtBQUFBLE1BQ01DLEdBQUcsR0FBR0QsTUFBTSxHQUFHRCxNQURyQjtBQUFBLE1BRU1HLGVBQWUsR0FBR0osS0FBSyxDQUFDSyxLQUFOLENBQVksQ0FBWixFQUFlRixHQUFmLENBRnhCO0FBQUEsTUFHTUcsZ0JBQWdCLEdBQUdOLEtBQUssQ0FBQ0ssS0FBTixDQUFZRixHQUFaLENBSHpCO0FBS0FILEVBQUFBLEtBQUssZ0NBQVFNLGdCQUFSLHNCQUE2QkYsZUFBN0IsRUFBTDtBQUVBLFNBQU9KLEtBQVA7QUFDRDs7QUFFRCxTQUFTTyxPQUFULENBQWlCQyxNQUFqQixFQUF5QjtBQUN2QixTQUFPQSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxVQUFDQyxRQUFELEVBQVdWLEtBQVg7QUFBQSxXQUFxQlUsUUFBUSxDQUFDQyxNQUFULENBQWdCWCxLQUFoQixDQUFyQjtBQUFBLEdBQWQsRUFBMkQsRUFBM0QsQ0FBUDtBQUNEOztBQUVELFNBQVNZLFNBQVQsQ0FBbUJDLGNBQW5CLEVBQW1DO0FBQ2pDQSxFQUFBQSxjQUFjLEdBQUdBLGNBQWMsSUFBSSxFQUFuQztBQUVBLFNBQVFBLGNBQWMsWUFBWUMsS0FBM0IsR0FDRUQsY0FERixHQUVHLENBQUNBLGNBQUQsQ0FGVjtBQUdEOztBQUVERSxNQUFNLENBQUNDLE9BQVAsR0FBaUJDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjcEIsY0FBZCxFQUE4QjtBQUM3Q0MsRUFBQUEsT0FBTyxFQUFQQSxPQUQ2QztBQUU3Q1EsRUFBQUEsT0FBTyxFQUFQQSxPQUY2QztBQUc3Q0ssRUFBQUEsU0FBUyxFQUFUQTtBQUg2QyxDQUE5QixDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKFwibmVjZXNzYXJ5XCIpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3Nhcnk7XG5cbmZ1bmN0aW9uIHBlcm11dGUoYXJyYXksIHBsYWNlcykge1xuICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGN1dCA9IGxlbmd0aCAtIHBsYWNlcyxcbiAgICAgICAgbGVhZGluZ0VsZW1lbnRzID0gYXJyYXkuc2xpY2UoMCwgY3V0KSxcbiAgICAgICAgdHJhaWxpbmdFbGVtZW50cyA9IGFycmF5LnNsaWNlKGN1dCk7XG5cbiAgYXJyYXkgPSBbIC4uLnRyYWlsaW5nRWxlbWVudHMsIC4uLmxlYWRpbmdFbGVtZW50cyBdO1xuXG4gIHJldHVybiBhcnJheTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbihhcnJheXMpIHtcbiAgcmV0dXJuIGFycmF5cy5yZWR1Y2UoKGVsZW1lbnRzLCBhcnJheSkgPT4gZWxlbWVudHMuY29uY2F0KGFycmF5KSwgW10pO1xufVxuXG5mdW5jdGlvbiBndWFyYW50ZWUoYXJyYXlPckVsZW1lbnQpIHtcbiAgYXJyYXlPckVsZW1lbnQgPSBhcnJheU9yRWxlbWVudCB8fCBbXTtcblxuICByZXR1cm4gKGFycmF5T3JFbGVtZW50IGluc3RhbmNlb2YgQXJyYXkpID9cbiAgICAgICAgICAgYXJyYXlPckVsZW1lbnQgOlxuICAgICAgICAgICAgW2FycmF5T3JFbGVtZW50XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKGFycmF5VXRpbGl0aWVzLCB7XG4gIHBlcm11dGUsXG4gIGZsYXR0ZW4sXG4gIGd1YXJhbnRlZVxufSk7XG4iXX0=