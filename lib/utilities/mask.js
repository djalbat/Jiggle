'use strict';

var vec3 = require('../maths/vec3'),
    Line = require('../maths/line'),
    arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    fourth = arrayUtilities.fourth,
    subtract = vec3.subtract,
    dot = vec3.dot,
    cross = vec3.cross,
    normalise = vec3.normalise;


function calculateNormal(vertexPositions) {
      var firstVertexPosition = first(vertexPositions),
          secondVertexPosition = second(vertexPositions),
          fourthVertexPosition = fourth(vertexPositions),
          firstVector = subtract(secondVertexPosition, firstVertexPosition),
          secondVector = subtract(fourthVertexPosition, firstVertexPosition),
          normal = normalise(cross(firstVector, secondVector));

      return normal;
}

function calculateIntersectionOfPlanes(vertexPositionsA, vertexPositionsB) {
      var normalA = calculateNormal(vertexPositionsA),
          rotationQuaternion = calculateRotationQuaternion(normalA),
          rotatedVertexPositionsA = rotatePositions(vertexPositionsA, rotationQuaternion),
          rotatedVertexPositionsB = rotatePositions(vertexPositionsB, rotationQuaternion),
          firstRotatedVertexPositionA = first(rotatedVertexPositionsA),
          rotatedVertexPositionA = firstRotatedVertexPositionA,
          ///
      rotatedVertexPositionComponents = rotatedVertexPositionA,
          ///
      thirdRotatedVertexPositionComponent = third(rotatedVertexPositionComponents),
          z = thirdRotatedVertexPositionComponent,
          ///
      normalB = calculateNormal(rotatedVertexPositionsB),
          normalBComponents = normalB,
          ///
      firstNormalBComponent = first(normalBComponents),
          secondNormalBComponent = second(normalBComponents),
          thirdNormalBComponent = third(normalBComponents),
          a = firstNormalBComponent,
          ///
      b = secondNormalBComponent,
          ///
      c = dot(rotatedVertexPositionA, normalB) - thirdNormalBComponent * z,
          intersectionLine = Line.fromEquation(a, b, c),
          lines = linesFromVertexPositions(rotatedVertexPositionsA),
          intersections = lines.map(function (line) {
            var intersection = line.calculateIntersection(intersectionLine);

            return intersection;
      });

      debugger;
}

function linesFromVertexPositions(vertexPositions) {
      var lines = [],
          vertexPositionsLength = vertexPositions.length;

      for (var index = 0; index < vertexPositionsLength; index++) {
            var firstIndex = index,
                secondIndex = (index + 1) % vertexPositionsLength,
                firstVertexPosition = vertexPositions[firstIndex],
                secondVertexPosition = vertexPositions[secondIndex],
                line = Line.fromVertexPositions(firstVertexPosition, secondVertexPosition);

            lines.push(line);
      }

      return lines;
}

module.exports = {
      calculateIntersectionOfPlanes: calculateIntersectionOfPlanes
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,