'use strict';

var vec3 = require('../maths/vec3'),
    arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    fourth = arrayUtilities.fourth,
    subtract = vec3.subtract,
    dot = vec3.dot,
    cross = vec3.cross,
    normalise = vec3.normalise;


function calculateNormal(vertexPositions) {
  var firstVertexPosition = first(vertexPositions),
      secondVertexPosition = second(vertexPositions),
      fourthVertexPosition = fourth(vertexPositions),
      firstVector = subtract(secondVertexPosition, firstVertexPosition),
      secondVector = subtract(fourthVertexPosition, firstVertexPosition),
      normal = normalise(cross(firstVector, secondVector));

  return normal;
}

function calculateIntersectionOfPlanes(vertexPositionsA, vertexPositionsB) {
  var normalA = calculateNormal(vertexPositionsA),
      rotationQuaternion = calculateRotationQuaternion(normalA),
      rotatedVertexPositionsA = rotatePositions(vertexPositionsA, rotationQuaternion),
      rotatedVertexPositionsB = rotatePositions(vertexPositionsB, rotationQuaternion),
      firstRotatedVertexPosition = first(rotatedVertexPositionsA),
      rotatedVertexPosition = firstRotatedVertexPosition,
      ///
  rotatedVertexPositionComponents = rotatedVertexPosition,
      ///
  thirdRotatedVertexPositionComponent = third(rotatedVertexPositionComponents),
      z = thirdRotatedVertexPositionComponent,
      ///
  normalB = calculateNormal(rotatedVertexPositionsB),
      normalBComponents = normalB,
      ///
  firstNormalBComponent = first(normalBComponents),
      secondNormalBComponent = second(normalBComponents),
      thirdNormalBComponent = third(normalBComponents),
      a = firstNormalBComponent,
      ///
  b = secondNormalBComponent,
      ///
  c = dot(rotatedVertexPosition, normalB) - thirdNormalBComponent * z;

  debugger;
}

function calculateRotationQuaternion(normal) {
  var normalComponents = normal,
      ///
  firstNormalComponent = first(normalComponents),
      secondNormalComponent = second(normalComponents),
      thirdNormalComponent = third(normalComponents),
      angleOfRotationCosine = thirdNormalComponent,
      ///
  axisOfRotation = angleOfRotationCosine === 1 ? [0, 0, 1] : [+secondNormalComponent, -firstNormalComponent, 0],
      unitAxisOfRotation = normalise(axisOfRotation),
      rotationQuaternion = calculateRotationQuarternion(angleOfRotationCosine, unitAxisOfRotation);

  return rotationQuaternion;
}

function rotatePosition(position, rotationQuaternion) {
  var imaginaryQuaternion = calculateImaginaryQuaternion(position),
      rotatedImaginaryQuaternion = rotateImaginaryQuaternion(imaginaryQuaternion, rotationQuaternion),
      rotatedPosition = calculatePosition(rotatedImaginaryQuaternion);

  return rotatedPosition;
}

function rotatePositions(positions, rotationQuaternion) {
  var rotatedPositions = positions.map(function (position) {
    var rotatedPosition = rotatePosition(position, rotationQuaternion);

    return rotatedPosition;
  });

  return rotatedPositions;
}

function rotateImaginaryQuaternion(imaginaryQuaternion, rotationQuaternion) {
  var inverseRotationQuaternion = calculateInverseRotationQuarternion(rotationQuaternion),
      rotatedImaginaryQuaternion = hamiltonProduct(hamiltonProduct(rotationQuaternion, imaginaryQuaternion), inverseRotationQuaternion);

  return rotatedImaginaryQuaternion;
}

function hamiltonProduct(quaternionA, quarternionB) {
  var quaternionAComponents = quaternionA,
      ///
  quaternionBComponents = quarternionB,
      ///
  firstQuarternionAComponent = first(quaternionAComponents),
      secondQuarternionAComponent = second(quaternionAComponents),
      thirdQuarternionAComponent = third(quaternionAComponents),
      fourthQuarternionAComponent = fourth(quaternionAComponents),
      firstQuarternionBComponent = first(quaternionBComponents),
      secondQuarternionBComponent = second(quaternionBComponents),
      thirdQuarternionBComponent = third(quaternionBComponents),
      fourthQuarternionBComponent = fourth(quaternionBComponents),
      a1 = firstQuarternionAComponent,
      b1 = secondQuarternionAComponent,
      c1 = thirdQuarternionAComponent,
      d1 = fourthQuarternionAComponent,
      a2 = firstQuarternionBComponent,
      b2 = secondQuarternionBComponent,
      c2 = thirdQuarternionBComponent,
      d2 = fourthQuarternionBComponent,
      a = a1 * a2 - b1 * b2 - c1 * c2 - d1 * d2,
      b = a1 * b2 + b1 * a2 + c1 * d2 - d1 * c2,
      c = a1 * c2 - b1 * d2 + c1 * a2 + d1 * b2,
      d = a1 * d2 + b1 * c2 - c1 * b2 + d1 * a2,
      quaternion = [a, b, c, d];

  return quaternion;
}

function calculateImaginaryQuaternion(position) {
  var positionComponents = position,
      ///
  firstPositionComponent = first(positionComponents),
      secondPositionComponent = second(positionComponents),
      thirdPositionComponent = third(positionComponents),
      imaginaryQuaternion = [0, firstPositionComponent, secondPositionComponent, thirdPositionComponent];

  return imaginaryQuaternion;
}

function calculatePosition(imaginaryQuaternion) {
  var imaginaryQuaternionComponents = imaginaryQuaternion,
      ///
  secondImaginaryQuaternionComponent = second(imaginaryQuaternionComponents),
      thirdImaginaryQuaternionComponent = third(imaginaryQuaternionComponents),
      fourthImaginaryQuaternionComponent = fourth(imaginaryQuaternionComponents),
      position = [secondImaginaryQuaternionComponent, thirdImaginaryQuaternionComponent, fourthImaginaryQuaternionComponent];

  return position;
}

function calculateRotationQuarternion(angleOfRotationCosine, unitAxisOfRotation) {
  var halfAngleOfRotationCosine = calculateHalfAngleCosine(angleOfRotationCosine),
      halfAngleOfRotationSine = calculateHalfAngleSine(angleOfRotationCosine),
      unitAxisOfRotationComponents = unitAxisOfRotation,
      ///
  firstAxisOfRotationComponent = first(unitAxisOfRotationComponents),
      secondAxisOfRotationComponent = second(unitAxisOfRotationComponents),
      thirdAxisOfRotationComponent = third(unitAxisOfRotationComponents),
      rotationQuarternion = [halfAngleOfRotationCosine, firstAxisOfRotationComponent * halfAngleOfRotationSine, secondAxisOfRotationComponent * halfAngleOfRotationSine, thirdAxisOfRotationComponent * halfAngleOfRotationSine];

  return rotationQuarternion;
}

function calculateInverseRotationQuarternion(rotationQuaternion) {
  var rotationQuaternionComponents = rotationQuaternion,
      ///
  firstRotationQuaternionComponent = first(rotationQuaternionComponents),
      secondRotationQuaternionComponent = second(rotationQuaternionComponents),
      thirdRotationQuaternionComponent = third(rotationQuaternionComponents),
      fourthRotationQuaternionComponent = fourth(rotationQuaternionComponents),
      inverseRotationQuaternion = [firstRotationQuaternionComponent, -secondRotationQuaternionComponent, -thirdRotationQuaternionComponent, -fourthRotationQuaternionComponent];

  return inverseRotationQuaternion;
}

function calculateHalfAngleCosine(angleCosine) {
  var halfAngleCosine = Math.sqrt((1 + angleCosine) / 2);

  return halfAngleCosine;
}

function calculateHalfAngleSine(angleCosine) {
  var halfAngleSine = Math.sqrt((1 - angleCosine) / 2);

  return halfAngleSine;
}

module.exports = {
  calculateIntersectionOfPlanes: calculateIntersectionOfPlanes
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,