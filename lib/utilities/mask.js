'use strict';

var vec3 = require('../maths/vec3'),
    Line = require('../maths/line'),
    arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    fourth = arrayUtilities.fourth,
    subtract = vec3.subtract,
    dot = vec3.dot,
    cross = vec3.cross,
    normalise = vec3.normalise;


function calculateNormal(vertexPositions) {
  var firstVertexPosition = first(vertexPositions),
      secondVertexPosition = second(vertexPositions),
      fourthVertexPosition = fourth(vertexPositions),
      firstVector = subtract(secondVertexPosition, firstVertexPosition),
      secondVector = subtract(fourthVertexPosition, firstVertexPosition),
      normal = normalise(cross(firstVector, secondVector));

  return normal;
}

function calculateIntersectionOfPlanes(vertexPositionsA, vertexPositionsB) {
  var normalA = calculateNormal(vertexPositionsA),
      rotationQuaternion = calculateRotationQuaternion(normalA),
      rotatedVertexPositionsA = rotatePositions(vertexPositionsA, rotationQuaternion),
      rotatedVertexPositionsB = rotatePositions(vertexPositionsB, rotationQuaternion),
      firstRotatedVertexPositionA = first(rotatedVertexPositionsA),
      rotatedVertexPositionA = firstRotatedVertexPositionA,
      ///
  rotatedVertexPositionComponents = rotatedVertexPositionA,
      ///
  thirdRotatedVertexPositionComponent = third(rotatedVertexPositionComponents),
      z = thirdRotatedVertexPositionComponent,
      ///
  normalB = calculateNormal(rotatedVertexPositionsB),
      normalBComponents = normalB,
      ///
  firstNormalBComponent = first(normalBComponents),
      secondNormalBComponent = second(normalBComponents),
      thirdNormalBComponent = third(normalBComponents),
      a = firstNormalBComponent,
      ///
  b = secondNormalBComponent,
      ///
  c = dot(rotatedVertexPositionA, normalB) - thirdNormalBComponent * z,
      intersectionLine = Line.fromEquation(a, b, c),
      lines = linesFromVertexPositions(rotatedVertexPositionsA),
      intersections = lines.map(function (line) {
    var intersection = line.calculateIntersection(intersectionLine);

    return intersection;
  });

  debugger;
}

function linesFromVertexPositions(vertexPositions) {
  var lines = [],
      vertexPositionsLength = vertexPositions.length;

  for (var index = 0; index < vertexPositionsLength; index++) {
    var firstIndex = index,
        secondIndex = (index + 1) % vertexPositionsLength,
        firstVertexPosition = vertexPositions[firstIndex],
        secondVertexPosition = vertexPositions[secondIndex],
        line = Line.fromVertexPositions(firstVertexPosition, secondVertexPosition);

    lines.push(line);
  }

  return lines;
}

function calculateRotationQuaternion(normal) {
  var normalComponents = normal,
      ///
  firstNormalComponent = first(normalComponents),
      secondNormalComponent = second(normalComponents),
      thirdNormalComponent = third(normalComponents),
      angleOfRotationCosine = thirdNormalComponent,
      ///
  axisOfRotation = angleOfRotationCosine === 1 ? [0, 0, 1] : [+secondNormalComponent, -firstNormalComponent, 0],
      unitAxisOfRotation = normalise(axisOfRotation),
      rotationQuaternion = calculateRotationQuarternion(angleOfRotationCosine, unitAxisOfRotation);

  return rotationQuaternion;
}

function rotatePosition(position, rotationQuaternion) {
  var imaginaryQuaternion = calculateImaginaryQuaternion(position),
      rotatedImaginaryQuaternion = rotateImaginaryQuaternion(imaginaryQuaternion, rotationQuaternion),
      rotatedPosition = calculatePosition(rotatedImaginaryQuaternion);

  return rotatedPosition;
}

function rotatePositions(positions, rotationQuaternion) {
  var rotatedPositions = positions.map(function (position) {
    var rotatedPosition = rotatePosition(position, rotationQuaternion);

    return rotatedPosition;
  });

  return rotatedPositions;
}

function rotateImaginaryQuaternion(imaginaryQuaternion, rotationQuaternion) {
  var inverseRotationQuaternion = calculateInverseRotationQuarternion(rotationQuaternion),
      rotatedImaginaryQuaternion = hamiltonProduct(hamiltonProduct(rotationQuaternion, imaginaryQuaternion), inverseRotationQuaternion);

  return rotatedImaginaryQuaternion;
}

function hamiltonProduct(quaternionA, quarternionB) {
  var quaternionAComponents = quaternionA,
      ///
  quaternionBComponents = quarternionB,
      ///
  firstQuarternionAComponent = first(quaternionAComponents),
      secondQuarternionAComponent = second(quaternionAComponents),
      thirdQuarternionAComponent = third(quaternionAComponents),
      fourthQuarternionAComponent = fourth(quaternionAComponents),
      firstQuarternionBComponent = first(quaternionBComponents),
      secondQuarternionBComponent = second(quaternionBComponents),
      thirdQuarternionBComponent = third(quaternionBComponents),
      fourthQuarternionBComponent = fourth(quaternionBComponents),
      a1 = firstQuarternionAComponent,
      b1 = secondQuarternionAComponent,
      c1 = thirdQuarternionAComponent,
      d1 = fourthQuarternionAComponent,
      a2 = firstQuarternionBComponent,
      b2 = secondQuarternionBComponent,
      c2 = thirdQuarternionBComponent,
      d2 = fourthQuarternionBComponent,
      a = a1 * a2 - b1 * b2 - c1 * c2 - d1 * d2,
      b = a1 * b2 + b1 * a2 + c1 * d2 - d1 * c2,
      c = a1 * c2 - b1 * d2 + c1 * a2 + d1 * b2,
      d = a1 * d2 + b1 * c2 - c1 * b2 + d1 * a2,
      quaternion = [a, b, c, d];

  return quaternion;
}

function calculateImaginaryQuaternion(position) {
  var positionComponents = position,
      ///
  firstPositionComponent = first(positionComponents),
      secondPositionComponent = second(positionComponents),
      thirdPositionComponent = third(positionComponents),
      imaginaryQuaternion = [0, firstPositionComponent, secondPositionComponent, thirdPositionComponent];

  return imaginaryQuaternion;
}

function calculatePosition(imaginaryQuaternion) {
  var imaginaryQuaternionComponents = imaginaryQuaternion,
      ///
  secondImaginaryQuaternionComponent = second(imaginaryQuaternionComponents),
      thirdImaginaryQuaternionComponent = third(imaginaryQuaternionComponents),
      fourthImaginaryQuaternionComponent = fourth(imaginaryQuaternionComponents),
      position = [secondImaginaryQuaternionComponent, thirdImaginaryQuaternionComponent, fourthImaginaryQuaternionComponent];

  return position;
}

function calculateRotationQuarternion(angleOfRotationCosine, unitAxisOfRotation) {
  var halfAngleOfRotationCosine = calculateHalfAngleCosine(angleOfRotationCosine),
      halfAngleOfRotationSine = calculateHalfAngleSine(angleOfRotationCosine),
      unitAxisOfRotationComponents = unitAxisOfRotation,
      ///
  firstAxisOfRotationComponent = first(unitAxisOfRotationComponents),
      secondAxisOfRotationComponent = second(unitAxisOfRotationComponents),
      thirdAxisOfRotationComponent = third(unitAxisOfRotationComponents),
      rotationQuarternion = [halfAngleOfRotationCosine, firstAxisOfRotationComponent * halfAngleOfRotationSine, secondAxisOfRotationComponent * halfAngleOfRotationSine, thirdAxisOfRotationComponent * halfAngleOfRotationSine];

  return rotationQuarternion;
}

function calculateInverseRotationQuarternion(rotationQuaternion) {
  var rotationQuaternionComponents = rotationQuaternion,
      ///
  firstRotationQuaternionComponent = first(rotationQuaternionComponents),
      secondRotationQuaternionComponent = second(rotationQuaternionComponents),
      thirdRotationQuaternionComponent = third(rotationQuaternionComponents),
      fourthRotationQuaternionComponent = fourth(rotationQuaternionComponents),
      inverseRotationQuaternion = [firstRotationQuaternionComponent, -secondRotationQuaternionComponent, -thirdRotationQuaternionComponent, -fourthRotationQuaternionComponent];

  return inverseRotationQuaternion;
}

function calculateHalfAngleCosine(angleCosine) {
  var halfAngleCosine = Math.sqrt((1 + angleCosine) / 2);

  return halfAngleCosine;
}

function calculateHalfAngleSine(angleCosine) {
  var halfAngleSine = Math.sqrt((1 - angleCosine) / 2);

  return halfAngleSine;
}

module.exports = {
  calculateIntersectionOfPlanes: calculateIntersectionOfPlanes
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvbWFzay5qcyJdLCJuYW1lcyI6WyJ2ZWMzIiwicmVxdWlyZSIsIkxpbmUiLCJhcnJheVV0aWxpdGllcyIsImZpcnN0Iiwic2Vjb25kIiwidGhpcmQiLCJmb3VydGgiLCJzdWJ0cmFjdCIsImRvdCIsImNyb3NzIiwibm9ybWFsaXNlIiwiY2FsY3VsYXRlTm9ybWFsIiwidmVydGV4UG9zaXRpb25zIiwiZmlyc3RWZXJ0ZXhQb3NpdGlvbiIsInNlY29uZFZlcnRleFBvc2l0aW9uIiwiZm91cnRoVmVydGV4UG9zaXRpb24iLCJmaXJzdFZlY3RvciIsInNlY29uZFZlY3RvciIsIm5vcm1hbCIsImNhbGN1bGF0ZUludGVyc2VjdGlvbk9mUGxhbmVzIiwidmVydGV4UG9zaXRpb25zQSIsInZlcnRleFBvc2l0aW9uc0IiLCJub3JtYWxBIiwicm90YXRpb25RdWF0ZXJuaW9uIiwiY2FsY3VsYXRlUm90YXRpb25RdWF0ZXJuaW9uIiwicm90YXRlZFZlcnRleFBvc2l0aW9uc0EiLCJyb3RhdGVQb3NpdGlvbnMiLCJyb3RhdGVkVmVydGV4UG9zaXRpb25zQiIsImZpcnN0Um90YXRlZFZlcnRleFBvc2l0aW9uQSIsInJvdGF0ZWRWZXJ0ZXhQb3NpdGlvbkEiLCJyb3RhdGVkVmVydGV4UG9zaXRpb25Db21wb25lbnRzIiwidGhpcmRSb3RhdGVkVmVydGV4UG9zaXRpb25Db21wb25lbnQiLCJ6Iiwibm9ybWFsQiIsIm5vcm1hbEJDb21wb25lbnRzIiwiZmlyc3ROb3JtYWxCQ29tcG9uZW50Iiwic2Vjb25kTm9ybWFsQkNvbXBvbmVudCIsInRoaXJkTm9ybWFsQkNvbXBvbmVudCIsImEiLCJiIiwiYyIsImludGVyc2VjdGlvbkxpbmUiLCJmcm9tRXF1YXRpb24iLCJsaW5lcyIsImxpbmVzRnJvbVZlcnRleFBvc2l0aW9ucyIsImludGVyc2VjdGlvbnMiLCJtYXAiLCJsaW5lIiwiaW50ZXJzZWN0aW9uIiwiY2FsY3VsYXRlSW50ZXJzZWN0aW9uIiwidmVydGV4UG9zaXRpb25zTGVuZ3RoIiwibGVuZ3RoIiwiaW5kZXgiLCJmaXJzdEluZGV4Iiwic2Vjb25kSW5kZXgiLCJmcm9tVmVydGV4UG9zaXRpb25zIiwicHVzaCIsIm5vcm1hbENvbXBvbmVudHMiLCJmaXJzdE5vcm1hbENvbXBvbmVudCIsInNlY29uZE5vcm1hbENvbXBvbmVudCIsInRoaXJkTm9ybWFsQ29tcG9uZW50IiwiYW5nbGVPZlJvdGF0aW9uQ29zaW5lIiwiYXhpc09mUm90YXRpb24iLCJ1bml0QXhpc09mUm90YXRpb24iLCJjYWxjdWxhdGVSb3RhdGlvblF1YXJ0ZXJuaW9uIiwicm90YXRlUG9zaXRpb24iLCJwb3NpdGlvbiIsImltYWdpbmFyeVF1YXRlcm5pb24iLCJjYWxjdWxhdGVJbWFnaW5hcnlRdWF0ZXJuaW9uIiwicm90YXRlZEltYWdpbmFyeVF1YXRlcm5pb24iLCJyb3RhdGVJbWFnaW5hcnlRdWF0ZXJuaW9uIiwicm90YXRlZFBvc2l0aW9uIiwiY2FsY3VsYXRlUG9zaXRpb24iLCJwb3NpdGlvbnMiLCJyb3RhdGVkUG9zaXRpb25zIiwiaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbiIsImNhbGN1bGF0ZUludmVyc2VSb3RhdGlvblF1YXJ0ZXJuaW9uIiwiaGFtaWx0b25Qcm9kdWN0IiwicXVhdGVybmlvbkEiLCJxdWFydGVybmlvbkIiLCJxdWF0ZXJuaW9uQUNvbXBvbmVudHMiLCJxdWF0ZXJuaW9uQkNvbXBvbmVudHMiLCJmaXJzdFF1YXJ0ZXJuaW9uQUNvbXBvbmVudCIsInNlY29uZFF1YXJ0ZXJuaW9uQUNvbXBvbmVudCIsInRoaXJkUXVhcnRlcm5pb25BQ29tcG9uZW50IiwiZm91cnRoUXVhcnRlcm5pb25BQ29tcG9uZW50IiwiZmlyc3RRdWFydGVybmlvbkJDb21wb25lbnQiLCJzZWNvbmRRdWFydGVybmlvbkJDb21wb25lbnQiLCJ0aGlyZFF1YXJ0ZXJuaW9uQkNvbXBvbmVudCIsImZvdXJ0aFF1YXJ0ZXJuaW9uQkNvbXBvbmVudCIsImExIiwiYjEiLCJjMSIsImQxIiwiYTIiLCJiMiIsImMyIiwiZDIiLCJkIiwicXVhdGVybmlvbiIsInBvc2l0aW9uQ29tcG9uZW50cyIsImZpcnN0UG9zaXRpb25Db21wb25lbnQiLCJzZWNvbmRQb3NpdGlvbkNvbXBvbmVudCIsInRoaXJkUG9zaXRpb25Db21wb25lbnQiLCJpbWFnaW5hcnlRdWF0ZXJuaW9uQ29tcG9uZW50cyIsInNlY29uZEltYWdpbmFyeVF1YXRlcm5pb25Db21wb25lbnQiLCJ0aGlyZEltYWdpbmFyeVF1YXRlcm5pb25Db21wb25lbnQiLCJmb3VydGhJbWFnaW5hcnlRdWF0ZXJuaW9uQ29tcG9uZW50IiwiaGFsZkFuZ2xlT2ZSb3RhdGlvbkNvc2luZSIsImNhbGN1bGF0ZUhhbGZBbmdsZUNvc2luZSIsImhhbGZBbmdsZU9mUm90YXRpb25TaW5lIiwiY2FsY3VsYXRlSGFsZkFuZ2xlU2luZSIsInVuaXRBeGlzT2ZSb3RhdGlvbkNvbXBvbmVudHMiLCJmaXJzdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50Iiwic2Vjb25kQXhpc09mUm90YXRpb25Db21wb25lbnQiLCJ0aGlyZEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50Iiwicm90YXRpb25RdWFydGVybmlvbiIsInJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudHMiLCJmaXJzdFJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCIsInNlY29uZFJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCIsInRoaXJkUm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50IiwiZm91cnRoUm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50IiwiYW5nbGVDb3NpbmUiLCJoYWxmQW5nbGVDb3NpbmUiLCJNYXRoIiwic3FydCIsImhhbGZBbmdsZVNpbmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLGVBQVIsQ0FBYjtBQUFBLElBQ01DLE9BQU9ELFFBQVEsZUFBUixDQURiO0FBQUEsSUFFTUUsaUJBQWlCRixRQUFRLG9CQUFS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Q0FBQ0MsZ0NBSHlCLEVBSTFCLENBQUNDLGlDQUp5QixDQUxsQzs7QUFZQSxTQUFPOUMseUJBQVA7QUFDRDs7QUFFRCxTQUFTa0Msd0JBQVQsQ0FBa0NhLFdBQWxDLEVBQStDO0FBQzdDLE1BQU1DLGtCQUFrQkMsS0FBS0MsSUFBTCxDQUFVLENBQUMsSUFBSUgsV0FBTCxJQUFvQixDQUE5QixDQUF4Qjs7QUFFQSxTQUFPQyxlQUFQO0FBQ0Q7O0FBRUQsU0FBU1osc0JBQVQsQ0FBZ0NXLFdBQWhDLEVBQTZDO0FBQzNDLE1BQU1JLGdCQUFnQkYsS0FBS0MsSUFBTCxDQUFVLENBQUMsSUFBSUgsV0FBTCxJQUFvQixDQUE5QixDQUF0Qjs7QUFFQSxTQUFPSSxhQUFQO0FBQ0Q7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZjdHLGlDQUErQkE7QUFEaEIsQ0FBakIiLCJmaWxlIjoibWFzay5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdmVjMyA9IHJlcXVpcmUoJy4uL21hdGhzL3ZlYzMnKSxcbiAgICAgIExpbmUgPSByZXF1aXJlKCcuLi9tYXRocy9saW5lJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpO1xuXG5jb25zdCB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkLCBmb3VydGggfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBzdWJ0cmFjdCwgZG90LCBjcm9zcywgbm9ybWFsaXNlIH0gPSB2ZWMzO1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVOb3JtYWwodmVydGV4UG9zaXRpb25zKSB7XG4gIGNvbnN0IGZpcnN0VmVydGV4UG9zaXRpb24gPSBmaXJzdCh2ZXJ0ZXhQb3NpdGlvbnMpLFxuICAgICAgICBzZWNvbmRWZXJ0ZXhQb3NpdGlvbiA9IHNlY29uZCh2ZXJ0ZXhQb3NpdGlvbnMpLFxuICAgICAgICBmb3VydGhWZXJ0ZXhQb3NpdGlvbiA9IGZvdXJ0aCh2ZXJ0ZXhQb3NpdGlvbnMpLFxuICAgICAgICBmaXJzdFZlY3RvciA9IHN1YnRyYWN0KHNlY29uZFZlcnRleFBvc2l0aW9uLCBmaXJzdFZlcnRleFBvc2l0aW9uKSxcbiAgICAgICAgc2Vjb25kVmVjdG9yID0gc3VidHJhY3QoZm91cnRoVmVydGV4UG9zaXRpb24sIGZpcnN0VmVydGV4UG9zaXRpb24pLFxuICAgICAgICBub3JtYWwgPSBub3JtYWxpc2UoY3Jvc3MoZmlyc3RWZWN0b3IsIHNlY29uZFZlY3RvcikpO1xuXG4gIHJldHVybiBub3JtYWw7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUludGVyc2VjdGlvbk9mUGxhbmVzKHZlcnRleFBvc2l0aW9uc0EsIHZlcnRleFBvc2l0aW9uc0IpIHtcbiAgY29uc3Qgbm9ybWFsQSA9IGNhbGN1bGF0ZU5vcm1hbCh2ZXJ0ZXhQb3NpdGlvbnNBKSxcbiAgICAgICAgcm90YXRpb25RdWF0ZXJuaW9uID0gY2FsY3VsYXRlUm90YXRpb25RdWF0ZXJuaW9uKG5vcm1hbEEpLFxuICAgICAgICByb3RhdGVkVmVydGV4UG9zaXRpb25zQSA9IHJvdGF0ZVBvc2l0aW9ucyh2ZXJ0ZXhQb3NpdGlvbnNBLCByb3RhdGlvblF1YXRlcm5pb24pLFxuICAgICAgICByb3RhdGVkVmVydGV4UG9zaXRpb25zQiA9IHJvdGF0ZVBvc2l0aW9ucyh2ZXJ0ZXhQb3NpdGlvbnNCLCByb3RhdGlvblF1YXRlcm5pb24pLFxuICAgICAgICBmaXJzdFJvdGF0ZWRWZXJ0ZXhQb3NpdGlvbkEgPSBmaXJzdChyb3RhdGVkVmVydGV4UG9zaXRpb25zQSksXG4gICAgICAgIHJvdGF0ZWRWZXJ0ZXhQb3NpdGlvbkEgPSBmaXJzdFJvdGF0ZWRWZXJ0ZXhQb3NpdGlvbkEsIC8vL1xuICAgICAgICByb3RhdGVkVmVydGV4UG9zaXRpb25Db21wb25lbnRzID0gcm90YXRlZFZlcnRleFBvc2l0aW9uQSwgIC8vL1xuICAgICAgICB0aGlyZFJvdGF0ZWRWZXJ0ZXhQb3NpdGlvbkNvbXBvbmVudCA9IHRoaXJkKHJvdGF0ZWRWZXJ0ZXhQb3NpdGlvbkNvbXBvbmVudHMpLFxuICAgICAgICB6ID0gdGhpcmRSb3RhdGVkVmVydGV4UG9zaXRpb25Db21wb25lbnQsICAvLy9cbiAgICAgICAgbm9ybWFsQiA9IGNhbGN1bGF0ZU5vcm1hbChyb3RhdGVkVmVydGV4UG9zaXRpb25zQiksXG4gICAgICAgIG5vcm1hbEJDb21wb25lbnRzID0gbm9ybWFsQiwgIC8vL1xuICAgICAgICBmaXJzdE5vcm1hbEJDb21wb25lbnQgPSBmaXJzdChub3JtYWxCQ29tcG9uZW50cyksXG4gICAgICAgIHNlY29uZE5vcm1hbEJDb21wb25lbnQgPSBzZWNvbmQobm9ybWFsQkNvbXBvbmVudHMpLFxuICAgICAgICB0aGlyZE5vcm1hbEJDb21wb25lbnQgPSB0aGlyZChub3JtYWxCQ29tcG9uZW50cyksXG4gICAgICAgIGEgPSBmaXJzdE5vcm1hbEJDb21wb25lbnQsICAvLy9cbiAgICAgICAgYiA9IHNlY29uZE5vcm1hbEJDb21wb25lbnQsIC8vL1xuICAgICAgICBjID0gZG90KHJvdGF0ZWRWZXJ0ZXhQb3NpdGlvbkEsIG5vcm1hbEIpIC0gdGhpcmROb3JtYWxCQ29tcG9uZW50ICogeixcbiAgICAgICAgaW50ZXJzZWN0aW9uTGluZSA9IExpbmUuZnJvbUVxdWF0aW9uKGEsIGIsIGMpLFxuICAgICAgICBsaW5lcyA9IGxpbmVzRnJvbVZlcnRleFBvc2l0aW9ucyhyb3RhdGVkVmVydGV4UG9zaXRpb25zQSksXG4gICAgICAgIGludGVyc2VjdGlvbnMgPSBsaW5lcy5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IGxpbmUuY2FsY3VsYXRlSW50ZXJzZWN0aW9uKGludGVyc2VjdGlvbkxpbmUpO1xuXG4gICAgICAgICAgcmV0dXJuIGludGVyc2VjdGlvbjtcbiAgICAgICAgfSk7XG5cbiAgZGVidWdnZXJcbn1cblxuZnVuY3Rpb24gbGluZXNGcm9tVmVydGV4UG9zaXRpb25zKHZlcnRleFBvc2l0aW9ucykge1xuICBjb25zdCBsaW5lcyA9IFtdLFxuICAgICAgICB2ZXJ0ZXhQb3NpdGlvbnNMZW5ndGggPSB2ZXJ0ZXhQb3NpdGlvbnMubGVuZ3RoO1xuXG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB2ZXJ0ZXhQb3NpdGlvbnNMZW5ndGg7IGluZGV4KysgKSB7XG4gICAgY29uc3QgZmlyc3RJbmRleCA9IGluZGV4LFxuICAgICAgICAgIHNlY29uZEluZGV4ID0gKGluZGV4ICsgMSkgJSB2ZXJ0ZXhQb3NpdGlvbnNMZW5ndGgsXG4gICAgICAgICAgZmlyc3RWZXJ0ZXhQb3NpdGlvbiA9IHZlcnRleFBvc2l0aW9uc1tmaXJzdEluZGV4XSxcbiAgICAgICAgICBzZWNvbmRWZXJ0ZXhQb3NpdGlvbiA9IHZlcnRleFBvc2l0aW9uc1tzZWNvbmRJbmRleF0sXG4gICAgICAgICAgbGluZSA9IExpbmUuZnJvbVZlcnRleFBvc2l0aW9ucyhmaXJzdFZlcnRleFBvc2l0aW9uLCBzZWNvbmRWZXJ0ZXhQb3NpdGlvbik7XG5cbiAgICBsaW5lcy5wdXNoKGxpbmUpO1xuICB9XG5cbiAgcmV0dXJuIGxpbmVzO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVSb3RhdGlvblF1YXRlcm5pb24obm9ybWFsKSB7XG4gIGNvbnN0IG5vcm1hbENvbXBvbmVudHMgPSBub3JtYWwsICAvLy9cbiAgICAgICAgZmlyc3ROb3JtYWxDb21wb25lbnQgPSBmaXJzdChub3JtYWxDb21wb25lbnRzKSxcbiAgICAgICAgc2Vjb25kTm9ybWFsQ29tcG9uZW50ID0gc2Vjb25kKG5vcm1hbENvbXBvbmVudHMpLFxuICAgICAgICB0aGlyZE5vcm1hbENvbXBvbmVudCA9IHRoaXJkKG5vcm1hbENvbXBvbmVudHMpLFxuICAgICAgICBhbmdsZU9mUm90YXRpb25Db3NpbmUgPSB0aGlyZE5vcm1hbENvbXBvbmVudCwgIC8vL1xuICAgICAgICBheGlzT2ZSb3RhdGlvbiA9IChhbmdsZU9mUm90YXRpb25Db3NpbmUgPT09IDEpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFsgMCwgMCwgMSBdIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICtzZWNvbmROb3JtYWxDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLWZpcnN0Tm9ybWFsQ29tcG9uZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgdW5pdEF4aXNPZlJvdGF0aW9uID0gbm9ybWFsaXNlKGF4aXNPZlJvdGF0aW9uKSxcbiAgICAgICAgcm90YXRpb25RdWF0ZXJuaW9uID0gY2FsY3VsYXRlUm90YXRpb25RdWFydGVybmlvbihhbmdsZU9mUm90YXRpb25Db3NpbmUsIHVuaXRBeGlzT2ZSb3RhdGlvbik7XG5cbiAgcmV0dXJuIHJvdGF0aW9uUXVhdGVybmlvbjtcbn1cblxuZnVuY3Rpb24gcm90YXRlUG9zaXRpb24ocG9zaXRpb24sIHJvdGF0aW9uUXVhdGVybmlvbikge1xuICBjb25zdCBpbWFnaW5hcnlRdWF0ZXJuaW9uID0gY2FsY3VsYXRlSW1hZ2luYXJ5UXVhdGVybmlvbihwb3NpdGlvbiksXG4gICAgICAgIHJvdGF0ZWRJbWFnaW5hcnlRdWF0ZXJuaW9uID0gcm90YXRlSW1hZ2luYXJ5UXVhdGVybmlvbihpbWFnaW5hcnlRdWF0ZXJuaW9uLCByb3RhdGlvblF1YXRlcm5pb24pLFxuICAgICAgICByb3RhdGVkUG9zaXRpb24gPSBjYWxjdWxhdGVQb3NpdGlvbihyb3RhdGVkSW1hZ2luYXJ5UXVhdGVybmlvbik7XG5cbiAgcmV0dXJuIHJvdGF0ZWRQb3NpdGlvbjtcbn1cblxuZnVuY3Rpb24gcm90YXRlUG9zaXRpb25zKHBvc2l0aW9ucywgcm90YXRpb25RdWF0ZXJuaW9uKSB7XG4gIGNvbnN0IHJvdGF0ZWRQb3NpdGlvbnMgPSBwb3NpdGlvbnMubWFwKGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgY29uc3Qgcm90YXRlZFBvc2l0aW9uID0gcm90YXRlUG9zaXRpb24ocG9zaXRpb24sIHJvdGF0aW9uUXVhdGVybmlvbik7XG5cbiAgICByZXR1cm4gcm90YXRlZFBvc2l0aW9uO1xuICB9KTtcblxuICByZXR1cm4gcm90YXRlZFBvc2l0aW9ucztcbn1cblxuZnVuY3Rpb24gcm90YXRlSW1hZ2luYXJ5UXVhdGVybmlvbihpbWFnaW5hcnlRdWF0ZXJuaW9uLCByb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgY29uc3QgaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbiA9IGNhbGN1bGF0ZUludmVyc2VSb3RhdGlvblF1YXJ0ZXJuaW9uKHJvdGF0aW9uUXVhdGVybmlvbiksXG4gICAgICAgIHJvdGF0ZWRJbWFnaW5hcnlRdWF0ZXJuaW9uID0gaGFtaWx0b25Qcm9kdWN0KGhhbWlsdG9uUHJvZHVjdChyb3RhdGlvblF1YXRlcm5pb24sIGltYWdpbmFyeVF1YXRlcm5pb24pLCBpbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uKTtcblxuICByZXR1cm4gcm90YXRlZEltYWdpbmFyeVF1YXRlcm5pb247XG59XG5cbmZ1bmN0aW9uIGhhbWlsdG9uUHJvZHVjdChxdWF0ZXJuaW9uQSwgcXVhcnRlcm5pb25CKSB7XG4gIGNvbnN0IHF1YXRlcm5pb25BQ29tcG9uZW50cyA9IHF1YXRlcm5pb25BLCAgLy8vXG4gICAgICAgIHF1YXRlcm5pb25CQ29tcG9uZW50cyA9IHF1YXJ0ZXJuaW9uQiwgIC8vL1xuICAgICAgICBmaXJzdFF1YXJ0ZXJuaW9uQUNvbXBvbmVudCA9IGZpcnN0KHF1YXRlcm5pb25BQ29tcG9uZW50cyksXG4gICAgICAgIHNlY29uZFF1YXJ0ZXJuaW9uQUNvbXBvbmVudCA9IHNlY29uZChxdWF0ZXJuaW9uQUNvbXBvbmVudHMpLFxuICAgICAgICB0aGlyZFF1YXJ0ZXJuaW9uQUNvbXBvbmVudCA9IHRoaXJkKHF1YXRlcm5pb25BQ29tcG9uZW50cyksXG4gICAgICAgIGZvdXJ0aFF1YXJ0ZXJuaW9uQUNvbXBvbmVudCA9IGZvdXJ0aChxdWF0ZXJuaW9uQUNvbXBvbmVudHMpLFxuICAgICAgICBmaXJzdFF1YXJ0ZXJuaW9uQkNvbXBvbmVudCA9IGZpcnN0KHF1YXRlcm5pb25CQ29tcG9uZW50cyksXG4gICAgICAgIHNlY29uZFF1YXJ0ZXJuaW9uQkNvbXBvbmVudCA9IHNlY29uZChxdWF0ZXJuaW9uQkNvbXBvbmVudHMpLFxuICAgICAgICB0aGlyZFF1YXJ0ZXJuaW9uQkNvbXBvbmVudCA9IHRoaXJkKHF1YXRlcm5pb25CQ29tcG9uZW50cyksXG4gICAgICAgIGZvdXJ0aFF1YXJ0ZXJuaW9uQkNvbXBvbmVudCA9IGZvdXJ0aChxdWF0ZXJuaW9uQkNvbXBvbmVudHMpLFxuICAgICAgICBhMSA9IGZpcnN0UXVhcnRlcm5pb25BQ29tcG9uZW50LFxuICAgICAgICBiMSA9IHNlY29uZFF1YXJ0ZXJuaW9uQUNvbXBvbmVudCxcbiAgICAgICAgYzEgPSB0aGlyZFF1YXJ0ZXJuaW9uQUNvbXBvbmVudCxcbiAgICAgICAgZDEgPSBmb3VydGhRdWFydGVybmlvbkFDb21wb25lbnQsXG4gICAgICAgIGEyID0gZmlyc3RRdWFydGVybmlvbkJDb21wb25lbnQsXG4gICAgICAgIGIyID0gc2Vjb25kUXVhcnRlcm5pb25CQ29tcG9uZW50LFxuICAgICAgICBjMiA9IHRoaXJkUXVhcnRlcm5pb25CQ29tcG9uZW50LFxuICAgICAgICBkMiA9IGZvdXJ0aFF1YXJ0ZXJuaW9uQkNvbXBvbmVudCxcbiAgICAgICAgYSA9IGExICogYTIgLSBiMSAqIGIyIC0gYzEgKiBjMiAtIGQxICogZDIsXG4gICAgICAgIGIgPSBhMSAqIGIyICsgYjEgKiBhMiArIGMxICogZDIgLSBkMSAqIGMyLFxuICAgICAgICBjID0gYTEgKiBjMiAtIGIxICogZDIgKyBjMSAqIGEyICsgZDEgKiBiMixcbiAgICAgICAgZCA9IGExICogZDIgKyBiMSAqIGMyIC0gYzEgKiBiMiArIGQxICogYTIsXG4gICAgICAgIHF1YXRlcm5pb24gPSBbIGEsIGIsIGMsIGQgXTtcblxuICByZXR1cm4gcXVhdGVybmlvbjtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlSW1hZ2luYXJ5UXVhdGVybmlvbihwb3NpdGlvbikge1xuICBjb25zdCBwb3NpdGlvbkNvbXBvbmVudHMgPSBwb3NpdGlvbiwgIC8vL1xuICAgICAgICBmaXJzdFBvc2l0aW9uQ29tcG9uZW50ID0gZmlyc3QocG9zaXRpb25Db21wb25lbnRzKSxcbiAgICAgICAgc2Vjb25kUG9zaXRpb25Db21wb25lbnQgPSBzZWNvbmQocG9zaXRpb25Db21wb25lbnRzKSxcbiAgICAgICAgdGhpcmRQb3NpdGlvbkNvbXBvbmVudCA9IHRoaXJkKHBvc2l0aW9uQ29tcG9uZW50cyksXG4gICAgICAgIGltYWdpbmFyeVF1YXRlcm5pb24gPSBbXG4gICAgICAgICAgMCxcbiAgICAgICAgICBmaXJzdFBvc2l0aW9uQ29tcG9uZW50LFxuICAgICAgICAgIHNlY29uZFBvc2l0aW9uQ29tcG9uZW50LFxuICAgICAgICAgIHRoaXJkUG9zaXRpb25Db21wb25lbnRcbiAgICAgICAgXTtcblxuICByZXR1cm4gaW1hZ2luYXJ5UXVhdGVybmlvbjtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlUG9zaXRpb24oaW1hZ2luYXJ5UXVhdGVybmlvbikge1xuICBjb25zdCBpbWFnaW5hcnlRdWF0ZXJuaW9uQ29tcG9uZW50cyA9IGltYWdpbmFyeVF1YXRlcm5pb24sICAvLy9cbiAgICAgICAgc2Vjb25kSW1hZ2luYXJ5UXVhdGVybmlvbkNvbXBvbmVudCA9IHNlY29uZChpbWFnaW5hcnlRdWF0ZXJuaW9uQ29tcG9uZW50cyksXG4gICAgICAgIHRoaXJkSW1hZ2luYXJ5UXVhdGVybmlvbkNvbXBvbmVudCA9IHRoaXJkKGltYWdpbmFyeVF1YXRlcm5pb25Db21wb25lbnRzKSxcbiAgICAgICAgZm91cnRoSW1hZ2luYXJ5UXVhdGVybmlvbkNvbXBvbmVudCA9IGZvdXJ0aChpbWFnaW5hcnlRdWF0ZXJuaW9uQ29tcG9uZW50cyksXG4gICAgICAgIHBvc2l0aW9uID0gW1xuICAgICAgICAgIHNlY29uZEltYWdpbmFyeVF1YXRlcm5pb25Db21wb25lbnQsXG4gICAgICAgICAgdGhpcmRJbWFnaW5hcnlRdWF0ZXJuaW9uQ29tcG9uZW50LFxuICAgICAgICAgIGZvdXJ0aEltYWdpbmFyeVF1YXRlcm5pb25Db21wb25lbnRcbiAgICAgICAgXTtcblxuICByZXR1cm4gcG9zaXRpb247XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVJvdGF0aW9uUXVhcnRlcm5pb24oYW5nbGVPZlJvdGF0aW9uQ29zaW5lLCB1bml0QXhpc09mUm90YXRpb24pIHtcbiAgY29uc3QgaGFsZkFuZ2xlT2ZSb3RhdGlvbkNvc2luZSA9IGNhbGN1bGF0ZUhhbGZBbmdsZUNvc2luZShhbmdsZU9mUm90YXRpb25Db3NpbmUpLFxuICAgICAgICBoYWxmQW5nbGVPZlJvdGF0aW9uU2luZSA9IGNhbGN1bGF0ZUhhbGZBbmdsZVNpbmUoYW5nbGVPZlJvdGF0aW9uQ29zaW5lKSxcbiAgICAgICAgdW5pdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50cyA9IHVuaXRBeGlzT2ZSb3RhdGlvbiwgIC8vL1xuICAgICAgICBmaXJzdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50ID0gZmlyc3QodW5pdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50cyksXG4gICAgICAgIHNlY29uZEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50ID0gc2Vjb25kKHVuaXRBeGlzT2ZSb3RhdGlvbkNvbXBvbmVudHMpLFxuICAgICAgICB0aGlyZEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50ID0gdGhpcmQodW5pdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50cyksXG4gICAgICAgIHJvdGF0aW9uUXVhcnRlcm5pb24gPSBbXG4gICAgICAgICAgaGFsZkFuZ2xlT2ZSb3RhdGlvbkNvc2luZSxcbiAgICAgICAgICBmaXJzdEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50ICogaGFsZkFuZ2xlT2ZSb3RhdGlvblNpbmUsXG4gICAgICAgICAgc2Vjb25kQXhpc09mUm90YXRpb25Db21wb25lbnQgKiBoYWxmQW5nbGVPZlJvdGF0aW9uU2luZSxcbiAgICAgICAgICB0aGlyZEF4aXNPZlJvdGF0aW9uQ29tcG9uZW50ICogaGFsZkFuZ2xlT2ZSb3RhdGlvblNpbmVcbiAgICAgICAgXTtcblxuICByZXR1cm4gcm90YXRpb25RdWFydGVybmlvbjtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlSW52ZXJzZVJvdGF0aW9uUXVhcnRlcm5pb24ocm90YXRpb25RdWF0ZXJuaW9uKSB7XG4gIGNvbnN0IHJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudHMgPSByb3RhdGlvblF1YXRlcm5pb24sICAvLy9cbiAgICAgICAgZmlyc3RSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQgPSBmaXJzdChyb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnRzKSxcbiAgICAgICAgc2Vjb25kUm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50ID0gc2Vjb25kKHJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudHMpLFxuICAgICAgICB0aGlyZFJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCA9IHRoaXJkKHJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudHMpLFxuICAgICAgICBmb3VydGhSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQgPSBmb3VydGgocm90YXRpb25RdWF0ZXJuaW9uQ29tcG9uZW50cyksXG4gICAgICAgIGludmVyc2VSb3RhdGlvblF1YXRlcm5pb24gPSBbXG4gICAgICAgICAgZmlyc3RSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQsXG4gICAgICAgICAgLXNlY29uZFJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudCxcbiAgICAgICAgICAtdGhpcmRSb3RhdGlvblF1YXRlcm5pb25Db21wb25lbnQsXG4gICAgICAgICAgLWZvdXJ0aFJvdGF0aW9uUXVhdGVybmlvbkNvbXBvbmVudFxuICAgICAgICBdO1xuXG4gIHJldHVybiBpbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVIYWxmQW5nbGVDb3NpbmUoYW5nbGVDb3NpbmUpIHtcbiAgY29uc3QgaGFsZkFuZ2xlQ29zaW5lID0gTWF0aC5zcXJ0KCgxICsgYW5nbGVDb3NpbmUpIC8gMik7XG5cbiAgcmV0dXJuIGhhbGZBbmdsZUNvc2luZTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlSGFsZkFuZ2xlU2luZShhbmdsZUNvc2luZSkge1xuICBjb25zdCBoYWxmQW5nbGVTaW5lID0gTWF0aC5zcXJ0KCgxIC0gYW5nbGVDb3NpbmUpIC8gMik7XG5cbiAgcmV0dXJuIGhhbGZBbmdsZVNpbmU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjYWxjdWxhdGVJbnRlcnNlY3Rpb25PZlBsYW5lczogY2FsY3VsYXRlSW50ZXJzZWN0aW9uT2ZQbGFuZXNcbn07XG4iXX0=