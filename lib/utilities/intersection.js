'use strict';

var vectorMaths = require('../maths/vector');

var add3 = vectorMaths.add3,
    subtract3 = vectorMaths.subtract3,
    scale3 = vectorMaths.scale3;


function calculateIntermediateVertex(startVertex, endVertex, intersection, Vertex) {
  var startPosition = startVertex.getPosition(),
      endPosition = endVertex.getPosition(),
      extent = subtract3(endPosition, startPosition),
      offset = scale3(extent, intersection),
      position = add3(startPosition, offset),
      vertex = new Vertex(position),
      intermediateVertex = vertex; ///

  return intermediateVertex;
}

function calculateNonNullIntersections(intersections) {
  var nonNullIntersections = intersections.reduce(function (nonNullIntersections, intersection) {
    if (intersection !== null) {
      var nonNullIntersection = intersection; ///

      nonNullIntersections.push(nonNullIntersection);
    }

    return nonNullIntersections;
  }, []);

  return nonNullIntersections;
}

function calculateNullIntersectionIndex(intersections) {
  var nullIntersectionIndex = intersections.reduce(function (nullIntersectionIndex, intersection, index) {
    if (nullIntersectionIndex === null) {
      if (intersection === null) {
        nullIntersectionIndex = index;
      }
    }

    return nullIntersectionIndex;
  }, null);

  return nullIntersectionIndex;
}

function calculateNonNullIntersectionIndex(intersections) {
  var nullIntersectionIndex = intersections.reduce(function (nullIntersectionIndex, intersection, index) {
    if (nullIntersectionIndex === null) {
      if (intersection !== null) {
        nullIntersectionIndex = index;
      }
    }

    return nullIntersectionIndex;
  }, null);

  return nullIntersectionIndex;
}

module.exports = module.exports = {
  calculateIntermediateVertex: calculateIntermediateVertex,
  calculateNonNullIntersections: calculateNonNullIntersections,
  calculateNullIntersectionIndex: calculateNullIntersectionIndex,
  calculateNonNullIntersectionIndex: calculateNonNullIntersectionIndex
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvaW50ZXJzZWN0aW9uLmpzIl0sIm5hbWVzIjpbInZlY3Rvck1hdGhzIiwicmVxdWlyZSIsImFkZDMiLCJzdWJ0cmFjdDMiLCJzY2FsZTMiLCJjYWxjdWxhdGVJbnRlcm1lZGlhdGVWZXJ0ZXgiLCJzdGFydFZlcnRleCIsImVuZFZlcnRleCIsImludGVyc2VjdGlvbiIsIlZlcnRleCIsInN0YXJ0UG9zaXRpb24iLCJnZXRQb3NpdGlvbiIsImVuZFBvc2l0aW9uIiwiZXh0ZW50Iiwib2Zmc2V0IiwicG9zaXRpb24iLCJ2ZXJ0ZXgiLCJpbnRlcm1lZGlhdGVWZXJ0ZXgiLCJjYWxjdWxhdGVOb25OdWxsSW50ZXJzZWN0aW9ucyIsImludGVyc2VjdGlvbnMiLCJub25OdWxsSW50ZXJzZWN0aW9ucyIsInJlZHVjZSIsIm5vbk51bGxJbnRlcnNlY3Rpb24iLCJwdXNoIiwiY2FsY3VsYXRlTnVsbEludGVyc2VjdGlvbkluZGV4IiwibnVsbEludGVyc2VjdGlvbkluZGV4IiwiaW5kZXgiLCJjYWxjdWxhdGVOb25OdWxsSW50ZXJzZWN0aW9uSW5kZXgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxjQUFjQyxRQUFRLGlCQUFSLENBQXBCOztJQUVRQyxJLEdBQTRCRixXLENBQTVCRSxJO0lBQU1DLFMsR0FBc0JILFcsQ0FBdEJHLFM7SUFBV0MsTSxHQUFXSixXLENBQVhJLE07OztBQUV6QixTQUFTQywyQkFBVCxDQUFxQ0MsV0FBckMsRUFBa0RDLFNBQWxELEVBQTZEQyxZQUE3RCxFQUEyRUMsTUFBM0UsRUFBbUY7QUFDakYsTUFBTUMsZ0JBQWdCSixZQUFZSyxXQUFaLEVBQXRCO0FBQUEsTUFDTUMsY0FBY0wsVUFBVUksV0FBVixFQURwQjtBQUFBLE1BRU1FLFNBQVNWLFVBQVVTLFdBQVYsRUFBdUJGLGFBQXZCLENBRmY7QUFBQSxNQUdNSSxTQUFTVixPQUFPUyxNQUFQLEVBQWVMLFlBQWYsQ0FIZjtBQUFBLE1BSU1PLFdBQVdiLEtBQUtRLGFBQUwsRUFBb0JJLE1BQXBCLENBSmpCO0FBQUEsTUFLTUUsU0FBUyxJQUFJUCxNQUFKLENBQVdNLFFBQVgsQ0FMZjtBQUFBLE1BTU1FLHFCQUFxQkQsTUFOM0IsQ0FEaUYsQ0FPN0M7O0FBRXBDLFNBQU9DLGtCQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsNkJBQVQsQ0FBdUNDLGFBQXZDLEVBQXNEO0FBQ3BELE1BQU1DLHVCQUF1QkQsY0FBY0UsTUFBZCxDQUFxQixVQUFTRCxvQkFBVCxFQUErQlosWUFBL0IsRUFBNkM7QUFDN0YsUUFBSUEsaUJBQWlCLElBQXJCLEVBQTJCO0FBQ3pCLFVBQU1jLHNCQUFzQmQsWUFBNUIsQ0FEeUIsQ0FDaUI7O0FBRTFDWSwyQkFBcUJHLElBQXJCLENBQTBCRCxtQkFBMUI7QUFDRDs7QUFFRCxXQUFPRixvQkFBUDtBQUNELEdBUjRCLEVBUTFCLEVBUjBCLENBQTdCOztBQVVBLFNBQU9BLG9CQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksOEJBQVQsQ0FBd0NMLGFBQXhDLEVBQXVEO0FBQ3JELE1BQU1NLHdCQUF3Qk4sY0FBY0UsTUFBZCxDQUFxQixVQUFTSSxxQkFBVCxFQUFnQ2pCLFlBQWhDLEVBQThDa0IsS0FBOUMsRUFBcUQ7QUFDdEcsUUFBSUQsMEJBQTBCLElBQTlCLEVBQW9DO0FBQ2xDLFVBQUlqQixpQkFBaUIsSUFBckIsRUFBMkI7QUFDekJpQixnQ0FBd0JDLEtBQXhCO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPRCxxQkFBUDtBQUNELEdBUjZCLEVBUTNCLElBUjJCLENBQTlCOztBQVVBLFNBQU9BLHFCQUFQO0FBQ0Q7O0FBRUQsU0FBU0UsaUNBQVQsQ0FBMkNSLGFBQTNDLEVBQTBEO0FBQ3hELE1BQU1NLHdCQUF3Qk4sY0FBY0UsTUFBZCxDQUFxQixVQUFTSSxxQkFBVCxFQUFnQ2pCLFlBQWhDLEVBQThDa0IsS0FBOUMsRUFBcUQ7QUFDdEcsUUFBSUQsMEJBQTBCLElBQTlCLEVBQW9DO0FBQ2xDLFVBQUlqQixpQkFBaUIsSUFBckIsRUFBMkI7QUFDekJpQixnQ0FBd0JDLEtBQXhCO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPRCxxQkFBUDtBQUNELEdBUjZCLEVBUTNCLElBUjJCLENBQTlCOztBQVVBLFNBQU9BLHFCQUFQO0FBQ0Q7O0FBRURHLE9BQU9DLE9BQVAsR0FBaUJELE9BQU9DLE9BQVAsR0FBaUI7QUFDaEN4QiwrQkFBNkJBLDJCQURHO0FBRWhDYSxpQ0FBK0JBLDZCQUZDO0FBR2hDTSxrQ0FBZ0NBLDhCQUhBO0FBSWhDRyxxQ0FBbUNBO0FBSkgsQ0FBbEMiLCJmaWxlIjoiaW50ZXJzZWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB2ZWN0b3JNYXRocyA9IHJlcXVpcmUoJy4uL21hdGhzL3ZlY3RvcicpO1xuXG5jb25zdCB7IGFkZDMsIHN1YnRyYWN0Mywgc2NhbGUzIH0gPSB2ZWN0b3JNYXRocztcblxuZnVuY3Rpb24gY2FsY3VsYXRlSW50ZXJtZWRpYXRlVmVydGV4KHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgsIGludGVyc2VjdGlvbiwgVmVydGV4KSB7XG4gIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSBzdGFydFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICBlbmRQb3NpdGlvbiA9IGVuZFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICBleHRlbnQgPSBzdWJ0cmFjdDMoZW5kUG9zaXRpb24sIHN0YXJ0UG9zaXRpb24pLFxuICAgICAgICBvZmZzZXQgPSBzY2FsZTMoZXh0ZW50LCBpbnRlcnNlY3Rpb24pLFxuICAgICAgICBwb3NpdGlvbiA9IGFkZDMoc3RhcnRQb3NpdGlvbiwgb2Zmc2V0KSxcbiAgICAgICAgdmVydGV4ID0gbmV3IFZlcnRleChwb3NpdGlvbiksXG4gICAgICAgIGludGVybWVkaWF0ZVZlcnRleCA9IHZlcnRleDsgIC8vL1xuXG4gIHJldHVybiBpbnRlcm1lZGlhdGVWZXJ0ZXg7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMpIHtcbiAgY29uc3Qgbm9uTnVsbEludGVyc2VjdGlvbnMgPSBpbnRlcnNlY3Rpb25zLnJlZHVjZShmdW5jdGlvbihub25OdWxsSW50ZXJzZWN0aW9ucywgaW50ZXJzZWN0aW9uKSB7XG4gICAgaWYgKGludGVyc2VjdGlvbiAhPT0gbnVsbCkge1xuICAgICAgY29uc3Qgbm9uTnVsbEludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjsgLy8vXG5cbiAgICAgIG5vbk51bGxJbnRlcnNlY3Rpb25zLnB1c2gobm9uTnVsbEludGVyc2VjdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vbk51bGxJbnRlcnNlY3Rpb25zO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIG5vbk51bGxJbnRlcnNlY3Rpb25zO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVOdWxsSW50ZXJzZWN0aW9uSW5kZXgoaW50ZXJzZWN0aW9ucykge1xuICBjb25zdCBudWxsSW50ZXJzZWN0aW9uSW5kZXggPSBpbnRlcnNlY3Rpb25zLnJlZHVjZShmdW5jdGlvbihudWxsSW50ZXJzZWN0aW9uSW5kZXgsIGludGVyc2VjdGlvbiwgaW5kZXgpIHtcbiAgICBpZiAobnVsbEludGVyc2VjdGlvbkluZGV4ID09PSBudWxsKSB7XG4gICAgICBpZiAoaW50ZXJzZWN0aW9uID09PSBudWxsKSB7XG4gICAgICAgIG51bGxJbnRlcnNlY3Rpb25JbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsSW50ZXJzZWN0aW9uSW5kZXg7XG4gIH0sIG51bGwpO1xuXG4gIHJldHVybiBudWxsSW50ZXJzZWN0aW9uSW5kZXg7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25JbmRleChpbnRlcnNlY3Rpb25zKSB7XG4gIGNvbnN0IG51bGxJbnRlcnNlY3Rpb25JbmRleCA9IGludGVyc2VjdGlvbnMucmVkdWNlKGZ1bmN0aW9uKG51bGxJbnRlcnNlY3Rpb25JbmRleCwgaW50ZXJzZWN0aW9uLCBpbmRleCkge1xuICAgIGlmIChudWxsSW50ZXJzZWN0aW9uSW5kZXggPT09IG51bGwpIHtcbiAgICAgIGlmIChpbnRlcnNlY3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgbnVsbEludGVyc2VjdGlvbkluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxJbnRlcnNlY3Rpb25JbmRleDtcbiAgfSwgbnVsbCk7XG5cbiAgcmV0dXJuIG51bGxJbnRlcnNlY3Rpb25JbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2FsY3VsYXRlSW50ZXJtZWRpYXRlVmVydGV4OiBjYWxjdWxhdGVJbnRlcm1lZGlhdGVWZXJ0ZXgsXG4gIGNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25zOiBjYWxjdWxhdGVOb25OdWxsSW50ZXJzZWN0aW9ucyxcbiAgY2FsY3VsYXRlTnVsbEludGVyc2VjdGlvbkluZGV4OiBjYWxjdWxhdGVOdWxsSW50ZXJzZWN0aW9uSW5kZXgsXG4gIGNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25JbmRleDogY2FsY3VsYXRlTm9uTnVsbEludGVyc2VjdGlvbkluZGV4XG59O1xuIl19