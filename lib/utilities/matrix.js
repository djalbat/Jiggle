'use strict';

var mat2 = require('gl-mat2');
var mat3 = require('gl-mat3');
var mat4 = require('gl-mat4');

function identity2() {
  return mat2.create();
}

function identity3() {
  return mat3.create();
}

function identity4() {
  return mat4.create();
}

function invert2(matrix) {
  return mat2.invert([], matrix);
}

function invert3(matrix) {
  return mat3.invert([], matrix);
}

function invert4(matrix) {
  return mat4.invert([], matrix);
}

function transpose2(matrix) {
  return mat2.transpose([], matrix);
}

function transpose3(matrix) {
  return mat3.transpose([], matrix);
}

function transpose4(matrix) {
  return mat4.transpose([], matrix);
}

function scale2(matrix, vector) {
  return mat2.scale([], matrix, vector);
}

function scale3(matrix, vector) {
  return mat3.scale([], matrix, vector);
}

function scale4(matrix, vector) {
  return mat4.scale([], matrix, vector);
}

function translate2(matrix, vector) {
  return mat2.translate([], matrix, vector);
}

function translate3(matrix, vector) {
  return mat3.translate([], matrix, vector);
}

function translate4(matrix, vector) {
  return mat4.translate([], matrix, vector);
}

function perspective4(fieldOfView, aspectRatio, zNear, zFar) {
  return mat4.perspective([], fieldOfView, aspectRatio, zNear, zFar);
}

function rotate4(matrix, angle, vector) {
  return mat4.rotate([], matrix, angle, vector);
}

module.exports = {
  identity2: identity2,
  identity3: identity3,
  identity4: identity4,
  invert2: invert2,
  invert3: invert3,
  invert4: invert4,
  scale2: scale2,
  scale3: scale3,
  scale4: scale4,
  transpose2: transpose2,
  transpose3: transpose3,
  transpose4: transpose4,
  translate2: translate2,
  translate3: translate3,
  translate4: translate4,
  perspective4: perspective4,
  rotate4: rotate4
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvbWF0cml4LmpzIl0sIm5hbWVzIjpbIm1hdDIiLCJyZXF1aXJlIiwibWF0MyIsIm1hdDQiLCJpZGVudGl0eTIiLCJjcmVhdGUiLCJpZGVudGl0eTMiLCJpZGVudGl0eTQiLCJpbnZlcnQyIiwibWF0cml4IiwiaW52ZXJ0IiwiaW52ZXJ0MyIsImludmVydDQiLCJ0cmFuc3Bvc2UyIiwidHJhbnNwb3NlIiwidHJhbnNwb3NlMyIsInRyYW5zcG9zZTQiLCJzY2FsZTIiLCJ2ZWN0b3IiLCJzY2FsZSIsInNjYWxlMyIsInNjYWxlNCIsInRyYW5zbGF0ZTIiLCJ0cmFuc2xhdGUiLCJ0cmFuc2xhdGUzIiwidHJhbnNsYXRlNCIsInBlcnNwZWN0aXZlNCIsImZpZWxkT2ZWaWV3IiwiYXNwZWN0UmF0aW8iLCJ6TmVhciIsInpGYXIiLCJwZXJzcGVjdGl2ZSIsInJvdGF0ZTQiLCJhbmdsZSIsInJvdGF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLE9BQU9DLFFBQVEsU0FBUixDQUFiO0FBQ0EsSUFBTUMsT0FBT0QsUUFBUSxTQUFSLENBQWI7QUFDQSxJQUFNRSxPQUFPRixRQUFRLFNBQVIsQ0FBYjs7QUFFQSxTQUFTRyxTQUFULEdBQXFCO0FBQUUsU0FBT0osS0FBS0ssTUFBTCxFQUFQO0FBQXVCOztBQUU5QyxTQUFTQyxTQUFULEdBQXFCO0FBQUUsU0FBT0osS0FBS0csTUFBTCxFQUFQO0FBQXVCOztBQUU5QyxTQUFTRSxTQUFULEdBQXFCO0FBQUUsU0FBT0osS0FBS0UsTUFBTCxFQUFQO0FBQXVCOztBQUU5QyxTQUFTRyxPQUFULENBQWlCQyxNQUFqQixFQUF5QjtBQUFFLFNBQU9ULEtBQUtVLE1BQUwsQ0FBWSxFQUFaLEVBQWdCRCxNQUFoQixDQUFQO0FBQWlDOztBQUU1RCxTQUFTRSxPQUFULENBQWlCRixNQUFqQixFQUF5QjtBQUFFLFNBQU9QLEtBQUtRLE1BQUwsQ0FBWSxFQUFa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ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbWF0MiA9IHJlcXVpcmUoJ2dsLW1hdDInKTtcbmNvbnN0IG1hdDMgPSByZXF1aXJlKCdnbC1tYXQzJyk7XG5jb25zdCBtYXQ0ID0gcmVxdWlyZSgnZ2wtbWF0NCcpO1xuXG5mdW5jdGlvbiBpZGVudGl0eTIoKSB7IHJldHVybiBtYXQyLmNyZWF0ZSgpOyB9XG5cbmZ1bmN0aW9uIGlkZW50aXR5MygpIHsgcmV0dXJuIG1hdDMuY3JlYXRlKCk7IH1cblxuZnVuY3Rpb24gaWRlbnRpdHk0KCkgeyByZXR1cm4gbWF0NC5jcmVhdGUoKTsgfVxuXG5mdW5jdGlvbiBpbnZlcnQyKG1hdHJpeCkgeyByZXR1cm4gbWF0Mi5pbnZlcnQoW10sIG1hdHJpeCk7IH1cblxuZnVuY3Rpb24gaW52ZXJ0MyhtYXRyaXgpIHsgcmV0dXJuIG1hdDMuaW52ZXJ0KFtdLCBtYXRyaXgpOyB9XG5cbmZ1bmN0aW9uIGludmVydDQobWF0cml4KSB7IHJldHVybiBtYXQ0LmludmVydChbXSwgbWF0cml4KTsgfVxuXG5mdW5jdGlvbiB0cmFuc3Bvc2UyKG1hdHJpeCkgeyByZXR1cm4gbWF0Mi50cmFuc3Bvc2UoW10sIG1hdHJpeCk7IH1cblxuZnVuY3Rpb24gdHJhbnNwb3NlMyhtYXRyaXgpIHsgcmV0dXJuIG1hdDMudHJhbnNwb3NlKFtdLCBtYXRyaXgpOyB9XG5cbmZ1bmN0aW9uIHRyYW5zcG9zZTQobWF0cml4KSB7IHJldHVybiBtYXQ0LnRyYW5zcG9zZShbXSwgbWF0cml4KTsgfVxuXG5mdW5jdGlvbiBzY2FsZTIobWF0cml4LCB2ZWN0b3IpIHsgcmV0dXJuIG1hdDIuc2NhbGUoW10sIG1hdHJpeCwgdmVjdG9yKTsgfVxuXG5mdW5jdGlvbiBzY2FsZTMobWF0cml4LCB2ZWN0b3IpIHsgcmV0dXJuIG1hdDMuc2NhbGUoW10sIG1hdHJpeCwgdmVjdG9yKTsgfVxuXG5mdW5jdGlvbiBzY2FsZTQobWF0cml4LCB2ZWN0b3IpIHsgcmV0dXJuIG1hdDQuc2NhbGUoW10sIG1hdHJpeCwgdmVjdG9yKTsgfVxuXG5mdW5jdGlvbiB0cmFuc2xhdGUyKG1hdHJpeCwgdmVjdG9yKSB7IHJldHVybiBtYXQyLnRyYW5zbGF0ZShbXSwgbWF0cml4LCB2ZWN0b3IpOyB9XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZTMobWF0cml4LCB2ZWN0b3IpIHsgcmV0dXJuIG1hdDMudHJhbnNsYXRlKFtdLCBtYXRyaXgsIHZlY3Rvcik7IH1cblxuZnVuY3Rpb24gdHJhbnNsYXRlNChtYXRyaXgsIHZlY3RvcikgeyByZXR1cm4gbWF0NC50cmFuc2xhdGUoW10sIG1hdHJpeCwgdmVjdG9yKTsgfVxuXG5mdW5jdGlvbiBwZXJzcGVjdGl2ZTQoZmllbGRPZlZpZXcsIGFzcGVjdFJhdGlvLCB6TmVhciwgekZhcikgeyByZXR1cm4gbWF0NC5wZXJzcGVjdGl2ZShbXSwgZmllbGRPZlZpZXcsIGFzcGVjdFJhdGlvLCB6TmVhciwgekZhcik7IH1cblxuZnVuY3Rpb24gcm90YXRlNChtYXRyaXgsIGFuZ2xlLCB2ZWN0b3IpIHsgcmV0dXJuIG1hdDQucm90YXRlKFtdLCBtYXRyaXgsIGFuZ2xlLCB2ZWN0b3IpOyB9XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpZGVudGl0eTI6IGlkZW50aXR5MixcbiAgaWRlbnRpdHkzOiBpZGVudGl0eTMsXG4gIGlkZW50aXR5NDogaWRlbnRpdHk0LFxuICBpbnZlcnQyOiBpbnZlcnQyLFxuICBpbnZlcnQzOiBpbnZlcnQzLFxuICBpbnZlcnQ0OiBpbnZlcnQ0LFxuICBzY2FsZTI6IHNjYWxlMixcbiAgc2NhbGUzOiBzY2FsZTMsXG4gIHNjYWxlNDogc2NhbGU0LFxuICB0cmFuc3Bvc2UyOiB0cmFuc3Bvc2UyLFxuICB0cmFuc3Bvc2UzOiB0cmFuc3Bvc2UzLFxuICB0cmFuc3Bvc2U0OiB0cmFuc3Bvc2U0LFxuICB0cmFuc2xhdGUyOiB0cmFuc2xhdGUyLFxuICB0cmFuc2xhdGUzOiB0cmFuc2xhdGUzLFxuICB0cmFuc2xhdGU0OiB0cmFuc2xhdGU0LFxuICBwZXJzcGVjdGl2ZTQ6IHBlcnNwZWN0aXZlNCxcbiAgcm90YXRlNDogcm90YXRlNFxufTtcbiJdfQ==