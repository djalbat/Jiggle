'use strict';

var constants = require('../constants'),
    matrixMaths = require('../maths/matrix'),
    arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    DEGREES_TO_RADIANS = constants.DEGREES_TO_RADIANS,
    FIELD_OF_VIEW = constants.FIELD_OF_VIEW,
    Z_NEAR = constants.Z_NEAR,
    Z_FAR = constants.Z_FAR,
    identity4 = matrixMaths.identity4,
    scale4 = matrixMaths.scale4,
    invert4 = matrixMaths.invert4,
    rotate4 = matrixMaths.rotate4,
    translate4 = matrixMaths.translate4,
    transpose4 = matrixMaths.transpose4,
    perspective4 = matrixMaths.perspective4;


function scaleMatrixFromScale(scale) {
  var scaleMatrix = identity4();

  scaleMatrix = scale4(scaleMatrix, scale);

  return scaleMatrix;
}

function offsetMatrixFromOffsets(offsets) {
  var offsetMatrix = identity4(); ///

  offsetMatrix = translate4(offsetMatrix, offsets);

  return offsetMatrix;
}

function positionMatrixFromNothing() {
  var positionMatrix = identity4(); ///

  return positionMatrix;
}

function positionMatrixFromDistance(distance) {
  var positionMatrix = identity4(); ///

  var x = 0,
      y = 0,
      z = -distance;

  positionMatrix = translate4(positionMatrix, [x, y, z]);

  return positionMatrix;
}

function positionMatrixFromPosition(position) {
  var positionMatrix = identity4(); ///

  positionMatrix = translate4(positionMatrix, position);

  return positionMatrix;
}

function rotationsMatrixFromAngles(angles) {
  var rotationsMatrix = identity4(); ///

  var firstAngle = first(angles),
      secondAngle = second(angles),
      thirdAngle = third(angles),
      xAngle = firstAngle,
      yAngle = secondAngle,
      zAngle = thirdAngle,
      xAxis = [1, 0, 0],
      yAxis = [0, 1, 0],
      zAxis = [0, 0, 1];

  rotationsMatrix = rotate4(rotationsMatrix, xAngle, xAxis);
  rotationsMatrix = rotate4(rotationsMatrix, yAngle, yAxis);
  rotationsMatrix = rotate4(rotationsMatrix, zAngle, zAxis);

  return rotationsMatrix;
}

function rotationsMatrixFromRotations(rotations) {
  var angles = [rotations[0] * DEGREES_TO_RADIANS, rotations[1] * DEGREES_TO_RADIANS, rotations[2] * DEGREES_TO_RADIANS],
      rotationsMatrix = rotationsMatrixFromAngles(angles);

  return rotationsMatrix;
}

function normalsMatrixFromRotationsMatrix(rotationsMatrix) {
  var normalsMatrix = invert4(rotationsMatrix);

  normalsMatrix = transpose4(normalsMatrix);

  return normalsMatrix;
}

function projectionMatrixFromWidthAndHeight(width, height) {
  var fieldOfView = FIELD_OF_VIEW,
      ///
  aspectRatio = width / height,
      zNear = Z_NEAR,
      ///
  zFar = Z_FAR,
      ///
  projectionMatrix = perspective4(fieldOfView, aspectRatio, zNear, zFar);

  return projectionMatrix;
}

module.exports = {
  scaleMatrixFromScale: scaleMatrixFromScale,
  offsetMatrixFromOffsets: offsetMatrixFromOffsets,
  positionMatrixFromNothing: positionMatrixFromNothing,
  positionMatrixFromDistance: positionMatrixFromDistance,
  positionMatrixFromPosition: positionMatrixFromPosition,
  rotationsMatrixFromAngles: rotationsMatrixFromAngles,
  rotationsMatrixFromRotations: rotationsMatrixFromRotations,
  normalsMatrixFromRotationsMatrix: normalsMatrixFromRotationsMatrix,
  projectionMatrixFromWidthAndHeight: projectionMatrixFromWidthAndHeight
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvbWF0cml4LmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJtYXRyaXhNYXRocyIsImFycmF5VXRpbGl0aWVzIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsIkRFR1JFRVNfVE9fUkFESUFOUyIsIkZJRUxEX09GX1ZJRVciLCJaX05FQVIiLCJaX0ZBUiIsImlkZW50aXR5NCIsInNjYWxlNCIsImludmVydDQiLCJyb3RhdGU0IiwidHJhbnNsYXRlNCIsInRyYW5zcG9zZTQiLCJwZXJzcGVjdGl2ZTQiLCJzY2FsZU1hdHJpeEZyb21TY2FsZSIsInNjYWxlIiwic2NhbGVNYXRyaXgiLCJvZmZzZXRNYXRyaXhGcm9tT2Zmc2V0cyIsIm9mZnNldHMiLCJvZmZzZXRNYXRyaXgiLCJwb3NpdGlvbk1hdHJpeEZyb21Ob3RoaW5nIiwicG9zaXRpb25NYXRyaXgiLCJwb3NpdGlvbk1hdHJpeEZyb21EaXN0YW5jZSIsImRpc3RhbmNlIiwieCIsInkiLCJ6IiwicG9zaXRpb25NYXRyaXhGcm9tUG9zaXRpb24iLCJwb3NpdGlvbiIsInJvdGF0aW9uc01hdHJpeEZyb21BbmdsZXMiLCJhbmdsZXMiLCJyb3RhdGlvbnNNYXRyaXgiLCJmaXJzdEFuZ2xlIiwic2Vjb25kQW5nbGUiLCJ0aGlyZEFuZ2xlIiwieEFuZ2xlIiwieUFuZ2xlIiwiekFuZ2xlIiwieEF4aXMiLCJ5QXhpcyIsInpBeGlzIiwicm90YXRpb25zTWF0cml4RnJvbVJvdGF0aW9ucyIsInJvdGF0aW9ucyIsIm5vcm1hbHNNYXRyaXhGcm9tUm90YXRpb25zTWF0cml4Iiwibm9ybWFsc01hdHJpeCIsInByb2plY3Rpb25NYXRyaXhGcm9tV2lkdGhBbmRIZWlnaHQiLCJ3aWR0aCIsImhlaWdodCIsImZpZWxkT2ZWaWV3IiwiYXNwZWN0UmF0aW8iLCJ6TmVhciIsInpGYXIiLCJwcm9qZWN0aW9uTWF0cml4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6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LFNBQU9ULGVBQVA7QUFDRDs7QUFFRCxTQUFTVSw0QkFBVCxDQUFzQ0MsU0FBdEMsRUFBaUQ7QUFDL0MsTUFBTVosU0FBUyxDQUVQWSxVQUFXLENBQVgsSUFBaUJ2QyxrQkFGVixFQUdQdUMsVUFBVyxDQUFYLElBQWlCdkMsa0JBSFYsRUFJUHVDLFVBQVcsQ0FBWCxJQUFpQnZDLGtCQUpWLENBQWY7QUFBQSxNQU9NNEIsa0JBQWtCRiwwQkFBMEJDLE1BQTFCLENBUHhCOztBQVNBLFNBQU9DLGVBQVA7QUFDRDs7QUFFRCxTQUFTWSxnQ0FBVCxDQUEwQ1osZUFBMUMsRUFBMkQ7QUFDekQsTUFBSWEsZ0JBQWdCbkMsUUFBUXNCLGVBQVIsQ0FBcEI7O0FBRUFhLGtCQUFnQmhDLFdBQVdnQyxhQUFYLENBQWhCOztBQUVBLFNBQU9BLGFBQVA7QUFDRDs7QUFFRCxTQUFTQyxrQ0FBVCxDQUE0Q0MsS0FBNUMsRUFBbURDLE1BQW5ELEVBQTJEO0FBQ3pELE1BQU1DLGNBQWM1QyxhQUFwQjtBQUFBLE1BQW9DO0FBQzlCNkMsZ0JBQWNILFFBQVFDLE1BRDVCO0FBQUEsTUFFTUcsUUFBUTdDLE1BRmQ7QUFBQSxNQUVzQjtBQUNoQjhDLFNBQU83QyxLQUhiO0FBQUEsTUFHb0I7QUFDZDhDLHFCQUFtQnZDLGFBQWFtQyxXQUFiLEVBQTBCQyxXQUExQixFQUF1Q0MsS0FBdkMsRUFBOENDLElBQTlDLENBSnpCOztBQU1BLFNBQU9DLGdCQUFQO0FBQ0Q7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZnhDLDRDQURlO0FBRWZHLGtEQUZlO0FBR2ZHLHNEQUhlO0FBSWZFLHdEQUplO0FBS2ZLLHdEQUxlO0FBTWZFLHNEQU5lO0FBT2ZZLDREQVBlO0FBUWZFLG9FQVJlO0FBU2ZFO0FBVGUsQ0FBakIiLCJmaWxlIjoibWF0cml4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIG1hdHJpeE1hdGhzID0gcmVxdWlyZSgnLi4vbWF0aHMvbWF0cml4JyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpO1xuXG5jb25zdCB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgREVHUkVFU19UT19SQURJQU5TLCBGSUVMRF9PRl9WSUVXLCBaX05FQVIsIFpfRkFSIH0gPSBjb25zdGFudHMsXG4gICAgICB7IGlkZW50aXR5NCwgc2NhbGU0LCBpbnZlcnQ0LCByb3RhdGU0LCB0cmFuc2xhdGU0LCB0cmFuc3Bvc2U0LCBwZXJzcGVjdGl2ZTQgfSA9IG1hdHJpeE1hdGhzO1xuXG5mdW5jdGlvbiBzY2FsZU1hdHJpeEZyb21TY2FsZShzY2FsZSkge1xuICBsZXQgc2NhbGVNYXRyaXggPSBpZGVudGl0eTQoKTtcblxuICBzY2FsZU1hdHJpeCA9IHNjYWxlNChzY2FsZU1hdHJpeCwgc2NhbGUpO1xuXG4gIHJldHVybiBzY2FsZU1hdHJpeDtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0TWF0cml4RnJvbU9mZnNldHMob2Zmc2V0cykge1xuICBsZXQgb2Zmc2V0TWF0cml4ID0gaWRlbnRpdHk0KCk7IC8vL1xuXG4gIG9mZnNldE1hdHJpeCA9IHRyYW5zbGF0ZTQob2Zmc2V0TWF0cml4LCBvZmZzZXRzKTtcblxuICByZXR1cm4gb2Zmc2V0TWF0cml4O1xufVxuXG5mdW5jdGlvbiBwb3NpdGlvbk1hdHJpeEZyb21Ob3RoaW5nKCkge1xuICBsZXQgcG9zaXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgcmV0dXJuIHBvc2l0aW9uTWF0cml4O1xufVxuXG5mdW5jdGlvbiBwb3NpdGlvbk1hdHJpeEZyb21EaXN0YW5jZShkaXN0YW5jZSkge1xuICBsZXQgcG9zaXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgY29uc3QgeCA9IDAsXG4gICAgICAgIHkgPSAwLFxuICAgICAgICB6ID0gLWRpc3RhbmNlO1xuXG4gIHBvc2l0aW9uTWF0cml4ID0gdHJhbnNsYXRlNChwb3NpdGlvbk1hdHJpeCwgWyB4LCB5LCB6IF0pO1xuXG4gIHJldHVybiBwb3NpdGlvbk1hdHJpeDtcbn1cblxuZnVuY3Rpb24gcG9zaXRpb25NYXRyaXhGcm9tUG9zaXRpb24ocG9zaXRpb24pIHtcbiAgbGV0IHBvc2l0aW9uTWF0cml4ID0gaWRlbnRpdHk0KCk7IC8vL1xuXG4gIHBvc2l0aW9uTWF0cml4ID0gdHJhbnNsYXRlNChwb3NpdGlvbk1hdHJpeCwgcG9zaXRpb24pO1xuXG4gIHJldHVybiBwb3NpdGlvbk1hdHJpeDtcbn1cblxuZnVuY3Rpb24gcm90YXRpb25zTWF0cml4RnJvbUFuZ2xlcyhhbmdsZXMpIHtcbiAgbGV0IHJvdGF0aW9uc01hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBjb25zdCBmaXJzdEFuZ2xlID0gZmlyc3QoYW5nbGVzKSxcbiAgICAgICAgc2Vjb25kQW5nbGUgPSBzZWNvbmQoYW5nbGVzKSxcbiAgICAgICAgdGhpcmRBbmdsZSA9IHRoaXJkKGFuZ2xlcyksXG4gICAgICAgIHhBbmdsZSA9IGZpcnN0QW5nbGUsXG4gICAgICAgIHlBbmdsZSA9IHNlY29uZEFuZ2xlLFxuICAgICAgICB6QW5nbGUgPSB0aGlyZEFuZ2xlLFxuXG4gICAgICAgIHhBeGlzID0gWyAxLCAwLCAwIF0sXG4gICAgICAgIHlBeGlzID0gWyAwLCAxLCAwIF0sXG4gICAgICAgIHpBeGlzID0gWyAwLCAwLCAxIF07XG5cbiAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHhBbmdsZSwgeEF4aXMpO1xuICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgeUFuZ2xlLCB5QXhpcyk7XG4gIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB6QW5nbGUsIHpBeGlzKTtcblxuICByZXR1cm4gcm90YXRpb25zTWF0cml4O1xufVxuXG5mdW5jdGlvbiByb3RhdGlvbnNNYXRyaXhGcm9tUm90YXRpb25zKHJvdGF0aW9ucykge1xuICBjb25zdCBhbmdsZXMgPSBbXG5cbiAgICAgICAgICByb3RhdGlvbnNbIDAgXSAqIERFR1JFRVNfVE9fUkFESUFOUyxcbiAgICAgICAgICByb3RhdGlvbnNbIDEgXSAqIERFR1JFRVNfVE9fUkFESUFOUyxcbiAgICAgICAgICByb3RhdGlvbnNbIDIgXSAqIERFR1JFRVNfVE9fUkFESUFOUyxcblxuICAgICAgICBdLFxuICAgICAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGlvbnNNYXRyaXhGcm9tQW5nbGVzKGFuZ2xlcyk7XG5cbiAgcmV0dXJuIHJvdGF0aW9uc01hdHJpeDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsc01hdHJpeEZyb21Sb3RhdGlvbnNNYXRyaXgocm90YXRpb25zTWF0cml4KSB7XG4gIGxldCBub3JtYWxzTWF0cml4ID0gaW52ZXJ0NChyb3RhdGlvbnNNYXRyaXgpO1xuXG4gIG5vcm1hbHNNYXRyaXggPSB0cmFuc3Bvc2U0KG5vcm1hbHNNYXRyaXgpO1xuXG4gIHJldHVybiBub3JtYWxzTWF0cml4O1xufVxuXG5mdW5jdGlvbiBwcm9qZWN0aW9uTWF0cml4RnJvbVdpZHRoQW5kSGVpZ2h0KHdpZHRoLCBoZWlnaHQpIHtcbiAgY29uc3QgZmllbGRPZlZpZXcgPSBGSUVMRF9PRl9WSUVXLCAgLy8vXG4gICAgICAgIGFzcGVjdFJhdGlvID0gd2lkdGggLyBoZWlnaHQsXG4gICAgICAgIHpOZWFyID0gWl9ORUFSLCAvLy9cbiAgICAgICAgekZhciA9IFpfRkFSLCAvLy9cbiAgICAgICAgcHJvamVjdGlvbk1hdHJpeCA9IHBlcnNwZWN0aXZlNChmaWVsZE9mVmlldywgYXNwZWN0UmF0aW8sIHpOZWFyLCB6RmFyKTtcblxuICByZXR1cm4gcHJvamVjdGlvbk1hdHJpeDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNjYWxlTWF0cml4RnJvbVNjYWxlLFxuICBvZmZzZXRNYXRyaXhGcm9tT2Zmc2V0cyxcbiAgcG9zaXRpb25NYXRyaXhGcm9tTm90aGluZyxcbiAgcG9zaXRpb25NYXRyaXhGcm9tRGlzdGFuY2UsXG4gIHBvc2l0aW9uTWF0cml4RnJvbVBvc2l0aW9uLFxuICByb3RhdGlvbnNNYXRyaXhGcm9tQW5nbGVzLFxuICByb3RhdGlvbnNNYXRyaXhGcm9tUm90YXRpb25zLFxuICBub3JtYWxzTWF0cml4RnJvbVJvdGF0aW9uc01hdHJpeCxcbiAgcHJvamVjdGlvbk1hdHJpeEZyb21XaWR0aEFuZEhlaWdodFxufTtcbiJdfQ==