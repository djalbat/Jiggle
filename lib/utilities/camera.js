'use strict';

var constants = require('../constants'),
    matrixMaths = require('../maths/matrix'),
    arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    FIELD_OF_VIEW = constants.FIELD_OF_VIEW,
    Z_NEAR = constants.Z_NEAR,
    Z_FAR = constants.Z_FAR,
    identity4 = matrixMaths.identity4,
    invert4 = matrixMaths.invert4,
    rotate4 = matrixMaths.rotate4,
    translate4 = matrixMaths.translate4,
    transpose4 = matrixMaths.transpose4,
    perspective4 = matrixMaths.perspective4;


function calculateOffsetMatrix(offset) {
  var offsetMatrix = identity4();

  offsetMatrix = translate4(offsetMatrix, offset);

  return offsetMatrix;
}

function calculateRotationMatrix(angles) {
  var firstAngle = first(angles),
      secondAngle = second(angles),
      thirdAngle = third(angles),
      xAngle = firstAngle,
      yAngle = secondAngle,
      zAngle = thirdAngle;

  var rotationMatrix = identity4();

  rotationMatrix = rotate4(rotationMatrix, xAngle, [1, 0, 0]);
  rotationMatrix = rotate4(rotationMatrix, yAngle, [0, 1, 0]);
  rotationMatrix = rotate4(rotationMatrix, zAngle, [0, 0, 1]);

  return rotationMatrix;
}

function calculatePositionMatrix(distance) {
  var x = 0,
      y = 0,
      z = -distance;

  var positionMatrix = identity4();

  positionMatrix = translate4(positionMatrix, [x, y, z]);

  return positionMatrix;
}

function calculateProjectionMatrix(width, height) {
  var fieldOfView = FIELD_OF_VIEW,
      aspectRatio = width / height,
      zNear = Z_NEAR,
      zFar = Z_FAR,
      projectionMatrix = perspective4(fieldOfView, aspectRatio, zNear, zFar);

  return projectionMatrix;
}

function calculateNormalMatrix(rotationMatrix) {
  var normalMatrix = invert4(rotationMatrix);

  normalMatrix = transpose4(normalMatrix);

  return normalMatrix;
}

module.exports = {
  calculateOffsetMatrix: calculateOffsetMatrix,
  calculateRotationMatrix: calculateRotationMatrix,
  calculatePositionMatrix: calculatePositionMatrix,
  calculateProjectionMatrix: calculateProjectionMatrix,
  calculateNormalMatrix: calculateNormalMatrix
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvY2FtZXJhLmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJtYXRyaXhNYXRocyIsImFycmF5VXRpbGl0aWVzIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsIkZJRUxEX09GX1ZJRVciLCJaX05FQVIiLCJaX0ZBUiIsImlkZW50aXR5NCIsImludmVydDQiLCJyb3RhdGU0IiwidHJhbnNsYXRlNCIsInRyYW5zcG9zZTQiLCJwZXJzcGVjdGl2ZTQiLCJjYWxjdWxhdGVPZmZzZXRNYXRyaXgiLCJvZmZzZXQiLCJvZmZzZXRNYXRyaXgiLCJjYWxjdWxhdGVSb3RhdGlvbk1hdHJpeCIsImFuZ2xlcyIsImZpcnN0QW5nbGUiLCJzZWNvbmRBbmdsZSIsInRoaXJkQW5nbGUiLCJ4QW5nbGUiLCJ5QW5nbGUiLCJ6QW5nbGUiLCJyb3RhdGlvbk1hdHJpeCIsImNhbGN1bGF0ZVBvc2l0aW9uTWF0cml4IiwiZGlzdGFuY2UiLCJ4IiwieSIsInoiLCJwb3NpdGlvbk1hdHJpeCIsImNhbGN1bGF0ZVByb2plY3Rpb25NYXRyaXgiLCJ3aWR0aCIsImhlaWdodCIsImZpZWxkT2ZWaWV3IiwiYXNwZWN0UmF0aW8iLCJ6TmVhciIsInpGYXIiLCJwcm9qZWN0aW9uTWF0cml4IiwiY2FsY3VsYXRlTm9ybWFsTWF0cml4Iiwibm9ybWFsTWF0cml4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxjQUFSLENBQWxCO0FBQUEsSUFDTUMsY0FBY0QsUUFBUSxpQkFBUixDQURwQjtBQUFBLElBRU1FLGlCQUFpQkYsUUFBUSxvQkFBUixDQUZ2Qjs7SUFJUUcsSyxHQUF5QkQsYyxDQUF6QkMsSztJQUFPQyxNLEdBQWtCRixjLENBQWxCRSxNO0lBQVFDLEssR0FBVUgsYyxDQUFWRyxLO0lBQ2ZDLGEsR0FBaUNQLFMsQ0FBakNPLGE7SUFBZUMsTSxHQUFrQlIsUyxDQUFsQlEsTTtJQUFRQyxLLEdBQVVULFMsQ0FBVlMsSztJQUN2QkMsUyxHQUFzRVIsVyxDQUF0RVEsUztJQUFXQyxPLEdBQTJEVCxXLENBQTNEUyxPO0lBQVNDLE8sR0FBa0RWLFcsQ0FBbERVLE87SUFBU0MsVSxHQUF5Q1gsVyxDQUF6Q1csVTtJQUFZQyxVLEdBQTZCWixXLENBQTdCWSxVO0lBQVlDLFksR0FBaUJiLFcsQ0FBakJhLFk7OztBQUU3RCxTQUFTQyxxQkFBVCxDQUErQkMsTUFBL0IsRUFBdUM7QUFDckMsTUFBSUMsZUFBZVIsV0FBbkI7O0FBRUFRLGlCQUFlTCxXQUFXSyxZQUFYLEVBQXlCRCxNQUF6QixDQUFmOztBQUVBLFNBQU9DLFlBQVA7QUFDRDs7QUFFRCxTQUFTQyx1QkFBVCxDQUFpQ0MsTUFBakMsRUFBeUM7QUFDdkMsTUFBTUMsYUFBYWpCLE1BQU1nQixNQUFOLENBQW5CO0FBQUEsTUFDTUUsY0FBY2pCLE9BQU9lLE1BQVAsQ0FEcEI7QUFBQSxNQUVNRyxhQUFhakIsTUFBTWMsTUFBTixDQUZuQjtBQUFBLE1BR01JLFNBQVNILFVBSGY7QUFBQSxNQUlNSSxTQUFTSCxXQUpmO0FBQUEsTUFLTUksU0FBU0gsVUFMZjs7QUFPQSxNQUFJSSxpQkFBaUJqQixXQUFyQjs7QUFFQWlCLG1CQUFpQmYsUUFBUWUsY0FBUixFQUF3QkgsTUFBeEIsRUFBZ0MsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FBaEMsQ0FBakI7QUFDQUcsbUJBQWlCZixRQUFRZSxjQUFSLEVBQXdCRixNQUF4QixFQUFnQyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUFoQyxDQUFqQjtBQUNBRSxtQkFBaUJmLFFBQVFlLGNBQVIsRUFBd0JELE1BQXhCLEVBQWdDLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQWhDLENBQWpCOztBQUVBLFNBQU9DLGNBQVA7QUFDRDs7QUFFRCxTQUFTQyx1QkFBVCxDQUFpQ0MsUUFBakMsRUFBMkM7QUFDekMsTUFBTUMsSUFBSSxDQUFWO0FBQUEsTUFDTUMsSUFBSSxDQURWO0FBQUEsTUFFTUMsSUFBSSxDQUFDSCxRQUZYOztBQUlBLE1BQUlJLGlCQUFpQnZCLFdBQXJCOztBQUVBdUIsbUJBQWlCcEIsV0FBV29CLGNBQVgsRUFBMkIsQ0FBRUgsQ0FBRixFQUFLQyxDQUFMLEVBQVFDLENBQVIsQ0FBM0IsQ0FBakI7O0FBRUEsU0FBT0MsY0FBUDtBQUNEOztBQUVELFNBQVNDLHlCQUFULENBQW1DQyxLQUFuQyxFQUEwQ0MsTUFBMUMsRUFBa0Q7QUFDaEQsTUFBTUMsY0FBYzlCLGFBQXBCO0FBQUEsTUFDTStCLGNBQWNILFFBQVFDLE1BRDVCO0FBQUEsTUFFTUcsUUFBUS9CLE1BRmQ7QUFBQSxNQUdNZ0MsT0FBTy9CLEtBSGI7QUFBQSxNQUlNZ0MsbUJBQW1CMUIsYUFBYXNCLFdBQWIsRUFBMEJDLFdBQTFCLEVBQXVDQyxLQUF2QyxFQUE4Q0MsSUFBOUMsQ0FKekI7O0FBTUEsU0FBT0MsZ0JBQVA7QUFDRDs7QUFFRCxTQUFTQyxxQkFBVCxDQUErQmYsY0FBL0IsRUFBK0M7QUFDN0MsTUFBSWdCLGVBQWVoQyxRQUFRZ0IsY0FBUixDQUFuQjs7QUFFQWdCLGlCQUFlN0IsV0FBVzZCLFlBQVgsQ0FBZjs7QUFFQSxTQUFPQSxZQUFQO0FBQ0Q7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZjdCLDhDQURlO0FBRWZHLGtEQUZlO0FBR2ZTLGtEQUhlO0FBSWZNLHNEQUplO0FBS2ZRO0FBTGUsQ0FBakIiLCJmaWxlIjoiY2FtZXJhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIG1hdHJpeE1hdGhzID0gcmVxdWlyZSgnLi4vbWF0aHMvbWF0cml4JyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpO1xuXG5jb25zdCB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgRklFTERfT0ZfVklFVywgWl9ORUFSLCBaX0ZBUiB9ID0gY29uc3RhbnRzLFxuICAgICAgeyBpZGVudGl0eTQsIGludmVydDQsIHJvdGF0ZTQsIHRyYW5zbGF0ZTQsIHRyYW5zcG9zZTQsIHBlcnNwZWN0aXZlNCB9ID0gbWF0cml4TWF0aHM7XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldE1hdHJpeChvZmZzZXQpIHtcbiAgbGV0IG9mZnNldE1hdHJpeCA9IGlkZW50aXR5NCgpO1xuXG4gIG9mZnNldE1hdHJpeCA9IHRyYW5zbGF0ZTQob2Zmc2V0TWF0cml4LCBvZmZzZXQpO1xuXG4gIHJldHVybiBvZmZzZXRNYXRyaXg7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVJvdGF0aW9uTWF0cml4KGFuZ2xlcykge1xuICBjb25zdCBmaXJzdEFuZ2xlID0gZmlyc3QoYW5nbGVzKSxcbiAgICAgICAgc2Vjb25kQW5nbGUgPSBzZWNvbmQoYW5nbGVzKSxcbiAgICAgICAgdGhpcmRBbmdsZSA9IHRoaXJkKGFuZ2xlcyksXG4gICAgICAgIHhBbmdsZSA9IGZpcnN0QW5nbGUsXG4gICAgICAgIHlBbmdsZSA9IHNlY29uZEFuZ2xlLFxuICAgICAgICB6QW5nbGUgPSB0aGlyZEFuZ2xlO1xuXG4gIGxldCByb3RhdGlvbk1hdHJpeCA9IGlkZW50aXR5NCgpO1xuXG4gIHJvdGF0aW9uTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbk1hdHJpeCwgeEFuZ2xlLCBbMSwgMCwgMF0pO1xuICByb3RhdGlvbk1hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25NYXRyaXgsIHlBbmdsZSwgWzAsIDEsIDBdKTtcbiAgcm90YXRpb25NYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uTWF0cml4LCB6QW5nbGUsIFswLCAwLCAxXSk7XG5cbiAgcmV0dXJuIHJvdGF0aW9uTWF0cml4O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVQb3NpdGlvbk1hdHJpeChkaXN0YW5jZSkge1xuICBjb25zdCB4ID0gMCxcbiAgICAgICAgeSA9IDAsXG4gICAgICAgIHogPSAtZGlzdGFuY2U7XG5cbiAgbGV0IHBvc2l0aW9uTWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgcG9zaXRpb25NYXRyaXggPSB0cmFuc2xhdGU0KHBvc2l0aW9uTWF0cml4LCBbIHgsIHksIHogXSk7XG5cbiAgcmV0dXJuIHBvc2l0aW9uTWF0cml4O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVQcm9qZWN0aW9uTWF0cml4KHdpZHRoLCBoZWlnaHQpIHtcbiAgY29uc3QgZmllbGRPZlZpZXcgPSBGSUVMRF9PRl9WSUVXLFxuICAgICAgICBhc3BlY3RSYXRpbyA9IHdpZHRoIC8gaGVpZ2h0LFxuICAgICAgICB6TmVhciA9IFpfTkVBUixcbiAgICAgICAgekZhciA9IFpfRkFSLFxuICAgICAgICBwcm9qZWN0aW9uTWF0cml4ID0gcGVyc3BlY3RpdmU0KGZpZWxkT2ZWaWV3LCBhc3BlY3RSYXRpbywgek5lYXIsIHpGYXIpO1xuXG4gIHJldHVybiBwcm9qZWN0aW9uTWF0cml4O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVOb3JtYWxNYXRyaXgocm90YXRpb25NYXRyaXgpIHtcbiAgbGV0IG5vcm1hbE1hdHJpeCA9IGludmVydDQocm90YXRpb25NYXRyaXgpO1xuXG4gIG5vcm1hbE1hdHJpeCA9IHRyYW5zcG9zZTQobm9ybWFsTWF0cml4KTtcblxuICByZXR1cm4gbm9ybWFsTWF0cml4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2FsY3VsYXRlT2Zmc2V0TWF0cml4LFxuICBjYWxjdWxhdGVSb3RhdGlvbk1hdHJpeCxcbiAgY2FsY3VsYXRlUG9zaXRpb25NYXRyaXgsXG4gIGNhbGN1bGF0ZVByb2plY3Rpb25NYXRyaXgsXG4gIGNhbGN1bGF0ZU5vcm1hbE1hdHJpeFxufTtcbiJdfQ==