'use strict';

var constants = require('../constants'),
    arrayUtilities = require('../utilities/array'),
    matrixUtilities = require('../utilities/matrix');

var FIELD_OF_VIEW = constants.FIELD_OF_VIEW,
    Z_NEAR = constants.Z_NEAR,
    Z_FAR = constants.Z_FAR,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    identity4 = matrixUtilities.identity4,
    invert4 = matrixUtilities.invert4,
    rotate4 = matrixUtilities.rotate4,
    translate4 = matrixUtilities.translate4,
    transpose4 = matrixUtilities.transpose4,
    perspective4 = matrixUtilities.perspective4;


function offsetMatrixFromOffset(offset) {
  var offsetMatrix = identity4();

  offsetMatrix = translate4(offsetMatrix, offset);

  return offsetMatrix;
}

function rotationMatrixFromAngles(angles) {
  var firstAngle = first(angles),
      secondAngle = second(angles),
      thirdAngle = third(angles),
      xAngle = firstAngle,
      yAngle = secondAngle,
      zAngle = thirdAngle;

  var rotationMatrix = identity4();

  rotationMatrix = rotate4(rotationMatrix, xAngle, [1, 0, 0]);
  rotationMatrix = rotate4(rotationMatrix, yAngle, [0, 1, 0]);
  rotationMatrix = rotate4(rotationMatrix, zAngle, [0, 0, 1]);

  return rotationMatrix;
}

function positionMatrixFromDistance(distance) {
  var x = 0,
      y = 0,
      z = -distance;

  var positionMatrix = identity4();

  positionMatrix = translate4(positionMatrix, [x, y, z]);

  return positionMatrix;
}

function projectionMatrixFromWidthAndHeight(width, height) {
  var fieldOfView = FIELD_OF_VIEW,
      aspectRatio = width / height,
      zNear = Z_NEAR,
      zFar = Z_FAR,
      projectionMatrix = perspective4(fieldOfView, aspectRatio, zNear, zFar);

  return projectionMatrix;
}

function normalMatrixFromRotationMatrix(rotationMatrix) {
  var normalMatrix = identity4();

  normalMatrix = invert4(normalMatrix, rotationMatrix);

  normalMatrix = transpose4(normalMatrix);

  return normalMatrix;
}

module.exports = {
  offsetMatrixFromOffset: offsetMatrixFromOffset,
  rotationMatrixFromAngles: rotationMatrixFromAngles,
  positionMatrixFromDistance: positionMatrixFromDistance,
  projectionMatrixFromWidthAndHeight: projectionMatrixFromWidthAndHeight,
  normalMatrixFromRotationMatrix: normalMatrixFromRotationMatrix
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvY2FtZXJhLmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJhcnJheVV0aWxpdGllcyIsIm1hdHJpeFV0aWxpdGllcyIsIkZJRUxEX09GX1ZJRVciLCJaX05FQVIiLCJaX0ZBUiIsImZpcnN0Iiwic2Vjb25kIiwidGhpcmQiLCJpZGVudGl0eTQiLCJpbnZlcnQ0Iiwicm90YXRlNCIsInRyYW5zbGF0ZTQiLCJ0cmFuc3Bvc2U0IiwicGVyc3BlY3RpdmU0Iiwib2Zmc2V0TWF0cml4RnJvbU9mZnNldCIsIm9mZnNldCIsIm9mZnNldE1hdHJpeCIsInJvdGF0aW9uTWF0cml4RnJvbUFuZ2xlcyIsImFuZ2xlcyIsImZpcnN0QW5nbGUiLCJzZWNvbmRBbmdsZSIsInRoaXJkQW5nbGUiLCJ4QW5nbGUiLCJ5QW5nbGUiLCJ6QW5nbGUiLCJyb3RhdGlvbk1hdHJpeCIsInBvc2l0aW9uTWF0cml4RnJvbURpc3RhbmNlIiwiZGlzdGFuY2UiLCJ4IiwieSIsInoiLCJwb3NpdGlvbk1hdHJpeCIsInByb2plY3Rpb25NYXRyaXhGcm9tV2lkdGhBbmRIZWlnaHQiLCJ3aWR0aCIsImhlaWdodCIsImZpZWxkT2ZWaWV3IiwiYXNwZWN0UmF0aW8iLCJ6TmVhciIsInpGYXIiLCJwcm9qZWN0aW9uTWF0cml4Iiwibm9ybWFsTWF0cml4RnJvbVJvdGF0aW9uTWF0cml4Iiwibm9ybWFsTWF0cml4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxjQUFSLENBQWxCO0FBQUEsSUFDTUMsaUJBQWlCRCxRQUFRLG9CQUFSLENBRHZCO0FBQUEsSUFFTUUsa0JBQWtCRixRQUFRLHFCQUFSLENBRnhCOztJQUlRRyxhLEdBQWlDSixTLENBQWpDSSxhO0lBQWVDLE0sR0FBa0JMLFMsQ0FBbEJLLE07SUFBUUMsSyxHQUFVTixTLENBQVZNLEs7SUFDdkJDLEssR0FBeUJMLGMsQ0FBekJLLEs7SUFBT0MsTSxHQUFrQk4sYyxDQUFsQk0sTTtJQUFRQyxLLEdBQVVQLGMsQ0FBVk8sSztJQUNmQyxTLEdBQXNFUCxlLENBQXRFTyxTO0lBQVdDLE8sR0FBMkRSLGUsQ0FBM0RRLE87SUFBU0MsTyxHQUFrRFQsZSxDQUFsRFMsTztJQUFTQyxVLEdBQXlDVixlLENBQXpDVSxVO0lBQVlDLFUsR0FBNkJYLGUsQ0FBN0JXLFU7SUFBWUMsWSxHQUFpQlosZSxDQUFqQlksWTs7O0FBRTdELFNBQVNDLHNCQUFULENBQWdDQyxNQUFoQyxFQUF3QztBQUN0QyxNQUFJQyxlQUFlUixXQUFuQjs7QUFFQVEsaUJBQWVMLFdBQVdLLFlBQVgsRUFBeUJELE1BQXpCLENBQWY7O0FBRUEsU0FBT0MsWUFBUDtBQUNEOztBQUVELFNBQVNDLHdCQUFULENBQWtDQyxNQUFsQyxFQUEwQztBQUN4QyxNQUFNQyxhQUFhZCxNQUFNYSxNQUFOLENBQW5CO0FBQUEsTUFDTUUsY0FBY2QsT0FBT1ksTUFBUCxDQURwQjtBQUFBLE1BRU1HLGFBQWFkLE1BQU1XLE1BQU4sQ0FGbkI7QUFBQSxNQUdNSSxTQUFTSCxVQUhmO0FBQUEsTUFJTUksU0FBU0gsV0FKZjtBQUFBLE1BS01JLFNBQVNILFVBTGY7O0FBT0EsTUFBSUksaUJBQWlCakIsV0FBckI7O0FBRUFpQixtQkFBaUJmLFFBQVFlLGNBQVIsRUFBd0JILE1BQXhCLEVBQWdDLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQWhDLENBQWpCO0FBQ0FHLG1CQUFpQmYsUUFBUWUsY0FBUixFQUF3QkYsTUFBeEIsRUFBZ0MsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FBaEMsQ0FBakI7QUFDQUUsbUJBQWlCZixRQUFRZSxjQUFSLEVBQXdCRCxNQUF4QixFQUFnQyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUFoQyxDQUFqQjs7QUFFQSxTQUFPQyxjQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsMEJBQVQsQ0FBb0NDLFFBQXBDLEVBQThDO0FBQzVDLE1BQU1DLElBQUksQ0FBVjtBQUFBLE1BQ01DLElBQUksQ0FEVjtBQUFBLE1BRU1DLElBQUksQ0FBQ0gsUUFGWDs7QUFJQSxNQUFJSSxpQkFBaUJ2QixXQUFyQjs7QUFFQXVCLG1CQUFpQnBCLFdBQVdvQixjQUFYLEVBQTJCLENBQUVILENBQUYsRUFBS0MsQ0FBTCxFQUFRQyxDQUFSLENBQTNCLENBQWpCOztBQUVBLFNBQU9DLGNBQVA7QUFDRDs7QUFFRCxTQUFTQyxrQ0FBVCxDQUE0Q0MsS0FBNUMsRUFBbURDLE1BQW5ELEVBQTJEO0FBQ3pELE1BQU1DLGNBQWNqQyxhQUFwQjtBQUFBLE1BQ01rQyxjQUFjSCxRQUFRQyxNQUQ1QjtBQUFBLE1BRU1HLFFBQVFsQyxNQUZkO0FBQUEsTUFHTW1DLE9BQU9sQyxLQUhiO0FBQUEsTUFJTW1DLG1CQUFtQjFCLGFBQWFzQixXQUFiLEVBQTBCQyxXQUExQixFQUF1Q0MsS0FBdkMsRUFBOENDLElBQTlDLENBSnpCOztBQU1BLFNBQU9DLGdCQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsOEJBQVQsQ0FBd0NmLGNBQXhDLEVBQXdEO0FBQ3RELE1BQUlnQixlQUFlakMsV0FBbkI7O0FBRUFpQyxpQkFBZWhDLFFBQVFnQyxZQUFSLEVBQXNCaEIsY0FBdEIsQ0FBZjs7QUFFQWdCLGlCQUFlN0IsV0FBVzZCLFlBQVgsQ0FBZjs7QUFFQSxTQUFPQSxZQUFQO0FBQ0Q7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZjdCLDBCQUF3QkEsc0JBRFQ7QUFFZkcsNEJBQTBCQSx3QkFGWDtBQUdmUyw4QkFBNEJBLDBCQUhiO0FBSWZNLHNDQUFvQ0Esa0NBSnJCO0FBS2ZRLGtDQUFnQ0E7QUFMakIsQ0FBakIiLCJmaWxlIjoiY2FtZXJhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICBtYXRyaXhVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvbWF0cml4Jyk7XG5cbmNvbnN0IHsgRklFTERfT0ZfVklFVywgWl9ORUFSLCBaX0ZBUiB9ID0gY29uc3RhbnRzLFxuICAgICAgeyBmaXJzdCwgc2Vjb25kLCB0aGlyZCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGlkZW50aXR5NCwgaW52ZXJ0NCwgcm90YXRlNCwgdHJhbnNsYXRlNCwgdHJhbnNwb3NlNCwgcGVyc3BlY3RpdmU0IH0gPSBtYXRyaXhVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIG9mZnNldE1hdHJpeEZyb21PZmZzZXQob2Zmc2V0KSB7XG4gIGxldCBvZmZzZXRNYXRyaXggPSBpZGVudGl0eTQoKTtcblxuICBvZmZzZXRNYXRyaXggPSB0cmFuc2xhdGU0KG9mZnNldE1hdHJpeCwgb2Zmc2V0KTtcblxuICByZXR1cm4gb2Zmc2V0TWF0cml4O1xufVxuXG5mdW5jdGlvbiByb3RhdGlvbk1hdHJpeEZyb21BbmdsZXMoYW5nbGVzKSB7XG4gIGNvbnN0IGZpcnN0QW5nbGUgPSBmaXJzdChhbmdsZXMpLFxuICAgICAgICBzZWNvbmRBbmdsZSA9IHNlY29uZChhbmdsZXMpLFxuICAgICAgICB0aGlyZEFuZ2xlID0gdGhpcmQoYW5nbGVzKSxcbiAgICAgICAgeEFuZ2xlID0gZmlyc3RBbmdsZSxcbiAgICAgICAgeUFuZ2xlID0gc2Vjb25kQW5nbGUsXG4gICAgICAgIHpBbmdsZSA9IHRoaXJkQW5nbGU7XG5cbiAgbGV0IHJvdGF0aW9uTWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgcm90YXRpb25NYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uTWF0cml4LCB4QW5nbGUsIFsxLCAwLCAwXSk7XG4gIHJvdGF0aW9uTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbk1hdHJpeCwgeUFuZ2xlLCBbMCwgMSwgMF0pO1xuICByb3RhdGlvbk1hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25NYXRyaXgsIHpBbmdsZSwgWzAsIDAsIDFdKTtcblxuICByZXR1cm4gcm90YXRpb25NYXRyaXg7XG59XG5cbmZ1bmN0aW9uIHBvc2l0aW9uTWF0cml4RnJvbURpc3RhbmNlKGRpc3RhbmNlKSB7XG4gIGNvbnN0IHggPSAwLFxuICAgICAgICB5ID0gMCxcbiAgICAgICAgeiA9IC1kaXN0YW5jZTtcblxuICBsZXQgcG9zaXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTtcblxuICBwb3NpdGlvbk1hdHJpeCA9IHRyYW5zbGF0ZTQocG9zaXRpb25NYXRyaXgsIFsgeCwgeSwgeiBdKTtcblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmZ1bmN0aW9uIHByb2plY3Rpb25NYXRyaXhGcm9tV2lkdGhBbmRIZWlnaHQod2lkdGgsIGhlaWdodCkge1xuICBjb25zdCBmaWVsZE9mVmlldyA9IEZJRUxEX09GX1ZJRVcsXG4gICAgICAgIGFzcGVjdFJhdGlvID0gd2lkdGggLyBoZWlnaHQsXG4gICAgICAgIHpOZWFyID0gWl9ORUFSLFxuICAgICAgICB6RmFyID0gWl9GQVIsXG4gICAgICAgIHByb2plY3Rpb25NYXRyaXggPSBwZXJzcGVjdGl2ZTQoZmllbGRPZlZpZXcsIGFzcGVjdFJhdGlvLCB6TmVhciwgekZhcik7XG5cbiAgcmV0dXJuIHByb2plY3Rpb25NYXRyaXg7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbE1hdHJpeEZyb21Sb3RhdGlvbk1hdHJpeChyb3RhdGlvbk1hdHJpeCkge1xuICBsZXQgbm9ybWFsTWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgbm9ybWFsTWF0cml4ID0gaW52ZXJ0NChub3JtYWxNYXRyaXgsIHJvdGF0aW9uTWF0cml4KTtcblxuICBub3JtYWxNYXRyaXggPSB0cmFuc3Bvc2U0KG5vcm1hbE1hdHJpeCk7XG5cbiAgcmV0dXJuIG5vcm1hbE1hdHJpeDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG9mZnNldE1hdHJpeEZyb21PZmZzZXQ6IG9mZnNldE1hdHJpeEZyb21PZmZzZXQsXG4gIHJvdGF0aW9uTWF0cml4RnJvbUFuZ2xlczogcm90YXRpb25NYXRyaXhGcm9tQW5nbGVzLFxuICBwb3NpdGlvbk1hdHJpeEZyb21EaXN0YW5jZTogcG9zaXRpb25NYXRyaXhGcm9tRGlzdGFuY2UsXG4gIHByb2plY3Rpb25NYXRyaXhGcm9tV2lkdGhBbmRIZWlnaHQ6IHByb2plY3Rpb25NYXRyaXhGcm9tV2lkdGhBbmRIZWlnaHQsXG4gIG5vcm1hbE1hdHJpeEZyb21Sb3RhdGlvbk1hdHJpeDogbm9ybWFsTWF0cml4RnJvbVJvdGF0aW9uTWF0cml4XG59O1xuIl19