'use strict';

var constants = require('../constants'),
    matrixMaths = require('../maths/matrix'),
    arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    FIELD_OF_VIEW = constants.FIELD_OF_VIEW,
    Z_NEAR = constants.Z_NEAR,
    Z_FAR = constants.Z_FAR,
    identity4 = matrixMaths.identity4,
    invert4 = matrixMaths.invert4,
    rotate4 = matrixMaths.rotate4,
    translate4 = matrixMaths.translate4,
    transpose4 = matrixMaths.transpose4,
    perspective4 = matrixMaths.perspective4;


function offsetMatrixFromOffset(offset) {
  var offsetMatrix = identity4(); ///

  offsetMatrix = translate4(offsetMatrix, offset);

  return offsetMatrix;
}

function rotationMatrixFromAngles(angles) {
  var rotationMatrix = identity4(); ///

  var firstAngle = first(angles),
      secondAngle = second(angles),
      thirdAngle = third(angles),
      xAngle = firstAngle,
      yAngle = secondAngle,
      zAngle = thirdAngle;

  rotationMatrix = rotate4(rotationMatrix, xAngle, [1, 0, 0]);
  rotationMatrix = rotate4(rotationMatrix, yAngle, [0, 1, 0]);
  rotationMatrix = rotate4(rotationMatrix, zAngle, [0, 0, 1]);

  return rotationMatrix;
}

function positionMatrixFromDistance(distance) {
  var positionMatrix = identity4(); ///

  var x = 0,
      y = 0,
      z = -distance;

  positionMatrix = translate4(positionMatrix, [x, y, z]);

  return positionMatrix;
}

function positionMatrixFromPosition(position) {
  var positionMatrix = identity4(); ///

  positionMatrix = translate4(positionMatrix, position);

  return positionMatrix;
}

function projectionMatrixFromWidthAndHeight(width, height) {
  var fieldOfView = FIELD_OF_VIEW,
      aspectRatio = width / height,
      zNear = Z_NEAR,
      zFar = Z_FAR,
      projectionMatrix = perspective4(fieldOfView, aspectRatio, zNear, zFar);

  return projectionMatrix;
}

function normalMatrixFromRotationMatrix(rotationMatrix) {
  var normalMatrix = invert4(rotationMatrix);

  normalMatrix = transpose4(normalMatrix);

  return normalMatrix;
}

module.exports = {
  offsetMatrixFromOffset: offsetMatrixFromOffset,
  rotationMatrixFromAngles: rotationMatrixFromAngles,
  positionMatrixFromDistance: positionMatrixFromDistance,
  positionMatrixFromPosition: positionMatrixFromPosition,
  projectionMatrixFromWidthAndHeight: projectionMatrixFromWidthAndHeight,
  normalMatrixFromRotationMatrix: normalMatrixFromRotationMatrix
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvY2FtZXJhLmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJtYXRyaXhNYXRocyIsImFycmF5VXRpbGl0aWVzIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsIkZJRUxEX09GX1ZJRVciLCJaX05FQVIiLCJaX0ZBUiIsImlkZW50aXR5NCIsImludmVydDQiLCJyb3RhdGU0IiwidHJhbnNsYXRlNCIsInRyYW5zcG9zZTQiLCJwZXJzcGVjdGl2ZTQiLCJvZmZzZXRNYXRyaXhGcm9tT2Zmc2V0Iiwib2Zmc2V0Iiwib2Zmc2V0TWF0cml4Iiwicm90YXRpb25NYXRyaXhGcm9tQW5nbGVzIiwiYW5nbGVzIiwicm90YXRpb25NYXRyaXgiLCJmaXJzdEFuZ2xlIiwic2Vjb25kQW5nbGUiLCJ0aGlyZEFuZ2xlIiwieEFuZ2xlIiwieUFuZ2xlIiwiekFuZ2xlIiwicG9zaXRpb25NYXRyaXhGcm9tRGlzdGFuY2UiLCJkaXN0YW5jZSIsInBvc2l0aW9uTWF0cml4IiwieCIsInkiLCJ6IiwicG9zaXRpb25NYXRyaXhGcm9tUG9zaXRpb24iLCJwb3NpdGlvbiIsInByb2plY3Rpb25NYXRyaXhGcm9tV2lkdGhBbmRIZWlnaHQiLCJ3aWR0aCIsImhlaWdodCIsImZpZWxkT2ZWaWV3IiwiYXNwZWN0UmF0aW8iLCJ6TmVhciIsInpGYXIiLCJwcm9qZWN0aW9uTWF0cml4Iiwibm9ybWFsTWF0cml4RnJvbVJvdGF0aW9uTWF0cml4Iiwibm9ybWFsTWF0cml4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxjQUFSLENBQWxCO0FBQUEsSUFDTUMsY0FBY0QsUUFBUSxpQkFBUixDQURwQjtBQUFBLElBRU1FLGlCQUFpQkYsUUFBUSxvQkFBUixDQUZ2Qjs7SUFJUUcsSyxHQUF5QkQsYyxDQUF6QkMsSztJQUFPQyxNLEdBQWtCRixjLENBQWxCRSxNO0lBQVFDLEssR0FBVUgs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Y2FtZXJhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIG1hdHJpeE1hdGhzID0gcmVxdWlyZSgnLi4vbWF0aHMvbWF0cml4JyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpO1xuXG5jb25zdCB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgRklFTERfT0ZfVklFVywgWl9ORUFSLCBaX0ZBUiB9ID0gY29uc3RhbnRzLFxuICAgICAgeyBpZGVudGl0eTQsIGludmVydDQsIHJvdGF0ZTQsIHRyYW5zbGF0ZTQsIHRyYW5zcG9zZTQsIHBlcnNwZWN0aXZlNCB9ID0gbWF0cml4TWF0aHM7XG5cbmZ1bmN0aW9uIG9mZnNldE1hdHJpeEZyb21PZmZzZXQob2Zmc2V0KSB7XG4gIGxldCBvZmZzZXRNYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgb2Zmc2V0TWF0cml4ID0gdHJhbnNsYXRlNChvZmZzZXRNYXRyaXgsIG9mZnNldCk7XG5cbiAgcmV0dXJuIG9mZnNldE1hdHJpeDtcbn1cblxuZnVuY3Rpb24gcm90YXRpb25NYXRyaXhGcm9tQW5nbGVzKGFuZ2xlcykge1xuICBsZXQgcm90YXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgY29uc3QgZmlyc3RBbmdsZSA9IGZpcnN0KGFuZ2xlcyksXG4gICAgICAgIHNlY29uZEFuZ2xlID0gc2Vjb25kKGFuZ2xlcyksXG4gICAgICAgIHRoaXJkQW5nbGUgPSB0aGlyZChhbmdsZXMpLFxuICAgICAgICB4QW5nbGUgPSBmaXJzdEFuZ2xlLFxuICAgICAgICB5QW5nbGUgPSBzZWNvbmRBbmdsZSxcbiAgICAgICAgekFuZ2xlID0gdGhpcmRBbmdsZTtcblxuICByb3RhdGlvbk1hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25NYXRyaXgsIHhBbmdsZSwgWzEsIDAsIDBdKTtcbiAgcm90YXRpb25NYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uTWF0cml4LCB5QW5nbGUsIFswLCAxLCAwXSk7XG4gIHJvdGF0aW9uTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbk1hdHJpeCwgekFuZ2xlLCBbMCwgMCwgMV0pO1xuXG4gIHJldHVybiByb3RhdGlvbk1hdHJpeDtcbn1cblxuZnVuY3Rpb24gcG9zaXRpb25NYXRyaXhGcm9tRGlzdGFuY2UoZGlzdGFuY2UpIHtcbiAgbGV0IHBvc2l0aW9uTWF0cml4ID0gaWRlbnRpdHk0KCk7IC8vL1xuXG4gIGNvbnN0IHggPSAwLFxuICAgICAgICB5ID0gMCxcbiAgICAgICAgeiA9IC1kaXN0YW5jZTtcblxuICBwb3NpdGlvbk1hdHJpeCA9IHRyYW5zbGF0ZTQocG9zaXRpb25NYXRyaXgsIFsgeCwgeSwgeiBdKTtcblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmZ1bmN0aW9uIHBvc2l0aW9uTWF0cml4RnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gIGxldCBwb3NpdGlvbk1hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBwb3NpdGlvbk1hdHJpeCA9IHRyYW5zbGF0ZTQocG9zaXRpb25NYXRyaXgsIHBvc2l0aW9uKTtcblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmZ1bmN0aW9uIHByb2plY3Rpb25NYXRyaXhGcm9tV2lkdGhBbmRIZWlnaHQod2lkdGgsIGhlaWdodCkge1xuICBjb25zdCBmaWVsZE9mVmlldyA9IEZJRUxEX09GX1ZJRVcsXG4gICAgICAgIGFzcGVjdFJhdGlvID0gd2lkdGggLyBoZWlnaHQsXG4gICAgICAgIHpOZWFyID0gWl9ORUFSLFxuICAgICAgICB6RmFyID0gWl9GQVIsXG4gICAgICAgIHByb2plY3Rpb25NYXRyaXggPSBwZXJzcGVjdGl2ZTQoZmllbGRPZlZpZXcsIGFzcGVjdFJhdGlvLCB6TmVhciwgekZhcik7XG5cbiAgcmV0dXJuIHByb2plY3Rpb25NYXRyaXg7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbE1hdHJpeEZyb21Sb3RhdGlvbk1hdHJpeChyb3RhdGlvbk1hdHJpeCkge1xuICBsZXQgbm9ybWFsTWF0cml4ID0gaW52ZXJ0NChyb3RhdGlvbk1hdHJpeCk7XG5cbiAgbm9ybWFsTWF0cml4ID0gdHJhbnNwb3NlNChub3JtYWxNYXRyaXgpO1xuXG4gIHJldHVybiBub3JtYWxNYXRyaXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBvZmZzZXRNYXRyaXhGcm9tT2Zmc2V0LFxuICByb3RhdGlvbk1hdHJpeEZyb21BbmdsZXMsXG4gIHBvc2l0aW9uTWF0cml4RnJvbURpc3RhbmNlLFxuICBwb3NpdGlvbk1hdHJpeEZyb21Qb3NpdGlvbixcbiAgcHJvamVjdGlvbk1hdHJpeEZyb21XaWR0aEFuZEhlaWdodCxcbiAgbm9ybWFsTWF0cml4RnJvbVJvdGF0aW9uTWF0cml4XG59O1xuIl19