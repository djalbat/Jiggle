'use strict';

var constants = require('../constants'),
    matrixMaths = require('../maths/matrix'),
    arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    FIELD_OF_VIEW = constants.FIELD_OF_VIEW,
    Z_NEAR = constants.Z_NEAR,
    Z_FAR = constants.Z_FAR,
    identity4 = matrixMaths.identity4,
    invert4 = matrixMaths.invert4,
    rotate4 = matrixMaths.rotate4,
    translate4 = matrixMaths.translate4,
    transpose4 = matrixMaths.transpose4,
    perspective4 = matrixMaths.perspective4;


function offsetMatrixFromOffsets(offsets) {
  var offsetMatrix = identity4(); ///

  offsetMatrix = translate4(offsetMatrix, offsets);

  return offsetMatrix;
}

function rotationsMatrixFromAngles(angles) {
  var rotationsMatrix = identity4(); ///

  var firstAngle = first(angles),
      secondAngle = second(angles),
      thirdAngle = third(angles),
      xAngle = firstAngle,
      yAngle = secondAngle,
      zAngle = thirdAngle,
      xAxis = [1, 0, 0],
      yAxis = [0, 1, 0],
      zAxis = [0, 0, 1];

  rotationsMatrix = rotate4(rotationsMatrix, xAngle, xAxis);
  rotationsMatrix = rotate4(rotationsMatrix, yAngle, yAxis);
  rotationsMatrix = rotate4(rotationsMatrix, zAngle, zAxis);

  return rotationsMatrix;
}

function positionMatrixFromNothing() {
  var positionMatrix = identity4(); ///

  return positionMatrix;
}

function positionMatrixFromDistance(distance) {
  var positionMatrix = identity4(); ///

  var x = 0,
      y = 0,
      z = -distance;

  positionMatrix = translate4(positionMatrix, [x, y, z]);

  return positionMatrix;
}

function positionMatrixFromPosition(position) {
  var positionMatrix = identity4(); ///

  positionMatrix = translate4(positionMatrix, position);

  return positionMatrix;
}

function normalsMatrixFromRotationsMatrix(rotationsMatrix) {
  var normalsMatrix = invert4(rotationsMatrix);

  normalsMatrix = transpose4(normalsMatrix);

  return normalsMatrix;
}

function projectionMatrixFromWidthAndHeight(width, height) {
  var fieldOfView = FIELD_OF_VIEW,
      ///
  aspectRatio = width / height,
      zNear = Z_NEAR,
      ///
  zFar = Z_FAR,
      ///
  projectionMatrix = perspective4(fieldOfView, aspectRatio, zNear, zFar);

  return projectionMatrix;
}

module.exports = {
  offsetMatrixFromOffsets: offsetMatrixFromOffsets,
  rotationsMatrixFromAngles: rotationsMatrixFromAngles,
  positionMatrixFromNothing: positionMatrixFromNothing,
  positionMatrixFromDistance: positionMatrixFromDistance,
  positionMatrixFromPosition: positionMatrixFromPosition,
  normalsMatrixFromRotationsMatrix: normalsMatrixFromRotationsMatrix,
  projectionMatrixFromWidthAndHeight: projectionMatrixFromWidthAndHeight
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvY2FtZXJhLmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJtYXRyaXhNYXRocyIsImFycmF5VXRpbGl0aWVzIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsIkZJRUxEX09GX1ZJRVciLCJaX05FQVIiLCJaX0ZBUiIsImlkZW50aXR5NCIsImludmVydDQiLCJyb3RhdGU0IiwidHJhbnNsYXRlNCIsInRyYW5zcG9zZTQiLCJwZXJzcGVjdGl2ZTQiLCJvZmZzZXRNYXRyaXhGcm9tT2Zmc2V0cyIsIm9mZnNldHMiLCJvZmZzZXRNYXRyaXgiLCJyb3RhdGlvbnNNYXRyaXhGcm9tQW5nbGVzIiwiYW5nbGVzIiwicm90YXRpb25zTWF0cml4IiwiZmlyc3RBbmdsZSIsInNlY29uZEFuZ2xlIiwidGhpcmRBbmdsZSIsInhBbmdsZSIsInlBbmdsZSIsInpBbmdsZSIsInhBeGlzIiwieUF4aXMiLCJ6QXhpcyIsInBvc2l0aW9uTWF0cml4RnJvbU5vdGhpbmciLCJwb3NpdGlvbk1hdHJpeCIsInBvc2l0aW9uTWF0cml4RnJvbURpc3RhbmNlIiwiZGlzdGFuY2UiLCJ4IiwieSIsInoiLCJwb3NpdGlvbk1hdHJpeEZyb21Qb3NpdGlvbiIsInBvc2l0aW9uIiwibm9ybWFsc01hdHJpeEZyb21Sb3RhdGlvbnNNYXRyaXgiLCJub3JtYWxzTWF0cml4IiwicHJvamVjdGlvbk1hdHJpeEZyb21XaWR0aEFuZEhlaWdodCIsIndpZHRoIiwiaGVpZ2h0IiwiZmllbGRPZlZpZXciLCJhc3BlY3RSYXRpbyIsInpOZWFyIiwiekZhciIsInByb2plY3Rpb25NYXRyaXgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLGNBQVIsQ0FBbEI7QUFBQSxJQUNNQyxjQUFjRCxRQUFRLGlCQUFSLENBRHBCO0FBQUEsSUFFTUUsaUJBQWlCRixRQUFRLG9CQUFSLENBRnZCOztJQUlRRyxL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Q2hCd0MsU0FBT3ZDLEtBSGI7QUFBQSxNQUdvQjtBQUNkd0MscUJBQW1CbEMsYUFBYThCLFdBQWIsRUFBMEJDLFdBQTFCLEVBQXVDQyxLQUF2QyxFQUE4Q0MsSUFBOUMsQ0FKekI7O0FBTUEsU0FBT0MsZ0JBQVA7QUFDRDs7QUFFREMsT0FBT0MsT0FBUCxHQUFpQjtBQUNmbkMsa0RBRGU7QUFFZkcsc0RBRmU7QUFHZlksc0RBSGU7QUFJZkUsd0RBSmU7QUFLZkssd0RBTGU7QUFNZkUsb0VBTmU7QUFPZkU7QUFQZSxDQUFqQiIsImZpbGUiOiJjYW1lcmEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpLFxuICAgICAgbWF0cml4TWF0aHMgPSByZXF1aXJlKCcuLi9tYXRocy9tYXRyaXgnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5Jyk7XG5cbmNvbnN0IHsgZmlyc3QsIHNlY29uZCwgdGhpcmQgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBGSUVMRF9PRl9WSUVXLCBaX05FQVIsIFpfRkFSIH0gPSBjb25zdGFudHMsXG4gICAgICB7IGlkZW50aXR5NCwgaW52ZXJ0NCwgcm90YXRlNCwgdHJhbnNsYXRlNCwgdHJhbnNwb3NlNCwgcGVyc3BlY3RpdmU0IH0gPSBtYXRyaXhNYXRocztcblxuZnVuY3Rpb24gb2Zmc2V0TWF0cml4RnJvbU9mZnNldHMob2Zmc2V0cykge1xuICBsZXQgb2Zmc2V0TWF0cml4ID0gaWRlbnRpdHk0KCk7IC8vL1xuXG4gIG9mZnNldE1hdHJpeCA9IHRyYW5zbGF0ZTQob2Zmc2V0TWF0cml4LCBvZmZzZXRzKTtcblxuICByZXR1cm4gb2Zmc2V0TWF0cml4O1xufVxuXG5mdW5jdGlvbiByb3RhdGlvbnNNYXRyaXhGcm9tQW5nbGVzKGFuZ2xlcykge1xuICBsZXQgcm90YXRpb25zTWF0cml4ID0gaWRlbnRpdHk0KCk7IC8vL1xuXG4gIGNvbnN0IGZpcnN0QW5nbGUgPSBmaXJzdChhbmdsZXMpLFxuICAgICAgICBzZWNvbmRBbmdsZSA9IHNlY29uZChhbmdsZXMpLFxuICAgICAgICB0aGlyZEFuZ2xlID0gdGhpcmQoYW5nbGVzKSxcbiAgICAgICAgeEFuZ2xlID0gZmlyc3RBbmdsZSxcbiAgICAgICAgeUFuZ2xlID0gc2Vjb25kQW5nbGUsXG4gICAgICAgIHpBbmdsZSA9IHRoaXJkQW5nbGUsXG5cbiAgICAgICAgeEF4aXMgPSBbIDEsIDAsIDAgXSxcbiAgICAgICAgeUF4aXMgPSBbIDAsIDEsIDAgXSxcbiAgICAgICAgekF4aXMgPSBbIDAsIDAsIDEgXTtcblxuICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgeEFuZ2xlLCB4QXhpcyk7XG4gIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB5QW5nbGUsIHlBeGlzKTtcbiAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHpBbmdsZSwgekF4aXMpO1xuXG4gIHJldHVybiByb3RhdGlvbnNNYXRyaXg7XG59XG5cbmZ1bmN0aW9uIHBvc2l0aW9uTWF0cml4RnJvbU5vdGhpbmcoKSB7XG4gIGxldCBwb3NpdGlvbk1hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmZ1bmN0aW9uIHBvc2l0aW9uTWF0cml4RnJvbURpc3RhbmNlKGRpc3RhbmNlKSB7XG4gIGxldCBwb3NpdGlvbk1hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBjb25zdCB4ID0gMCxcbiAgICAgICAgeSA9IDAsXG4gICAgICAgIHogPSAtZGlzdGFuY2U7XG5cbiAgcG9zaXRpb25NYXRyaXggPSB0cmFuc2xhdGU0KHBvc2l0aW9uTWF0cml4LCBbIHgsIHksIHogXSk7XG5cbiAgcmV0dXJuIHBvc2l0aW9uTWF0cml4O1xufVxuXG5mdW5jdGlvbiBwb3NpdGlvbk1hdHJpeEZyb21Qb3NpdGlvbihwb3NpdGlvbikge1xuICBsZXQgcG9zaXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgcG9zaXRpb25NYXRyaXggPSB0cmFuc2xhdGU0KHBvc2l0aW9uTWF0cml4LCBwb3NpdGlvbik7XG5cbiAgcmV0dXJuIHBvc2l0aW9uTWF0cml4O1xufVxuXG5mdW5jdGlvbiBub3JtYWxzTWF0cml4RnJvbVJvdGF0aW9uc01hdHJpeChyb3RhdGlvbnNNYXRyaXgpIHtcbiAgbGV0IG5vcm1hbHNNYXRyaXggPSBpbnZlcnQ0KHJvdGF0aW9uc01hdHJpeCk7XG5cbiAgbm9ybWFsc01hdHJpeCA9IHRyYW5zcG9zZTQobm9ybWFsc01hdHJpeCk7XG5cbiAgcmV0dXJuIG5vcm1hbHNNYXRyaXg7XG59XG5cbmZ1bmN0aW9uIHByb2plY3Rpb25NYXRyaXhGcm9tV2lkdGhBbmRIZWlnaHQod2lkdGgsIGhlaWdodCkge1xuICBjb25zdCBmaWVsZE9mVmlldyA9IEZJRUxEX09GX1ZJRVcsICAvLy9cbiAgICAgICAgYXNwZWN0UmF0aW8gPSB3aWR0aCAvIGhlaWdodCxcbiAgICAgICAgek5lYXIgPSBaX05FQVIsIC8vL1xuICAgICAgICB6RmFyID0gWl9GQVIsIC8vL1xuICAgICAgICBwcm9qZWN0aW9uTWF0cml4ID0gcGVyc3BlY3RpdmU0KGZpZWxkT2ZWaWV3LCBhc3BlY3RSYXRpbywgek5lYXIsIHpGYXIpO1xuXG4gIHJldHVybiBwcm9qZWN0aW9uTWF0cml4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgb2Zmc2V0TWF0cml4RnJvbU9mZnNldHMsXG4gIHJvdGF0aW9uc01hdHJpeEZyb21BbmdsZXMsXG4gIHBvc2l0aW9uTWF0cml4RnJvbU5vdGhpbmcsXG4gIHBvc2l0aW9uTWF0cml4RnJvbURpc3RhbmNlLFxuICBwb3NpdGlvbk1hdHJpeEZyb21Qb3NpdGlvbixcbiAgbm9ybWFsc01hdHJpeEZyb21Sb3RhdGlvbnNNYXRyaXgsXG4gIHByb2plY3Rpb25NYXRyaXhGcm9tV2lkdGhBbmRIZWlnaHRcbn07XG4iXX0=