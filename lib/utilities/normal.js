'use strict';

var vec3 = require('gl-vec3'); ///

var arrayUtilities = require('../utilities/array');

var dice = arrayUtilities.dice,
    flatten = arrayUtilities.flatten;


function calculateVertexNormalData(initialVertexPositionData) {
  var vertexNormalVectors = [],
      faces = dice(initialVertexPositionData, 16);

  faces.forEach(function (face) {
    var vertexPositions = dice(face, 4);

    for (var index = 0; index < 4; index++) {
      var firstVertexIndex = index,
          secondVertexIndex = (index + 1) % 4,
          thirdVertexIndex = (index + 3) % 4,
          firstVertexPosition = vertexPositions[firstVertexIndex],
          secondVertexPosition = vertexPositions[secondVertexIndex],
          thirdVertexPosition = vertexPositions[thirdVertexIndex],
          firstVector = subtract(secondVertexPosition, firstVertexPosition),
          ///
      secondVector = subtract(thirdVertexPosition, firstVertexPosition),
          ///
      vertexNormalVector = cross(firstVector, secondVector);

      vertexNormalVectors.push(vertexNormalVector);
    }
  });

  return flatten(vertexNormalVectors);
}

module.exports = {
  calculateVertexNormalData: calculateVertexNormalData
};

function subtract(vec1, vec2) {
  var vec = [];

  vec3.subtract(vec, vec1, vec2);

  return vec;
}

function cross(vec1, vec2) {
  var vec = [];

  vec3.cross(vec, vec1, vec2);

  return vec;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvbm9ybWFsLmpzIl0sIm5hbWVzIjpbInZlYzMiLCJyZXF1aXJlIiwiYXJyYXlVdGlsaXRpZXMiLCJkaWNlIiwiZmxhdHRlbiIsImNhbGN1bGF0ZVZlcnRleE5vcm1hbERhdGEiLCJpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhIiwidmVydGV4Tm9ybWFsVmVjdG9ycyIsImZhY2VzIiwiZm9yRWFjaCIsImZhY2UiLCJ2ZXJ0ZXhQb3NpdGlvbnMiLCJpbmRleCIsImZpcnN0VmVydGV4SW5kZXgiLCJzZWNvbmRWZXJ0ZXhJbmRleCIsInRoaXJkVmVydGV4SW5kZXgiLCJmaXJzdFZlcnRleFBvc2l0aW9uIiwic2Vjb25kVmVydGV4UG9zaXRpb24iLCJ0aGlyZFZlcnRleFBvc2l0aW9uIiwiZmlyc3RWZWN0b3IiLCJzdWJ0cmFjdCIsInNlY29uZFZlY3RvciIsInZlcnRleE5vcm1hbFZlY3RvciIsImNyb3NzIiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2ZWMxIiwidmVjMiIsInZlYyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxTQUFSLENBQWIsQyxDQUFrQzs7QUFFbEMsSUFBTUMsaUJBQWlCRCxRQUFRLG9CQUFSLENBQXZCOztJQUVRRSxJLEdBQWtCRCxjLENBQWxCQyxJO0lBQU1DLE8sR0FBWUYsYyxDQUFaRSxPOzs7QUFFZCxTQUFTQyx5QkFBVCxDQUFtQ0MseUJBQW5DLEVBQThEO0FBQzVELE1BQU1DLHNCQUFzQixFQUE1QjtBQUFBLE1BQ01DLFFBQVFMLEtBQUtHLHlCQUFMLEVBQWdDLEVBQWhDLENBRGQ7O0FBR0FFLFFBQU1DLE9BQU4sQ0FBYyxVQUFTQyxJQUFULEVBQWU7QUFDM0IsUUFBTUMsa0JBQWtCUixLQUFLTyxJQUFMLEVBQVcsQ0FBWCxDQUF4Qjs7QUFFQSxTQUFLLElBQUlFLFFBQVEsQ0FBakIsRUFBb0JBLFFBQVEsQ0FBNUIsRUFBK0JBLE9BQS9CLEVBQXdDO0FBQ3RDLFVBQU1DLG1CQUFtQkQsS0FBekI7QUFBQSxVQUNNRSxvQkFBb0IsQ0FBQ0YsUUFBUSxDQUFULElBQWMsQ0FEeEM7QUFBQSxVQUVNRyxtQkFBbUIsQ0FBQ0gsUUFBUSxDQUFULElBQWMsQ0FGdkM7QUFBQSxVQUdNSSxzQkFBc0JMLGdCQUFnQkUsZ0JBQWhCLENBSDVCO0FBQUEsVUFJTUksdUJBQXVCTixnQkFBZ0JHLGlCQUFoQixDQUo3QjtBQUFBLFVBS01JLHNCQUFzQlAsZ0JBQWdCSSxnQkFBaEIsQ0FMNUI7QUFBQSxVQU1NSSxjQUFjQyxTQUFTSCxvQkFBVCxFQUErQkQsbUJBQS9CLENBTnBCO0FBQUEsVUFNMEU7QUFDcEVLLHFCQUFlRCxTQUFTRixtQkFBVCxFQUE4QkYsbUJBQTlCLENBUHJCO0FBQUEsVUFPMEU7QUFDcEVNLDJCQUFxQkMsTUFBTUosV0FBTixFQUFtQkUsWUFBbkIsQ0FSM0I7O0FBVUFkLDBCQUFvQmlCLElBQXBCLENBQXlCRixrQkFBekI7QUFDRDtBQUNGLEdBaEJEOztBQWtCQSxTQUFPbEIsUUFBUUcsbUJBQVIsQ0FBUDtBQUNEOztBQUVEa0IsT0FBT0MsT0FBUCxHQUFpQjtBQUNmckIsNkJBQTJCQTtBQURaLENBQWpCOztBQUlBLFNBQVNlLFFBQVQsQ0FBa0JPLElBQWxCLEVBQXdCQyxJQUF4QixFQUE4QjtBQUM1QixNQUFNQyxNQUFNLEVBQVo7O0FBRUE3QixPQUFLb0IsUUFBTCxDQUFjUyxHQUFkLEVBQW1CRixJQUFuQixFQUF5QkMsSUFBekI7O0FBRUEsU0FBT0MsR0FBUDtBQUNEOztBQUVELFNBQVNOLEtBQVQsQ0FBZUksSUFBZixFQUFxQkMsSUFBckIsRUFBMkI7QUFDekIsTUFBTUMsTUFBTSxFQUFaOztBQUVBN0IsT0FBS3VCLEtBQUwsQ0FBV00sR0FBWCxFQUFnQkYsSUFBaEIsRUFBc0JDLElBQXRCOztBQUVBLFNBQU9DLEdBQVA7QUFDRCIsImZpbGUiOiJub3JtYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHZlYzMgPSByZXF1aXJlKCdnbC12ZWMzJyk7ICAvLy9cblxuY29uc3QgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKTtcblxuY29uc3QgeyBkaWNlLCBmbGF0dGVuIH0gPSBhcnJheVV0aWxpdGllcztcblxuZnVuY3Rpb24gY2FsY3VsYXRlVmVydGV4Tm9ybWFsRGF0YShpbml0aWFsVmVydGV4UG9zaXRpb25EYXRhKSB7XG4gIGNvbnN0IHZlcnRleE5vcm1hbFZlY3RvcnMgPSBbXSxcbiAgICAgICAgZmFjZXMgPSBkaWNlKGluaXRpYWxWZXJ0ZXhQb3NpdGlvbkRhdGEsIDE2KTtcblxuICBmYWNlcy5mb3JFYWNoKGZ1bmN0aW9uKGZhY2UpIHtcbiAgICBjb25zdCB2ZXJ0ZXhQb3NpdGlvbnMgPSBkaWNlKGZhY2UsIDQpO1xuXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDQ7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IGZpcnN0VmVydGV4SW5kZXggPSBpbmRleCxcbiAgICAgICAgICAgIHNlY29uZFZlcnRleEluZGV4ID0gKGluZGV4ICsgMSkgJSA0LFxuICAgICAgICAgICAgdGhpcmRWZXJ0ZXhJbmRleCA9IChpbmRleCArIDMpICUgNCxcbiAgICAgICAgICAgIGZpcnN0VmVydGV4UG9zaXRpb24gPSB2ZXJ0ZXhQb3NpdGlvbnNbZmlyc3RWZXJ0ZXhJbmRleF0sXG4gICAgICAgICAgICBzZWNvbmRWZXJ0ZXhQb3NpdGlvbiA9IHZlcnRleFBvc2l0aW9uc1tzZWNvbmRWZXJ0ZXhJbmRleF0sXG4gICAgICAgICAgICB0aGlyZFZlcnRleFBvc2l0aW9uID0gdmVydGV4UG9zaXRpb25zW3RoaXJkVmVydGV4SW5kZXhdLFxuICAgICAgICAgICAgZmlyc3RWZWN0b3IgPSBzdWJ0cmFjdChzZWNvbmRWZXJ0ZXhQb3NpdGlvbiwgZmlyc3RWZXJ0ZXhQb3NpdGlvbiksICAvLy9cbiAgICAgICAgICAgIHNlY29uZFZlY3RvciA9IHN1YnRyYWN0KHRoaXJkVmVydGV4UG9zaXRpb24sIGZpcnN0VmVydGV4UG9zaXRpb24pLCAgLy8vXG4gICAgICAgICAgICB2ZXJ0ZXhOb3JtYWxWZWN0b3IgPSBjcm9zcyhmaXJzdFZlY3Rvciwgc2Vjb25kVmVjdG9yKTtcblxuICAgICAgdmVydGV4Tm9ybWFsVmVjdG9ycy5wdXNoKHZlcnRleE5vcm1hbFZlY3Rvcik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZmxhdHRlbih2ZXJ0ZXhOb3JtYWxWZWN0b3JzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNhbGN1bGF0ZVZlcnRleE5vcm1hbERhdGE6IGNhbGN1bGF0ZVZlcnRleE5vcm1hbERhdGFcbn07XG5cbmZ1bmN0aW9uIHN1YnRyYWN0KHZlYzEsIHZlYzIpIHtcbiAgY29uc3QgdmVjID0gW107XG5cbiAgdmVjMy5zdWJ0cmFjdCh2ZWMsIHZlYzEsIHZlYzIpO1xuXG4gIHJldHVybiB2ZWM7XG59XG5cbmZ1bmN0aW9uIGNyb3NzKHZlYzEsIHZlYzIpIHtcbiAgY29uc3QgdmVjID0gW107XG5cbiAgdmVjMy5jcm9zcyh2ZWMsIHZlYzEsIHZlYzIpO1xuXG4gIHJldHVybiB2ZWM7XG59XG4iXX0=