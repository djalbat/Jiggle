'use strict';

function rotateVertices(vertices, rotationQuaternion) {
  vertices = vertices.map(function (vertex) {
    vertex = rotateVertex(vertex, rotationQuaternion);

    return vertex;
  });

  return vertices;
}

function transformVertices(vertices, transforms) {
  vertices = vertices.map(function (vertex) {
    vertex = transformVertex(vertex, transforms);

    return vertex;
  });

  return vertices;
}

function rotateVerticesAboutZAxis(vertices, rotationAboutZAxisMatrix) {
  vertices = vertices.map(function (vertex) {
    vertex = rotateVertexAboutZAxis(vertex, rotationAboutZAxisMatrix);

    return vertex;
  });

  return vertices;
}

function verticesFromVertexCoordinatesAndIndexes(vertexCoordinates, indexes, Vertex) {
  ///
  var vertices = indexes.map(function (index) {
    var coordinates = vertexCoordinates[index],
        ///
    vertex = Vertex.fromCoordinates(coordinates);

    return vertex;
  });

  return vertices;
}

module.exports = module.exports = {
  rotateVertices: rotateVertices,
  transformVertices: transformVertices,
  rotateVerticesAboutZAxis: rotateVerticesAboutZAxis,
  verticesFromVertexCoordinatesAndIndexes: verticesFromVertexCoordinatesAndIndexes
};

function rotateVertex(vertex, rotationQuaternion) {
  vertex = vertex.clone(); ///

  vertex.rotate(rotationQuaternion);

  return vertex;
}

function transformVertex(vertex, transforms) {
  vertex = vertex.clone(); ///

  transforms.forEach(function (transform) {
    vertex.applyTransform(transform);
  });

  return vertex;
}

function rotateVertexAboutZAxis(vertex, rotationAboutZAxisMatrix) {
  vertex = vertex.clone(); ///

  vertex.rotateAboutZAxis(rotationAboutZAxisMatrix);

  return vertex;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdmVydGljZXMuanMiXSwibmFtZXMiOlsicm90YXRlVmVydGljZXMiLCJ2ZXJ0aWNlcyIsInJvdGF0aW9uUXVhdGVybmlvbiIsIm1hcCIsInZlcnRleCIsInJvdGF0ZVZlcnRleCIsInRyYW5zZm9ybVZlcnRpY2VzIiwidHJhbnNmb3JtcyIsInRyYW5zZm9ybVZlcnRleCIsInJvdGF0ZVZlcnRpY2VzQWJvdXRaQXhpcyIsInJvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCIsInJvdGF0ZVZlcnRleEFib3V0WkF4aXMiLCJ2ZXJ0aWNlc0Zyb21WZXJ0ZXhDb29yZGluYXRlc0FuZEluZGV4ZXMiLCJ2ZXJ0ZXhDb29yZGluYXRlcyIsImluZGV4ZXMiLCJWZXJ0ZXgiLCJpbmRleCIsImNvb3JkaW5hdGVzIiwiZnJvbUNvb3JkaW5hdGVzIiwibW9kdWxlIiwiZXhwb3J0cyIsImNsb25lIiwicm90YXRlIiwiZm9yRWFjaCIsInRyYW5zZm9ybSIsImFwcGx5VHJhbnNmb3JtIiwicm90YXRlQWJvdXRaQXhpcyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsY0FBVCxDQUF3QkMsUUFBeEIsRUFBa0NDLGtCQUFsQyxFQUFzRDtBQUNwREQsYUFBV0EsU0FBU0UsR0FBVCxDQUFhLFVBQVNDLE1BQVQsRUFBaUI7QUFDdkNBLGFBQVNDLGFBQWFELE1BQWIsRUFBcUJGLGtCQUFyQixDQUFUOztBQUVBLFdBQU9FLE1BQVA7QUFDRCxHQUpVLENBQVg7O0FBTUEsU0FBT0gsUUFBUDtBQUNEOztBQUVELFNBQVNLLGlCQUFULENBQTJCTCxRQUEzQixFQUFxQ00sVUFBckMsRUFBaUQ7QUFDL0NOLGFBQVdBLFNBQVNFLEdBQVQsQ0FBYSxVQUFTQyxNQUFULEVBQWlCO0FBQ3ZDQSxhQUFTSSxnQkFBZ0JKLE1BQWhCLEVBQXdCRyxVQUF4QixDQUFUOztBQUVBLFdBQU9ILE1BQVA7QUFDRCxHQUpVLENBQVg7O0FBTUEsU0FBT0gsUUFBUDtBQUNEOztBQUVELFNBQVNRLHdCQUFULENBQWtDUixRQUFsQyxFQUE0Q1Msd0JBQTVDLEVBQXNFO0FBQ3BFVCxhQUFXQSxTQUFTRSxHQUFULENBQWEsVUFBU0MsTUFBVCxFQUFpQjtBQUN2Q0EsYUFBU08sdUJBQXVCUCxNQUF2QixFQUErQk0sd0JBQS9CLENBQVQ7O0FBRUEsV0FBT04sTUFBUDtBQUNELEdBSlUsQ0FBWDs7QUFNQSxTQUFPSCxRQUFQO0FBQ0Q7O0FBRUQsU0FBU1csdUNBQVQsQ0FBaURDLGlCQUFqRCxFQUFvRUMsT0FBcEUsRUFBNkVDLE1BQTdFLEVBQXFGO0FBQUc7QUFDdEYsTUFBTWQsV0FBV2EsUUFBUVgsR0FBUixDQUFZLFVBQVNhLEtBQVQsRUFBZ0I7QUFDM0MsUUFBTUMsY0FBY0osa0JBQWtCRyxLQUFsQixDQUFwQjtBQUFBLFFBQThDO0FBQ3hDWixhQUFTVyxPQUFPRyxlQUFQLENBQXVCRCxXQUF2QixDQURmOztBQUdBLFdBQU9iLE1BQVA7QUFDRCxHQUxnQixDQUFqQjs7QUFPQSxTQUFPSCxRQUFQO0FBQ0Q7O0FBRURrQixPQUFPQyxPQUFQLEdBQWlCRCxPQUFPQyxPQUFQLEdBQWlCO0FBQ2hDcEIsa0JBQWdCQSxjQURnQjtBQUVoQ00scUJBQW1CQSxpQkFGYTtBQUdoQ0csNEJBQTBCQSx3QkFITTtBQUloQ0csMkNBQXlDQTtBQUpULENBQWxDOztBQU9BLFNBQVNQLFlBQVQsQ0FBc0JELE1BQXRCLEVBQThCRixrQkFBOUIsRUFBa0Q7QUFDaERFLFdBQVNBLE9BQU9pQixLQUFQLEVBQVQsQ0FEZ0QsQ0FDdEI7O0FBRTFCakIsU0FBT2tCLE1BQVAsQ0FBY3BCLGtCQUFkOztBQUVBLFNBQU9FLE1BQVA7QUFDRDs7QUFFRCxTQUFTSSxlQUFULENBQXlCSixNQUF6QixFQUFpQ0csVUFBakMsRUFBNkM7QUFDM0NILFdBQVNBLE9BQU9pQixLQUFQLEVBQVQsQ0FEMkMsQ0FDakI7O0FBRTFCZCxhQUFXZ0IsT0FBWCxDQUFtQixVQUFTQyxTQUFULEVBQW9CO0FBQ3JDcEIsV0FBT3FCLGNBQVAsQ0FBc0JELFNBQXRCO0FBQ0QsR0FGRDs7QUFJQSxTQUFPcEIsTUFBUDtBQUNEOztBQUVELFNBQVNPLHNCQUFULENBQWdDUCxNQUFoQyxFQUF3Q00sd0JBQXhDLEVBQWtFO0FBQ2hFTixXQUFTQSxPQUFPaUIsS0FBUCxFQUFULENBRGdFLENBQ3RDOztBQUUxQmpCLFNBQU9zQixnQkFBUCxDQUF3QmhCLHdCQUF4Qjs7QUFFQSxTQUFPTixNQUFQO0FBQ0QiLCJmaWxlIjoidmVydGljZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHJvdGF0ZVZlcnRpY2VzKHZlcnRpY2VzLCByb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgdmVydGljZXMgPSB2ZXJ0aWNlcy5tYXAoZnVuY3Rpb24odmVydGV4KSB7XG4gICAgdmVydGV4ID0gcm90YXRlVmVydGV4KHZlcnRleCwgcm90YXRpb25RdWF0ZXJuaW9uKTtcblxuICAgIHJldHVybiB2ZXJ0ZXg7XG4gIH0pO1xuXG4gIHJldHVybiB2ZXJ0aWNlcztcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtVmVydGljZXModmVydGljZXMsIHRyYW5zZm9ybXMpIHtcbiAgdmVydGljZXMgPSB2ZXJ0aWNlcy5tYXAoZnVuY3Rpb24odmVydGV4KSB7XG4gICAgdmVydGV4ID0gdHJhbnNmb3JtVmVydGV4KHZlcnRleCwgdHJhbnNmb3Jtcyk7XG5cbiAgICByZXR1cm4gdmVydGV4O1xuICB9KTtcblxuICByZXR1cm4gdmVydGljZXM7XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZVZlcnRpY2VzQWJvdXRaQXhpcyh2ZXJ0aWNlcywgcm90YXRpb25BYm91dFpBeGlzTWF0cml4KSB7XG4gIHZlcnRpY2VzID0gdmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgIHZlcnRleCA9IHJvdGF0ZVZlcnRleEFib3V0WkF4aXModmVydGV4LCByb3RhdGlvbkFib3V0WkF4aXNNYXRyaXgpO1xuXG4gICAgcmV0dXJuIHZlcnRleDtcbiAgfSk7XG5cbiAgcmV0dXJuIHZlcnRpY2VzO1xufVxuXG5mdW5jdGlvbiB2ZXJ0aWNlc0Zyb21WZXJ0ZXhDb29yZGluYXRlc0FuZEluZGV4ZXModmVydGV4Q29vcmRpbmF0ZXMsIGluZGV4ZXMsIFZlcnRleCkgeyAgLy8vXG4gIGNvbnN0IHZlcnRpY2VzID0gaW5kZXhlcy5tYXAoZnVuY3Rpb24oaW5kZXgpIHtcbiAgICBjb25zdCBjb29yZGluYXRlcyA9IHZlcnRleENvb3JkaW5hdGVzW2luZGV4XSwgLy8vXG4gICAgICAgICAgdmVydGV4ID0gVmVydGV4LmZyb21Db29yZGluYXRlcyhjb29yZGluYXRlcyk7XG5cbiAgICByZXR1cm4gdmVydGV4O1xuICB9KTtcblxuICByZXR1cm4gdmVydGljZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJvdGF0ZVZlcnRpY2VzOiByb3RhdGVWZXJ0aWNlcyxcbiAgdHJhbnNmb3JtVmVydGljZXM6IHRyYW5zZm9ybVZlcnRpY2VzLFxuICByb3RhdGVWZXJ0aWNlc0Fib3V0WkF4aXM6IHJvdGF0ZVZlcnRpY2VzQWJvdXRaQXhpcyxcbiAgdmVydGljZXNGcm9tVmVydGV4Q29vcmRpbmF0ZXNBbmRJbmRleGVzOiB2ZXJ0aWNlc0Zyb21WZXJ0ZXhDb29yZGluYXRlc0FuZEluZGV4ZXNcbn07XG5cbmZ1bmN0aW9uIHJvdGF0ZVZlcnRleCh2ZXJ0ZXgsIHJvdGF0aW9uUXVhdGVybmlvbikge1xuICB2ZXJ0ZXggPSB2ZXJ0ZXguY2xvbmUoKTsgIC8vL1xuXG4gIHZlcnRleC5yb3RhdGUocm90YXRpb25RdWF0ZXJuaW9uKTtcblxuICByZXR1cm4gdmVydGV4O1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1WZXJ0ZXgodmVydGV4LCB0cmFuc2Zvcm1zKSB7XG4gIHZlcnRleCA9IHZlcnRleC5jbG9uZSgpOyAgLy8vXG5cbiAgdHJhbnNmb3Jtcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zZm9ybSkge1xuICAgIHZlcnRleC5hcHBseVRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuICB9KTtcblxuICByZXR1cm4gdmVydGV4O1xufVxuXG5mdW5jdGlvbiByb3RhdGVWZXJ0ZXhBYm91dFpBeGlzKHZlcnRleCwgcm90YXRpb25BYm91dFpBeGlzTWF0cml4KSB7XG4gIHZlcnRleCA9IHZlcnRleC5jbG9uZSgpOyAgLy8vXG5cbiAgdmVydGV4LnJvdGF0ZUFib3V0WkF4aXMocm90YXRpb25BYm91dFpBeGlzTWF0cml4KTtcblxuICByZXR1cm4gdmVydGV4O1xufVxuIl19