'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var vectorUtilities = require('../utilities/vector'),
    arrayUtilities = require('../utilities/array'),
    quaternionUtilities = require('../utilities/quaternion');

var subtract3 = vectorUtilities.subtract3,
    cross3 = vectorUtilities.cross3,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    calculateInverseRotationQuaternion = quaternionUtilities.calculateInverseRotationQuaternion,
    rotateImaginaryQuaternion = quaternionUtilities.rotateImaginaryQuaternion;


function calculateNormal(vertices) {
  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      firstEdge = subtract3(secondVertex, firstVertex),
      secondEdge = subtract3(thirdVertex, firstVertex),
      normal = cross3(firstEdge, secondEdge);

  return normal;
}

function rotateVertices(vertices, rotationQuaternion) {
  var inverseRotationQuaternion = calculateInverseRotationQuaternion(rotationQuaternion);

  vertices = vertices.map(function (vertex) {
    vertex = rotateVertex(vertex, rotationQuaternion, inverseRotationQuaternion);

    return vertex;
  });

  return vertices;
}

module.exports = {
  calculateNormal: calculateNormal,
  rotateVertices: rotateVertices
};

function rotateVertex(vertex, rotationQuaternion, inverseRotationQuaternion) {
  var imaginaryQuaternion = [0].concat(_toConsumableArray(vertex)),
      ///
  rotatedImaginaryQuaternion = rotateImaginaryQuaternion(imaginaryQuaternion, rotationQuaternion, inverseRotationQuaternion);

  vertex = rotatedImaginaryQuaternion.slice(1); ///

  return vertex;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdmVydGljZXMuanMiXSwibmFtZXMiOlsidmVjdG9yVXRpbGl0aWVzIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwicXVhdGVybmlvblV0aWxpdGllcyIsInN1YnRyYWN0MyIsImNyb3NzMyIsImZpcnN0Iiwic2Vjb25kIiwidGhpcmQiLCJjYWxjdWxhdGVJbnZlcnNlUm90YXRpb25RdWF0ZXJuaW9uIiwicm90YXRlSW1hZ2luYXJ5UXVhdGVybmlvbiIsImNhbGN1bGF0ZU5vcm1hbCIsInZlcnRpY2VzIiwiZmlyc3RWZXJ0ZXgiLCJzZWNvbmRWZXJ0ZXgiLCJ0aGlyZFZlcnRleCIsImZpcnN0RWRnZSIsInNlY29uZEVkZ2UiLCJub3JtYWwiLCJyb3RhdGVWZXJ0aWNlcyIsInJvdGF0aW9uUXVhdGVybmlvbiIsImludmVyc2VSb3RhdGlvblF1YXRlcm5pb24iLCJtYXAiLCJ2ZXJ0ZXgiLCJyb3RhdGVWZXJ0ZXgiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1hZ2luYXJ5UXVhdGVybmlvbiIsInJvdGF0ZWRJbWFnaW5hcnlRdWF0ZXJuaW9uIiwic2xpY2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsSUFBTUEsa0JBQWtCQyxRQUFRLHFCQUFSLENBQXhCO0FBQUEsSUFDTUMsaUJBQWlCRCxRQUFRLG9CQUFSLENBRHZCO0FBQUEsSUFFTUUsc0JBQXNCRixRQUFRLHlCQUFSLENBRjVCOztJQUlRRyxTLEdBQXNCSixlLENBQXRCSSxTO0lBQVdDLE0sR0FBV0wsZSxDQUFYSyxNO0lBQ1hDLEssR0FBeUJKLGMsQ0FBekJJLEs7SUFBT0MsTSxHQUFrQkwsYyxDQUFsQkssTTtJQUFRQyxLLEdBQVVOLGMsQ0FBVk0sSztJQUNmQyxrQyxHQUFrRU4sbUIsQ0FBbEVNLGtDO0lBQW9DQyx5QixHQUE4QlAsbUIsQ0FBOUJPLHlCOzs7QUFFNUMsU0FBU0MsZUFBVCxDQUF5QkMsUUFBekIsRUFBbUM7QUFDakMsTUFBTUMsY0FBY1AsTUFBTU0sUUFBTixDQUFwQjtBQUFBLE1BQ01FLGVBQWVQLE9BQU9LLFFBQVAsQ0FEckI7QUFBQSxNQUVNRyxjQUFjUCxNQUFNSSxRQUFOLENBRnBCO0FBQUEsTUFHTUksWUFBWVosVUFBVVUsWUFBVixFQUF3QkQsV0FBeEIsQ0FIbEI7QUFBQSxNQUlNSSxhQUFhYixVQUFVVyxXQUFWLEVBQXVCRixXQUF2QixDQUpuQjtBQUFBLE1BS01LLFNBQVNiLE9BQU9XLFNBQVAsRUFBa0JDLFVBQWxCLENBTGY7O0FBT0EsU0FBT0MsTUFBUDtBQUNEOztBQUVELFNBQVNDLGNBQVQsQ0FBd0JQLFFBQXhCLEVBQWtDUSxrQkFBbEMsRUFBc0Q7QUFDcEQsTUFBTUMsNEJBQTRCWixtQ0FBbUNXLGtCQUFuQyxDQUFsQzs7QUFFQVIsYUFBV0EsU0FBU1UsR0FBVCxDQUFhLFVBQVNDLE1BQVQsRUFBaUI7QUFDdkNBLGFBQVNDLGFBQWFELE1BQWIsRUFBcUJILGtCQUFyQixFQUF5Q0MseUJBQXpDLENBQVQ7O0FBRUEsV0FBT0UsTUFBUDtBQUNELEdBSlUsQ0FBWDs7QUFNQSxTQUFPWCxRQUFQO0FBQ0Q7O0FBRURhLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmYsbUJBQWlCQSxlQURGO0FBRWZRLGtCQUFnQkE7QUFGRCxDQUFqQjs7QUFLQSxTQUFTSyxZQUFULENBQXNCRCxNQUF0QixFQUE4Qkgsa0JBQTlCLEVBQWtEQyx5QkFBbEQsRUFBNkU7QUFDM0UsTUFBTU0sdUJBQXVCLENBQXZCLDRCQUE2QkosTUFBN0IsRUFBTjtBQUFBLE1BQTRDO0FBQ3RDSywrQkFBNkJsQiwwQkFBMEJpQixtQkFBMUIsRUFBK0NQLGtCQUEvQyxFQUFtRUMseUJBQW5FLENBRG5DOztBQUdBRSxXQUFTSywyQkFBMkJDLEtBQTNCLENBQWlDLENBQWpDLENBQVQsQ0FKMkUsQ0FJN0I7O0FBRTlDLFNBQU9OLE1BQVA7QUFDRCIsImZpbGUiOiJ2ZXJ0aWNlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdmVjdG9yVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3ZlY3RvcicpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIHF1YXRlcm5pb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvcXVhdGVybmlvbicpO1xuXG5jb25zdCB7IHN1YnRyYWN0MywgY3Jvc3MzIH0gPSB2ZWN0b3JVdGlsaXRpZXMsXG4gICAgICB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgY2FsY3VsYXRlSW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbiwgcm90YXRlSW1hZ2luYXJ5UXVhdGVybmlvbiB9ID0gcXVhdGVybmlvblV0aWxpdGllcztcblxuZnVuY3Rpb24gY2FsY3VsYXRlTm9ybWFsKHZlcnRpY2VzKSB7XG4gIGNvbnN0IGZpcnN0VmVydGV4ID0gZmlyc3QodmVydGljZXMpLFxuICAgICAgICBzZWNvbmRWZXJ0ZXggPSBzZWNvbmQodmVydGljZXMpLFxuICAgICAgICB0aGlyZFZlcnRleCA9IHRoaXJkKHZlcnRpY2VzKSxcbiAgICAgICAgZmlyc3RFZGdlID0gc3VidHJhY3QzKHNlY29uZFZlcnRleCwgZmlyc3RWZXJ0ZXgpLFxuICAgICAgICBzZWNvbmRFZGdlID0gc3VidHJhY3QzKHRoaXJkVmVydGV4LCBmaXJzdFZlcnRleCksXG4gICAgICAgIG5vcm1hbCA9IGNyb3NzMyhmaXJzdEVkZ2UsIHNlY29uZEVkZ2UpO1xuXG4gIHJldHVybiBub3JtYWw7XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZVZlcnRpY2VzKHZlcnRpY2VzLCByb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgY29uc3QgaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbiA9IGNhbGN1bGF0ZUludmVyc2VSb3RhdGlvblF1YXRlcm5pb24ocm90YXRpb25RdWF0ZXJuaW9uKTtcblxuICB2ZXJ0aWNlcyA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICB2ZXJ0ZXggPSByb3RhdGVWZXJ0ZXgodmVydGV4LCByb3RhdGlvblF1YXRlcm5pb24sIGludmVyc2VSb3RhdGlvblF1YXRlcm5pb24pO1xuXG4gICAgcmV0dXJuIHZlcnRleDtcbiAgfSk7XG4gIFxuICByZXR1cm4gdmVydGljZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjYWxjdWxhdGVOb3JtYWw6IGNhbGN1bGF0ZU5vcm1hbCxcbiAgcm90YXRlVmVydGljZXM6IHJvdGF0ZVZlcnRpY2VzXG59O1xuXG5mdW5jdGlvbiByb3RhdGVWZXJ0ZXgodmVydGV4LCByb3RhdGlvblF1YXRlcm5pb24sIGludmVyc2VSb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgY29uc3QgaW1hZ2luYXJ5UXVhdGVybmlvbiA9IFswLCAuLi52ZXJ0ZXhdLCAvLy9cbiAgICAgICAgcm90YXRlZEltYWdpbmFyeVF1YXRlcm5pb24gPSByb3RhdGVJbWFnaW5hcnlRdWF0ZXJuaW9uKGltYWdpbmFyeVF1YXRlcm5pb24sIHJvdGF0aW9uUXVhdGVybmlvbiwgaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbik7XG5cbiAgdmVydGV4ID0gcm90YXRlZEltYWdpbmFyeVF1YXRlcm5pb24uc2xpY2UoMSk7IC8vL1xuXG4gIHJldHVybiB2ZXJ0ZXg7XG59XG4iXX0=