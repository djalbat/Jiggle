'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var vec3 = require('../maths/vec3'),
    arrayUtilities = require('../utilities/array'),
    quaternionUtilities = require('../utilities/quaternion');

var add = vec3.add,
    subtract = vec3.subtract,
    cross = vec3.cross,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    calculateInverseRotationQuaternion = quaternionUtilities.calculateInverseRotationQuaternion,
    rotateImaginaryQuaternion = quaternionUtilities.rotateImaginaryQuaternion;


function calculateNormal(vertices) {
  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      firstEdge = subtract(secondVertex, firstVertex),
      secondEdge = subtract(thirdVertex, firstVertex),
      normal = cross(firstEdge, secondEdge);

  return normal;
}

function translateVertices(vertices, translation) {
  vertices = vertices.map(function (vertex) {
    vertex = translateVertex(vertex, translation);

    return vertex;
  });

  return vertices;
}

function rotateVertices(vertices, rotationQuaternion) {
  var inverseRotationQuaternion = calculateInverseRotationQuaternion(rotationQuaternion);

  vertices = vertices.map(function (vertex) {
    vertex = rotateVertex(vertex, rotationQuaternion, inverseRotationQuaternion);

    return vertex;
  });

  return vertices;
}

module.exports = {
  calculateNormal: calculateNormal,
  rotateVertices: rotateVertices,
  translateVertices: translateVertices
};

function translateVertex(vertex, translation) {
  vertex = add(vertex, translation);

  return vertex;
}

function rotateVertex(vertex, rotationQuaternion, inverseRotationQuaternion) {
  var imaginaryQuaternion = [0].concat(_toConsumableArray(vertex)),
      ///
  rotatedImaginaryQuaternion = rotateImaginaryQuaternion(imaginaryQuaternion, rotationQuaternion, inverseRotationQuaternion);

  vertex = rotatedImaginaryQuaternion.slice(1); ///

  return vertex;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdmVydGljZXMuanMiXSwibmFtZXMiOlsidmVjMyIsInJlcXVpcmUiLCJhcnJheVV0aWxpdGllcyIsInF1YXRlcm5pb25VdGlsaXRpZXMiLCJhZGQiLCJzdWJ0cmFjdCIsImNyb3NzIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsImNhbGN1bGF0ZUludmVyc2VSb3RhdGlvblF1YXRlcm5pb24iLCJyb3RhdGVJbWFnaW5hcnlRdWF0ZXJuaW9uIiwiY2FsY3VsYXRlTm9ybWFsIiwidmVydGljZXMiLCJmaXJzdFZlcnRleCIsInNlY29uZFZlcnRleCIsInRoaXJkVmVydGV4IiwiZmlyc3RFZGdlIiwic2Vjb25kRWRnZSIsIm5vcm1hbCIsInRyYW5zbGF0ZVZlcnRpY2VzIiwidHJhbnNsYXRpb24iLCJtYXAiLCJ2ZXJ0ZXgiLCJ0cmFuc2xhdGVWZXJ0ZXgiLCJyb3RhdGVWZXJ0aWNlcyIsInJvdGF0aW9uUXVhdGVybmlvbiIsImludmVyc2VSb3RhdGlvblF1YXRlcm5pb24iLCJyb3RhdGVWZXJ0ZXgiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1hZ2luYXJ5UXVhdGVybmlvbiIsInJvdGF0ZWRJbWFnaW5hcnlRdWF0ZXJuaW9uIiwic2xpY2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxlQUFSLENBQWI7QUFBQSxJQUNNQyxpQkFBaUJELFFBQVEsb0JBQVIsQ0FEdkI7QUFBQSxJQUVNRSxzQkFBc0JGLFFBQVEseUJBQVIsQ0FGNUI7O0lBSVFHLEcsR0FBeUJKLEksQ0FBekJJLEc7SUFBS0MsUSxHQUFvQkwsSSxDQUFwQkssUTtJQUFVQyxLLEdBQVVOLEksQ0FBVk0sSztJQUNmQyxLLEdBQXlCTCxjLENBQXpCSyxLO0lBQU9DLE0sR0FBa0JOLGMsQ0FBbEJNLE07SUFBUUMsSyxHQUFVUCxjLENBQVZPLEs7SUFDZkMsa0MsR0FBa0VQLG1CLENBQWxFTyxrQztJQUFvQ0MseUIsR0FBOEJSLG1CLENBQTlCUSx5Qjs7O0FBRTVDLFNBQVNDLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DO0FBQ2pDLE1BQU1DLGNBQWNQLE1BQU1NLFFBQU4sQ0FBcEI7QUFBQSxNQUNNRSxlQUFlUCxPQUFPSyxRQUFQLENBRHJCO0FBQUEsTUFFTUcsY0FBY1AsTUFBTUksUUFBTixDQUZwQjtBQUFBLE1BR01JLFlBQVlaLFNBQVNVLFlBQVQsRUFBdUJELFdBQXZCLENBSGxCO0FBQUEsTUFJTUksYUFBYWIsU0FBU1csV0FBVCxFQUFzQkYsV0FBdEIsQ0FKbkI7QUFBQSxNQUtNSyxTQUFTYixNQUFNVyxTQUFOLEVBQWlCQyxVQUFqQixDQUxmOztBQU9BLFNBQU9DLE1BQVA7QUFDRDs7QUFFRCxTQUFTQyxpQkFBVCxDQUEyQlAsUUFBM0IsRUFBcUNRLFdBQXJDLEVBQWtEO0FBQ2hEUixhQUFXQSxTQUFTUyxHQUFULENBQWEsVUFBU0MsTUFBVCxFQUFpQjtBQUN2Q0EsYUFBU0MsZ0JBQWdCRCxNQUFoQixFQUF3QkYsV0FBeEIsQ0FBVDs7QUFFQSxXQUFPRSxNQUFQO0FBQ0QsR0FKVSxDQUFYOztBQU1BLFNBQU9WLFFBQVA7QUFDRDs7QUFFRCxTQUFTWSxjQUFULENBQXdCWixRQUF4QixFQUFrQ2Esa0JBQWxDLEVBQXNEO0FBQ3BELE1BQU1DLDRCQUE0QmpCLG1DQUFtQ2dCLGtCQUFuQyxDQUFsQzs7QUFFQWIsYUFBV0EsU0FBU1MsR0FBVCxDQUFhLFVBQVNDLE1BQVQsRUFBaUI7QUFDdkNBLGFBQVNLLGFBQWFMLE1BQWIsRUFBcUJHLGtCQUFyQixFQUF5Q0MseUJBQXpDLENBQVQ7O0FBRUEsV0FBT0osTUFBUDtBQUNELEdBSlUsQ0FBWDs7QUFNQSxTQUFPVixRQUFQO0FBQ0Q7O0FBRURnQixPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZsQixtQkFBaUJBLGVBREY7QUFFZmEsa0JBQWdCQSxjQUZEO0FBR2ZMLHFCQUFtQkE7QUFISixDQUFqQjs7QUFNQSxTQUFTSSxlQUFULENBQXlCRCxNQUF6QixFQUFpQ0YsV0FBakMsRUFBOEM7QUFDNUNFLFdBQVNuQixJQUFJbUIsTUFBSixFQUFZRixXQUFaLENBQVQ7O0FBRUEsU0FBT0UsTUFBUDtBQUNEOztBQUVELFNBQVNLLFlBQVQsQ0FBc0JMLE1BQXRCLEVBQThCRyxrQkFBOUIsRUFBa0RDLHlCQUFsRCxFQUE2RTtBQUMzRSxNQUFNSSx1QkFBdUIsQ0FBdkIsNEJBQTZCUixNQUE3QixFQUFOO0FBQUEsTUFBNEM7QUFDdENTLCtCQUE2QnJCLDBCQUEwQm9CLG1CQUExQixFQUErQ0wsa0JBQS9DLEVBQW1FQyx5QkFBbkUsQ0FEbkM7O0FBR0FKLFdBQVNTLDJCQUEyQkMsS0FBM0IsQ0FBaUMsQ0FBakMsQ0FBVCxDQUoyRSxDQUk3Qjs7QUFFOUMsU0FBT1YsTUFBUDtBQUNEIiwiZmlsZSI6InZlcnRpY2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB2ZWMzID0gcmVxdWlyZSgnLi4vbWF0aHMvdmVjMycpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIHF1YXRlcm5pb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvcXVhdGVybmlvbicpO1xuXG5jb25zdCB7IGFkZCwgc3VidHJhY3QsIGNyb3NzIH0gPSB2ZWMzLFxuICAgICAgeyBmaXJzdCwgc2Vjb25kLCB0aGlyZCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGNhbGN1bGF0ZUludmVyc2VSb3RhdGlvblF1YXRlcm5pb24sIHJvdGF0ZUltYWdpbmFyeVF1YXRlcm5pb24gfSA9IHF1YXRlcm5pb25VdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vcm1hbCh2ZXJ0aWNlcykge1xuICBjb25zdCBmaXJzdFZlcnRleCA9IGZpcnN0KHZlcnRpY2VzKSxcbiAgICAgICAgc2Vjb25kVmVydGV4ID0gc2Vjb25kKHZlcnRpY2VzKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh2ZXJ0aWNlcyksXG4gICAgICAgIGZpcnN0RWRnZSA9IHN1YnRyYWN0KHNlY29uZFZlcnRleCwgZmlyc3RWZXJ0ZXgpLFxuICAgICAgICBzZWNvbmRFZGdlID0gc3VidHJhY3QodGhpcmRWZXJ0ZXgsIGZpcnN0VmVydGV4KSxcbiAgICAgICAgbm9ybWFsID0gY3Jvc3MoZmlyc3RFZGdlLCBzZWNvbmRFZGdlKTtcblxuICByZXR1cm4gbm9ybWFsO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVWZXJ0aWNlcyh2ZXJ0aWNlcywgdHJhbnNsYXRpb24pIHtcbiAgdmVydGljZXMgPSB2ZXJ0aWNlcy5tYXAoZnVuY3Rpb24odmVydGV4KSB7XG4gICAgdmVydGV4ID0gdHJhbnNsYXRlVmVydGV4KHZlcnRleCwgdHJhbnNsYXRpb24pO1xuXG4gICAgcmV0dXJuIHZlcnRleDtcbiAgfSk7XG4gIFxuICByZXR1cm4gdmVydGljZXM7XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZVZlcnRpY2VzKHZlcnRpY2VzLCByb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgY29uc3QgaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbiA9IGNhbGN1bGF0ZUludmVyc2VSb3RhdGlvblF1YXRlcm5pb24ocm90YXRpb25RdWF0ZXJuaW9uKTtcblxuICB2ZXJ0aWNlcyA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICB2ZXJ0ZXggPSByb3RhdGVWZXJ0ZXgodmVydGV4LCByb3RhdGlvblF1YXRlcm5pb24sIGludmVyc2VSb3RhdGlvblF1YXRlcm5pb24pO1xuXG4gICAgcmV0dXJuIHZlcnRleDtcbiAgfSk7XG4gIFxuICByZXR1cm4gdmVydGljZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjYWxjdWxhdGVOb3JtYWw6IGNhbGN1bGF0ZU5vcm1hbCxcbiAgcm90YXRlVmVydGljZXM6IHJvdGF0ZVZlcnRpY2VzLFxuICB0cmFuc2xhdGVWZXJ0aWNlczogdHJhbnNsYXRlVmVydGljZXNcbn07XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVZlcnRleCh2ZXJ0ZXgsIHRyYW5zbGF0aW9uKSB7XG4gIHZlcnRleCA9IGFkZCh2ZXJ0ZXgsIHRyYW5zbGF0aW9uKTtcblxuICByZXR1cm4gdmVydGV4O1xufVxuXG5mdW5jdGlvbiByb3RhdGVWZXJ0ZXgodmVydGV4LCByb3RhdGlvblF1YXRlcm5pb24sIGludmVyc2VSb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgY29uc3QgaW1hZ2luYXJ5UXVhdGVybmlvbiA9IFswLCAuLi52ZXJ0ZXhdLCAvLy9cbiAgICAgICAgcm90YXRlZEltYWdpbmFyeVF1YXRlcm5pb24gPSByb3RhdGVJbWFnaW5hcnlRdWF0ZXJuaW9uKGltYWdpbmFyeVF1YXRlcm5pb24sIHJvdGF0aW9uUXVhdGVybmlvbiwgaW52ZXJzZVJvdGF0aW9uUXVhdGVybmlvbik7XG5cbiAgdmVydGV4ID0gcm90YXRlZEltYWdpbmFyeVF1YXRlcm5pb24uc2xpY2UoMSk7IC8vL1xuXG4gIHJldHVybiB2ZXJ0ZXg7XG59XG4iXX0=