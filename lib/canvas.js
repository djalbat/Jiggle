'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mat4 = require('gl-mat4'); ///

var domUtilities = require('./utilities/dom'),
    bufferMixin = require('./mixin/buffer'),
    shaderMixin = require('./mixin/shader'),
    colourMixin = require('./mixin/colour'),
    depthMixin = require('./mixin/depth');

var domElementFromSelector = domUtilities.domElementFromSelector;


var defaultOffset = 0;

var Canvas = function () {
  function Canvas() {
    var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'canvas';

    _classCallCheck(this, Canvas);

    var domElement = domElementFromSelector(selector),
        context = domElement.getContext('webgl');

    if (!context) {
      throw new Error('Unable to initialise the context.');
    }

    this.context = context;

    this.domElement = domElement;

    this.FLOAT_TYPE = this.context.FLOAT; ///
    this.TRIANGLES_MODE = this.context.TRIANGLES; ///
    this.DEPTH_TEST_CAP = this.context.DEPTH_TEST; ///
    this.LEQUAL_FUNCTION = this.context.LEQUAL; ///
    this.STATIC_DRAW_USAGE = this.context.STATIC_DRAW; ///
    this.LINK_STATUS_PNAME = this.context.LINK_STATUS; ///
    this.VERTEX_SHADER_TYPE = this.context.VERTEX_SHADER; ///
    this.ARRAY_BUFFER_TARGET = this.context.ARRAY_BUFFER; ///
    this.UNSIGNED_SHORT_TYPE = this.context.UNSIGNED_SHORT; ///
    this.TRIANGLE_STRIP_MODE = this.context.TRIANGLE_STRIP; ///
    this.COMPILE_STATUS_PNAME = this.context.COMPILE_STATUS; ///
    this.FRAGMENT_SHADER_TYPE = this.context.FRAGMENT_SHADER; ///
    this.COLOR_BUFFER_BIT_MASK = this.context.COLOR_BUFFER_BIT; ///
    this.DEPTH_BUFFER_BIT_MASK = this.context.DEPTH_BUFFER_BIT; ///
    this.ELEMENT_ARRAY_BUFFER_TARGET = this.context.ELEMENT_ARRAY_BUFFER; ///
  }

  _createClass(Canvas, [{
    key: 'getContext',
    value: function getContext() {
      return this.context;
    }
  }, {
    key: 'getClientWidth',
    value: function getClientWidth() {
      return this.domElement.clientWidth;
    }
  }, {
    key: 'getClientHeight',
    value: function getClientHeight() {
      return this.domElement.clientHeight;
    }
  }, {
    key: 'getUniformLocation',
    value: function getUniformLocation(program, name) {
      return this.context.getUniformLocation(program, name);
    }
  }, {
    key: 'getAttributeLocation',
    value: function getAttributeLocation(program, name) {
      return this.context.getAttribLocation(program, name);
    }
  }, {
    key: 'useProgram',
    value: function useProgram(program) {
      this.context.useProgram(program);
    }
  }, {
    key: 'render',
    value: function render(shaderProgram, projection, modelView, elapsedTime) {
      var projectionMatrix = projection.getMatrix(),
          modelViewMatrix = modelView.getMatrix(),
          projectionMatrixUniformLocation = this.getUniformLocation(shaderProgram, 'uProjectionMatrix'),
          modelViewMatrixUniformLocation = this.getUniformLocation(shaderProgram, 'uModelViewMatrix');

      this.enableDepthTesting();
      this.enableDepthFunction();

      this.clearColour();
      this.clearDepth();
      this.clearColourBuffer();
      this.clearDepthBuffer();

      var rotation = elapsedTime / 1000;

      var rotatedModelViewMatrix = mat4.create();

      mat4.rotate(rotatedModelViewMatrix, modelViewMatrix, rotation, [0, 0, 1]);

      this.applyMatrix(projectionMatrixUniformLocation, projectionMatrix);
      this.applyMatrix(modelViewMatrixUniformLocation, rotatedModelViewMatrix);
    }
  }, {
    key: 'applyMatrix',
    value: function applyMatrix(uniformLocation, matrix) {
      this.context.uniformMatrix4fv(uniformLocation, false, matrix);
    }
  }, {
    key: 'draw',
    value: function draw(count) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOffset;

      // this.context.drawArrays(this.context.TRIANGLE_STRIP, offset, count);

      count = 3; ///

      var mode = this.TRIANGLES_MODE,
          type = this.UNSIGNED_SHORT_TYPE;

      this.context.drawElements(mode, count, type, offset);
    }
  }]);

  return Canvas;
}();

Object.assign(Canvas.prototype, bufferMixin);
Object.assign(Canvas.prototype, shaderMixin);
Object.assign(Canvas.prototype, colourMixin);
Object.assign(Canvas.prototype, depthMixin);

module.exports = Canvas;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9jYW52YXMuanMiXSwibmFtZXMiOlsibWF0NCIsInJlcXVpcmUiLCJkb21VdGlsaXRpZXMiLCJidWZmZXJNaXhpbiIsInNoYWRlck1peGluIiwiY29sb3VyTWl4aW4iLCJkZXB0aE1peGluIiwiZG9tRWxlbWVudEZyb21TZWxlY3RvciIsImRlZmF1bHRPZmZzZXQiLCJDYW52YXMiLCJzZWxlY3RvciIsImRvbUVsZW1lbnQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsIkVycm9yIiwiRkxPQVRfVFlQRSIsIkZMT0FUIiwiVFJJQU5HTEVTX01PREUiLCJUUklBTkdMRVMiLCJERVBUSF9URVNUX0NBUCIsIkRFUFRIX1RFU1QiLCJMRVFVQUxfRlVOQ1RJT04iLCJMRVFVQUwiLCJTVEFUSUNfRFJBV19VU0FHRSIsIlNUQVRJQ19EUkFXIiwiTElOS19TVEFUVVNfUE5BTUUiLCJMSU5LX1NUQVRVUyIsIlZFUlRFWF9TSEFERVJfVFlQRSIsIlZFUlRFWF9TSEFERVIiLCJBUlJBWV9CVUZGRVJfVEFSR0VUIiwiQVJSQVlfQlVGRkVSIiwiVU5TSUdORURfU0hPUlRfVFlQRSIsIlVOU0lHTkVEX1NIT1JUIiwiVFJJQU5HTEVfU1RSSVBfTU9ERSIsIlRSSUFOR0xFX1NUUklQIiwiQ09NUElMRV9TVEFUVVNfUE5BTUUiLCJDT01QSUxFX1NUQVRVUyIsIkZSQUdNRU5UX1NIQURFUl9UWVBFIiwiRlJBR01FTlRfU0hBREVSIiwiQ09MT1JfQlVGRkVSX0JJVF9NQVNLIiwiQ09MT1JfQlVGRkVSX0JJVCIsIkRFUFRIX0JVRkZFUl9CSVRfTUFTSyIsIkRFUFRIX0JVRkZFUl9CSVQiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUl9UQVJHRVQiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwicHJvZ3JhbSIsIm5hbWUiLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJnZXRBdHRyaWJMb2NhdGlvbiIsInVzZVByb2dyYW0iLCJzaGFkZXJQcm9ncmFtIiwicHJvamVjdGlvbiIsIm1vZGVsVmlldyIsImVsYXBzZWRUaW1lIiwicHJvamVjdGlvbk1hdHJpeCIsImdldE1hdHJpeCIsIm1vZGVsVmlld01hdHJpeCIsInByb2plY3Rpb25NYXRyaXhVbmlmb3JtTG9jYXRpb24iLCJtb2RlbFZpZXdNYXRyaXhVbmlmb3JtTG9jYXRpb24iLCJlbmFibGVEZXB0aFRlc3RpbmciLCJlbmFibGVEZXB0aEZ1bmN0aW9uIiwiY2xlYXJDb2xvdXIiLCJjbGVhckRlcHRoIiwiY2xlYXJDb2xvdXJCdWZmZXIiLCJjbGVhckRlcHRoQnVmZmVyIiwicm90YXRpb24iLCJyb3RhdGVkTW9kZWxWaWV3TWF0cml4IiwiY3JlYXRlIiwicm90YXRlIiwiYXBwbHlNYXRyaXgiLCJ1bmlmb3JtTG9jYXRpb24iLCJtYXRyaXgiLCJ1bmlmb3JtTWF0cml4NGZ2IiwiY291bnQiLCJvZmZzZXQiLCJtb2RlIiwidHlwZSIsImRyYXdFbGVtZW50cyIsIk9iamVjdCIsImFzc2lnbiIsInByb3RvdHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLFNBQVIsQ0FBYixDLENBQWtDOztBQUVsQyxJQUFNQyxlQUFlRCxRQUFRLGlCQUFSLENBQXJCO0FBQUEsSUFDTUUsY0FBY0YsUUFBUSxnQkFBUixDQURwQjtBQUFBLElBRU1HLGNBQWNILFFBQVEsZ0JBQVIsQ0FGcEI7QUFBQSxJQUdNSSxjQUFjSixRQUFRLGdCQUFSLENBSHBCO0FBQUEsSUFJTUssYUFBYUwsUUFBUSxlQUFSLENBSm5COztJQU1RTSxzQixHQUEyQkwsWSxDQUEzQkssc0I7OztBQUVSLElBQU1DLGdCQUFnQixDQUF0Qjs7SUFFTUMsTTtBQUNKLG9CQUFpQztBQUFBLFFBQXJCQyxRQUFxQix1RUFBVixRQUFVOztBQUFBOztBQUMvQixRQUFNQyxhQUFhSix1QkFBdUJHLFFBQXZCLENBQW5CO0FBQUEsUUFDTUUsVUFBVUQsV0FBV0UsVUFBWCxDQUFzQixP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TUMsV0FBV1osY0FBYyxJQUEvQjs7QUFFQSxVQUFNYSx5QkFBeUJwRSxLQUFLcUUsTUFBTCxFQUEvQjs7QUFFQXJFLFdBQUtzRSxNQUFMLENBQVlGLHNCQUFaLEVBQ1lWLGVBRFosRUFFWVMsUUFGWixFQUdZLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBSFo7O0FBS0EsV0FBS0ksV0FBTCxDQUFpQlosK0JBQWpCLEVBQWtESCxnQkFBbEQ7QUFDQSxXQUFLZSxXQUFMLENBQWlCWCw4QkFBakIsRUFBaURRLHNCQUFqRDtBQUNEOzs7Z0NBRVdJLGUsRUFBaUJDLE0sRUFBUTtBQUNuQyxXQUFLN0QsT0FBTCxDQUFhOEQsZ0JBQWIsQ0FBOEJGLGVBQTlCLEVBQStDLEtBQS9DLEVBQXNEQyxNQUF0RDtBQUNEOzs7eUJBRUlFLEssRUFBK0I7QUFBQSxVQUF4QkMsTUFBd0IsdUVBQWZwRSxhQUFlOztBQUNsQzs7QUFFQW1FLGNBQVEsQ0FBUixDQUhrQyxDQUd0Qjs7QUFFWixVQUFNRSxPQUFPLEtBQUs1RCxjQUFsQjtBQUFBLFVBQ002RCxPQUFPLEtBQUsvQyxtQkFEbEI7O0FBR0EsV0FBS25CLE9BQUwsQ0FBYW1FLFlBQWIsQ0FBMEJGLElBQTFCLEVBQWdDRixLQUFoQyxFQUF1Q0csSUFBdkMsRUFBNkNGLE1BQTdDO0FBQ0Q7Ozs7OztBQUdISSxPQUFPQyxNQUFQLENBQWN4RSxPQUFPeUUsU0FBckIsRUFBZ0MvRSxXQUFoQztBQUNBNkUsT0FBT0MsTUFBUCxDQUFjeEUsT0FBT3lFLFNBQXJCLEVBQWdDOUUsV0FBaEM7QUFDQTRFLE9BQU9DLE1BQVAsQ0FBY3hFLE9BQU95RSxTQUFyQixFQUFnQzdFLFdBQWhDO0FBQ0EyRSxPQUFPQyxNQUFQLENBQWN4RSxPQUFPeUUsU0FBckIsRUFBZ0M1RSxVQUFoQzs7QUFFQTZFLE9BQU9DLE9BQVAsR0FBaUIzRSxNQUFqQiIsImZpbGUiOiJjYW52YXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG1hdDQgPSByZXF1aXJlKCdnbC1tYXQ0Jyk7ICAvLy9cblxuY29uc3QgZG9tVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvZG9tJyksXG4gICAgICBidWZmZXJNaXhpbiA9IHJlcXVpcmUoJy4vbWl4aW4vYnVmZmVyJyksXG4gICAgICBzaGFkZXJNaXhpbiA9IHJlcXVpcmUoJy4vbWl4aW4vc2hhZGVyJyksXG4gICAgICBjb2xvdXJNaXhpbiA9IHJlcXVpcmUoJy4vbWl4aW4vY29sb3VyJyksXG4gICAgICBkZXB0aE1peGluID0gcmVxdWlyZSgnLi9taXhpbi9kZXB0aCcpO1xuXG5jb25zdCB7IGRvbUVsZW1lbnRGcm9tU2VsZWN0b3IgfSA9IGRvbVV0aWxpdGllcztcblxuY29uc3QgZGVmYXVsdE9mZnNldCA9IDA7XG5cbmNsYXNzIENhbnZhcyB7XG4gIGNvbnN0cnVjdG9yKHNlbGVjdG9yID0gJ2NhbnZhcycpIHtcbiAgICBjb25zdCBkb21FbGVtZW50ID0gZG9tRWxlbWVudEZyb21TZWxlY3RvcihzZWxlY3RvciksXG4gICAgICAgICAgY29udGV4dCA9IGRvbUVsZW1lbnQuZ2V0Q29udGV4dCgnd2ViZ2wnKTtcblxuICAgIGlmICghY29udGV4dCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gaW5pdGlhbGlzZSB0aGUgY29udGV4dC5gKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXG4gICAgdGhpcy5kb21FbGVtZW50ID0gZG9tRWxlbWVudDtcblxuICAgIHRoaXMuRkxPQVRfVFlQRSA9IHRoaXMuY29udGV4dC5GTE9BVDsgIC8vL1xuICAgIHRoaXMuVFJJQU5HTEVTX01PREUgPSB0aGlzLmNvbnRleHQuVFJJQU5HTEVTOyAgLy8vXG4gICAgdGhpcy5ERVBUSF9URVNUX0NBUCA9IHRoaXMuY29udGV4dC5ERVBUSF9URVNUOyAgLy8vXG4gICAgdGhpcy5MRVFVQUxfRlVOQ1RJT04gPSB0aGlzLmNvbnRleHQuTEVRVUFMOyAvLy9cbiAgICB0aGlzLlNUQVRJQ19EUkFXX1VTQUdFID0gdGhpcy5jb250ZXh0LlNUQVRJQ19EUkFXOyAvLy9cbiAgICB0aGlzLkxJTktfU1RBVFVTX1BOQU1FID0gdGhpcy5jb250ZXh0LkxJTktfU1RBVFVTOyAgLy8vXG4gICAgdGhpcy5WRVJURVhfU0hBREVSX1RZUEUgPSB0aGlzLmNvbnRleHQuVkVSVEVYX1NIQURFUjsgLy8vXG4gICAgdGhpcy5BUlJBWV9CVUZGRVJfVEFSR0VUID0gdGhpcy5jb250ZXh0LkFSUkFZX0JVRkZFUjsgIC8vL1xuICAgIHRoaXMuVU5TSUdORURfU0hPUlRfVFlQRSA9IHRoaXMuY29udGV4dC5VTlNJR05FRF9TSE9SVDsgIC8vL1xuICAgIHRoaXMuVFJJQU5HTEVfU1RSSVBfTU9ERSA9IHRoaXMuY29udGV4dC5UUklBTkdMRV9TVFJJUDsgIC8vL1xuICAgIHRoaXMuQ09NUElMRV9TVEFUVVNfUE5BTUUgPSB0aGlzLmNvbnRleHQuQ09NUElMRV9TVEFUVVM7ICAvLy9cbiAgICB0aGlzLkZSQUdNRU5UX1NIQURFUl9UWVBFID0gdGhpcy5jb250ZXh0LkZSQUdNRU5UX1NIQURFUjsgLy8vXG4gICAgdGhpcy5DT0xPUl9CVUZGRVJfQklUX01BU0sgPSB0aGlzLmNvbnRleHQuQ09MT1JfQlVGRkVSX0JJVDsgLy8vXG4gICAgdGhpcy5ERVBUSF9CVUZGRVJfQklUX01BU0sgPSB0aGlzLmNvbnRleHQuREVQVEhfQlVGRkVSX0JJVDsgLy8vXG4gICAgdGhpcy5FTEVNRU5UX0FSUkFZX0JVRkZFUl9UQVJHRVQgPSB0aGlzLmNvbnRleHQuRUxFTUVOVF9BUlJBWV9CVUZGRVI7ICAvLy9cbiAgfVxuXG4gIGdldENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dDtcbiAgfVxuXG4gIGdldENsaWVudFdpZHRoKCkgeyByZXR1cm4gdGhpcy5kb21FbGVtZW50LmNsaWVudFdpZHRoOyB9XG5cbiAgZ2V0Q2xpZW50SGVpZ2h0KCkgeyByZXR1cm4gdGhpcy5kb21FbGVtZW50LmNsaWVudEhlaWdodDsgfVxuXG4gIGdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBuYW1lKSB7IHJldHVybiB0aGlzLmNvbnRleHQuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIG5hbWUpOyB9XG5cbiAgZ2V0QXR0cmlidXRlTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSkgeyByZXR1cm4gdGhpcy5jb250ZXh0LmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIG5hbWUpOyB9XG5cbiAgdXNlUHJvZ3JhbShwcm9ncmFtKSB7IHRoaXMuY29udGV4dC51c2VQcm9ncmFtKHByb2dyYW0pOyB9XG5cbiAgcmVuZGVyKHNoYWRlclByb2dyYW0sIHByb2plY3Rpb24sIG1vZGVsVmlldywgZWxhcHNlZFRpbWUpIHtcbiAgICBjb25zdCBwcm9qZWN0aW9uTWF0cml4ID0gcHJvamVjdGlvbi5nZXRNYXRyaXgoKSxcbiAgICAgICAgICBtb2RlbFZpZXdNYXRyaXggPSBtb2RlbFZpZXcuZ2V0TWF0cml4KCksXG4gICAgICAgICAgcHJvamVjdGlvbk1hdHJpeFVuaWZvcm1Mb2NhdGlvbiA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW0sICd1UHJvamVjdGlvbk1hdHJpeCcpLFxuICAgICAgICAgIG1vZGVsVmlld01hdHJpeFVuaWZvcm1Mb2NhdGlvbiA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW0sICd1TW9kZWxWaWV3TWF0cml4Jyk7XG5cbiAgICB0aGlzLmVuYWJsZURlcHRoVGVzdGluZygpO1xuICAgIHRoaXMuZW5hYmxlRGVwdGhGdW5jdGlvbigpO1xuXG4gICAgdGhpcy5jbGVhckNvbG91cigpO1xuICAgIHRoaXMuY2xlYXJEZXB0aCgpO1xuICAgIHRoaXMuY2xlYXJDb2xvdXJCdWZmZXIoKTtcbiAgICB0aGlzLmNsZWFyRGVwdGhCdWZmZXIoKTtcblxuICAgIGNvbnN0IHJvdGF0aW9uID0gZWxhcHNlZFRpbWUgLyAxMDAwO1xuXG4gICAgY29uc3Qgcm90YXRlZE1vZGVsVmlld01hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XG5cbiAgICBtYXQ0LnJvdGF0ZShyb3RhdGVkTW9kZWxWaWV3TWF0cml4LFxuICAgICAgICAgICAgICAgIG1vZGVsVmlld01hdHJpeCxcbiAgICAgICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgICAgICBbMCwgMCwgMV0pO1xuXG4gICAgdGhpcy5hcHBseU1hdHJpeChwcm9qZWN0aW9uTWF0cml4VW5pZm9ybUxvY2F0aW9uLCBwcm9qZWN0aW9uTWF0cml4KTtcbiAgICB0aGlzLmFwcGx5TWF0cml4KG1vZGVsVmlld01hdHJpeFVuaWZvcm1Mb2NhdGlvbiwgcm90YXRlZE1vZGVsVmlld01hdHJpeCk7XG4gIH1cblxuICBhcHBseU1hdHJpeCh1bmlmb3JtTG9jYXRpb24sIG1hdHJpeCkge1xuICAgIHRoaXMuY29udGV4dC51bmlmb3JtTWF0cml4NGZ2KHVuaWZvcm1Mb2NhdGlvbiwgZmFsc2UsIG1hdHJpeCk7XG4gIH1cbiAgXG4gIGRyYXcoY291bnQsIG9mZnNldCA9IGRlZmF1bHRPZmZzZXQpIHtcbiAgICAvLyB0aGlzLmNvbnRleHQuZHJhd0FycmF5cyh0aGlzLmNvbnRleHQuVFJJQU5HTEVfU1RSSVAsIG9mZnNldCwgY291bnQpO1xuXG4gICAgY291bnQgPSAzOyAgLy8vXG5cbiAgICBjb25zdCBtb2RlID0gdGhpcy5UUklBTkdMRVNfTU9ERSxcbiAgICAgICAgICB0eXBlID0gdGhpcy5VTlNJR05FRF9TSE9SVF9UWVBFO1xuXG4gICAgdGhpcy5jb250ZXh0LmRyYXdFbGVtZW50cyhtb2RlLCBjb3VudCwgdHlwZSwgb2Zmc2V0KVxuICB9XG59XG5cbk9iamVjdC5hc3NpZ24oQ2FudmFzLnByb3RvdHlwZSwgYnVmZmVyTWl4aW4pO1xuT2JqZWN0LmFzc2lnbihDYW52YXMucHJvdG90eXBlLCBzaGFkZXJNaXhpbik7XG5PYmplY3QuYXNzaWduKENhbnZhcy5wcm90b3R5cGUsIGNvbG91ck1peGluKTtcbk9iamVjdC5hc3NpZ24oQ2FudmFzLnByb3RvdHlwZSwgZGVwdGhNaXhpbik7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FudmFzO1xuIl19