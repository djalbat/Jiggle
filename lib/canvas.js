'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mat4 = require('gl-mat4'); ///

var domUtilities = require('./utilities/dom'),
    bufferMixin = require('./mixin/buffer'),
    shaderMixin = require('./mixin/shader'),
    colourMixin = require('./mixin/colour'),
    matrixMixin = require('./mixin/matrix'),
    depthMixin = require('./mixin/depth');

var domElementFromSelector = domUtilities.domElementFromSelector;


var defaultOffset = 0;

var Canvas = function () {
  function Canvas() {
    var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'canvas';

    _classCallCheck(this, Canvas);

    var domElement = domElementFromSelector(selector),
        context = domElement.getContext('webgl');

    if (!context) {
      throw new Error('Unable to initialise the context.');
    }

    this.context = context;

    this.domElement = domElement;

    this.FLOAT_TYPE = this.context.FLOAT; ///
    this.TRIANGLES_MODE = this.context.TRIANGLES; ///
    this.DEPTH_TEST_CAP = this.context.DEPTH_TEST; ///
    this.LEQUAL_FUNCTION = this.context.LEQUAL; ///
    this.STATIC_DRAW_USAGE = this.context.STATIC_DRAW; ///
    this.LINK_STATUS_PNAME = this.context.LINK_STATUS; ///
    this.VERTEX_SHADER_TYPE = this.context.VERTEX_SHADER; ///
    this.ARRAY_BUFFER_TARGET = this.context.ARRAY_BUFFER; ///
    this.UNSIGNED_SHORT_TYPE = this.context.UNSIGNED_SHORT; ///
    this.TRIANGLE_STRIP_MODE = this.context.TRIANGLE_STRIP; ///
    this.COMPILE_STATUS_PNAME = this.context.COMPILE_STATUS; ///
    this.FRAGMENT_SHADER_TYPE = this.context.FRAGMENT_SHADER; ///
    this.COLOR_BUFFER_BIT_MASK = this.context.COLOR_BUFFER_BIT; ///
    this.DEPTH_BUFFER_BIT_MASK = this.context.DEPTH_BUFFER_BIT; ///
    this.ELEMENT_ARRAY_BUFFER_TARGET = this.context.ELEMENT_ARRAY_BUFFER; ///
  }

  _createClass(Canvas, [{
    key: 'getContext',
    value: function getContext() {
      return this.context;
    }
  }, {
    key: 'getClientWidth',
    value: function getClientWidth() {
      return this.domElement.clientWidth;
    }
  }, {
    key: 'getClientHeight',
    value: function getClientHeight() {
      return this.domElement.clientHeight;
    }
  }, {
    key: 'getUniformLocation',
    value: function getUniformLocation(program, name) {
      return this.context.getUniformLocation(program, name);
    }
  }, {
    key: 'getAttributeLocation',
    value: function getAttributeLocation(program, name) {
      return this.context.getAttribLocation(program, name);
    }
  }, {
    key: 'useProgram',
    value: function useProgram(program) {
      this.context.useProgram(program);
    }
  }, {
    key: 'render',
    value: function render(rotation, position, perspective, shaderProgram) {
      var rotationMatrix = rotation.getMatrix(),
          positionMatrix = position.getMatrix(),
          perspectiveMatrix = perspective.getMatrix(),
          rotationMatrixUniformLocation = this.getUniformLocation(shaderProgram, 'uRotationMatrix'),
          positionMatrixUniformLocation = this.getUniformLocation(shaderProgram, 'uPositionMatrix'),
          perspectiveMatrixUniformLocation = this.getUniformLocation(shaderProgram, 'uPerspectiveMatrix');

      this.clearDepth();
      this.clearColour();
      this.clearDepthBuffer();
      this.clearColourBuffer();

      this.applyMatrix(rotationMatrixUniformLocation, rotationMatrix);
      this.applyMatrix(positionMatrixUniformLocation, positionMatrix);
      this.applyMatrix(perspectiveMatrixUniformLocation, perspectiveMatrix);
    }
  }, {
    key: 'drawElements',
    value: function drawElements(count) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOffset;

      var mode = this.TRIANGLES_MODE,
          type = this.UNSIGNED_SHORT_TYPE;

      this.context.drawElements(mode, count, type, offset);
    }
  }]);

  return Canvas;
}();

Object.assign(Canvas.prototype, bufferMixin);
Object.assign(Canvas.prototype, shaderMixin);
Object.assign(Canvas.prototype, colourMixin);
Object.assign(Canvas.prototype, matrixMixin);
Object.assign(Canvas.prototype, depthMixin);

module.exports = Canvas;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9jYW52YXMuanMiXSwibmFtZXMiOlsibWF0NCIsInJlcXVpcmUiLCJkb21VdGlsaXRpZXMiLCJidWZmZXJNaXhpbiIsInNoYWRlck1peGluIiwiY29sb3VyTWl4aW4iLCJtYXRyaXhNaXhpbiIsImRlcHRoTWl4aW4iLCJkb21FbGVtZW50RnJvbVNlbGVjdG9yIiwiZGVmYXVsdE9mZnNldCIsIkNhbnZhcyIsInNlbGVjdG9yIiwiZG9tRWxlbWVudCIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiRXJyb3IiLCJGTE9BVF9UWVBFIiwiRkxPQVQiLCJUUklBTkdMRVNfTU9ERSIsIlRSSUFOR0xFUyIsIkRFUFRIX1RFU1RfQ0FQIiwiREVQVEhfVEVTVCIsIkxFUVVBTF9GVU5DVElPTiIsIkxFUVVBTCIsIlNUQVRJQ19EUkFXX1VTQUdFIiwiU1RBVElDX0RSQVciLCJMSU5LX1NUQVRVU19QTkFNRSIsIkxJTktfU1RBVFVTIiwiVkVSVEVYX1NIQURFUl9UWVBFIiwiVkVSVEVYX1NIQURFUiIsIkFSUkFZX0JVRkZFUl9UQVJHRVQiLCJBUlJBWV9CVUZGRVIiLCJVTlNJR05FRF9TSE9SVF9UWVBFIiwiVU5TSUdORURfU0hPUlQiLCJUUklBTkdMRV9TVFJJUF9NT0RFIiwiVFJJQU5HTEVfU1RSSVAiLCJDT01QSUxFX1NUQVRVU19QTkFNRSIsIkNPTVBJTEVfU1RBVFVTIiwiRlJBR01FTlRfU0hBREVSX1RZUEUiLCJGUkFHTUVOVF9TSEFERVIiLCJDT0xPUl9CVUZGRVJfQklUX01BU0siLCJDT0xPUl9CVUZGRVJfQklUIiwiREVQVEhfQlVGRkVSX0JJVF9NQVNLIiwiREVQVEhfQlVGRkVSX0JJVCIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSX1RBUkdFVCIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJwcm9ncmFtIiwibmFtZSIsImdldFVuaWZvcm1Mb2NhdGlvbiIsImdldEF0dHJpYkxvY2F0aW9uIiwidXNlUHJvZ3JhbSIsInJvdGF0aW9uIiwicG9zaXRpb24iLCJwZXJzcGVjdGl2ZSIsInNoYWRlclByb2dyYW0iLCJyb3RhdGlvbk1hdHJpeCIsImdldE1hdHJpeCIsInBvc2l0aW9uTWF0cml4IiwicGVyc3BlY3RpdmVNYXRyaXgiLCJyb3RhdGlvbk1hdHJpeFVuaWZvcm1Mb2NhdGlvbiIsInBvc2l0aW9uTWF0cml4VW5pZm9ybUxvY2F0aW9uIiwicGVyc3BlY3RpdmVNYXRyaXhVbmlmb3JtTG9jYXRpb24iLCJjbGVhckRlcHRoIiwiY2xlYXJDb2xvdXIiLCJjbGVhckRlcHRoQnVmZmVyIiwiY2xlYXJDb2xvdXJCdWZmZXIiLCJhcHBseU1hdHJpeCIsImNvdW50Iiwib2Zmc2V0IiwibW9kZSIsInR5cGUiLCJkcmF3RWxlbWVudHMiLCJPYmplY3QiLCJhc3NpZ24iLCJwcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxTQUFSLENBQWIsQyxDQUFrQzs7QUFFbEMsSUFBTUMsZUFBZUQsUUFBUSxpQkFBUixDQUFyQjtBQUFBLElBQ01FLGNBQWNGLFFBQVEsZ0JBQVIsQ0FEcEI7QUFBQSxJQUVNRyxjQUFjSCxRQUFRLGdCQUFSLENBRnBCO0FBQUEsSUFHTUksY0FBY0osUUFBUSxnQkFBUixDQUhwQjtBQUFBLElBSU1LLGNBQWNMLFFBQVEsZ0JBQVIsQ0FKcEI7QUFBQSxJQUtNTSxhQUFhTixRQUFRLGVBQVIsQ0FMbkI7O0lBT1FPLHNCLEdBQTJCTixZLENBQTNCTSxzQjs7O0FBRVIsSUFBTUMsZ0JBQWdCLENBQXRCOztJQUVNQyxNO0FBQ0osb0JBQWlDO0FBQUEsUUFBckJDLFFBQXFCLHVFQUFWLFFBQVU7O0FBQUE7O0FBQy9CLFFBQU1DLGFBQWFKLHVCQUF1QkcsUUFBdkIsQ0FBbkI7QUFBQSxRQUNNRSxVQUFVRCxXQUFXRSxVQUFYLENBQXNCLE9BQXRCLENBRGhCOztBQUdBLFFBQUksQ0FBQ0QsT0FBTCxFQUFjO0FBQ1osWUFBTSxJ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QkFBTDs7QUFFQSxXQUFLQyxXQUFMLENBQWlCUCw2QkFBakIsRUFBZ0RKLGNBQWhEO0FBQ0EsV0FBS1csV0FBTCxDQUFpQk4sNkJBQWpCLEVBQWdESCxjQUFoRDtBQUNBLFdBQUtTLFdBQUwsQ0FBaUJMLGdDQUFqQixFQUFtREgsaUJBQW5EO0FBQ0Q7OztpQ0FFWVMsSyxFQUErQjtBQUFBLFVBQXhCQyxNQUF3Qix1RUFBZjdELGFBQWU7O0FBQzFDLFVBQU04RCxPQUFPLEtBQUtyRCxjQUFsQjtBQUFBLFVBQ01zRCxPQUFPLEtBQUt4QyxtQkFEbEI7O0FBR0EsV0FBS25CLE9BQUwsQ0FBYTRELFlBQWIsQ0FBMEJGLElBQTFCLEVBQWdDRixLQUFoQyxFQUF1Q0csSUFBdkMsRUFBNkNGLE1BQTdDO0FBQ0Q7Ozs7OztBQUdISSxPQUFPQyxNQUFQLENBQWNqRSxPQUFPa0UsU0FBckIsRUFBZ0N6RSxXQUFoQztBQUNBdUUsT0FBT0MsTUFBUCxDQUFjakUsT0FBT2tFLFNBQXJCLEVBQWdDeEUsV0FBaEM7QUFDQXNFLE9BQU9DLE1BQVAsQ0FBY2pFLE9BQU9rRSxTQUFyQixFQUFnQ3ZFLFdBQWhDO0FBQ0FxRSxPQUFPQyxNQUFQLENBQWNqRSxPQUFPa0UsU0FBckIsRUFBZ0N0RSxXQUFoQztBQUNBb0UsT0FBT0MsTUFBUCxDQUFjakUsT0FBT2tFLFNBQXJCLEVBQWdDckUsVUFBaEM7O0FBRUFzRSxPQUFPQyxPQUFQLEdBQWlCcEUsTUFBakIiLCJmaWxlIjoiY2FudmFzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBtYXQ0ID0gcmVxdWlyZSgnZ2wtbWF0NCcpOyAgLy8vXG5cbmNvbnN0IGRvbVV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL2RvbScpLFxuICAgICAgYnVmZmVyTWl4aW4gPSByZXF1aXJlKCcuL21peGluL2J1ZmZlcicpLFxuICAgICAgc2hhZGVyTWl4aW4gPSByZXF1aXJlKCcuL21peGluL3NoYWRlcicpLFxuICAgICAgY29sb3VyTWl4aW4gPSByZXF1aXJlKCcuL21peGluL2NvbG91cicpLFxuICAgICAgbWF0cml4TWl4aW4gPSByZXF1aXJlKCcuL21peGluL21hdHJpeCcpLFxuICAgICAgZGVwdGhNaXhpbiA9IHJlcXVpcmUoJy4vbWl4aW4vZGVwdGgnKTtcblxuY29uc3QgeyBkb21FbGVtZW50RnJvbVNlbGVjdG9yIH0gPSBkb21VdGlsaXRpZXM7XG5cbmNvbnN0IGRlZmF1bHRPZmZzZXQgPSAwO1xuXG5jbGFzcyBDYW52YXMge1xuICBjb25zdHJ1Y3RvcihzZWxlY3RvciA9ICdjYW52YXMnKSB7XG4gICAgY29uc3QgZG9tRWxlbWVudCA9IGRvbUVsZW1lbnRGcm9tU2VsZWN0b3Ioc2VsZWN0b3IpLFxuICAgICAgICAgIGNvbnRleHQgPSBkb21FbGVtZW50LmdldENvbnRleHQoJ3dlYmdsJyk7XG5cbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGluaXRpYWxpc2UgdGhlIGNvbnRleHQuYCk7XG4gICAgfVxuXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcblxuICAgIHRoaXMuZG9tRWxlbWVudCA9IGRvbUVsZW1lbnQ7XG5cbiAgICB0aGlzLkZMT0FUX1RZUEUgPSB0aGlzLmNvbnRleHQuRkxPQVQ7ICAvLy9cbiAgICB0aGlzLlRSSUFOR0xFU19NT0RFID0gdGhpcy5jb250ZXh0LlRSSUFOR0xFUzsgIC8vL1xuICAgIHRoaXMuREVQVEhfVEVTVF9DQVAgPSB0aGlzLmNvbnRleHQuREVQVEhfVEVTVDsgIC8vL1xuICAgIHRoaXMuTEVRVUFMX0ZVTkNUSU9OID0gdGhpcy5jb250ZXh0LkxFUVVBTDsgLy8vXG4gICAgdGhpcy5TVEFUSUNfRFJBV19VU0FHRSA9IHRoaXMuY29udGV4dC5TVEFUSUNfRFJBVzsgLy8vXG4gICAgdGhpcy5MSU5LX1NUQVRVU19QTkFNRSA9IHRoaXMuY29udGV4dC5MSU5LX1NUQVRVUzsgIC8vL1xuICAgIHRoaXMuVkVSVEVYX1NIQURFUl9UWVBFID0gdGhpcy5jb250ZXh0LlZFUlRFWF9TSEFERVI7IC8vL1xuICAgIHRoaXMuQVJSQVlfQlVGRkVSX1RBUkdFVCA9IHRoaXMuY29udGV4dC5BUlJBWV9CVUZGRVI7ICAvLy9cbiAgICB0aGlzLlVOU0lHTkVEX1NIT1JUX1RZUEUgPSB0aGlzLmNvbnRleHQuVU5TSUdORURfU0hPUlQ7ICAvLy9cbiAgICB0aGlzLlRSSUFOR0xFX1NUUklQX01PREUgPSB0aGlzLmNvbnRleHQuVFJJQU5HTEVfU1RSSVA7ICAvLy9cbiAgICB0aGlzLkNPTVBJTEVfU1RBVFVTX1BOQU1FID0gdGhpcy5jb250ZXh0LkNPTVBJTEVfU1RBVFVTOyAgLy8vXG4gICAgdGhpcy5GUkFHTUVOVF9TSEFERVJfVFlQRSA9IHRoaXMuY29udGV4dC5GUkFHTUVOVF9TSEFERVI7IC8vL1xuICAgIHRoaXMuQ09MT1JfQlVGRkVSX0JJVF9NQVNLID0gdGhpcy5jb250ZXh0LkNPTE9SX0JVRkZFUl9CSVQ7IC8vL1xuICAgIHRoaXMuREVQVEhfQlVGRkVSX0JJVF9NQVNLID0gdGhpcy5jb250ZXh0LkRFUFRIX0JVRkZFUl9CSVQ7IC8vL1xuICAgIHRoaXMuRUxFTUVOVF9BUlJBWV9CVUZGRVJfVEFSR0VUID0gdGhpcy5jb250ZXh0LkVMRU1FTlRfQVJSQVlfQlVGRkVSOyAgLy8vXG4gIH1cblxuICBnZXRDb250ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQ7XG4gIH1cblxuICBnZXRDbGllbnRXaWR0aCgpIHsgcmV0dXJuIHRoaXMuZG9tRWxlbWVudC5jbGllbnRXaWR0aDsgfVxuXG4gIGdldENsaWVudEhlaWdodCgpIHsgcmV0dXJuIHRoaXMuZG9tRWxlbWVudC5jbGllbnRIZWlnaHQ7IH1cblxuICBnZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSkgeyByZXR1cm4gdGhpcy5jb250ZXh0LmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBuYW1lKTsgfVxuXG4gIGdldEF0dHJpYnV0ZUxvY2F0aW9uKHByb2dyYW0sIG5hbWUpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBuYW1lKTsgfVxuXG4gIHVzZVByb2dyYW0ocHJvZ3JhbSkgeyB0aGlzLmNvbnRleHQudXNlUHJvZ3JhbShwcm9ncmFtKTsgfVxuICBcbiAgcmVuZGVyKHJvdGF0aW9uLCBwb3NpdGlvbiwgcGVyc3BlY3RpdmUsIHNoYWRlclByb2dyYW0pIHtcbiAgICBjb25zdCByb3RhdGlvbk1hdHJpeCA9IHJvdGF0aW9uLmdldE1hdHJpeCgpLFxuICAgICAgICAgIHBvc2l0aW9uTWF0cml4ID0gcG9zaXRpb24uZ2V0TWF0cml4KCksXG4gICAgICAgICAgcGVyc3BlY3RpdmVNYXRyaXggPSBwZXJzcGVjdGl2ZS5nZXRNYXRyaXgoKSxcbiAgICAgICAgICByb3RhdGlvbk1hdHJpeFVuaWZvcm1Mb2NhdGlvbiA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW0sICd1Um90YXRpb25NYXRyaXgnKSxcbiAgICAgICAgICBwb3NpdGlvbk1hdHJpeFVuaWZvcm1Mb2NhdGlvbiA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW0sICd1UG9zaXRpb25NYXRyaXgnKSxcbiAgICAgICAgICBwZXJzcGVjdGl2ZU1hdHJpeFVuaWZvcm1Mb2NhdGlvbiA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW0sICd1UGVyc3BlY3RpdmVNYXRyaXgnKTtcblxuICAgIHRoaXMuY2xlYXJEZXB0aCgpO1xuICAgIHRoaXMuY2xlYXJDb2xvdXIoKTtcbiAgICB0aGlzLmNsZWFyRGVwdGhCdWZmZXIoKTtcbiAgICB0aGlzLmNsZWFyQ29sb3VyQnVmZmVyKCk7XG5cbiAgICB0aGlzLmFwcGx5TWF0cml4KHJvdGF0aW9uTWF0cml4VW5pZm9ybUxvY2F0aW9uLCByb3RhdGlvbk1hdHJpeCk7XG4gICAgdGhpcy5hcHBseU1hdHJpeChwb3NpdGlvbk1hdHJpeFVuaWZvcm1Mb2NhdGlvbiwgcG9zaXRpb25NYXRyaXgpO1xuICAgIHRoaXMuYXBwbHlNYXRyaXgocGVyc3BlY3RpdmVNYXRyaXhVbmlmb3JtTG9jYXRpb24sIHBlcnNwZWN0aXZlTWF0cml4KTtcbiAgfVxuXG4gIGRyYXdFbGVtZW50cyhjb3VudCwgb2Zmc2V0ID0gZGVmYXVsdE9mZnNldCkge1xuICAgIGNvbnN0IG1vZGUgPSB0aGlzLlRSSUFOR0xFU19NT0RFLFxuICAgICAgICAgIHR5cGUgPSB0aGlzLlVOU0lHTkVEX1NIT1JUX1RZUEU7XG5cbiAgICB0aGlzLmNvbnRleHQuZHJhd0VsZW1lbnRzKG1vZGUsIGNvdW50LCB0eXBlLCBvZmZzZXQpXG4gIH1cbn1cblxuT2JqZWN0LmFzc2lnbihDYW52YXMucHJvdG90eXBlLCBidWZmZXJNaXhpbik7XG5PYmplY3QuYXNzaWduKENhbnZhcy5wcm90b3R5cGUsIHNoYWRlck1peGluKTtcbk9iamVjdC5hc3NpZ24oQ2FudmFzLnByb3RvdHlwZSwgY29sb3VyTWl4aW4pO1xuT2JqZWN0LmFzc2lnbihDYW52YXMucHJvdG90eXBlLCBtYXRyaXhNaXhpbik7XG5PYmplY3QuYXNzaWduKENhbnZhcy5wcm90b3R5cGUsIGRlcHRoTWl4aW4pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbnZhcztcbiJdfQ==