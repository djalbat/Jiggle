'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var domUtilities = require('./utilities/dom'),
    textureMixin = require('./mixin/texture'),
    bufferMixin = require('./mixin/buffer'),
    shaderMixin = require('./mixin/shader'),
    colourMixin = require('./mixin/colour'),
    matrixMixin = require('./mixin/matrix'),
    depthMixin = require('./mixin/depth');

var domElementFromSelector = domUtilities.domElementFromSelector;


var defaultOffset = 0;

var Canvas = function () {
  function Canvas() {
    var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'canvas';

    _classCallCheck(this, Canvas);

    var domElement = domElementFromSelector(selector),
        context = domElement.getContext('webgl');

    if (!context) {
      throw new Error('Unable to initialise the context.');
    }

    this.context = context;

    this.domElement = domElement;

    this.CLAMP_TO_EDGE_PARAM = this.context.CLAMP_TO_EDGE; ///
    this.LINEAR_PARAM = this.context.LINEAR; ///
    this.RGBA_FORMAT = this.context.RGBA; ///
    this.DEPTH_TEST_CAP = this.context.DEPTH_TEST; ///
    this.LEQUAL_FUNCTION = this.context.LEQUAL; ///
    this.STATIC_DRAW_USAGE = this.context.STATIC_DRAW; ///
    this.LINK_STATUS_PNAME = this.context.LINK_STATUS; ///
    this.COMPILE_STATUS_PNAME = this.context.COMPILE_STATUS; ///
    this.TEXTURE_WRAP_S_PNAME = this.context.TEXTURE_WRAP_S; ///
    this.TEXTURE_WRAP_T_PNAME = this.context.TEXTURE_WRAP_T; ///
    this.TEXTURE_MIN_FILTER_PNAME = this.context.TEXTURE_MIN_FILTER; ///
    this.TRIANGLE_STRIP_MODE = this.context.TRIANGLE_STRIP; ///
    this.TRIANGLES_MODE = this.context.TRIANGLES; ///
    this.FLOAT_TYPE = this.context.FLOAT; ///
    this.UNSIGNED_BYTE_TYPE = this.context.UNSIGNED_BYTE; ///
    this.VERTEX_SHADER_TYPE = this.context.VERTEX_SHADER; ///
    this.UNSIGNED_SHORT_TYPE = this.context.UNSIGNED_SHORT; ///
    this.FRAGMENT_SHADER_TYPE = this.context.FRAGMENT_SHADER; ///
    this.COLOR_BUFFER_BIT_MASK = this.context.COLOR_BUFFER_BIT; ///
    this.DEPTH_BUFFER_BIT_MASK = this.context.DEPTH_BUFFER_BIT; ///
    this.TEXTURE0_TARGET = this.context.TEXTURE0; ///
    this.TEXTURE_2D_TARGET = this.context.TEXTURE_2D; ///
    this.ARRAY_BUFFER_TARGET = this.context.ARRAY_BUFFER; ///
    this.ELEMENT_ARRAY_BUFFER_TARGET = this.context.ELEMENT_ARRAY_BUFFER; ///
  }

  _createClass(Canvas, [{
    key: 'getContext',
    value: function getContext() {
      return this.context;
    }
  }, {
    key: 'getClientWidth',
    value: function getClientWidth() {
      return this.domElement.clientWidth;
    }
  }, {
    key: 'getClientHeight',
    value: function getClientHeight() {
      return this.domElement.clientHeight;
    }
  }, {
    key: 'getUniformLocation',
    value: function getUniformLocation(program, name) {
      return this.context.getUniformLocation(program, name);
    }
  }, {
    key: 'getAttributeLocation',
    value: function getAttributeLocation(program, name) {
      return this.context.getAttribLocation(program, name);
    }
  }, {
    key: 'setUniformLocationIntegerValue',
    value: function setUniformLocationIntegerValue(uniformLocation, integerValue) {
      this.context.uniform1i(uniformLocation, integerValue);
    }
  }, {
    key: 'useProgram',
    value: function useProgram(program) {
      this.context.useProgram(program);
    }
  }, {
    key: 'render',
    value: function render(normal, rotation, position, perspective, shaderProgram) {
      var normalMatrix = normal.getMatrix(),
          rotationMatrix = rotation.getMatrix(),
          positionMatrix = position.getMatrix(),
          perspectiveMatrix = perspective.getMatrix(),
          normalMatrixUniformLocation = this.getUniformLocation(shaderProgram, 'uNormalMatrix'),
          rotationMatrixUniformLocation = this.getUniformLocation(shaderProgram, 'uRotationMatrix'),
          positionMatrixUniformLocation = this.getUniformLocation(shaderProgram, 'uPositionMatrix'),
          perspectiveMatrixUniformLocation = this.getUniformLocation(shaderProgram, 'uPerspectiveMatrix');

      this.clearDepth();
      this.clearColour();
      this.clearDepthBuffer();
      this.clearColourBuffer();

      this.applyMatrix(normalMatrixUniformLocation, normalMatrix);
      this.applyMatrix(rotationMatrixUniformLocation, rotationMatrix);
      this.applyMatrix(positionMatrixUniformLocation, positionMatrix);
      this.applyMatrix(perspectiveMatrixUniformLocation, perspectiveMatrix);
    }
  }, {
    key: 'drawElements',
    value: function drawElements(count) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOffset;

      var mode = this.TRIANGLES_MODE,
          type = this.UNSIGNED_SHORT_TYPE;

      this.context.drawElements(mode, count, type, offset);
    }
  }]);

  return Canvas;
}();

Object.assign(Canvas.prototype, textureMixin);
Object.assign(Canvas.prototype, bufferMixin);
Object.assign(Canvas.prototype, shaderMixin);
Object.assign(Canvas.prototype, colourMixin);
Object.assign(Canvas.prototype, matrixMixin);
Object.assign(Canvas.prototype, depthMixin);

module.exports = Canvas;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9jYW52YXMuanMiXSwibmFtZXMiOlsiZG9tVXRpbGl0aWVzIiwicmVxdWlyZSIsInRleHR1cmVNaXhpbiIsImJ1ZmZlck1peGluIiwic2hhZGVyTWl4aW4iLCJjb2xvdXJNaXhpbiIsIm1hdHJpeE1peGluIiwiZGVwdGhNaXhpbiIsImRvbUVsZW1lbnRGcm9tU2VsZWN0b3IiLCJkZWZhdWx0T2Zmc2V0IiwiQ2FudmFzIiwic2VsZWN0b3IiLCJkb21FbGVtZW50IiwiY29udGV4dCIsImdldENvbnRleHQiLCJFcnJvciIsIkNMQU1QX1RPX0VER0VfUEFSQU0iLCJDTEFNUF9UT19FREdFIiwiTElORUFSX1BBUkFNIiwiTElORUFSIiwiUkdCQV9GT1JNQVQiLCJSR0JBIiwiREVQVEhfVEVTVF9DQVAiLCJERVBUSF9URVNUIiwiTEVRVUFMX0ZVTkNUSU9OIiwiTEVRVUFMIiwiU1RBVElDX0RSQVdfVVNBR0UiLCJTVEFUSUNfRFJBVyIsIkxJTktfU1RBVFVTX1BOQU1FIiwiTElOS19TVEFUVVMiLCJDT01QSUxFX1NUQVRVU19QTkFNRSIsIkNPTVBJTEVfU1RBVFVTIiwiVEVYVFVSRV9XUkFQX1NfUE5BTUUiLCJURVhUVVJFX1dSQVBfUyIsIlRFWFRVUkVfV1JBUF9UX1BOQU1FIiwiVEVYVFVSRV9XUkFQX1QiLCJURVhUVVJFX01JTl9GSUxURVJfUE5BTUUiLCJURVhUVVJFX01JTl9GSUxURVIiLCJUUklBTkdMRV9TVFJJUF9NT0RFIiwiVFJJQU5HTEVfU1RSSVAiLCJUUklBTkdMRVNfTU9ERSIsIlRSSUFOR0xFUyIsIkZMT0FUX1RZUEUiLCJGTE9BVCIsIlVOU0lHTkVEX0JZVEVfVFlQRSIsIlVOU0lHTkVEX0JZVEUiLCJWRVJURVhfU0hBREVSX1RZUEUiLCJWRVJURVhfU0hBREVSIiwiVU5TSUdORURfU0hPUlRfVFlQRSIsIlVOU0lHTkVEX1NIT1JUIiwiRlJBR01FTlRfU0hBREVSX1RZUEUiLCJGUkFHTUVOVF9TSEFERVIiLCJDT0xPUl9CVUZGRVJfQklUX01BU0siLCJDT0xPUl9CVUZGRVJfQklUIiwiREVQVEhfQlVGRkVSX0JJVF9NQVNLIiwiREVQVEhfQlVGRkVSX0JJVCIsIlRFWFRVUkUwX1RBUkdFVCIsIlRFWFRVUkUwIiwiVEVYVFVSRV8yRF9UQVJHRVQiLCJURVhUVVJFXzJEIiwiQVJSQVlfQlVGRkVSX1RBUkdFVCIsIkFSUkFZX0JVRkZFUiIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSX1RBUkdFVCIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJwcm9ncmFtIiwibmFtZSIsImdldFVuaWZvcm1Mb2NhdGlvbiIsImdldEF0dHJpYkxvY2F0aW9uIiwidW5pZm9ybUxvY2F0aW9uIiwiaW50ZWdlclZhbHVlIiwidW5pZm9ybTFpIiwidXNlUHJvZ3JhbSIsIm5vcm1hbCIsInJvdGF0aW9uIiwicG9zaXRpb24iLCJwZXJzcGVjdGl2ZSIsInNoYWRlclByb2dyYW0iLCJub3JtYWxNYXRyaXgiLCJnZXRNYXRyaXgiLCJyb3RhdGlvbk1hdHJpeCIsInBvc2l0aW9uTWF0cml4IiwicGVyc3BlY3RpdmVNYXRyaXgiLCJub3JtYWxNYXRyaXhVbmlmb3JtTG9jYXRpb24iLCJyb3RhdGlvbk1hdHJpeFVuaWZvcm1Mb2NhdGlvbiIsInBvc2l0aW9uTWF0cml4VW5pZm9ybUxvY2F0aW9uIiwicGVyc3BlY3RpdmVNYXRyaXhVbmlmb3JtTG9jYXRpb24iLCJjbGVhckRlcHRoIiwiY2xlYXJDb2xvdXIiLCJjbGVhckRlcHRoQnVmZmVyIiwiY2xlYXJDb2xvdXJCdWZmZXIiLCJhcHBseU1hdHJpeCIsImNvdW50Iiwib2Zmc2V0IiwibW9kZSIsInR5cGUiLCJkcmF3RWxlbWVudHMiLCJPYmplY3QiLCJhc3NpZ24iLCJwcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBTUEsZUFBZUMsUUFBUSxpQkFBUixDQUFyQjtBQUFBLElBQ01DLGVBQWVELFFBQVEsaUJBQVIs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Z0M5RixXQUFoQztBQUNBNEYsT0FBT0MsTUFBUCxDQUFjekYsT0FBTzBGLFNBQXJCLEVBQWdDN0YsVUFBaEM7O0FBRUE4RixPQUFPQyxPQUFQLEdBQWlCNUYsTUFBakIiLCJmaWxlIjoiY2FudmFzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBkb21VdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9kb20nKSxcbiAgICAgIHRleHR1cmVNaXhpbiA9IHJlcXVpcmUoJy4vbWl4aW4vdGV4dHVyZScpLFxuICAgICAgYnVmZmVyTWl4aW4gPSByZXF1aXJlKCcuL21peGluL2J1ZmZlcicpLFxuICAgICAgc2hhZGVyTWl4aW4gPSByZXF1aXJlKCcuL21peGluL3NoYWRlcicpLFxuICAgICAgY29sb3VyTWl4aW4gPSByZXF1aXJlKCcuL21peGluL2NvbG91cicpLFxuICAgICAgbWF0cml4TWl4aW4gPSByZXF1aXJlKCcuL21peGluL21hdHJpeCcpLFxuICAgICAgZGVwdGhNaXhpbiA9IHJlcXVpcmUoJy4vbWl4aW4vZGVwdGgnKTtcblxuY29uc3QgeyBkb21FbGVtZW50RnJvbVNlbGVjdG9yIH0gPSBkb21VdGlsaXRpZXM7XG5cbmNvbnN0IGRlZmF1bHRPZmZzZXQgPSAwO1xuXG5jbGFzcyBDYW52YXMge1xuICBjb25zdHJ1Y3RvcihzZWxlY3RvciA9ICdjYW52YXMnKSB7XG4gICAgY29uc3QgZG9tRWxlbWVudCA9IGRvbUVsZW1lbnRGcm9tU2VsZWN0b3Ioc2VsZWN0b3IpLFxuICAgICAgICAgIGNvbnRleHQgPSBkb21FbGVtZW50LmdldENvbnRleHQoJ3dlYmdsJyk7XG5cbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGluaXRpYWxpc2UgdGhlIGNvbnRleHQuYCk7XG4gICAgfVxuXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcblxuICAgIHRoaXMuZG9tRWxlbWVudCA9IGRvbUVsZW1lbnQ7XG5cbiAgICB0aGlzLkNMQU1QX1RPX0VER0VfUEFSQU0gPSB0aGlzLmNvbnRleHQuQ0xBTVBfVE9fRURHRTsgIC8vL1xuICAgIHRoaXMuTElORUFSX1BBUkFNID0gdGhpcy5jb250ZXh0LkxJTkVBUjsgIC8vL1xuICAgIHRoaXMuUkdCQV9GT1JNQVQgPSB0aGlzLmNvbnRleHQuUkdCQTsgIC8vL1xuICAgIHRoaXMuREVQVEhfVEVTVF9DQVAgPSB0aGlzLmNvbnRleHQuREVQVEhfVEVTVDsgIC8vL1xuICAgIHRoaXMuTEVRVUFMX0ZVTkNUSU9OID0gdGhpcy5jb250ZXh0LkxFUVVBTDsgLy8vXG4gICAgdGhpcy5TVEFUSUNfRFJBV19VU0FHRSA9IHRoaXMuY29udGV4dC5TVEFUSUNfRFJBVzsgLy8vXG4gICAgdGhpcy5MSU5LX1NUQVRVU19QTkFNRSA9IHRoaXMuY29udGV4dC5MSU5LX1NUQVRVUzsgIC8vL1xuICAgIHRoaXMuQ09NUElMRV9TVEFUVVNfUE5BTUUgPSB0aGlzLmNvbnRleHQuQ09NUElMRV9TVEFUVVM7ICAvLy9cbiAgICB0aGlzLlRFWFRVUkVfV1JBUF9TX1BOQU1FID0gdGhpcy5jb250ZXh0LlRFWFRVUkVfV1JBUF9TOyAgLy8vXG4gICAgdGhpcy5URVhUVVJFX1dSQVBfVF9QTkFNRSA9IHRoaXMuY29udGV4dC5URVhUVVJFX1dSQVBfVDsgIC8vL1xuICAgIHRoaXMuVEVYVFVSRV9NSU5fRklMVEVSX1BOQU1FID0gdGhpcy5jb250ZXh0LlRFWFRVUkVfTUlOX0ZJTFRFUjsgIC8vL1xuICAgIHRoaXMuVFJJQU5HTEVfU1RSSVBfTU9ERSA9IHRoaXMuY29udGV4dC5UUklBTkdMRV9TVFJJUDsgIC8vL1xuICAgIHRoaXMuVFJJQU5HTEVTX01PREUgPSB0aGlzLmNvbnRleHQuVFJJQU5HTEVTOyAgLy8vXG4gICAgdGhpcy5GTE9BVF9UWVBFID0gdGhpcy5jb250ZXh0LkZMT0FUOyAgLy8vXG4gICAgdGhpcy5VTlNJR05FRF9CWVRFX1RZUEUgPSB0aGlzLmNvbnRleHQuVU5TSUdORURfQllURTsgLy8vXG4gICAgdGhpcy5WRVJURVhfU0hBREVSX1RZUEUgPSB0aGlzLmNvbnRleHQuVkVSVEVYX1NIQURFUjsgLy8vXG4gICAgdGhpcy5VTlNJR05FRF9TSE9SVF9UWVBFID0gdGhpcy5jb250ZXh0LlVOU0lHTkVEX1NIT1JUOyAgLy8vXG4gICAgdGhpcy5GUkFHTUVOVF9TSEFERVJfVFlQRSA9IHRoaXMuY29udGV4dC5GUkFHTUVOVF9TSEFERVI7IC8vL1xuICAgIHRoaXMuQ09MT1JfQlVGRkVSX0JJVF9NQVNLID0gdGhpcy5jb250ZXh0LkNPTE9SX0JVRkZFUl9CSVQ7IC8vL1xuICAgIHRoaXMuREVQVEhfQlVGRkVSX0JJVF9NQVNLID0gdGhpcy5jb250ZXh0LkRFUFRIX0JVRkZFUl9CSVQ7IC8vL1xuICAgIHRoaXMuVEVYVFVSRTBfVEFSR0VUID0gdGhpcy5jb250ZXh0LlRFWFRVUkUwOyAvLy9cbiAgICB0aGlzLlRFWFRVUkVfMkRfVEFSR0VUID0gdGhpcy5jb250ZXh0LlRFWFRVUkVfMkQ7IC8vL1xuICAgIHRoaXMuQVJSQVlfQlVGRkVSX1RBUkdFVCA9IHRoaXMuY29udGV4dC5BUlJBWV9CVUZGRVI7ICAvLy9cbiAgICB0aGlzLkVMRU1FTlRfQVJSQVlfQlVGRkVSX1RBUkdFVCA9IHRoaXMuY29udGV4dC5FTEVNRU5UX0FSUkFZX0JVRkZFUjsgIC8vL1xuICB9XG5cbiAgZ2V0Q29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0O1xuICB9XG5cbiAgZ2V0Q2xpZW50V2lkdGgoKSB7IHJldHVybiB0aGlzLmRvbUVsZW1lbnQuY2xpZW50V2lkdGg7IH1cblxuICBnZXRDbGllbnRIZWlnaHQoKSB7IHJldHVybiB0aGlzLmRvbUVsZW1lbnQuY2xpZW50SGVpZ2h0OyB9XG5cbiAgZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIG5hbWUpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSk7IH1cblxuICBnZXRBdHRyaWJ1dGVMb2NhdGlvbihwcm9ncmFtLCBuYW1lKSB7IHJldHVybiB0aGlzLmNvbnRleHQuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSk7IH1cbiAgXG4gIHNldFVuaWZvcm1Mb2NhdGlvbkludGVnZXJWYWx1ZSh1bmlmb3JtTG9jYXRpb24sIGludGVnZXJWYWx1ZSkgeyB0aGlzLmNvbnRleHQudW5pZm9ybTFpKHVuaWZvcm1Mb2NhdGlvbiwgaW50ZWdlclZhbHVlKTsgfVxuXG4gIHVzZVByb2dyYW0ocHJvZ3JhbSkgeyB0aGlzLmNvbnRleHQudXNlUHJvZ3JhbShwcm9ncmFtKTsgfVxuICBcbiAgcmVuZGVyKG5vcm1hbCwgcm90YXRpb24sIHBvc2l0aW9uLCBwZXJzcGVjdGl2ZSwgc2hhZGVyUHJvZ3JhbSkge1xuICAgIGNvbnN0IG5vcm1hbE1hdHJpeCA9IG5vcm1hbC5nZXRNYXRyaXgoKSxcbiAgICAgICAgICByb3RhdGlvbk1hdHJpeCA9IHJvdGF0aW9uLmdldE1hdHJpeCgpLFxuICAgICAgICAgIHBvc2l0aW9uTWF0cml4ID0gcG9zaXRpb24uZ2V0TWF0cml4KCksXG4gICAgICAgICAgcGVyc3BlY3RpdmVNYXRyaXggPSBwZXJzcGVjdGl2ZS5nZXRNYXRyaXgoKSxcbiAgICAgICAgICBub3JtYWxNYXRyaXhVbmlmb3JtTG9jYXRpb24gPSB0aGlzLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtLCAndU5vcm1hbE1hdHJpeCcpLFxuICAgICAgICAgIHJvdGF0aW9uTWF0cml4VW5pZm9ybUxvY2F0aW9uID0gdGhpcy5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgJ3VSb3RhdGlvbk1hdHJpeCcpLFxuICAgICAgICAgIHBvc2l0aW9uTWF0cml4VW5pZm9ybUxvY2F0aW9uID0gdGhpcy5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgJ3VQb3NpdGlvbk1hdHJpeCcpLFxuICAgICAgICAgIHBlcnNwZWN0aXZlTWF0cml4VW5pZm9ybUxvY2F0aW9uID0gdGhpcy5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgJ3VQZXJzcGVjdGl2ZU1hdHJpeCcpO1xuXG4gICAgdGhpcy5jbGVhckRlcHRoKCk7XG4gICAgdGhpcy5jbGVhckNvbG91cigpO1xuICAgIHRoaXMuY2xlYXJEZXB0aEJ1ZmZlcigpO1xuICAgIHRoaXMuY2xlYXJDb2xvdXJCdWZmZXIoKTtcblxuICAgIHRoaXMuYXBwbHlNYXRyaXgobm9ybWFsTWF0cml4VW5pZm9ybUxvY2F0aW9uLCBub3JtYWxNYXRyaXgpO1xuICAgIHRoaXMuYXBwbHlNYXRyaXgocm90YXRpb25NYXRyaXhVbmlmb3JtTG9jYXRpb24sIHJvdGF0aW9uTWF0cml4KTtcbiAgICB0aGlzLmFwcGx5TWF0cml4KHBvc2l0aW9uTWF0cml4VW5pZm9ybUxvY2F0aW9uLCBwb3NpdGlvbk1hdHJpeCk7XG4gICAgdGhpcy5hcHBseU1hdHJpeChwZXJzcGVjdGl2ZU1hdHJpeFVuaWZvcm1Mb2NhdGlvbiwgcGVyc3BlY3RpdmVNYXRyaXgpO1xuICB9XG5cbiAgZHJhd0VsZW1lbnRzKGNvdW50LCBvZmZzZXQgPSBkZWZhdWx0T2Zmc2V0KSB7XG4gICAgY29uc3QgbW9kZSA9IHRoaXMuVFJJQU5HTEVTX01PREUsXG4gICAgICAgICAgdHlwZSA9IHRoaXMuVU5TSUdORURfU0hPUlRfVFlQRTtcblxuICAgIHRoaXMuY29udGV4dC5kcmF3RWxlbWVudHMobW9kZSwgY291bnQsIHR5cGUsIG9mZnNldClcbiAgfVxufVxuXG5PYmplY3QuYXNzaWduKENhbnZhcy5wcm90b3R5cGUsIHRleHR1cmVNaXhpbik7XG5PYmplY3QuYXNzaWduKENhbnZhcy5wcm90b3R5cGUsIGJ1ZmZlck1peGluKTtcbk9iamVjdC5hc3NpZ24oQ2FudmFzLnByb3RvdHlwZSwgc2hhZGVyTWl4aW4pO1xuT2JqZWN0LmFzc2lnbihDYW52YXMucHJvdG90eXBlLCBjb2xvdXJNaXhpbik7XG5PYmplY3QuYXNzaWduKENhbnZhcy5wcm90b3R5cGUsIG1hdHJpeE1peGluKTtcbk9iamVjdC5hc3NpZ24oQ2FudmFzLnByb3RvdHlwZSwgZGVwdGhNaXhpbik7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FudmFzO1xuIl19