'use strict';

function createElementBuffer(data) {
  var _context = this.context,
      ELEMENT_ARRAY_BUFFER = _context.ELEMENT_ARRAY_BUFFER,
      STATIC_DRAW = _context.STATIC_DRAW,
      target = ELEMENT_ARRAY_BUFFER,
      usage = STATIC_DRAW,
      uint16Array = new Uint16Array(data),
      elementBuffer = this.context.createBuffer();


  this.context.bindBuffer(target, elementBuffer);

  this.context.bufferData(target, uint16Array, usage);

  return elementBuffer;
}

function bindElementBuffer(elementBuffer) {
  var ELEMENT_ARRAY_BUFFER = this.context.ELEMENT_ARRAY_BUFFER,
      target = ELEMENT_ARRAY_BUFFER;


  this.context.bindBuffer(target, elementBuffer);
}

function createBuffer(data) {
  var _context2 = this.context,
      ARRAY_BUFFER = _context2.ARRAY_BUFFER,
      STATIC_DRAW = _context2.STATIC_DRAW,
      target = ARRAY_BUFFER,
      usage = STATIC_DRAW,
      buffer = this.context.createBuffer(),
      float32Array = new Float32Array(data);


  this.context.bindBuffer(target, buffer);

  this.context.bufferData(target, float32Array, usage);

  return buffer;
}

function bindBuffer(buffer, attributeLocation, components) {
  var _context3 = this.context,
      ARRAY_BUFFER = _context3.ARRAY_BUFFER,
      FLOAT = _context3.FLOAT,
      target = ARRAY_BUFFER,
      type = FLOAT,
      normalize = false,
      stride = 0,
      offset = 0;


  this.context.bindBuffer(target, buffer);

  this.context.vertexAttribPointer(attributeLocation, components, type, normalize, stride, offset);

  this.context.enableVertexAttribArray(attributeLocation);
}

module.exports = {
  createElementBuffer: createElementBuffer,
  bindElementBuffer: bindElementBuffer,
  createBuffer: createBuffer,
  bindBuffer: bindBuffer
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9jYW52YXMvbWl4aW4vYnVmZmVyLmpzIl0sIm5hbWVzIjpbImNyZWF0ZUVsZW1lbnRCdWZmZXIiLCJkYXRhIiwiY29udGV4dCIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwiU1RBVElDX0RSQVciLCJ0YXJnZXQiLCJ1c2FnZSIsInVpbnQxNkFycmF5IiwiVWludDE2QXJyYXkiLCJlbGVtZW50QnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsImJ1ZmZlckRhdGEiLCJiaW5kRWxlbWVudEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImJ1ZmZlciIsImZsb2F0MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsImF0dHJpYnV0ZUxvY2F0aW9uIiwiY29tcG9uZW50cyIsIkZMT0FUIiwidHlwZSIsIm5vcm1hbGl6ZSIsInN0cmlkZSIsIm9mZnNldCIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLG1CQUFULENBQTZCQyxJQUE3QixFQUFtQztBQUFBLGlCQUNhLEtBQUtDLE9BRGxCO0FBQUEsTUFDekJDLG9CQUR5QixZQUN6QkEsb0JBRHlCO0FBQUEsTUFDSEMsV0FERyxZQUNIQSxXQURHO0FBQUEsTUFFM0JDLE1BRjJCLEdBRWxCRixvQkFGa0I7QUFBQSxNQUczQkcsS0FIMkIsR0FHbkJGLFdBSG1CO0FBQUEsTUFJM0JHLFdBSjJCLEdBSWIsSUFBSUMsV0FBSixDQUFnQlAsSUFBaEIsQ0FKYTtBQUFBLE1BSzNCUSxhQUwyQixHQUtYLEtBQUtQLE9BQUwsQ0FBYVEsWUFBYixFQUxXOzs7QUFPakMsT0FBS1IsT0FBTCxDQUFhUyxVQUFiLENBQXdCTixNQUF4QixFQUFnQ0ksYUFBaEM7O0FBRUEsT0FBS1AsT0FBTCxDQUFhVSxVQUFiLENBQXdCUCxNQUF4QixFQUFnQ0UsV0FBaEMsRUFBNkNELEtBQTdDOztBQUVBLFNBQU9HLGFBQVA7QUFDRDs7QUFFRCxTQUFTSSxpQkFBVCxDQUEyQkosYUFBM0IsRUFBMEM7QUFDbEMsTUFBRU4sb0JBQUYsR0FBMkIsS0FBS0QsT0FBaEMsQ0FBRUMsb0JBQUY7QUFBQSxNQUNBRSxNQURBLEdBQ1NGLG9CQURUOzs7QUFHTixPQUFLRCxPQUFMLENBQWFTLFVBQWIsQ0FBd0JOLE1BQXhCLEVBQWdDSSxhQUFoQztBQUNEOztBQUVELFNBQVNDLFlBQVQsQ0FBc0JULElBQXRCLEVBQTRCO0FBQUEsa0JBQ1ksS0FBS0MsT0FEakI7QUFBQSxNQUNsQlksWUFEa0IsYUFDbEJBLFlBRGtCO0FBQUEsTUFDSlYsV0FESSxhQUNKQSxXQURJO0FBQUEsTUFFcEJDLE1BRm9CLEdBRVhTLFlBRlc7QUFBQSxNQUdwQlIsS0FIb0IsR0FHWkYsV0FIWTtBQUFBLE1BSXBCVyxNQUpvQixHQUlYLEtBQUtiLE9BQUwsQ0FBYVEsWUFBYixFQUpXO0FBQUEsTUFLcEJNLFlBTG9CLEdBS0wsSUFBSUMsWUFBSixDQUFpQmhCLElBQWpCLENBTEs7OztBQU8xQixPQUFLQyxPQUFMLENBQWFTLFVBQWIsQ0FBd0JOLE1BQXhCLEVBQWdDVSxNQUFoQzs7QUFFQSxPQUFLYixPQUFMLENBQWFVLFVBQWIsQ0FBd0JQLE1BQXhCLEVBQWdDVyxZQUFoQyxFQUE4Q1YsS0FBOUM7O0FBRUEsU0FBT1MsTUFBUDtBQUNEOztBQUVELFNBQVNKLFVBQVQsQ0FBb0JJLE1BQXBCLEVBQTRCRyxpQkFBNUIsRUFBK0NDLFVBQS9DLEVBQTJEO0FBQUEsa0JBQ3pCLEtBQUtqQixPQURvQjtBQUFBLE1BQ2pEWSxZQURpRCxhQUNqREEsWUFEaUQ7QUFBQSxNQUNuQ00sS0FEbUMsYUFDbkNBLEtBRG1DO0FBQUEsTUFFbkRmLE1BRm1ELEdBRTFDUyxZQUYwQztBQUFBLE1BR25ETyxJQUhtRCxHQUc1Q0QsS0FINEM7QUFBQSxNQUluREUsU0FKbUQsR0FJdkMsS0FKdUM7QUFBQSxNQUtuREMsTUFMbUQsR0FLMUMsQ0FMMEM7QUFBQSxNQU1uREMsTUFObUQsR0FNMUMsQ0FOMEM7OztBQVF6RCxPQUFLdEIsT0FBTCxDQUFhUyxVQUFiLENBQXdCTixNQUF4QixFQUFnQ1UsTUFBaEM7O0FBRUEsT0FBS2IsT0FBTCxDQUFhdUIsbUJBQWIsQ0FBaUNQLGlCQUFqQyxFQUFvREMsVUFBcEQsRUFBZ0VFLElBQWhFLEVBQXNFQyxTQUF0RSxFQUFpRkMsTUFBakYsRUFBeUZDLE1BQXpGOztBQUVBLE9BQUt0QixPQUFMLENBQWF3Qix1QkFBYixDQUFxQ1IsaUJBQXJDO0FBQ0Q7O0FBRURTLE9BQU9DLE9BQVAsR0FBaUI7QUFDZjVCLDBDQURlO0FBRWZhLHNDQUZlO0FBR2ZILDRCQUhlO0FBSWZDO0FBSmUsQ0FBakIiLCJmaWxlIjoiYnVmZmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50QnVmZmVyKGRhdGEpIHtcbiAgY29uc3QgeyBFTEVNRU5UX0FSUkFZX0JVRkZFUiwgU1RBVElDX0RSQVcgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gRUxFTUVOVF9BUlJBWV9CVUZGRVIsXG4gICAgICAgIHVzYWdlID0gU1RBVElDX0RSQVcsXG4gICAgICAgIHVpbnQxNkFycmF5ID0gbmV3IFVpbnQxNkFycmF5KGRhdGEpLFxuICAgICAgICBlbGVtZW50QnVmZmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlcigpO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgZWxlbWVudEJ1ZmZlcik7XG5cbiAgdGhpcy5jb250ZXh0LmJ1ZmZlckRhdGEodGFyZ2V0LCB1aW50MTZBcnJheSwgdXNhZ2UpO1xuXG4gIHJldHVybiBlbGVtZW50QnVmZmVyO1xufVxuXG5mdW5jdGlvbiBiaW5kRWxlbWVudEJ1ZmZlcihlbGVtZW50QnVmZmVyKSB7XG4gIGNvbnN0IHsgRUxFTUVOVF9BUlJBWV9CVUZGRVIgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gRUxFTUVOVF9BUlJBWV9CVUZGRVI7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBlbGVtZW50QnVmZmVyKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyKGRhdGEpIHtcbiAgY29uc3QgeyBBUlJBWV9CVUZGRVIsIFNUQVRJQ19EUkFXIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHRhcmdldCA9IEFSUkFZX0JVRkZFUixcbiAgICAgICAgdXNhZ2UgPSBTVEFUSUNfRFJBVyxcbiAgICAgICAgYnVmZmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlcigpLFxuICAgICAgICBmbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGRhdGEpO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgYnVmZmVyKTtcblxuICB0aGlzLmNvbnRleHQuYnVmZmVyRGF0YSh0YXJnZXQsIGZsb2F0MzJBcnJheSwgdXNhZ2UpO1xuXG4gIHJldHVybiBidWZmZXI7XG59XG5cbmZ1bmN0aW9uIGJpbmRCdWZmZXIoYnVmZmVyLCBhdHRyaWJ1dGVMb2NhdGlvbiwgY29tcG9uZW50cykge1xuICBjb25zdCB7IEFSUkFZX0JVRkZFUiwgRkxPQVQgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gQVJSQVlfQlVGRkVSLFxuICAgICAgICB0eXBlID0gRkxPQVQsXG4gICAgICAgIG5vcm1hbGl6ZSA9IGZhbHNlLFxuICAgICAgICBzdHJpZGUgPSAwLFxuICAgICAgICBvZmZzZXQgPSAwO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgYnVmZmVyKTtcblxuICB0aGlzLmNvbnRleHQudmVydGV4QXR0cmliUG9pbnRlcihhdHRyaWJ1dGVMb2NhdGlvbiwgY29tcG9uZW50cywgdHlwZSwgbm9ybWFsaXplLCBzdHJpZGUsIG9mZnNldCk7XG5cbiAgdGhpcy5jb250ZXh0LmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGF0dHJpYnV0ZUxvY2F0aW9uKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZUVsZW1lbnRCdWZmZXIsXG4gIGJpbmRFbGVtZW50QnVmZmVyLFxuICBjcmVhdGVCdWZmZXIsXG4gIGJpbmRCdWZmZXJcbn07XG4iXX0=