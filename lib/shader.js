'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var normalMatrixName = 'uNormalMatrix',
    rotationMatrixName = 'uRotationMatrix',
    positionMatrixName = 'uPositionMatrix',
    perspectiveMatrixName = 'uPerspectiveMatrix',
    vertexPositionAttributeName = 'aVertexPosition',
    vertexNormalAttributeName = 'aVertexNormal',
    calculateLightingSource = '\n\n        uniform mat4 ' + normalMatrixName + ';\n\n        attribute vec3 ' + vertexNormalAttributeName + ';\n\n        vec3 ambientLight = vec3(0.3, 0.3, 0.3),\n             directionalLightColour = vec3(1, 1, 1),\n             directionalVector = normalize(vec3(0.85, 0.8, 0.75));\n          \n        vec3 calculateLighting() {\n          vec4 transformedNormal = ' + normalMatrixName + ' * vec4(' + vertexNormalAttributeName + ', 1.0);            \n\n          float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);\n          \n          vec3 lighting = ambientLight + (directionalLightColour * directional);\n          \n          return lighting;\n        }\n\n      ',
    calculatePositionSource = '\n\n        uniform mat4 ' + rotationMatrixName + ',\n                     ' + positionMatrixName + ',\n                     ' + perspectiveMatrixName + ';\n        \n        attribute vec4 ' + vertexPositionAttributeName + ';\n\n        vec4 calculatePosition() {\n          vec4 position = ' + perspectiveMatrixName + ' * ' + positionMatrixName + ' * ' + rotationMatrixName + ' * ' + vertexPositionAttributeName + ';\n          \n          return position;\n        }\n        \n      ';

var Shader = function () {
  function Shader(program, normalMatrixUniformLocation, rotationMatrixUniformLocation, positionMatrixUniformLocation, perspectiveMatrixUniformLocation) {
    _classCallCheck(this, Shader);

    this.program = program;
    this.normalMatrixUniformLocation = normalMatrixUniformLocation;
    this.rotationMatrixUniformLocation = rotationMatrixUniformLocation;
    this.positionMatrixUniformLocation = positionMatrixUniformLocation;
    this.perspectiveMatrixUniformLocation = perspectiveMatrixUniformLocation;
  }

  _createClass(Shader, [{
    key: 'getProgram',
    value: function getProgram() {
      return this.program;
    }
  }, {
    key: 'getNormalMatrixUniformLocation',
    value: function getNormalMatrixUniformLocation() {
      return this.normalMatrixUniformLocation;
    }
  }, {
    key: 'getRotationMatrixUniformLocation',
    value: function getRotationMatrixUniformLocation() {
      return this.rotationMatrixUniformLocation;
    }
  }, {
    key: 'getPositionMatrixUniformLocation',
    value: function getPositionMatrixUniformLocation() {
      return this.positionMatrixUniformLocation;
    }
  }, {
    key: 'getPerspectiveMatrixUniformLocation',
    value: function getPerspectiveMatrixUniformLocation() {
      return this.perspectiveMatrixUniformLocation;
    }
  }, {
    key: 'createAndBindVertexPositionBuffer',
    value: function createAndBindVertexPositionBuffer(vertexPositionData, canvas) {
      var vertexPositionBuffer = canvas.createBuffer(vertexPositionData),
          vertexPositionAttributeLocation = canvas.getAttributeLocation(this.program, vertexPositionAttributeName),
          vertexPositionComponents = 3;

      canvas.bindBuffer(vertexPositionBuffer, vertexPositionAttributeLocation, vertexPositionComponents);

      var vertexPositionDataLength = vertexPositionData.length,
          count = vertexPositionDataLength / vertexPositionComponents;

      return count;
    }
  }, {
    key: 'createAndBindVertexNormalBuffer',
    value: function createAndBindVertexNormalBuffer(vertexNormalData, canvas) {
      var vertexNormalBuffer = canvas.createBuffer(vertexNormalData),
          vertexNormalAttributeLocation = canvas.getAttributeLocation(this.program, vertexNormalAttributeName),
          vertexNormalComponents = 3;

      canvas.bindBuffer(vertexNormalBuffer, vertexNormalAttributeLocation, vertexNormalComponents);
    }
  }], [{
    key: 'fromVertexShaderSourceAndFragmentShaderSource',
    value: function fromVertexShaderSourceAndFragmentShaderSource(Class, vertexShaderSource, fragmentShaderSource, canvas) {
      var context = canvas.getContext(),
          LINK_STATUS = context.LINK_STATUS,
          pname = LINK_STATUS,
          program = context.createProgram(),
          vertexShader = createVertexShader(vertexShaderSource, context),
          fragmentShader = createFragmentShader(fragmentShaderSource, context);


      context.attachShader(program, vertexShader);
      context.attachShader(program, fragmentShader);

      context.linkProgram(program);

      var linkStatus = context.getProgramParameter(program, pname);

      if (!linkStatus) {
        var message = context.getProgramInfoLog(program); ///

        throw new Error('Unable to create the colour shader program, \'' + message + '\'.');
      }

      var normalMatrixUniformLocation = canvas.getUniformLocation(program, normalMatrixName),
          rotationMatrixUniformLocation = canvas.getUniformLocation(program, rotationMatrixName),
          positionMatrixUniformLocation = canvas.getUniformLocation(program, positionMatrixName),
          perspectiveMatrixUniformLocation = canvas.getUniformLocation(program, perspectiveMatrixName),
          shader = new Class(program, normalMatrixUniformLocation, rotationMatrixUniformLocation, positionMatrixUniformLocation, perspectiveMatrixUniformLocation);

      return shader;
    }
  }]);

  return Shader;
}();

Object.assign(Shader, {
  calculateLightingSource: calculateLightingSource,
  calculatePositionSource: calculatePositionSource
});

module.exports = Shader;

function createVertexShader(vertexShaderSource, context) {
  var VERTEX_SHADER = context.VERTEX_SHADER,
      type = VERTEX_SHADER,
      vertexShader = createShader(type, vertexShaderSource, context);


  return vertexShader;
}

function createFragmentShader(fragmentShaderSource, context) {
  var FRAGMENT_SHADER = context.FRAGMENT_SHADER,
      type = FRAGMENT_SHADER,
      vertexShader = createShader(type, fragmentShaderSource, context);


  return vertexShader;
}

function createShader(type, shaderSource, context) {
  var COMPILE_STATUS = context.COMPILE_STATUS,
      pname = COMPILE_STATUS,
      shader = context.createShader(type);


  context.shaderSource(shader, shaderSource);

  context.compileShader(shader);

  var compileStatus = context.getShaderParameter(shader, pname);

  if (!compileStatus) {
    var shaderInfoLog = context.getShaderInfoLog(shader);

    throw new Error('Unable to create the shader.');
  }

  return shader;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9zaGFkZXIuanMiXSwibmFtZXMiOlsibm9ybWFsTWF0cml4TmFtZSIsInJvdGF0aW9uTWF0cml4TmFtZSIsInBvc2l0aW9uTWF0cml4TmFtZSIsInBlcnNwZWN0aXZlTWF0cml4TmFtZSIsInZlcnRleFBvc2l0aW9uQXR0cmlidXRlTmFtZSIsInZlcnRleE5vcm1hbEF0dHJpYnV0ZU5hbWUiLCJjYWxjdWxhdGVMaWdodGluZ1NvdXJjZSIsImNhbGN1bGF0ZVBvc2l0aW9uU291cmNlIiwiU2hhZGVyIiwicHJvZ3JhbSIsIm5vcm1hbE1hdHJpeFVuaWZvcm1Mb2NhdGlvbiIsInJvdGF0aW9uTWF0cml4VW5pZm9ybUxvY2F0aW9uIiwicG9zaXRpb25NYXRyaXhVbmlmb3JtTG9jYXRpb24iLCJwZXJzcGVjdGl2ZU1hdHJpeFVuaWZvcm1Mb2NhdGlvbiIsInZlcnRleFBvc2l0aW9uRGF0YSIsImNhbnZhcyIsInZlcnRleFBvc2l0aW9uQnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwidmVydGV4UG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiIsImdldEF0dHJpYnV0ZUxvY2F0aW9uIiwidmVydGV4UG9zaXRpb25Db21wb25lbnRzIiwiYmluZEJ1ZmZlciIsInZlcnRleFBvc2l0aW9uRGF0YUxlbmd0aCIsImxlbmd0aCIsImNvdW50IiwidmVydGV4Tm9ybWFsRGF0YSIsInZlcnRleE5vcm1hbEJ1ZmZlciIsInZlcnRleE5vcm1hbEF0dHJpYnV0ZUxvY2F0aW9uIiwidmVydGV4Tm9ybWFsQ29tcG9uZW50cyIsIkNsYXNzIiwidmVydGV4U2hhZGVyU291cmNlIiwiZnJhZ21lbnRTaGFkZXJTb3VyY2UiLCJnZXRDb250ZXh0IiwiTElOS19TVEFUVVMiLCJjb250ZXh0IiwicG5hbWUiLCJjcmVhdGVQcm9ncmFtIiwidmVydGV4U2hhZGVyIiwiY3JlYXRlVmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJjcmVhdGVGcmFnbWVudFNoYWRlciIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwibGlua1N0YXR1cyIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJtZXNzYWdlIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJFcnJvciIsImdldFVuaWZvcm1Mb2NhdGlvbiIsInNoYWRlciIsIk9iamVjdCIsImFzc2lnbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJWRVJURVhfU0hBREVSIiwidHlwZSIsImNyZWF0ZVNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsInNoYWRlclNvdXJjZSIsIkNPTVBJTEVfU1RBVFVTIiwiY29tcGlsZVNoYWRlciIsImNvbXBpbGVTdGF0dXMiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJzaGFkZXJJbmZvTG9nIiwiZ2V0U2hhZGVySW5mb0xvZyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLG1CQUFtQixlQUF6QjtBQUFBLElBQ01DLHFCQUFxQixpQkFEM0I7QUFBQSxJQUVNQyxxQkFBcUIsaUJBRjNCO0FBQUEsSUFHTUMsd0JBQXdCLG9CQUg5QjtBQUFBLElBSU1DLDhCQUE4QixpQkFKcEM7QUFBQSxJQUtNQyw0QkFBNEIsZUFMbEM7QUFBQSxJQU1NQyx3REFFaUJOLGdCQUZqQixvQ0FJbUJLLHlCQUpuQiw0UUFXK0JMLGdCQVgvQixnQkFXMERLLHlCQVgxRCw2UUFOTjtBQUFBLElBMkJNRSx3REFFaUJOLGtCQUZqQixnQ0FHaUJDLGtCQUhqQixnQ0FJaUJDLHFCQUpqQiw0Q0FNbUJDLDJCQU5uQiwyRUFTc0JELHFCQVR0QixXQVNpREQsa0JBVGpELFdBU3lFRCxrQkFUekUsV0FTaUdHLDJCQVRqRywyRUEzQk47O0lBMkNNSSxNO0FBQ0osa0JBQVlDLE9BQVosRUFBcUJDLDJCQUFyQixFQUFrREMsNkJBQWxELEVBQWlGQyw2QkFBakYsRUFBZ0hDLGdDQUFoSCxFQUFrSjtBQUFBOztBQUNoSixTQUFLSixPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLQywyQkFBTCxHQUFtQ0EsMkJBQW5DO0FBQ0EsU0FBS0MsNkJBQUwsR0FBcUNBLDZC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QUF0Qjs7QUFFQSxNQUFJLENBQUMwQixhQUFMLEVBQW9CO0FBQ2xCLFFBQU1FLGdCQUFnQjdCLFFBQVE4QixnQkFBUixDQUF5QmYsTUFBekIsQ0FBdEI7O0FBRUEsVUFBTSxJQUFJRixLQUFKLGdDQUFOO0FBQ0Q7O0FBRUQsU0FBT0UsTUFBUDtBQUNEIiwiZmlsZSI6InNoYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgbm9ybWFsTWF0cml4TmFtZSA9ICd1Tm9ybWFsTWF0cml4JyxcbiAgICAgIHJvdGF0aW9uTWF0cml4TmFtZSA9ICd1Um90YXRpb25NYXRyaXgnLFxuICAgICAgcG9zaXRpb25NYXRyaXhOYW1lID0gJ3VQb3NpdGlvbk1hdHJpeCcsXG4gICAgICBwZXJzcGVjdGl2ZU1hdHJpeE5hbWUgPSAndVBlcnNwZWN0aXZlTWF0cml4JyxcbiAgICAgIHZlcnRleFBvc2l0aW9uQXR0cmlidXRlTmFtZSA9ICdhVmVydGV4UG9zaXRpb24nLFxuICAgICAgdmVydGV4Tm9ybWFsQXR0cmlidXRlTmFtZSA9ICdhVmVydGV4Tm9ybWFsJyxcbiAgICAgIGNhbGN1bGF0ZUxpZ2h0aW5nU291cmNlID0gYFxuXG4gICAgICAgIHVuaWZvcm0gbWF0NCAke25vcm1hbE1hdHJpeE5hbWV9O1xuXG4gICAgICAgIGF0dHJpYnV0ZSB2ZWMzICR7dmVydGV4Tm9ybWFsQXR0cmlidXRlTmFtZX07XG5cbiAgICAgICAgdmVjMyBhbWJpZW50TGlnaHQgPSB2ZWMzKDAuMywgMC4zLCAwLjMpLFxuICAgICAgICAgICAgIGRpcmVjdGlvbmFsTGlnaHRDb2xvdXIgPSB2ZWMzKDEsIDEsIDEpLFxuICAgICAgICAgICAgIGRpcmVjdGlvbmFsVmVjdG9yID0gbm9ybWFsaXplKHZlYzMoMC44NSwgMC44LCAwLjc1KSk7XG4gICAgICAgICAgXG4gICAgICAgIHZlYzMgY2FsY3VsYXRlTGlnaHRpbmcoKSB7XG4gICAgICAgICAgdmVjNCB0cmFuc2Zvcm1lZE5vcm1hbCA9ICR7bm9ybWFsTWF0cml4TmFtZX0gKiB2ZWM0KCR7dmVydGV4Tm9ybWFsQXR0cmlidXRlTmFtZX0sIDEuMCk7ICAgICAgICAgICAgXG5cbiAgICAgICAgICBmbG9hdCBkaXJlY3Rpb25hbCA9IG1heChkb3QodHJhbnNmb3JtZWROb3JtYWwueHl6LCBkaXJlY3Rpb25hbFZlY3RvciksIDAuMCk7XG4gICAgICAgICAgXG4gICAgICAgICAgdmVjMyBsaWdodGluZyA9IGFtYmllbnRMaWdodCArIChkaXJlY3Rpb25hbExpZ2h0Q29sb3VyICogZGlyZWN0aW9uYWwpO1xuICAgICAgICAgIFxuICAgICAgICAgIHJldHVybiBsaWdodGluZztcbiAgICAgICAgfVxuXG4gICAgICBgLFxuICAgICAgY2FsY3VsYXRlUG9zaXRpb25Tb3VyY2UgPSBgXG5cbiAgICAgICAgdW5pZm9ybSBtYXQ0ICR7cm90YXRpb25NYXRyaXhOYW1lfSxcbiAgICAgICAgICAgICAgICAgICAgICR7cG9zaXRpb25NYXRyaXhOYW1lfSxcbiAgICAgICAgICAgICAgICAgICAgICR7cGVyc3BlY3RpdmVNYXRyaXhOYW1lfTtcbiAgICAgICAgXG4gICAgICAgIGF0dHJpYnV0ZSB2ZWM0ICR7dmVydGV4UG9zaXRpb25BdHRyaWJ1dGVOYW1lfTtcblxuICAgICAgICB2ZWM0IGNhbGN1bGF0ZVBvc2l0aW9uKCkge1xuICAgICAgICAgIHZlYzQgcG9zaXRpb24gPSAke3BlcnNwZWN0aXZlTWF0cml4TmFtZX0gKiAke3Bvc2l0aW9uTWF0cml4TmFtZX0gKiAke3JvdGF0aW9uTWF0cml4TmFtZX0gKiAke3ZlcnRleFBvc2l0aW9uQXR0cmlidXRlTmFtZX07XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgYDtcblxuY2xhc3MgU2hhZGVyIHtcbiAgY29uc3RydWN0b3IocHJvZ3JhbSwgbm9ybWFsTWF0cml4VW5pZm9ybUxvY2F0aW9uLCByb3RhdGlvbk1hdHJpeFVuaWZvcm1Mb2NhdGlvbiwgcG9zaXRpb25NYXRyaXhVbmlmb3JtTG9jYXRpb24sIHBlcnNwZWN0aXZlTWF0cml4VW5pZm9ybUxvY2F0aW9uKSB7XG4gICAgdGhpcy5wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICB0aGlzLm5vcm1hbE1hdHJpeFVuaWZvcm1Mb2NhdGlvbiA9IG5vcm1hbE1hdHJpeFVuaWZvcm1Mb2NhdGlvbjtcbiAgICB0aGlzLnJvdGF0aW9uTWF0cml4VW5pZm9ybUxvY2F0aW9uID0gcm90YXRpb25NYXRyaXhVbmlmb3JtTG9jYXRpb247XG4gICAgdGhpcy5wb3NpdGlvbk1hdHJpeFVuaWZvcm1Mb2NhdGlvbiA9IHBvc2l0aW9uTWF0cml4VW5pZm9ybUxvY2F0aW9uO1xuICAgIHRoaXMucGVyc3BlY3RpdmVNYXRyaXhVbmlmb3JtTG9jYXRpb24gPSBwZXJzcGVjdGl2ZU1hdHJpeFVuaWZvcm1Mb2NhdGlvbjtcbiAgfVxuXG4gIGdldFByb2dyYW0oKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvZ3JhbTtcbiAgfVxuXG4gIGdldE5vcm1hbE1hdHJpeFVuaWZvcm1Mb2NhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5ub3JtYWxNYXRyaXhVbmlmb3JtTG9jYXRpb247XG4gIH1cblxuICBnZXRSb3RhdGlvbk1hdHJpeFVuaWZvcm1Mb2NhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yb3RhdGlvbk1hdHJpeFVuaWZvcm1Mb2NhdGlvbjtcbiAgfVxuXG4gIGdldFBvc2l0aW9uTWF0cml4VW5pZm9ybUxvY2F0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uTWF0cml4VW5pZm9ybUxvY2F0aW9uO1xuICB9XG5cbiAgZ2V0UGVyc3BlY3RpdmVNYXRyaXhVbmlmb3JtTG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucGVyc3BlY3RpdmVNYXRyaXhVbmlmb3JtTG9jYXRpb247XG4gIH1cblxuICBjcmVhdGVBbmRCaW5kVmVydGV4UG9zaXRpb25CdWZmZXIodmVydGV4UG9zaXRpb25EYXRhLCBjYW52YXMpIHtcbiAgICBjb25zdCB2ZXJ0ZXhQb3NpdGlvbkJ1ZmZlciA9IGNhbnZhcy5jcmVhdGVCdWZmZXIodmVydGV4UG9zaXRpb25EYXRhKSxcbiAgICAgICAgICB2ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZUxvY2F0aW9uID0gY2FudmFzLmdldEF0dHJpYnV0ZUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgdmVydGV4UG9zaXRpb25BdHRyaWJ1dGVOYW1lKSxcbiAgICAgICAgICB2ZXJ0ZXhQb3NpdGlvbkNvbXBvbmVudHMgPSAzO1xuXG4gICAgY2FudmFzLmJpbmRCdWZmZXIodmVydGV4UG9zaXRpb25CdWZmZXIsIHZlcnRleFBvc2l0aW9uQXR0cmlidXRlTG9jYXRpb24sIHZlcnRleFBvc2l0aW9uQ29tcG9uZW50cyk7XG5cbiAgICBjb25zdCB2ZXJ0ZXhQb3NpdGlvbkRhdGFMZW5ndGggPSB2ZXJ0ZXhQb3NpdGlvbkRhdGEubGVuZ3RoLFxuICAgICAgICAgIGNvdW50ID0gdmVydGV4UG9zaXRpb25EYXRhTGVuZ3RoIC8gdmVydGV4UG9zaXRpb25Db21wb25lbnRzO1xuXG4gICAgcmV0dXJuIGNvdW50O1xuICB9XG5cbiAgY3JlYXRlQW5kQmluZFZlcnRleE5vcm1hbEJ1ZmZlcih2ZXJ0ZXhOb3JtYWxEYXRhLCBjYW52YXMpIHtcbiAgICBjb25zdCB2ZXJ0ZXhOb3JtYWxCdWZmZXIgPSBjYW52YXMuY3JlYXRlQnVmZmVyKHZlcnRleE5vcm1hbERhdGEpLFxuICAgICAgICAgIHZlcnRleE5vcm1hbEF0dHJpYnV0ZUxvY2F0aW9uID0gY2FudmFzLmdldEF0dHJpYnV0ZUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgdmVydGV4Tm9ybWFsQXR0cmlidXRlTmFtZSksXG4gICAgICAgICAgdmVydGV4Tm9ybWFsQ29tcG9uZW50cyA9IDM7XG5cbiAgICBjYW52YXMuYmluZEJ1ZmZlcih2ZXJ0ZXhOb3JtYWxCdWZmZXIsIHZlcnRleE5vcm1hbEF0dHJpYnV0ZUxvY2F0aW9uLCB2ZXJ0ZXhOb3JtYWxDb21wb25lbnRzKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tVmVydGV4U2hhZGVyU291cmNlQW5kRnJhZ21lbnRTaGFkZXJTb3VyY2UoQ2xhc3MsIHZlcnRleFNoYWRlclNvdXJjZSwgZnJhZ21lbnRTaGFkZXJTb3VyY2UsIGNhbnZhcykge1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgpLFxuICAgICAgICAgIHsgTElOS19TVEFUVVMgfSA9IGNvbnRleHQsXG4gICAgICAgICAgcG5hbWUgPSBMSU5LX1NUQVRVUyxcbiAgICAgICAgICBwcm9ncmFtID0gY29udGV4dC5jcmVhdGVQcm9ncmFtKCksXG4gICAgICAgICAgdmVydGV4U2hhZGVyID0gY3JlYXRlVmVydGV4U2hhZGVyKHZlcnRleFNoYWRlclNvdXJjZSwgY29udGV4dCksXG4gICAgICAgICAgZnJhZ21lbnRTaGFkZXIgPSBjcmVhdGVGcmFnbWVudFNoYWRlcihmcmFnbWVudFNoYWRlclNvdXJjZSwgY29udGV4dCk7XG4gIFxuICAgIGNvbnRleHQuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcik7XG4gICAgY29udGV4dC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpO1xuICBcbiAgICBjb250ZXh0LmxpbmtQcm9ncmFtKHByb2dyYW0pO1xuICBcbiAgICBjb25zdCBsaW5rU3RhdHVzID0gY29udGV4dC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIHBuYW1lKTtcbiAgXG4gICAgaWYgKCFsaW5rU3RhdHVzKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gY29udGV4dC5nZXRQcm9ncmFtSW5mb0xvZyhwcm9ncmFtKTsgIC8vL1xuICBcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGNyZWF0ZSB0aGUgY29sb3VyIHNoYWRlciBwcm9ncmFtLCAnJHttZXNzYWdlfScuYCk7XG4gICAgfVxuXG4gICAgY29uc3Qgbm9ybWFsTWF0cml4VW5pZm9ybUxvY2F0aW9uID0gY2FudmFzLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBub3JtYWxNYXRyaXhOYW1lKSxcbiAgICAgICAgICByb3RhdGlvbk1hdHJpeFVuaWZvcm1Mb2NhdGlvbiA9IGNhbnZhcy5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgcm90YXRpb25NYXRyaXhOYW1lKSxcbiAgICAgICAgICBwb3NpdGlvbk1hdHJpeFVuaWZvcm1Mb2NhdGlvbiA9IGNhbnZhcy5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgcG9zaXRpb25NYXRyaXhOYW1lKSxcbiAgICAgICAgICBwZXJzcGVjdGl2ZU1hdHJpeFVuaWZvcm1Mb2NhdGlvbiA9IGNhbnZhcy5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgcGVyc3BlY3RpdmVNYXRyaXhOYW1lKSxcbiAgICAgICAgICBzaGFkZXIgPSBuZXcgQ2xhc3MocHJvZ3JhbSwgbm9ybWFsTWF0cml4VW5pZm9ybUxvY2F0aW9uLCByb3RhdGlvbk1hdHJpeFVuaWZvcm1Mb2NhdGlvbiwgcG9zaXRpb25NYXRyaXhVbmlmb3JtTG9jYXRpb24sIHBlcnNwZWN0aXZlTWF0cml4VW5pZm9ybUxvY2F0aW9uKTtcbiAgXG4gICAgcmV0dXJuIHNoYWRlcjtcbiAgfVxufVxuXG5PYmplY3QuYXNzaWduKFNoYWRlciwge1xuICBjYWxjdWxhdGVMaWdodGluZ1NvdXJjZTogY2FsY3VsYXRlTGlnaHRpbmdTb3VyY2UsXG4gIGNhbGN1bGF0ZVBvc2l0aW9uU291cmNlOiBjYWxjdWxhdGVQb3NpdGlvblNvdXJjZVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhZGVyO1xuXG5mdW5jdGlvbiBjcmVhdGVWZXJ0ZXhTaGFkZXIodmVydGV4U2hhZGVyU291cmNlLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgVkVSVEVYX1NIQURFUiB9ID0gY29udGV4dCxcbiAgICAgICAgdHlwZSA9IFZFUlRFWF9TSEFERVIsXG4gICAgICAgIHZlcnRleFNoYWRlciA9IGNyZWF0ZVNoYWRlcih0eXBlLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiB2ZXJ0ZXhTaGFkZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50U2hhZGVyKGZyYWdtZW50U2hhZGVyU291cmNlLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgRlJBR01FTlRfU0hBREVSIH0gPSBjb250ZXh0LFxuICAgICAgICB0eXBlID0gRlJBR01FTlRfU0hBREVSLFxuICAgICAgICB2ZXJ0ZXhTaGFkZXIgPSBjcmVhdGVTaGFkZXIodHlwZSwgZnJhZ21lbnRTaGFkZXJTb3VyY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiB2ZXJ0ZXhTaGFkZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRlcih0eXBlLCBzaGFkZXJTb3VyY2UsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBDT01QSUxFX1NUQVRVUyB9ID0gY29udGV4dCxcbiAgICAgICAgcG5hbWUgPSBDT01QSUxFX1NUQVRVUyxcbiAgICAgICAgc2hhZGVyID0gY29udGV4dC5jcmVhdGVTaGFkZXIodHlwZSk7XG5cbiAgY29udGV4dC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzaGFkZXJTb3VyY2UpO1xuXG4gIGNvbnRleHQuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xuXG4gIGNvbnN0IGNvbXBpbGVTdGF0dXMgPSBjb250ZXh0LmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIHBuYW1lKTtcblxuICBpZiAoIWNvbXBpbGVTdGF0dXMpIHtcbiAgICBjb25zdCBzaGFkZXJJbmZvTG9nID0gY29udGV4dC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcik7XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBjcmVhdGUgdGhlIHNoYWRlci5gKTtcbiAgfVxuXG4gIHJldHVybiBzaGFkZXI7XG59XG4iXX0=