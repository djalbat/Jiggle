'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Shader = function () {
  function Shader(program) {
    _classCallCheck(this, Shader);

    this.program = program;
  }

  _createClass(Shader, [{
    key: 'getProgram',
    value: function getProgram() {
      return this.program;
    }
  }], [{
    key: 'fromVertexShaderSourceAndFragmentShaderSource',
    value: function fromVertexShaderSourceAndFragmentShaderSource(Class, vertexShaderSource, fragmentShaderSource, context) {
      var LINK_STATUS = context.LINK_STATUS,
          pname = LINK_STATUS,
          program = context.createProgram(),
          vertexShader = createVertexShader(vertexShaderSource, context),
          fragmentShader = createFragmentShader(fragmentShaderSource, context);


      context.attachShader(program, vertexShader);
      context.attachShader(program, fragmentShader);

      context.linkProgram(program);

      var linkStatus = context.getProgramParameter(program, pname);

      if (!linkStatus) {
        var message = context.getProgramInfoLog(program); ///

        throw new Error('Unable to create the colour shader program, \'' + message + '\'.');
      }

      var shader = new Class(program);

      return shader;
    }
  }]);

  return Shader;
}();

module.exports = Shader;

function createVertexShader(vertexShaderSource, context) {
  var VERTEX_SHADER = context.VERTEX_SHADER,
      type = VERTEX_SHADER,
      vertexShader = createShader(type, vertexShaderSource, context);


  return vertexShader;
}

function createFragmentShader(fragmentShaderSource, context) {
  var FRAGMENT_SHADER = context.FRAGMENT_SHADER,
      type = FRAGMENT_SHADER,
      vertexShader = createShader(type, fragmentShaderSource, context);


  return vertexShader;
}

function createShader(type, shaderSource, context) {
  var COMPILE_STATUS = context.COMPILE_STATUS,
      pname = COMPILE_STATUS,
      shader = context.createShader(type);


  context.shaderSource(shader, shaderSource);

  context.compileShader(shader);

  var compileStatus = context.getShaderParameter(shader, pname);

  if (!compileStatus) {
    var shaderInfoLog = context.getShaderInfoLog(shader);

    throw new Error('Unable to create the shader.');
  }

  return shader;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9zaGFkZXIuanMiXSwibmFtZXMiOlsiU2hhZGVyIiwicHJvZ3JhbSIsIkNsYXNzIiwidmVydGV4U2hhZGVyU291cmNlIiwiZnJhZ21lbnRTaGFkZXJTb3VyY2UiLCJjb250ZXh0IiwiTElOS19TVEFUVVMiLCJwbmFtZSIsImNyZWF0ZVByb2dyYW0iLCJ2ZXJ0ZXhTaGFkZXIiLCJjcmVhdGVWZXJ0ZXhTaGFkZXIiLCJmcmFnbWVudFNoYWRlciIsImNyZWF0ZUZyYWdtZW50U2hhZGVyIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJsaW5rU3RhdHVzIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIm1lc3NhZ2UiLCJnZXRQcm9ncmFtSW5mb0xvZyIsIkVycm9yIiwic2hhZGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsIlZFUlRFWF9TSEFERVIiLCJ0eXBlIiwiY3JlYXRlU2hhZGVyIiwiRlJBR01FTlRfU0hBREVSIiwic2hhZGVyU291cmNlIiwiQ09NUElMRV9TVEFUVVMiLCJjb21waWxlU2hhZGVyIiwiY29tcGlsZVN0YXR1cyIsImdldFNoYWRlclBhcmFtZXRlciIsInNoYWRlckluZm9Mb2ciLCJnZXRTaGFkZXJJbmZvTG9nIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0lBRU1BLE07QUFDSixrQkFBWUMsT0FBWixFQUFxQjtBQUFBOztBQUNuQixTQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDRDs7OztpQ0FFWTtBQUNYLGFBQU8sS0FBS0EsT0FBWjtBQUNEOzs7a0VBRW9EQyxLLEVBQU9DLGtCLEVBQW9CQyxvQixFQUFzQkMsTyxFQUFTO0FBQ3ZHLFVBQUVDLFdBQUYsR0FBa0JELE9BQWxCLENBQUVDLFdBQUY7QUFBQSxVQUNBQyxLQURBLEdBQ1FELFdBRFI7QUFBQSxVQUVBTCxPQUZBLEdBRVVJLFFBQVFHLGFBQVIsRUFGVjtBQUFBLFVBR0FDLFlBSEEsR0FHZUMsbUJBQW1CUCxrQkFBbkIsRUFBdUNFLE9BQXZDLENBSGY7QUFBQSxVQUlBTSxjQUpBLEdBSWlCQyxxQkFBcUJSLG9CQUFyQixFQUEyQ0MsT0FBM0MsQ0FKakI7OztBQU1OQSxjQUFRUSxZQUFSLENBQXFCWixPQUFyQixFQUE4QlEsWUFBOUI7QUFDQUosY0FBUVEsWUFBUixDQUFxQlosT0FBckIsRUFBOEJVLGNBQTlCOztBQUVBTixjQUFRUyxXQUFSLENBQW9CYixPQUFwQjs7QUFFQSxVQUFNYyxhQUFhVixRQUFRVyxtQkFBUixDQUE0QmYsT0FBNUIsRUFBcUNNLEtBQXJDLENBQW5COztBQUVBLFVBQUksQ0FBQ1EsVUFBTCxFQUFpQjtBQUNmLFlBQU1FLFVBQVVaLFFBQVFhLGlCQUFSLENBQTBCakIsT0FBMUIsQ0FBaEIsQ0FEZSxDQUNzQzs7QUFFckQsY0FBTSxJQUFJa0IsS0FBSixvREFBMERGLE9BQTFELFNBQU47QUFDRDs7QUFFRCxVQUFNRyxTQUFTLElBQUlsQixLQUFKLENBQVVELE9BQVYsQ0FBZjs7QUFFQSxhQUFPbUIsTUFBUDtBQUNEOzs7Ozs7QUFHSEMsT0FBT0MsT0FBUCxHQUFpQnRCLE1BQWpCOztBQUVBLFNBQVNVLGtCQUFULENBQTRCUCxrQkFBNUIsRUFBZ0RFLE9BQWhELEVBQXlEO0FBQ2pELE1BQUVrQixhQUFGLEdBQW9CbEIsT0FBcEIsQ0FBRWtCLGFBQUY7QUFBQSxNQUNBQyxJQURBLEdBQ09ELGFBRFA7QUFBQSxNQUVBZCxZQUZBLEdBRWVnQixhQUFhRCxJQUFiLEVBQW1CckIsa0JBQW5CLEVBQXVDRSxPQUF2QyxDQUZmOzs7QUFJTixTQUFPSSxZQUFQO0FBQ0Q7O0FBRUQsU0FBU0csb0JBQVQsQ0FBOEJSLG9CQUE5QixFQUFvREMsT0FBcEQsRUFBNkQ7QUFDckQsTUFBRXFCLGVBQUYsR0FBc0JyQixPQUF0QixDQUFFcUIsZUFBRjtBQUFBLE1BQ0FGLElBREEsR0FDT0UsZUFEUDtBQUFBLE1BRUFqQixZQUZBLEdBRWVnQixhQUFhRCxJQUFiLEVBQW1CcEIsb0JBQW5CLEVBQXlDQyxPQUF6QyxDQUZmOzs7QUFJTixTQUFPSSxZQUFQO0FBQ0Q7O0FBRUQsU0FBU2dCLFlBQVQsQ0FBc0JELElBQXRCLEVBQTRCRyxZQUE1QixFQUEwQ3RCLE9BQTFDLEVBQW1EO0FBQzNDLE1BQUV1QixjQUFGLEdBQXFCdkIsT0FBckIsQ0FBRXVCLGNBQUY7QUFBQSxNQUNBckIsS0FEQSxHQUNRcUIsY0FEUjtBQUFBLE1BRUFSLE1BRkEsR0FFU2YsUUFBUW9CLFlBQVIsQ0FBcUJELElBQXJCLENBRlQ7OztBQUlObkIsVUFBUXNCLFlBQVIsQ0FBcUJQLE1BQXJCLEVBQTZCTyxZQUE3Qjs7QUFFQXRCLFVBQVF3QixhQUFSLENBQXNCVCxNQUF0Qjs7QUFFQSxNQUFNVSxnQkFBZ0J6QixRQUFRMEIsa0JBQVIsQ0FBMkJYLE1BQTNCLEVBQW1DYixLQUFuQyxDQUF0Qjs7QUFFQSxNQUFJLENBQUN1QixhQUFMLEVBQW9CO0FBQ2xCLFFBQU1FLGdCQUFnQjNCLFFBQVE0QixnQkFBUixDQUF5QmIsTUFBekIsQ0FBdEI7O0FBRUEsVUFBTSxJQUFJRCxLQUFKLGdDQUFOO0FBQ0Q7O0FBRUQsU0FBT0MsTUFBUDtBQUNEIiwiZmlsZSI6InNoYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgU2hhZGVyIHtcbiAgY29uc3RydWN0b3IocHJvZ3JhbSkge1xuICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XG4gIH1cblxuICBnZXRQcm9ncmFtKCkge1xuICAgIHJldHVybiB0aGlzLnByb2dyYW07XG4gIH1cblxuICBzdGF0aWMgZnJvbVZlcnRleFNoYWRlclNvdXJjZUFuZEZyYWdtZW50U2hhZGVyU291cmNlKENsYXNzLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UsIGZyYWdtZW50U2hhZGVyU291cmNlLCBjb250ZXh0KSB7XG4gICAgY29uc3QgeyBMSU5LX1NUQVRVUyB9ID0gY29udGV4dCxcbiAgICAgICAgICBwbmFtZSA9IExJTktfU1RBVFVTLFxuICAgICAgICAgIHByb2dyYW0gPSBjb250ZXh0LmNyZWF0ZVByb2dyYW0oKSxcbiAgICAgICAgICB2ZXJ0ZXhTaGFkZXIgPSBjcmVhdGVWZXJ0ZXhTaGFkZXIodmVydGV4U2hhZGVyU291cmNlLCBjb250ZXh0KSxcbiAgICAgICAgICBmcmFnbWVudFNoYWRlciA9IGNyZWF0ZUZyYWdtZW50U2hhZGVyKGZyYWdtZW50U2hhZGVyU291cmNlLCBjb250ZXh0KTtcbiAgXG4gICAgY29udGV4dC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcbiAgICBjb250ZXh0LmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG4gIFxuICAgIGNvbnRleHQubGlua1Byb2dyYW0ocHJvZ3JhbSk7XG4gIFxuICAgIGNvbnN0IGxpbmtTdGF0dXMgPSBjb250ZXh0LmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgcG5hbWUpO1xuICBcbiAgICBpZiAoIWxpbmtTdGF0dXMpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjb250ZXh0LmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pOyAgLy8vXG4gIFxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gY3JlYXRlIHRoZSBjb2xvdXIgc2hhZGVyIHByb2dyYW0sICcke21lc3NhZ2V9Jy5gKTtcbiAgICB9XG5cbiAgICBjb25zdCBzaGFkZXIgPSBuZXcgQ2xhc3MocHJvZ3JhbSk7XG4gIFxuICAgIHJldHVybiBzaGFkZXI7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGFkZXI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVZlcnRleFNoYWRlcih2ZXJ0ZXhTaGFkZXJTb3VyY2UsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBWRVJURVhfU0hBREVSIH0gPSBjb250ZXh0LFxuICAgICAgICB0eXBlID0gVkVSVEVYX1NIQURFUixcbiAgICAgICAgdmVydGV4U2hhZGVyID0gY3JlYXRlU2hhZGVyKHR5cGUsIHZlcnRleFNoYWRlclNvdXJjZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIHZlcnRleFNoYWRlcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnRTaGFkZXIoZnJhZ21lbnRTaGFkZXJTb3VyY2UsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBGUkFHTUVOVF9TSEFERVIgfSA9IGNvbnRleHQsXG4gICAgICAgIHR5cGUgPSBGUkFHTUVOVF9TSEFERVIsXG4gICAgICAgIHZlcnRleFNoYWRlciA9IGNyZWF0ZVNoYWRlcih0eXBlLCBmcmFnbWVudFNoYWRlclNvdXJjZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIHZlcnRleFNoYWRlcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2hhZGVyKHR5cGUsIHNoYWRlclNvdXJjZSwgY29udGV4dCkge1xuICBjb25zdCB7IENPTVBJTEVfU1RBVFVTIH0gPSBjb250ZXh0LFxuICAgICAgICBwbmFtZSA9IENPTVBJTEVfU1RBVFVTLFxuICAgICAgICBzaGFkZXIgPSBjb250ZXh0LmNyZWF0ZVNoYWRlcih0eXBlKTtcblxuICBjb250ZXh0LnNoYWRlclNvdXJjZShzaGFkZXIsIHNoYWRlclNvdXJjZSk7XG5cbiAgY29udGV4dC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG5cbiAgY29uc3QgY29tcGlsZVN0YXR1cyA9IGNvbnRleHQuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgcG5hbWUpO1xuXG4gIGlmICghY29tcGlsZVN0YXR1cykge1xuICAgIGNvbnN0IHNoYWRlckluZm9Mb2cgPSBjb250ZXh0LmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTtcblxuICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGNyZWF0ZSB0aGUgc2hhZGVyLmApO1xuICB9XG5cbiAgcmV0dXJuIHNoYWRlcjtcbn1cbiJdfQ==