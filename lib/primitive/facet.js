'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Edge = require('./edge'),
    Normal = require('./normal'),
    Vertex = require('./vertex'),
    constants = require('../constants'),
    facetUtilities = require('../utilities/facet'),
    arrayUtilities = require('../utilities/array'),
    midPointUtilities = require('../utilities/midPoint'),
    approximateUtilities = require('../utilities/approximate'),
    intersectionUtilities = require('../utilities/intersection');

var VERTICES_LENGTH = constants.VERTICES_LENGTH,
    push = arrayUtilities.push,
    _permute = arrayUtilities.permute,
    isApproximatelyEqualToZero = approximateUtilities.isApproximatelyEqualToZero,
    calculateEdges = facetUtilities.calculateEdges,
    calculateNormal = facetUtilities.calculateNormal,
    calculateArea = facetUtilities.calculateArea,
    calculateMidPointPosition = midPointUtilities.calculateMidPointPosition,
    isMidPointPositionToOneSideOfMaskingEdges = midPointUtilities.isMidPointPositionToOneSideOfMaskingEdges,
    calculateIntermediateVertexPosition = intersectionUtilities.calculateIntermediateVertexPosition,
    calculateNonNullIntersections = intersectionUtilities.calculateNonNullIntersections,
    calculateNullIntersectionIndex = intersectionUtilities.calculateNullIntersectionIndex,
    calculateNonNullIntersectionIndex = intersectionUtilities.calculateNonNullIntersectionIndex;

var Facet = function () {
  function Facet(vertices, normal, edges) {
    _classCallCheck(this, Facet);

    this.vertices = vertices;
    this.normal = normal;
    this.edges = edges;
  }

  _createClass(Facet, [{
    key: 'getVertices',
    value: function getVertices() {
      return this.vertices;
    }
  }, {
    key: 'getNormal',
    value: function getNormal() {
      return this.normal;
    }
  }, {
    key: 'getEdges',
    value: function getEdges() {
      return this.edges;
    }
  }, {
    key: 'getVertexPositions',
    value: function getVertexPositions() {
      var vertexPositions = this.vertices.map(function (vertex) {
        return vertex.getPosition();
      });

      return vertexPositions;
    }
  }, {
    key: 'getVertexNormals',
    value: function getVertexNormals() {
      var normalExtent = this.normal.getExtent(),
          vertexNormal = normalExtent,
          ///
      vertexNormals = [vertexNormal, vertexNormal, vertexNormal];

      return vertexNormals;
    }
  }, {
    key: 'getVertexIndexes',
    value: function getVertexIndexes(index) {
      ///
      var vertexIndex = index * 3,
          vertexIndexes = [vertexIndex + 0, vertexIndex + 1, vertexIndex + 2];

      return vertexIndexes;
    }
  }, {
    key: 'isTooSmall',
    value: function isTooSmall() {
      var area = calculateArea(this.vertices),
          areaApproximatelyEqualToZero = isApproximatelyEqualToZero(area),
          tooSmall = areaApproximatelyEqualToZero; ///

      return tooSmall;
    }
  }, {
    key: 'isMasked',
    value: function isMasked(maskingFacet) {
      var maskingEdges = maskingFacet.getMaskingEdges(),
          midPointPosition = calculateMidPointPosition(this.vertices),
          midPointPositionToOneSideOfMaskingEdges = isMidPointPositionToOneSideOfMaskingEdges(midPointPosition, maskingEdges),
          masked = midPointPositionToOneSideOfMaskingEdges; ///

      return masked;
    }
  }, {
    key: 'permute',
    value: function permute(places) {
      this.vertices = _permute(this.vertices, places);

      this.normal = calculateNormal(this.vertices, Normal);

      this.edges = calculateEdges(this.vertices, Edge);
    }
  }, {
    key: 'rotate',
    value: function rotate(rotationQuaternion) {
      this.vertices.forEach(function (vertex) {
        return vertex.rotate(rotationQuaternion);
      });

      this.normal = calculateNormal(this.vertices, Normal);

      this.edges = calculateEdges(this.vertices, Edge);
    }
  }, {
    key: 'applyTransforms',
    value: function applyTransforms(transforms) {
      this.vertices.forEach(function (vertex) {
        return vertex.applyTransforms(transforms);
      });

      this.normal = calculateNormal(this.vertices, Normal);

      this.edges = calculateEdges(this.vertices, Edge);
    }
  }, {
    key: 'splitWithIntersections',
    value: function splitWithIntersections(intersections, smallerFacets) {
      var nonNullIntersections = calculateNonNullIntersections(intersections),
          nonNullIntersectionsLength = nonNullIntersections.length;

      switch (nonNullIntersectionsLength) {
        case 2:
          this.splitWithTwoNonNullIntersections(intersections, smallerFacets);
          break;

        case 1:
          this.splitWithOneNonNullIntersection(intersections, smallerFacets);
          break;

        case 0:
          this.splitWithNoNonNullIntersections(intersections, smallerFacets);
          break;
      }
    }
  }, {
    key: 'splitWithTwoNonNullIntersections',
    value: function splitWithTwoNonNullIntersections(intersections, smallerFacets) {
      var nullIntersectionIndex = calculateNullIntersectionIndex(intersections),
          places = (VERTICES_LENGTH - nullIntersectionIndex) % VERTICES_LENGTH;

      intersections = _permute(intersections, places);

      intersections = intersections.slice(1); ///

      this.permute(places);

      var startVertexPositionIndexes = [1, 2],
          endVertexPositionIndexes = [2, 0],
          indexTuples = [[0, 1, 3], [3, 4, 0], [3, 2, 4]];

      this.splitWithIndexTuplesAndIntersections(startVertexPositionIndexes, endVertexPositionIndexes, indexTuples, intersections, smallerFacets);
    }
  }, {
    key: 'splitWithOneNonNullIntersection',
    value: function splitWithOneNonNullIntersection(intersections, smallerFacets) {
      var nonNullIntersectionIndex = calculateNonNullIntersectionIndex(intersections),
          places = (VERTICES_LENGTH - nonNullIntersectionIndex) % VERTICES_LENGTH;

      intersections = _permute(intersections, places);

      intersections = intersections.slice(0, 1); ///

      this.permute(places);

      var startVertexPositionIndexes = [0],
          endVertexPositionIndexes = [1],
          indexTuples = [[0, 3, 2], [3, 1, 2]];

      this.splitWithIndexTuplesAndIntersections(startVertexPositionIndexes, endVertexPositionIndexes, indexTuples, intersections, smallerFacets);
    }
  }, {
    key: 'splitWithNoNonNullIntersections',
    value: function splitWithNoNonNullIntersections(intersections, smallerFacets) {
      var smallerFacet = this.fromVertices(this.vertices); ///

      smallerFacets.push(smallerFacet);
    }
  }, {
    key: 'splitWithIndexTuplesAndIntersections',
    value: function splitWithIndexTuplesAndIntersections(startVertexPositionIndexes, endVertexPositionIndexes, indexTuples, intersections, smallerFacets) {
      var _this = this;

      var vertexPositions = this.getVertexPositions(),
          intermediateVertexPositions = intersections.map(function (intersection, index) {
        var startVertexPositionIndex = startVertexPositionIndexes[index],
            endVertexPositionIndex = endVertexPositionIndexes[index],
            startVertexPosition = vertexPositions[startVertexPositionIndex],
            endVertexPosition = vertexPositions[endVertexPositionIndex],
            intermediateVertexPosition = calculateIntermediateVertexPosition(startVertexPosition, endVertexPosition, intersection);

        return intermediateVertexPosition;
      });

      push(vertexPositions, intermediateVertexPositions);

      indexTuples.forEach(function (indexTuple) {
        var positions = vertexPositions,
            ///
        indexes = indexTuple,
            ///
        facet = _this,
            smallerFacet = smallerFacetFromPositionsIndexesAndFacet(positions, indexes, facet),
            smallerFacetTooSmall = smallerFacet.isTooSmall();

        if (!smallerFacetTooSmall) {
          smallerFacets.push(smallerFacet);
        }
      });
    }
  }]);

  return Facet;
}();

module.exports = Facet;

function smallerFacetFromPositionsIndexesAndFacet(positions, indexes, facet) {
  var vertices = indexes.map(function (index) {
    var position = positions[index];

    position = position.slice(); ///

    var vertex = Vertex.fromPosition(position);

    return vertex;
  }),
      smallerFacet = facet.fromVertices(vertices);

  return smallerFacet;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9wcmltaXRpdmUvZmFjZXQuanMiXSwibmFtZXMiOlsiRWRnZSIsInJlcXVpcmUiLCJOb3JtYWwiLCJWZXJ0ZXgiLCJjb25zdGFudHMiLCJmYWNldFV0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwibWlkUG9pbnRVdGlsaXRpZXMiLCJhcHByb3hpbWF0ZVV0aWxpdGllcyIsImludGVyc2VjdGlvblV0aWxpdGllcyIsIlZFUlRJQ0VTX0xFTkdUSCIsInB1c2giLCJwZXJtdXRlIiwiaXNBcHByb3hpbWF0ZWx5RXF1YWxUb1plcm8iLCJjYWxjdWxhdGVFZGdlcyIsImNhbGN1bGF0ZU5vcm1hbCIsImNhbGN1bGF0ZUFyZWEiLCJjYWxjdWxhdGVNaWRQb2ludFBvc2l0aW9uIiwiaXNNaWRQb2ludFBvc2l0aW9uVG9PbmVTaWRlT2ZNYXNraW5nRWRnZXMiLCJjYWxjdWxhdGVJbnRlcm1lZGlhdGVWZXJ0ZXhQb3NpdGlvbiIsImNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25zIiwiY2FsY3VsYXRlTnVsbEludGVyc2VjdGlvbkluZGV4IiwiY2FsY3VsYXRlTm9uTnVsbEludGVyc2VjdGlvbkluZGV4IiwiRmFjZXQiLCJ2ZXJ0aWNlcyIsIm5vcm1hbCIsImVkZ2VzIiwidmVydGV4UG9zaXRpb25zIiwibWFwIiwidmVydGV4IiwiZ2V0UG9zaXRpb24iLCJub3JtYWxFeHRlbnQiLCJnZXRFeHRlbnQiLCJ2ZXJ0ZXhOb3JtYWwiLCJ2ZXJ0ZXhOb3JtYWxzIiwiaW5kZXgiLCJ2ZXJ0ZXhJbmRleCIsInZlcnRleEluZGV4ZXMiLCJhcmVhIiwiYXJlYUFwcHJveGltYXRlbHlFcXVhbFRvWmVybyIsInRvb1NtYWxsIiwibWFza2luZ0ZhY2V0IiwibWFza2luZ0VkZ2VzIiwiZ2V0TWFza2luZ0VkZ2VzIiwibWlkUG9pbnRQb3NpdGlvbiIsIm1pZFBvaW50UG9zaXRpb25Ub09uZVNpZGVPZk1hc2tpbmdFZGdlcyIsIm1hc2tlZCIsInBsYWNlcyIsInJvdGF0aW9uUXVhdGVybmlvbiIsImZvckVhY2giLCJyb3RhdGUiLCJ0cmFuc2Zvcm1zIiwiYXBwbHlUcmFuc2Zvcm1zIiwiaW50ZXJzZWN0aW9ucyIsInNtYWxsZXJGYWNldHMiLCJub25OdWxsSW50ZXJzZWN0aW9ucyIsIm5vbk51bGxJbnRlcnNlY3Rpb25zTGVuZ3RoIiwibGVuZ3RoIiwic3BsaXRXaXRoVHdvTm9uTnVsbEludGVyc2VjdGlvbnMiLCJzcGxpdFdpdGhPbmVOb25OdWxsSW50ZXJzZWN0aW9uIiwic3BsaXRXaXRoTm9Ob25OdWxsSW50ZXJzZWN0aW9ucyIsIm51bGxJbnRlcnNlY3Rpb25JbmRleCIsInNsaWNlIiwic3RhcnRWZXJ0ZXhQb3NpdGlvbkluZGV4ZXMiLCJlbmRWZXJ0ZXhQb3NpdGlvbkluZGV4ZXMiLCJpbmRleFR1cGxlcyIsInNwbGl0V2l0aEluZGV4VHVwbGVzQW5kSW50ZXJzZWN0aW9ucyIsIm5vbk51bGxJbnRlcnNlY3Rpb25JbmRleCIsInNtYWxsZXJGYWNldCIsImZyb21WZXJ0aWNlcyIsImdldFZlcnRleFBvc2l0aW9ucyIsImludGVybWVkaWF0ZVZlcnRleFBvc2l0aW9ucyIsImludGVyc2VjdGlvbiIsInN0YXJ0VmVydGV4UG9zaXRpb25JbmRleCIsImVuZFZlcnRleFBvc2l0aW9uSW5kZXgiLCJzdGFydFZlcnRleFBvc2l0aW9uIiwiZW5kVmVydGV4UG9zaXRpb24iLCJpbnRlcm1lZGlhdGVWZXJ0ZXhQb3NpdGlvbiIsImluZGV4VHVwbGUiLCJwb3NpdGlvbnMiLCJpbmRleGVzIiwiZmFjZXQiLCJzbWFsbGVyRmFjZXRGcm9tUG9zaXRpb25zSW5kZXhlc0FuZEZhY2V0Iiwic21hbGxlckZhY2V0VG9vU21hbGwiLCJpc1Rvb1NtYWxsIiwibW9kdWxlIiwiZXhwb3J0cyIsInBvc2l0aW9uIiwiZnJvbVBvc2l0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxRQUFSLENBQWI7QUFBQSxJQUNNQyxTQUFTRCxRQUFRLFVBQVIsQ0FE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QUE0RUosWUFBNUUsQ0FKbkM7O0FBTUEsZUFBT0ssMEJBQVA7QUFDRCxPQVI2QixDQURwQzs7QUFXQWxFLFdBQUtnQixlQUFMLEVBQXNCNEMsMkJBQXRCOztBQUVBTixrQkFBWWhCLE9BQVosQ0FBb0IsVUFBQzZCLFVBQUQsRUFBZ0I7QUFDbEMsWUFBTUMsWUFBWXBELGVBQWxCO0FBQUEsWUFBb0M7QUFDOUJxRCxrQkFBVUYsVUFEaEI7QUFBQSxZQUM2QjtBQUN2QkcsZ0JBQVEsS0FGZDtBQUFBLFlBR01iLGVBQWVjLHlDQUF5Q0gsU0FBekMsRUFBb0RDLE9BQXBELEVBQTZEQyxLQUE3RCxDQUhyQjtBQUFBLFlBSU1FLHVCQUF1QmYsYUFBYWdCLFVBQWIsRUFKN0I7O0FBTUEsWUFBSSxDQUFDRCxvQkFBTCxFQUEyQjtBQUN6QjdCLHdCQUFjM0MsSUFBZCxDQUFtQnlELFlBQW5CO0FBQ0Q7QUFDRixPQVZEO0FBV0Q7Ozs7OztBQUdIaUIsT0FBT0MsT0FBUCxHQUFpQi9ELEtBQWpCOztBQUVBLFNBQVMyRCx3Q0FBVCxDQUFrREgsU0FBbEQsRUFBNkRDLE9BQTdELEVBQXNFQyxLQUF0RSxFQUE2RTtBQUMzRSxNQUFNekQsV0FBV3dELFFBQVFwRCxHQUFSLENBQVksVUFBQ08sS0FBRCxFQUFXO0FBQ2hDLFFBQUlvRCxXQUFXUixVQUFVNUMsS0FBVixDQUFmOztBQUVBb0QsZUFBV0EsU0FBU3pCLEtBQVQsRUFBWCxDQUhnQyxDQUdIOztBQUU3QixRQUFNakMsU0FBUzFCLE9BQU9xRixZQUFQLENBQW9CRCxRQUFwQixDQUFmOztBQUVBLFdBQU8xRCxNQUFQO0FBQ0QsR0FSVSxDQUFqQjtBQUFBLE1BU011QyxlQUFlYSxNQUFNWixZQUFOLENBQW1CN0MsUUFBbkIsQ0FUckI7O0FBV0EsU0FBTzRDLFlBQVA7QUFDRCIsImZpbGUiOiJmYWNldC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRWRnZSA9IHJlcXVpcmUoJy4vZWRnZScpLFxuICAgICAgTm9ybWFsID0gcmVxdWlyZSgnLi9ub3JtYWwnKSxcbiAgICAgIFZlcnRleCA9IHJlcXVpcmUoJy4vdmVydGV4JyksXG4gICAgICBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIGZhY2V0VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2ZhY2V0JyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgbWlkUG9pbnRVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvbWlkUG9pbnQnKSxcbiAgICAgIGFwcHJveGltYXRlVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FwcHJveGltYXRlJyksXG4gICAgICBpbnRlcnNlY3Rpb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvaW50ZXJzZWN0aW9uJyk7XG5cbmNvbnN0IHsgVkVSVElDRVNfTEVOR1RIIH0gPSBjb25zdGFudHMsXG4gICAgICB7IHB1c2gsIHBlcm11dGUgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBpc0FwcHJveGltYXRlbHlFcXVhbFRvWmVybyB9ID0gYXBwcm94aW1hdGVVdGlsaXRpZXMsXG4gICAgICB7IGNhbGN1bGF0ZUVkZ2VzLCBjYWxjdWxhdGVOb3JtYWwsIGNhbGN1bGF0ZUFyZWEgfSA9IGZhY2V0VXRpbGl0aWVzLFxuICAgICAgeyBjYWxjdWxhdGVNaWRQb2ludFBvc2l0aW9uLCBpc01pZFBvaW50UG9zaXRpb25Ub09uZVNpZGVPZk1hc2tpbmdFZGdlcyB9ID0gbWlkUG9pbnRVdGlsaXRpZXMsXG4gICAgICB7IGNhbGN1bGF0ZUludGVybWVkaWF0ZVZlcnRleFBvc2l0aW9uLCBjYWxjdWxhdGVOb25OdWxsSW50ZXJzZWN0aW9ucywgY2FsY3VsYXRlTnVsbEludGVyc2VjdGlvbkluZGV4LCBjYWxjdWxhdGVOb25OdWxsSW50ZXJzZWN0aW9uSW5kZXggfSA9IGludGVyc2VjdGlvblV0aWxpdGllcztcblxuY2xhc3MgRmFjZXQge1xuICBjb25zdHJ1Y3Rvcih2ZXJ0aWNlcywgbm9ybWFsLCBlZGdlcykge1xuICAgIHRoaXMudmVydGljZXMgPSB2ZXJ0aWNlcztcbiAgICB0aGlzLm5vcm1hbCA9IG5vcm1hbDtcbiAgICB0aGlzLmVkZ2VzID0gZWRnZXM7XG4gIH1cblxuICBnZXRWZXJ0aWNlcygpIHtcbiAgICByZXR1cm4gdGhpcy52ZXJ0aWNlcztcbiAgfVxuXG4gIGdldE5vcm1hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub3JtYWw7XG4gIH1cblxuICBnZXRFZGdlcygpIHtcbiAgICByZXR1cm4gdGhpcy5lZGdlcztcbiAgfVxuICBcbiAgZ2V0VmVydGV4UG9zaXRpb25zKCkge1xuICAgIGNvbnN0IHZlcnRleFBvc2l0aW9ucyA9IHRoaXMudmVydGljZXMubWFwKCh2ZXJ0ZXgpID0+IHZlcnRleC5nZXRQb3NpdGlvbigpKTtcbiAgICBcbiAgICByZXR1cm4gdmVydGV4UG9zaXRpb25zO1xuICB9XG4gIFxuICBnZXRWZXJ0ZXhOb3JtYWxzKCkge1xuICAgIGNvbnN0IG5vcm1hbEV4dGVudCA9IHRoaXMubm9ybWFsLmdldEV4dGVudCgpLFxuICAgICAgICAgIHZlcnRleE5vcm1hbCA9IG5vcm1hbEV4dGVudCwgIC8vL1xuICAgICAgICAgIHZlcnRleE5vcm1hbHMgPSBbXG4gICAgICAgICAgICB2ZXJ0ZXhOb3JtYWwsXG4gICAgICAgICAgICB2ZXJ0ZXhOb3JtYWwsXG4gICAgICAgICAgICB2ZXJ0ZXhOb3JtYWwsXG4gICAgICAgICAgXTtcbiAgICBcbiAgICByZXR1cm4gdmVydGV4Tm9ybWFscztcbiAgfVxuICBcbiAgZ2V0VmVydGV4SW5kZXhlcyhpbmRleCkgeyAvLy9cbiAgICBjb25zdCB2ZXJ0ZXhJbmRleCA9IGluZGV4ICogMyxcbiAgICAgICAgICB2ZXJ0ZXhJbmRleGVzID0gW1xuICAgICAgICAgICAgdmVydGV4SW5kZXggKyAwLFxuICAgICAgICAgICAgdmVydGV4SW5kZXggKyAxLFxuICAgICAgICAgICAgdmVydGV4SW5kZXggKyAyLFxuICAgICAgICAgIF07XG4gICAgXG4gICAgcmV0dXJuIHZlcnRleEluZGV4ZXM7XG4gIH1cblxuICBpc1Rvb1NtYWxsKCkge1xuICAgIGNvbnN0IGFyZWEgPSBjYWxjdWxhdGVBcmVhKHRoaXMudmVydGljZXMpLFxuICAgICAgICAgIGFyZWFBcHByb3hpbWF0ZWx5RXF1YWxUb1plcm8gPSBpc0FwcHJveGltYXRlbHlFcXVhbFRvWmVybyhhcmVhKSxcbiAgICAgICAgICB0b29TbWFsbCA9IGFyZWFBcHByb3hpbWF0ZWx5RXF1YWxUb1plcm87ICAvLy9cblxuICAgIHJldHVybiB0b29TbWFsbDtcbiAgfVxuXG4gIGlzTWFza2VkKG1hc2tpbmdGYWNldCkge1xuICAgIGNvbnN0IG1hc2tpbmdFZGdlcyA9IG1hc2tpbmdGYWNldC5nZXRNYXNraW5nRWRnZXMoKSxcbiAgICAgICAgICBtaWRQb2ludFBvc2l0aW9uID0gY2FsY3VsYXRlTWlkUG9pbnRQb3NpdGlvbih0aGlzLnZlcnRpY2VzKSxcbiAgICAgICAgICBtaWRQb2ludFBvc2l0aW9uVG9PbmVTaWRlT2ZNYXNraW5nRWRnZXMgPSBpc01pZFBvaW50UG9zaXRpb25Ub09uZVNpZGVPZk1hc2tpbmdFZGdlcyhtaWRQb2ludFBvc2l0aW9uLCBtYXNraW5nRWRnZXMpLFxuICAgICAgICAgIG1hc2tlZCA9IG1pZFBvaW50UG9zaXRpb25Ub09uZVNpZGVPZk1hc2tpbmdFZGdlczsgIC8vL1xuICAgIFxuICAgIHJldHVybiBtYXNrZWQ7XG4gIH1cblxuICBwZXJtdXRlKHBsYWNlcykge1xuICAgIHRoaXMudmVydGljZXMgPSBwZXJtdXRlKHRoaXMudmVydGljZXMsIHBsYWNlcyk7XG5cbiAgICB0aGlzLm5vcm1hbCA9IGNhbGN1bGF0ZU5vcm1hbCh0aGlzLnZlcnRpY2VzLCBOb3JtYWwpO1xuXG4gICAgdGhpcy5lZGdlcyA9IGNhbGN1bGF0ZUVkZ2VzKHRoaXMudmVydGljZXMsIEVkZ2UpO1xuICB9XG5cbiAgcm90YXRlKHJvdGF0aW9uUXVhdGVybmlvbikge1xuICAgIHRoaXMudmVydGljZXMuZm9yRWFjaCgodmVydGV4KSA9PiB2ZXJ0ZXgucm90YXRlKHJvdGF0aW9uUXVhdGVybmlvbikpO1xuXG4gICAgdGhpcy5ub3JtYWwgPSBjYWxjdWxhdGVOb3JtYWwodGhpcy52ZXJ0aWNlcywgTm9ybWFsKTtcblxuICAgIHRoaXMuZWRnZXMgPSBjYWxjdWxhdGVFZGdlcyh0aGlzLnZlcnRpY2VzLCBFZGdlKTtcbiAgfVxuXG4gIGFwcGx5VHJhbnNmb3Jtcyh0cmFuc2Zvcm1zKSB7XG4gICAgdGhpcy52ZXJ0aWNlcy5mb3JFYWNoKCh2ZXJ0ZXgpID0+IHZlcnRleC5hcHBseVRyYW5zZm9ybXModHJhbnNmb3JtcykpO1xuXG4gICAgdGhpcy5ub3JtYWwgPSBjYWxjdWxhdGVOb3JtYWwodGhpcy52ZXJ0aWNlcywgTm9ybWFsKTtcblxuICAgIHRoaXMuZWRnZXMgPSBjYWxjdWxhdGVFZGdlcyh0aGlzLnZlcnRpY2VzLCBFZGdlKTtcbiAgfVxuXG4gIHNwbGl0V2l0aEludGVyc2VjdGlvbnMoaW50ZXJzZWN0aW9ucywgc21hbGxlckZhY2V0cykge1xuICAgIGNvbnN0IG5vbk51bGxJbnRlcnNlY3Rpb25zID0gY2FsY3VsYXRlTm9uTnVsbEludGVyc2VjdGlvbnMoaW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgbm9uTnVsbEludGVyc2VjdGlvbnNMZW5ndGggPSBub25OdWxsSW50ZXJzZWN0aW9ucy5sZW5ndGg7XG5cbiAgICBzd2l0Y2ggKG5vbk51bGxJbnRlcnNlY3Rpb25zTGVuZ3RoKSB7XG4gICAgICBjYXNlIDIgOlxuICAgICAgICB0aGlzLnNwbGl0V2l0aFR3b05vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAxIDpcbiAgICAgICAgdGhpcy5zcGxpdFdpdGhPbmVOb25OdWxsSW50ZXJzZWN0aW9uKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAwIDpcbiAgICAgICAgdGhpcy5zcGxpdFdpdGhOb05vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgXG4gIHNwbGl0V2l0aFR3b05vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpIHtcbiAgICBjb25zdCBudWxsSW50ZXJzZWN0aW9uSW5kZXggPSBjYWxjdWxhdGVOdWxsSW50ZXJzZWN0aW9uSW5kZXgoaW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgcGxhY2VzID0gKFZFUlRJQ0VTX0xFTkdUSCAtIG51bGxJbnRlcnNlY3Rpb25JbmRleCkgJSBWRVJUSUNFU19MRU5HVEg7XG5cbiAgICBpbnRlcnNlY3Rpb25zID0gcGVybXV0ZShpbnRlcnNlY3Rpb25zLCBwbGFjZXMpO1xuXG4gICAgaW50ZXJzZWN0aW9ucyA9IGludGVyc2VjdGlvbnMuc2xpY2UoMSk7IC8vL1xuXG4gICAgdGhpcy5wZXJtdXRlKHBsYWNlcyk7XG5cbiAgICBjb25zdCBzdGFydFZlcnRleFBvc2l0aW9uSW5kZXhlcyA9IFsgMSwgMiBdLFxuICAgICAgICAgIGVuZFZlcnRleFBvc2l0aW9uSW5kZXhlcyA9IFsgMiwgMCBdLFxuICAgICAgICAgIGluZGV4VHVwbGVzID0gW1xuXG4gICAgICAgICAgICBbIDAsIDEsIDMgXSxcbiAgICAgICAgICAgIFsgMywgNCwgMCBdLFxuICAgICAgICAgICAgWyAzLCAyLCA0IF0sXG5cbiAgICAgICAgICBdO1xuXG4gICAgdGhpcy5zcGxpdFdpdGhJbmRleFR1cGxlc0FuZEludGVyc2VjdGlvbnMoc3RhcnRWZXJ0ZXhQb3NpdGlvbkluZGV4ZXMsIGVuZFZlcnRleFBvc2l0aW9uSW5kZXhlcywgaW5kZXhUdXBsZXMsIGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICB9XG5cbiAgc3BsaXRXaXRoT25lTm9uTnVsbEludGVyc2VjdGlvbihpbnRlcnNlY3Rpb25zLCBzbWFsbGVyRmFjZXRzKSB7XG4gICAgY29uc3Qgbm9uTnVsbEludGVyc2VjdGlvbkluZGV4ID0gY2FsY3VsYXRlTm9uTnVsbEludGVyc2VjdGlvbkluZGV4KGludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIHBsYWNlcyA9IChWRVJUSUNFU19MRU5HVEggLSBub25OdWxsSW50ZXJzZWN0aW9uSW5kZXgpICUgVkVSVElDRVNfTEVOR1RIO1xuXG4gICAgaW50ZXJzZWN0aW9ucyA9IHBlcm11dGUoaW50ZXJzZWN0aW9ucywgcGxhY2VzKTtcblxuICAgIGludGVyc2VjdGlvbnMgPSBpbnRlcnNlY3Rpb25zLnNsaWNlKDAsIDEpOyAgLy8vXG5cbiAgICB0aGlzLnBlcm11dGUocGxhY2VzKTtcblxuICAgIGNvbnN0IHN0YXJ0VmVydGV4UG9zaXRpb25JbmRleGVzID0gWyAwIF0sXG4gICAgICAgICAgZW5kVmVydGV4UG9zaXRpb25JbmRleGVzID0gWyAxIF0sXG4gICAgICAgICAgaW5kZXhUdXBsZXMgPSBbXG5cbiAgICAgICAgICAgIFsgMCwgMywgMiBdLFxuICAgICAgICAgICAgWyAzLCAxLCAyIF0sXG5cbiAgICAgICAgICBdO1xuXG4gICAgdGhpcy5zcGxpdFdpdGhJbmRleFR1cGxlc0FuZEludGVyc2VjdGlvbnMoc3RhcnRWZXJ0ZXhQb3NpdGlvbkluZGV4ZXMsIGVuZFZlcnRleFBvc2l0aW9uSW5kZXhlcywgaW5kZXhUdXBsZXMsIGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICB9XG5cbiAgc3BsaXRXaXRoTm9Ob25OdWxsSW50ZXJzZWN0aW9ucyhpbnRlcnNlY3Rpb25zLCBzbWFsbGVyRmFjZXRzKSB7XG4gICAgY29uc3Qgc21hbGxlckZhY2V0ID0gdGhpcy5mcm9tVmVydGljZXModGhpcy52ZXJ0aWNlcyk7ICAvLy9cblxuICAgIHNtYWxsZXJGYWNldHMucHVzaChzbWFsbGVyRmFjZXQpO1xuICB9XG5cbiAgc3BsaXRXaXRoSW5kZXhUdXBsZXNBbmRJbnRlcnNlY3Rpb25zKHN0YXJ0VmVydGV4UG9zaXRpb25JbmRleGVzLCBlbmRWZXJ0ZXhQb3NpdGlvbkluZGV4ZXMsIGluZGV4VHVwbGVzLCBpbnRlcnNlY3Rpb25zLCBzbWFsbGVyRmFjZXRzKSB7XG4gICAgY29uc3QgdmVydGV4UG9zaXRpb25zID0gdGhpcy5nZXRWZXJ0ZXhQb3NpdGlvbnMoKSxcbiAgICAgICAgICBpbnRlcm1lZGlhdGVWZXJ0ZXhQb3NpdGlvbnMgPSBpbnRlcnNlY3Rpb25zLm1hcCgoaW50ZXJzZWN0aW9uLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnRWZXJ0ZXhQb3NpdGlvbkluZGV4ID0gc3RhcnRWZXJ0ZXhQb3NpdGlvbkluZGV4ZXNbaW5kZXhdLFxuICAgICAgICAgICAgICAgICAgZW5kVmVydGV4UG9zaXRpb25JbmRleCA9IGVuZFZlcnRleFBvc2l0aW9uSW5kZXhlc1tpbmRleF0sXG4gICAgICAgICAgICAgICAgICBzdGFydFZlcnRleFBvc2l0aW9uID0gdmVydGV4UG9zaXRpb25zW3N0YXJ0VmVydGV4UG9zaXRpb25JbmRleF0sXG4gICAgICAgICAgICAgICAgICBlbmRWZXJ0ZXhQb3NpdGlvbiA9IHZlcnRleFBvc2l0aW9uc1tlbmRWZXJ0ZXhQb3NpdGlvbkluZGV4XSxcbiAgICAgICAgICAgICAgICAgIGludGVybWVkaWF0ZVZlcnRleFBvc2l0aW9uID0gY2FsY3VsYXRlSW50ZXJtZWRpYXRlVmVydGV4UG9zaXRpb24oc3RhcnRWZXJ0ZXhQb3NpdGlvbiwgZW5kVmVydGV4UG9zaXRpb24sIGludGVyc2VjdGlvbik7XG5cbiAgICAgICAgICAgIHJldHVybiBpbnRlcm1lZGlhdGVWZXJ0ZXhQb3NpdGlvbjtcbiAgICAgICAgICB9KTtcblxuICAgIHB1c2godmVydGV4UG9zaXRpb25zLCBpbnRlcm1lZGlhdGVWZXJ0ZXhQb3NpdGlvbnMpO1xuXG4gICAgaW5kZXhUdXBsZXMuZm9yRWFjaCgoaW5kZXhUdXBsZSkgPT4ge1xuICAgICAgY29uc3QgcG9zaXRpb25zID0gdmVydGV4UG9zaXRpb25zLCAgLy8vXG4gICAgICAgICAgICBpbmRleGVzID0gaW5kZXhUdXBsZSwgIC8vL1xuICAgICAgICAgICAgZmFjZXQgPSB0aGlzLCBcbiAgICAgICAgICAgIHNtYWxsZXJGYWNldCA9IHNtYWxsZXJGYWNldEZyb21Qb3NpdGlvbnNJbmRleGVzQW5kRmFjZXQocG9zaXRpb25zLCBpbmRleGVzLCBmYWNldCksXG4gICAgICAgICAgICBzbWFsbGVyRmFjZXRUb29TbWFsbCA9IHNtYWxsZXJGYWNldC5pc1Rvb1NtYWxsKCk7XG5cbiAgICAgIGlmICghc21hbGxlckZhY2V0VG9vU21hbGwpIHtcbiAgICAgICAgc21hbGxlckZhY2V0cy5wdXNoKHNtYWxsZXJGYWNldCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGYWNldDtcblxuZnVuY3Rpb24gc21hbGxlckZhY2V0RnJvbVBvc2l0aW9uc0luZGV4ZXNBbmRGYWNldChwb3NpdGlvbnMsIGluZGV4ZXMsIGZhY2V0KSB7XG4gIGNvbnN0IHZlcnRpY2VzID0gaW5kZXhlcy5tYXAoKGluZGV4KSA9PiB7XG4gICAgICAgICAgbGV0IHBvc2l0aW9uID0gcG9zaXRpb25zW2luZGV4XTtcbiAgICBcbiAgICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uLnNsaWNlKCk7IC8vL1xuICAgIFxuICAgICAgICAgIGNvbnN0IHZlcnRleCA9IFZlcnRleC5mcm9tUG9zaXRpb24ocG9zaXRpb24pO1xuXG4gICAgICAgICAgcmV0dXJuIHZlcnRleDtcbiAgICAgICAgfSksXG4gICAgICAgIHNtYWxsZXJGYWNldCA9IGZhY2V0LmZyb21WZXJ0aWNlcyh2ZXJ0aWNlcyk7XG5cbiAgcmV0dXJuIHNtYWxsZXJGYWNldDtcbn1cbiJdfQ==