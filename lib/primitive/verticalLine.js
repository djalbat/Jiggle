'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var arrayUtilities = require('../utilities/array'),
    rotationUtilities = require('../utilities/rotation'),
    quaternionUtilities = require('../utilities/quaternion'),
    intersectionUtilities = require('../utilities/intersection');

var first = arrayUtilities.first,
    rotatePosition = rotationUtilities.rotatePosition,
    calculateIntersection = intersectionUtilities.calculateIntersection,
    calculateRotationAboutZAxisQuaternion = quaternionUtilities.calculateRotationAboutZAxisQuaternion,
    calculateForwardsRotationQuaternion = quaternionUtilities.calculateForwardsRotationQuaternion,
    calculateBackwardsRotationQuaternion = quaternionUtilities.calculateBackwardsRotationQuaternion;

var VerticalLine = /*#__PURE__*/function () {
  function VerticalLine(firstPositionComponent, forwardsRotationQuaternion, backwardsRotationQuaternion) {
    _classCallCheck(this, VerticalLine);

    this.firstPositionComponent = firstPositionComponent;
    this.forwardsRotationQuaternion = forwardsRotationQuaternion;
    this.backwardsRotationQuaternion = backwardsRotationQuaternion;
  }

  _createClass(VerticalLine, [{
    key: "getFirstPositionComponent",
    value: function getFirstPositionComponent() {
      return this.firstPositionComponent;
    }
  }, {
    key: "getForwardsRotationQuaternion",
    value: function getForwardsRotationQuaternion() {
      return this.forwardsRotationQuaternion;
    }
  }, {
    key: "getBackwardsRotationQuaternion",
    value: function getBackwardsRotationQuaternion() {
      return this.backwardsRotationQuaternion;
    }
  }, {
    key: "splitFacet",
    value: function splitFacet(facet, smallerFacets) {
      var _this = this;

      var edges = facet.getEdges(),
          intersections = edges.map(function (edge) {
        var intersection = calculateIntersection(edge, _this.firstPositionComponent);
        return intersection;
      });
      facet.splitWithIntersections(intersections, smallerFacets);
    }
  }, {
    key: "splitFacets",
    value: function splitFacets(facets) {
      var _this2 = this;

      var smallerFacets = [];
      facets.forEach(function (facet) {
        facet.rotate(_this2.forwardsRotationQuaternion);

        _this2.splitFacet(facet, smallerFacets);
      });
      smallerFacets.forEach(function (smallerFacet) {
        return smallerFacet.rotate(_this2.backwardsRotationQuaternion);
      });
      return smallerFacets;
    }
  }], [{
    key: "fromMaskingEdge",
    value: function fromMaskingEdge(maskingEdge) {
      var maskingEdgePosition = maskingEdge.getPosition(),
          rotationAboutZAxisQuaternion = calculateRotationAboutZAxisQuaternion(maskingEdge),
          rotationQuaternion = rotationAboutZAxisQuaternion,
          ///
      forwardsRotationQuaternion = calculateForwardsRotationQuaternion(rotationQuaternion),
          backwardsRotationQuaternion = calculateBackwardsRotationQuaternion(rotationQuaternion),
          position = rotatePosition(maskingEdgePosition, rotationQuaternion),
          positionComponents = position,
          ///
      firstPositionComponent = first(positionComponents),
          verticalLine = new VerticalLine(firstPositionComponent, forwardsRotationQuaternion, backwardsRotationQuaternion);
      return verticalLine;
    }
  }]);

  return VerticalLine;
}();

module.exports = VerticalLine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlcnRpY2FsTGluZS5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInJlcXVpcmUiLCJyb3RhdGlvblV0aWxpdGllcyIsInF1YXRlcm5pb25VdGlsaXRpZXMiLCJpbnRlcnNlY3Rpb25VdGlsaXRpZXMiLCJmaXJzdCIsInJvdGF0ZVBvc2l0aW9uIiwiY2FsY3VsYXRlSW50ZXJzZWN0aW9uIiwiY2FsY3VsYXRlUm90YXRpb25BYm91dFpBeGlzUXVhdGVybmlvbiIsImNhbGN1bGF0ZUZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uIiwiY2FsY3VsYXRlQmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uIiwiVmVydGljYWxMaW5lIiwiZmlyc3RQb3NpdGlvbkNvbXBvbmVudCIsImZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uIiwiYmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uIiwiZmFjZXQiLCJzbWFsbGVyRmFjZXRzIiwiZWRnZXMiLCJnZXRFZGdlcyIsImludGVyc2VjdGlvbnMiLCJtYXAiLCJlZGdlIiwiaW50ZXJzZWN0aW9uIiwic3BsaXRXaXRoSW50ZXJzZWN0aW9ucyIsImZhY2V0cyIsImZvckVhY2giLCJyb3RhdGUiLCJzcGxpdEZhY2V0Iiwic21hbGxlckZhY2V0IiwibWFza2luZ0VkZ2UiLCJtYXNraW5nRWRnZVBvc2l0aW9uIiwiZ2V0UG9zaXRpb24iLCJyb3RhdGlvbkFib3V0WkF4aXNRdWF0ZXJuaW9uIiwicm90YXRpb25RdWF0ZXJuaW9uIiwicG9zaXRpb24iLCJwb3NpdGlvbkNvbXBvbmVudHMiLCJ2ZXJ0aWNhbExpbmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFFQSxJQUFNQSxjQUFjLEdBQUdDLE9BQU8sQ0FBQyxvQkFBRCxDQUE5QjtBQUFBLElBQ01DLGlCQUFpQixHQUFHRCxPQUFPLENBQUMsdUJBQUQsQ0FEakM7QUFBQSxJQUVNRSxtQkFBbUIsR0FBR0YsT0FBTyxDQUFDLHlCQUFE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Q29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICByb3RhdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9yb3RhdGlvbicpLFxuICAgICAgcXVhdGVybmlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9xdWF0ZXJuaW9uJyksXG4gICAgICBpbnRlcnNlY3Rpb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvaW50ZXJzZWN0aW9uJyk7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyByb3RhdGVQb3NpdGlvbiB9ID0gcm90YXRpb25VdGlsaXRpZXMsXG4gICAgICB7IGNhbGN1bGF0ZUludGVyc2VjdGlvbiB9ID0gaW50ZXJzZWN0aW9uVXRpbGl0aWVzLFxuICAgICAgeyBjYWxjdWxhdGVSb3RhdGlvbkFib3V0WkF4aXNRdWF0ZXJuaW9uLCBjYWxjdWxhdGVGb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiwgY2FsY3VsYXRlQmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uIH0gPSBxdWF0ZXJuaW9uVXRpbGl0aWVzO1xuXG5jbGFzcyBWZXJ0aWNhbExpbmUge1xuICBjb25zdHJ1Y3RvcihmaXJzdFBvc2l0aW9uQ29tcG9uZW50LCBmb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiwgYmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uKSB7XG4gICAgdGhpcy5maXJzdFBvc2l0aW9uQ29tcG9uZW50ID0gZmlyc3RQb3NpdGlvbkNvbXBvbmVudDtcbiAgICB0aGlzLmZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uID0gZm9yd2FyZHNSb3RhdGlvblF1YXRlcm5pb247XG4gICAgdGhpcy5iYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb24gPSBiYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb247XG4gIH1cblxuICBnZXRGaXJzdFBvc2l0aW9uQ29tcG9uZW50KCkge1xuICAgIHJldHVybiB0aGlzLmZpcnN0UG9zaXRpb25Db21wb25lbnQ7XG4gIH1cbiAgXG4gIGdldEZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uKCkge1xuICAgIHJldHVybiB0aGlzLmZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uO1xuICB9XG5cbiAgZ2V0QmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uKCkge1xuICAgIHJldHVybiB0aGlzLmJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbjtcbiAgfVxuXG4gIHNwbGl0RmFjZXQoZmFjZXQsIHNtYWxsZXJGYWNldHMpIHtcbiAgICBjb25zdCBlZGdlcyA9IGZhY2V0LmdldEVkZ2VzKCksXG4gICAgICAgICAgaW50ZXJzZWN0aW9ucyA9IGVkZ2VzLm1hcCgoZWRnZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uID0gY2FsY3VsYXRlSW50ZXJzZWN0aW9uKGVkZ2UsIHRoaXMuZmlyc3RQb3NpdGlvbkNvbXBvbmVudCk7XG5cbiAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb247XG4gICAgICAgICAgfSk7XG5cbiAgICBmYWNldC5zcGxpdFdpdGhJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICB9XG5cbiAgc3BsaXRGYWNldHMoZmFjZXRzKSB7XG4gICAgY29uc3Qgc21hbGxlckZhY2V0cyA9IFtdO1xuXG4gICAgZmFjZXRzLmZvckVhY2goKGZhY2V0KSA9PiB7XG4gICAgICBmYWNldC5yb3RhdGUodGhpcy5mb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbik7XG5cbiAgICAgIHRoaXMuc3BsaXRGYWNldChmYWNldCwgc21hbGxlckZhY2V0cyk7XG4gICAgfSk7XG5cbiAgICBzbWFsbGVyRmFjZXRzLmZvckVhY2goKHNtYWxsZXJGYWNldCkgPT4gc21hbGxlckZhY2V0LnJvdGF0ZSh0aGlzLmJhY2t3YXJkc1JvdGF0aW9uUXVhdGVybmlvbikpO1xuXG4gICAgcmV0dXJuIHNtYWxsZXJGYWNldHM7XG4gIH1cblxuICBzdGF0aWMgZnJvbU1hc2tpbmdFZGdlKG1hc2tpbmdFZGdlKSB7XG4gICAgY29uc3QgbWFza2luZ0VkZ2VQb3NpdGlvbiA9IG1hc2tpbmdFZGdlLmdldFBvc2l0aW9uKCksXG4gICAgICAgICAgcm90YXRpb25BYm91dFpBeGlzUXVhdGVybmlvbiA9IGNhbGN1bGF0ZVJvdGF0aW9uQWJvdXRaQXhpc1F1YXRlcm5pb24obWFza2luZ0VkZ2UpLFxuICAgICAgICAgIHJvdGF0aW9uUXVhdGVybmlvbiA9IHJvdGF0aW9uQWJvdXRaQXhpc1F1YXRlcm5pb24sICAvLy9cbiAgICAgICAgICBmb3J3YXJkc1JvdGF0aW9uUXVhdGVybmlvbiA9IGNhbGN1bGF0ZUZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uKHJvdGF0aW9uUXVhdGVybmlvbiksXG4gICAgICAgICAgYmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uID0gY2FsY3VsYXRlQmFja3dhcmRzUm90YXRpb25RdWF0ZXJuaW9uKHJvdGF0aW9uUXVhdGVybmlvbiksXG4gICAgICAgICAgcG9zaXRpb24gPSByb3RhdGVQb3NpdGlvbihtYXNraW5nRWRnZVBvc2l0aW9uLCByb3RhdGlvblF1YXRlcm5pb24pLFxuICAgICAgICAgIHBvc2l0aW9uQ29tcG9uZW50cyA9IHBvc2l0aW9uLCAvLy9cbiAgICAgICAgICBmaXJzdFBvc2l0aW9uQ29tcG9uZW50ID0gZmlyc3QocG9zaXRpb25Db21wb25lbnRzKSxcbiAgICAgICAgICB2ZXJ0aWNhbExpbmUgPSBuZXcgVmVydGljYWxMaW5lKGZpcnN0UG9zaXRpb25Db21wb25lbnQsIGZvcndhcmRzUm90YXRpb25RdWF0ZXJuaW9uLCBiYWNrd2FyZHNSb3RhdGlvblF1YXRlcm5pb24pO1xuXG4gICAgcmV0dXJuIHZlcnRpY2FsTGluZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZlcnRpY2FsTGluZTtcbiJdfQ==