'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Line = require('./line'),
    vec3 = require('./maths/vec3'),
    arrayUtilities = require('./utilities/array'),
    verticesUtilities = require('./utilities/vertices');

var add = vec3.add,
    subtract = vec3.subtract,
    scale = vec3.scale,
    transform = vec3.transform,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    permute = arrayUtilities.permute,
    calculateNormal = verticesUtilities.calculateNormal,
    rotateVertices = verticesUtilities.rotateVertices;

var Facet = function () {
  function Facet(vertices, normal) {
    _classCallCheck(this, Facet);

    this.vertices = vertices;
    this.normal = normal;
  }

  _createClass(Facet, [{
    key: 'getVertices',
    value: function getVertices() {
      return this.vertices;
    }
  }, {
    key: 'getNormal',
    value: function getNormal() {
      return this.normal;
    }
  }, {
    key: 'getLines',
    value: function getLines() {
      var verticesLength = 3,
          ///
      lines = this.vertices.map(function (vertex, index) {
        var startIndex = index,
            endIndex = (startIndex + 1) % verticesLength,
            startVertex = this.vertices[startIndex],
            endVertex = this.vertices[endIndex],
            line = Line.fromVertices(startVertex, endVertex);

        return line;
      }.bind(this));

      return lines;
    }
  }, {
    key: 'rotate',
    value: function rotate(rotationQuaternion) {
      this.vertices = rotateVertices(this.vertices, rotationQuaternion);

      this.normal = calculateNormal(this.vertices);
    }
  }, {
    key: 'rotateAboutZAxis',
    value: function rotateAboutZAxis(rotationAboutZAxisMatrix) {
      var mat2 = rotationAboutZAxisMatrix; ///

      this.vertices = this.vertices.map(function (vertex) {
        var vec = vertex;

        vec = transform(vec, mat2);

        vertex = vec;

        return vertex;
      });

      this.normal = calculateNormal(this.vertices);
    }
  }, {
    key: 'splitWithVerticalLineInXYPlane',
    value: function splitWithVerticalLineInXYPlane(verticalLineInXYPlane) {
      var intersections = this.calculateIntersectionsWithVerticalLineInXYPlane(verticalLineInXYPlane),
          intersectionsIncludesNull = intersections.includes(null),
          facets = intersectionsIncludesNull ? this.possiblySplitWithNullIntersection(intersections) : this.possiblySplitWithoutNullIntersection(intersections);

      return facets;
    }
  }, {
    key: 'possiblySplitWithNullIntersection',
    value: function possiblySplitWithNullIntersection(intersections) {
      var nonNullIntersections = calculateNonNullIntersections(intersections),
          firstNonNullIntersection = first(nonNullIntersections),
          firstNonNullIntersectionNonTrivial = isIntersectionNonTrivial(firstNonNullIntersection),
          facets = firstNonNullIntersectionNonTrivial ? this.splitWithNullIntersection(intersections) : this.doNotSplit();

      return facets;
    }
  }, {
    key: 'possiblySplitWithoutNullIntersection',
    value: function possiblySplitWithoutNullIntersection(intersections) {
      var nonTrivialIntersections = calculateNonTrivialIntersections(intersections),
          nonTrivialIntersectionsLength = nonTrivialIntersections.length,
          oneNonTrivialIntersection = nonTrivialIntersectionsLength === 1,
          facets = oneNonTrivialIntersection ? this.splitWithOneNonTrivialIntersection(intersections) : this.splitWithTwoNonTrivialIntersection(intersections);

      return facets;
    }
  }, {
    key: 'doNotSplit',
    value: function doNotSplit() {
      var facet = this,
          ///
      facets = [facet];

      return facets;
    }
  }, {
    key: 'splitWithNullIntersection',
    value: function splitWithNullIntersection(intersections) {
      var verticesLength = 3,
          nullIntersectionIndex = calculateNonNullIntersectionIndex(intersections),
          places = (verticesLength - nullIntersectionIndex) % verticesLength;

      intersections = permute(intersections, places);

      this.vertices = permute(this.vertices, places);

      var firstVertex = first(this.vertices),
          secondVertex = second(this.vertices),
          thirdVertex = third(this.vertices),
          nonNullIntersections = intersections.slice(1),
          firstNonNullIntersection = first(nonNullIntersections),
          secondNonNullIntersection = second(nonNullIntersections),
          firstIntermediateVertex = calculateIntermediateVertex(secondVertex, thirdVertex, firstNonNullIntersection),
          secondIntermediateVertex = calculateIntermediateVertex(thirdVertex, firstVertex, secondNonNullIntersection),
          firstVertices = [firstVertex, secondVertex, secondIntermediateVertex],
          secondVertices = [secondVertex, firstIntermediateVertex, secondIntermediateVertex],
          thirdVertices = [firstIntermediateVertex, thirdVertex, secondIntermediateVertex],
          firstFacet = Facet.fromVertices(firstVertices),
          secondFacet = Facet.fromVertices(secondVertices),
          thirdFacet = Facet.fromVertices(thirdVertices),
          facets = [firstFacet, secondFacet, thirdFacet];

      return facets;
    }
  }, {
    key: 'splitWithOneNonTrivialIntersection',
    value: function splitWithOneNonTrivialIntersection(intersections) {
      var verticesLength = 3,
          nonTrivialIntersectionIndex = calculateNonTrivialIntersectionIndex(intersections),
          places = (verticesLength - nonTrivialIntersectionIndex) % verticesLength;

      intersections = permute(intersections, places);

      this.vertices = permute(this.vertices, places);

      var firstVertex = first(this.vertices),
          secondVertex = second(this.vertices),
          thirdVertex = third(this.vertices),
          firstIntersection = first(intersections),
          nonTrivialIntersection = firstIntersection,
          ///
      intermediateVertex = calculateIntermediateVertex(firstVertex, secondVertex, nonTrivialIntersection),
          firstVertices = [firstVertex, intermediateVertex, thirdVertex],
          secondVertices = [intermediateVertex, secondVertex, thirdVertex],
          firstFacetInXYPlane = Facet.fromVertices(firstVertices),
          secondFacetInXYPlane = Facet.fromVertices(secondVertices),
          facets = [firstFacetInXYPlane, secondFacetInXYPlane];

      return facets;
    }
  }, {
    key: 'splitWithTwoNonTrivialIntersection',
    value: function splitWithTwoNonTrivialIntersection(intersections) {
      var verticesLength = 3,
          trivialIntersectionIndex = calculateTrivialIntersectionIndex(intersections),
          places = (verticesLength - trivialIntersectionIndex) % verticesLength;

      intersections = permute(intersections, places);

      this.vertices = permute(this.vertices, places);

      var firstVertex = first(this.vertices),
          secondVertex = second(this.vertices),
          thirdVertex = third(this.vertices),
          nonTrivialIntersections = intersections.slice(1),
          firstNonTrivialIntersection = first(nonTrivialIntersections),
          secondNonTrivialIntersection = second(nonTrivialIntersections),
          firstIntermediateVertex = calculateIntermediateVertex(secondVertex, thirdVertex, firstNonTrivialIntersection),
          secondIntermediateVertex = calculateIntermediateVertex(thirdVertex, firstVertex, secondNonTrivialIntersection),
          firstVertices = [firstVertex, secondVertex, firstIntermediateVertex],
          secondVertices = [firstVertex, firstIntermediateVertex, secondIntermediateVertex],
          thirdVertices = [firstIntermediateVertex, thirdVertex, secondIntermediateVertex],
          firstFacetInXYPlane = Facet.fromVertices(firstVertices),
          secondFacetInXYPlane = Facet.fromVertices(secondVertices),
          thirdFacetInXYPlane = Facet.fromVertices(thirdVertices),
          facets = [firstFacetInXYPlane, secondFacetInXYPlane, thirdFacetInXYPlane];

      return facets;
    }
  }, {
    key: 'calculateIntersectionsWithVerticalLineInXYPlane',
    value: function calculateIntersectionsWithVerticalLineInXYPlane(verticalLineInXYPlane) {
      var lines = this.getLines(),
          intersections = lines.map(function (line) {
        var intersection = line.calculateIntersectionWithVerticalLineInXYPlane(verticalLineInXYPlane);

        return intersection;
      });

      return intersections;
    }
  }], [{
    key: 'fromVertices',
    value: function fromVertices(vertices) {
      var normal = calculateNormal(vertices),
          facet = new Facet(vertices, normal);

      return facet;
    }
  }]);

  return Facet;
}();

module.exports = Facet;

function isIntersectionTrivial(intersection) {
  var intersectionNonTrivial = isIntersectionNonTrivial(intersection),
      intersectionTrivial = !intersectionNonTrivial;

  return intersectionTrivial;
}

function isIntersectionNonTrivial(intersection) {
  var intersectionNonTrivial = intersection > 0 && intersection < 1;

  return intersectionNonTrivial;
}

function calculateIntermediateVertex(startVertex, endVertex, nonNullIntersection) {
  var direction = subtract(endVertex, startVertex),
      offset = scale(direction, nonNullIntersection),
      intermediateVertex = add(startVertex, offset);

  return intermediateVertex;
}

function calculateNonNullIntersections(intersections) {
  var nonNullIntersections = intersections.reduce(function (nonNullIntersections, intersection) {
    var intersectionNonNull = intersection !== null;

    if (intersectionNonNull) {
      var nonNullIntersection = intersection; ///

      nonNullIntersections.push(nonNullIntersection);
    }

    return nonNullIntersections;
  }, []);

  return nonNullIntersections;
}

function calculateNonTrivialIntersections(intersections) {
  var nonTrivialIntersections = intersections.reduce(function (nonTrivialIntersections, intersection) {
    var intersectionNonTrivial = isIntersectionNonTrivial(intersection);

    if (intersectionNonTrivial) {
      var nonTrivialIntersection = intersection; ///

      nonTrivialIntersections.push(nonTrivialIntersection);
    }

    return nonTrivialIntersections;
  }, []);

  return nonTrivialIntersections;
}

function calculateNonNullIntersectionIndex(intersections) {
  var nullIntersectionIndex = intersections.indexOf(null);

  return nullIntersectionIndex;
}

function calculateTrivialIntersectionIndex(intersections) {
  var trivialIntersectionIndex = intersections.reduce(function (trivialIntersectionIndex, intersection, index) {
    if (trivialIntersectionIndex === null) {
      var intersectionNonTrivial = isIntersectionTrivial(intersection);

      if (intersectionNonTrivial) {
        trivialIntersectionIndex = index;
      }
    }

    return trivialIntersectionIndex;
  }, null);

  return trivialIntersectionIndex;
}

function calculateNonTrivialIntersectionIndex(intersections) {
  var nonTrivialIntersectionIndex = intersections.reduce(function (nonTrivialIntersectionIndex, intersection, index) {
    if (nonTrivialIntersectionIndex === null) {
      var intersectionNonTrivial = isIntersectionNonTrivial(intersection);

      if (intersectionNonTrivial) {
        nonTrivialIntersectionIndex = index;
      }
    }

    return nonTrivialIntersectionIndex;
  }, null);

  return nonTrivialIntersectionIndex;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9mYWNldC5qcyJdLCJuYW1lcyI6WyJMaW5lIiwicmVxdWlyZSIsInZlYzMiLCJhcnJheVV0aWxpdGllcyIsInZlcnRpY2VzVXRpbGl0aWVzIiwiYWRkIiwic3VidHJhY3QiLCJzY2FsZSIsInRyYW5zZm9ybSIsImZpcnN0Iiwic2Vjb25kIiwidGhpcmQiLCJwZXJtdXRlIiwiY2FsY3VsYXRlTm9ybWFsIiwicm90YXRlVmVydGljZXMiLCJGYWNldCIsInZlcnRpY2VzIiwibm9ybWFsIiwidmVydGljZXNMZW5ndGgiLCJsaW5lcyIsIm1hcCIsInZlcnRleCIsImluZGV4Iiwic3RhcnRJbmRleCIsImVuZEluZGV4Iiwic3RhcnRWZXJ0ZXgiLCJlbmRWZXJ0ZXgiLCJsaW5lIiwiZnJvbVZlcnRpY2VzIiwiYmluZCIsInJvdGF0aW9uUXVhdGVybmlvbiIsInJvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCIsIm1hdDIiLCJ2ZWMiLCJ2ZXJ0aWNhbExpbmVJblhZUGxhbmUiLCJpbnRlcnNlY3Rpb25zIiwiY2FsY3VsYXRlSW50ZXJzZWN0aW9uc1dpdGhWZXJ0aWNhbExpbmVJblhZUGxhbmUiLCJpbnRlcnNlY3Rpb25zSW5jbHVkZXNOdWxsIiwiaW5jbHVkZXMiLCJmYWNldHMiLCJwb3NzaWJseVNwbGl0V2l0aE51bGxJbnRlcnNlY3Rpb24iLCJwb3NzaWJseVNwbGl0V2l0aG91dE51bGxJbnRlcnNlY3Rpb24iLCJub25OdWxsSW50ZXJzZWN0aW9ucyIsImNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25zIiwiZmlyc3ROb25OdWxsSW50ZXJzZWN0aW9uIiwiZmlyc3ROb25OdWxsSW50ZXJzZWN0aW9uTm9uVHJpdmlhbCIsImlzSW50ZXJzZWN0aW9uTm9uVHJpdmlhbCIsInNwbGl0V2l0aE51bGxJbnRlcnNlY3Rpb24iLCJkb05vdFNwbGl0Iiwibm9uVHJpdmlhbEludGVyc2VjdGlvbnMiLCJjYWxjdWxhdGVOb25Ucml2aWFsSW50ZXJzZWN0aW9ucyIsIm5vblRyaXZpYWxJbnRlcnNlY3Rpb25zTGVuZ3RoIiwibGVuZ3RoIiwib25lTm9uVHJpdmlhbEludGVyc2VjdGlvbiIsInNwbGl0V2l0aE9uZU5vblRyaXZpYWxJbnRlcnNlY3Rpb24iLCJzcGxpdFdpdGhUd29Ob25Ucml2aWFsSW50ZXJzZWN0aW9uIiwiZmFjZXQiLCJudWxsSW50ZXJzZWN0aW9uSW5kZXgiLCJjYWxjdWxhdGVOb25OdWxsSW50ZXJzZWN0aW9uSW5kZXgiLCJwbGFjZXMiLCJmaXJzdFZlcnRleCIsInNlY29uZFZlcnRleCIsInRoaXJkVmVydGV4Iiwic2xpY2UiLCJzZWNvbmROb25OdWxsSW50ZXJzZWN0aW9uIiwiZmlyc3RJbnRlcm1lZGlhdGVWZXJ0ZXgiLCJjYWxjdWxhdGVJbnRlcm1lZGlhdGVWZXJ0ZXgiLCJzZWNvbmRJbnRlcm1lZGlhdGVWZXJ0ZXgiLCJmaXJzdFZlcnRpY2VzIiwic2Vjb25kVmVydGljZXMiLCJ0aGlyZFZlcnRpY2VzIiwiZmlyc3RGYWNldCIsInNlY29uZEZhY2V0IiwidGhpcmRGYWNldCIsIm5vblRyaXZpYWxJbnRlcnNlY3Rpb25JbmRleCIsImNhbGN1bGF0ZU5vblRyaXZpYWxJbnRlcnNlY3Rpb25JbmRleCIsImZpcnN0SW50ZXJzZWN0aW9uIiwibm9uVHJpdmlhbEludGVyc2VjdGlvbiIsImludGVybWVkaWF0ZVZlcnRleCIsImZpcnN0RmFjZXRJblhZUGxhbmUiLCJzZWNvbmRGYWNldEluWFlQbGFuZSIsInRyaXZpYWxJbnRlcnNlY3Rpb25JbmRleCIsImNhbGN1bGF0ZVRyaXZpYWxJbnRlcnNlY3Rpb25JbmRleCIsImZpcnN0Tm9uVHJpdmlhbEludGVyc2VjdGlvbiIsInNlY29uZE5vblRyaXZpYWxJbnRlcnNlY3Rpb24iLCJ0aGlyZEZhY2V0SW5YWVBsYW5lIiwiZ2V0TGluZXMiLCJpbnRlcnNlY3Rpb24iLCJjYWxjdWxhdGVJbnRlcnNlY3Rpb25XaXRoVmVydGljYWxMaW5lSW5YWVBsYW5lIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzSW50ZXJzZWN0aW9uVHJpdmlhbCIsImludGVyc2VjdGlvbk5vblRyaXZpYWwiLCJpbnRlcnNlY3Rpb25Ucml2aWFsIiwibm9uTnVsbEludGVyc2VjdGlvbiIsImRpcmVjdGlvbiIsIm9mZnNldCIsInJlZHVjZSIsImludGVyc2VjdGlvbk5vbk51bGwiLCJwdXNoIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLE9BQU9DLFFBQVEsUUFBUixDQUFiO0FBQUEsSUFDTUMsT0FBT0QsUUFBUSxjQUFSLENBRGI7QUFBQSxJQUVNRSxpQkFBaUJGLFFBQVEsbUJBQVIsQ0FGdkI7QUFBQSxJQUdNRyxvQkFBb0JILFFBQVEsc0JBQVIsQ0FIMUI7O0lBS1FJLEcsR0FBb0NILEksQ0FBcENHLEc7SUFBS0MsUSxHQUErQkosSSxDQUEvQkksUTtJQUFVQyxLLEdBQXFCTCxJLENBQXJCSyxLO0lBQU9DLFMsR0FBY04sSSxDQUFkTSxTO0lBQ3RCQyxLLEdBQWtDTixjLENBQWxDTSxLO0lBQU9DLE0sR0FBMkJQLGMsQ0FBM0JPLE07SUFBUUMsSyxHQUFtQlIsYyxDQUFuQlEsSztJQUFPQyxPLEdBQVlULGMsQ0FBWlMsTztJQUN0QkMsZSxHQUFvQ1QsaUIsQ0FBcENTLGU7SUFBaUJDLGMsR0FBbUJWLGlCLENBQW5CVSxjOztJQUVuQkMsSztBQUNKLGlCQUFZQyxRQUFaLEVBQXNCQyxNQUF0QixFQUE4QjtBQUFBOztBQUM1QixTQUFLRCxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUtDLE1BQUwsR0FBY0EsTUFBZDtBQUNEOzs7O2tDQUVhO0FBQ1osYUFBTyxLQUFLRCxRQUFaO0FBQ0Q7OztnQ0FFVztBQUNWLGFBQU8sS0FBS0MsTUFBWjtBQUNEOzs7K0JBRVU7QUFDVCxVQUFNQyxpQkFBaUIsQ0FBdkI7QUFBQSxVQUEwQjtBQUNwQkMsY0FBUSxLQUFLSCxRQUFMLENBQWNJLEdBQWQsQ0FBa0IsVUFBU0MsTUFBVCxFQUFpQkMsS0FBakIsRUFBd0I7QUFDaEQsWUFBTUMsYUFBYUQsS0FBbkI7QUFBQSxZQUNN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QUVELFdBQU8yRCx3QkFBUDtBQUNELEdBVmdDLEVBVTlCLElBVjhCLENBQWpDOztBQVlBLFNBQU9BLHdCQUFQO0FBQ0Q7O0FBRUQsU0FBU04sb0NBQVQsQ0FBOEN4QyxhQUE5QyxFQUE2RDtBQUMzRCxNQUFNdUMsOEJBQThCdkMsY0FBYzhELE1BQWQsQ0FBcUIsVUFBU3ZCLDJCQUFULEVBQXNDYSxZQUF0QyxFQUFvRGpFLEtBQXBELEVBQTJEO0FBQ2xILFFBQUlvRCxnQ0FBZ0MsSUFBcEMsRUFBMEM7QUFDeEMsVUFBTWtCLHlCQUF5QjlDLHlCQUF5QnlDLFlBQXpCLENBQS9COztBQUVBLFVBQUlLLHNCQUFKLEVBQTRCO0FBQzFCbEIsc0NBQThCcEQsS0FBOUI7QUFDRDtBQUNGOztBQUVELFdBQU9vRCwyQkFBUDtBQUNELEdBVm1DLEVBVWpDLElBVmlDLENBQXBDOztBQVlBLFNBQU9BLDJCQUFQO0FBQ0QiLCJmaWxlIjoiZmFjZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IExpbmUgPSByZXF1aXJlKCcuL2xpbmUnKSxcbiAgICAgIHZlYzMgPSByZXF1aXJlKCcuL21hdGhzL3ZlYzMnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIHZlcnRpY2VzVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvdmVydGljZXMnKTtcblxuY29uc3QgeyBhZGQsIHN1YnRyYWN0LCBzY2FsZSwgdHJhbnNmb3JtIH0gPSB2ZWMzLFxuICAgICAgeyBmaXJzdCwgc2Vjb25kLCB0aGlyZCwgcGVybXV0ZSB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGNhbGN1bGF0ZU5vcm1hbCwgcm90YXRlVmVydGljZXMgfSA9IHZlcnRpY2VzVXRpbGl0aWVzO1xuXG5jbGFzcyBGYWNldCB7XG4gIGNvbnN0cnVjdG9yKHZlcnRpY2VzLCBub3JtYWwpIHtcbiAgICB0aGlzLnZlcnRpY2VzID0gdmVydGljZXM7XG4gICAgdGhpcy5ub3JtYWwgPSBub3JtYWw7XG4gIH1cblxuICBnZXRWZXJ0aWNlcygpIHtcbiAgICByZXR1cm4gdGhpcy52ZXJ0aWNlcztcbiAgfVxuXG4gIGdldE5vcm1hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub3JtYWw7XG4gIH1cblxuICBnZXRMaW5lcygpIHtcbiAgICBjb25zdCB2ZXJ0aWNlc0xlbmd0aCA9IDMsIC8vL1xuICAgICAgICAgIGxpbmVzID0gdGhpcy52ZXJ0aWNlcy5tYXAoZnVuY3Rpb24odmVydGV4LCBpbmRleCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IGluZGV4LFxuICAgICAgICAgICAgICAgICAgZW5kSW5kZXggPSAoc3RhcnRJbmRleCArIDEpICUgdmVydGljZXNMZW5ndGgsXG4gICAgICAgICAgICAgICAgICBzdGFydFZlcnRleCA9IHRoaXMudmVydGljZXNbc3RhcnRJbmRleF0sXG4gICAgICAgICAgICAgICAgICBlbmRWZXJ0ZXggPSB0aGlzLnZlcnRpY2VzW2VuZEluZGV4XSxcbiAgICAgICAgICAgICAgICAgIGxpbmUgPSBMaW5lLmZyb21WZXJ0aWNlcyhzdGFydFZlcnRleCwgZW5kVmVydGV4KTtcbiAgXG4gICAgICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgcmV0dXJuIGxpbmVzO1xuICB9XG4gIFxuICByb3RhdGUocm90YXRpb25RdWF0ZXJuaW9uKSB7XG4gICAgdGhpcy52ZXJ0aWNlcyA9IHJvdGF0ZVZlcnRpY2VzKHRoaXMudmVydGljZXMsIHJvdGF0aW9uUXVhdGVybmlvbik7XG4gICAgXG4gICAgdGhpcy5ub3JtYWwgPSBjYWxjdWxhdGVOb3JtYWwodGhpcy52ZXJ0aWNlcyk7XG4gIH1cbiAgXG4gIHJvdGF0ZUFib3V0WkF4aXMocm90YXRpb25BYm91dFpBeGlzTWF0cml4KSB7XG4gICAgY29uc3QgbWF0MiA9IHJvdGF0aW9uQWJvdXRaQXhpc01hdHJpeDsgIC8vL1xuXG4gICAgdGhpcy52ZXJ0aWNlcyA9IHRoaXMudmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgbGV0IHZlYyA9IHZlcnRleDtcblxuICAgICAgdmVjID0gdHJhbnNmb3JtKHZlYywgbWF0Mik7XG5cbiAgICAgIHZlcnRleCA9IHZlYztcblxuICAgICAgcmV0dXJuIHZlcnRleDtcbiAgICB9KTtcbiAgICBcbiAgICB0aGlzLm5vcm1hbCA9IGNhbGN1bGF0ZU5vcm1hbCh0aGlzLnZlcnRpY2VzKTtcbiAgfVxuXG4gIHNwbGl0V2l0aFZlcnRpY2FsTGluZUluWFlQbGFuZSh2ZXJ0aWNhbExpbmVJblhZUGxhbmUpIHtcbiAgICBjb25zdCBpbnRlcnNlY3Rpb25zID0gdGhpcy5jYWxjdWxhdGVJbnRlcnNlY3Rpb25zV2l0aFZlcnRpY2FsTGluZUluWFlQbGFuZSh2ZXJ0aWNhbExpbmVJblhZUGxhbmUpLFxuICAgICAgICAgIGludGVyc2VjdGlvbnNJbmNsdWRlc051bGwgPSBpbnRlcnNlY3Rpb25zLmluY2x1ZGVzKG51bGwpLFxuICAgICAgICAgIGZhY2V0cyA9IGludGVyc2VjdGlvbnNJbmNsdWRlc051bGwgP1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NzaWJseVNwbGl0V2l0aE51bGxJbnRlcnNlY3Rpb24oaW50ZXJzZWN0aW9ucykgOlxuICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc3NpYmx5U3BsaXRXaXRob3V0TnVsbEludGVyc2VjdGlvbihpbnRlcnNlY3Rpb25zKTtcblxuICAgIHJldHVybiBmYWNldHM7XG4gIH1cblxuICBwb3NzaWJseVNwbGl0V2l0aE51bGxJbnRlcnNlY3Rpb24oaW50ZXJzZWN0aW9ucykge1xuICAgIGNvbnN0IG5vbk51bGxJbnRlcnNlY3Rpb25zID0gY2FsY3VsYXRlTm9uTnVsbEludGVyc2VjdGlvbnMoaW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgZmlyc3ROb25OdWxsSW50ZXJzZWN0aW9uID0gZmlyc3Qobm9uTnVsbEludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIGZpcnN0Tm9uTnVsbEludGVyc2VjdGlvbk5vblRyaXZpYWwgPSBpc0ludGVyc2VjdGlvbk5vblRyaXZpYWwoZmlyc3ROb25OdWxsSW50ZXJzZWN0aW9uKSxcbiAgICAgICAgICBmYWNldHMgPSBmaXJzdE5vbk51bGxJbnRlcnNlY3Rpb25Ob25Ucml2aWFsID9cbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3BsaXRXaXRoTnVsbEludGVyc2VjdGlvbihpbnRlcnNlY3Rpb25zKSA6XG4gICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9Ob3RTcGxpdCgpO1xuXG4gICAgcmV0dXJuIGZhY2V0cztcbiAgfVxuXG4gIHBvc3NpYmx5U3BsaXRXaXRob3V0TnVsbEludGVyc2VjdGlvbihpbnRlcnNlY3Rpb25zKSB7XG4gICAgY29uc3Qgbm9uVHJpdmlhbEludGVyc2VjdGlvbnMgPSBjYWxjdWxhdGVOb25Ucml2aWFsSW50ZXJzZWN0aW9ucyhpbnRlcnNlY3Rpb25zKSxcbiAgICAgICAgICBub25Ucml2aWFsSW50ZXJzZWN0aW9uc0xlbmd0aCA9IG5vblRyaXZpYWxJbnRlcnNlY3Rpb25zLmxlbmd0aCxcbiAgICAgICAgICBvbmVOb25Ucml2aWFsSW50ZXJzZWN0aW9uID0gKG5vblRyaXZpYWxJbnRlcnNlY3Rpb25zTGVuZ3RoID09PSAxKSxcbiAgICAgICAgICBmYWNldHMgPSBvbmVOb25Ucml2aWFsSW50ZXJzZWN0aW9uID9cbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3BsaXRXaXRoT25lTm9uVHJpdmlhbEludGVyc2VjdGlvbihpbnRlcnNlY3Rpb25zKSA6XG4gICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3BsaXRXaXRoVHdvTm9uVHJpdmlhbEludGVyc2VjdGlvbihpbnRlcnNlY3Rpb25zKTtcblxuICAgIHJldHVybiBmYWNldHM7XG4gIH1cblxuICBkb05vdFNwbGl0KCkge1xuICAgIGNvbnN0IGZhY2V0ID0gdGhpcywgIC8vL1xuICAgICAgICAgIGZhY2V0cyA9IFtcbiAgICAgICAgICAgIGZhY2V0XG4gICAgICAgICAgXTtcblxuICAgIHJldHVybiBmYWNldHM7XG4gIH1cblxuICBzcGxpdFdpdGhOdWxsSW50ZXJzZWN0aW9uKGludGVyc2VjdGlvbnMpIHtcbiAgICBjb25zdCB2ZXJ0aWNlc0xlbmd0aCA9IDMsXG4gICAgICAgICAgbnVsbEludGVyc2VjdGlvbkluZGV4ID0gY2FsY3VsYXRlTm9uTnVsbEludGVyc2VjdGlvbkluZGV4KGludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIHBsYWNlcyA9ICh2ZXJ0aWNlc0xlbmd0aCAtIG51bGxJbnRlcnNlY3Rpb25JbmRleCkgJSB2ZXJ0aWNlc0xlbmd0aDtcblxuICAgIGludGVyc2VjdGlvbnMgPSBwZXJtdXRlKGludGVyc2VjdGlvbnMsIHBsYWNlcyk7XG5cbiAgICB0aGlzLnZlcnRpY2VzID0gcGVybXV0ZSh0aGlzLnZlcnRpY2VzLCBwbGFjZXMpO1xuXG4gICAgY29uc3QgZmlyc3RWZXJ0ZXggPSBmaXJzdCh0aGlzLnZlcnRpY2VzKSxcbiAgICAgICAgICBzZWNvbmRWZXJ0ZXggPSBzZWNvbmQodGhpcy52ZXJ0aWNlcyksXG4gICAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh0aGlzLnZlcnRpY2VzKSxcbiAgICAgICAgICBub25OdWxsSW50ZXJzZWN0aW9ucyA9IGludGVyc2VjdGlvbnMuc2xpY2UoMSksXG4gICAgICAgICAgZmlyc3ROb25OdWxsSW50ZXJzZWN0aW9uID0gZmlyc3Qobm9uTnVsbEludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIHNlY29uZE5vbk51bGxJbnRlcnNlY3Rpb24gPSBzZWNvbmQobm9uTnVsbEludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIGZpcnN0SW50ZXJtZWRpYXRlVmVydGV4ID0gY2FsY3VsYXRlSW50ZXJtZWRpYXRlVmVydGV4KHNlY29uZFZlcnRleCwgdGhpcmRWZXJ0ZXgsIGZpcnN0Tm9uTnVsbEludGVyc2VjdGlvbiksXG4gICAgICAgICAgc2Vjb25kSW50ZXJtZWRpYXRlVmVydGV4ID0gY2FsY3VsYXRlSW50ZXJtZWRpYXRlVmVydGV4KHRoaXJkVmVydGV4LCBmaXJzdFZlcnRleCwgc2Vjb25kTm9uTnVsbEludGVyc2VjdGlvbiksXG4gICAgICAgICAgZmlyc3RWZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgIGZpcnN0VmVydGV4LFxuICAgICAgICAgICAgc2Vjb25kVmVydGV4LFxuICAgICAgICAgICAgc2Vjb25kSW50ZXJtZWRpYXRlVmVydGV4XG4gICAgICAgICAgXSxcbiAgICAgICAgICBzZWNvbmRWZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgIHNlY29uZFZlcnRleCxcbiAgICAgICAgICAgIGZpcnN0SW50ZXJtZWRpYXRlVmVydGV4LFxuICAgICAgICAgICAgc2Vjb25kSW50ZXJtZWRpYXRlVmVydGV4XG4gICAgICAgICAgXSxcbiAgICAgICAgICB0aGlyZFZlcnRpY2VzID0gW1xuICAgICAgICAgICAgZmlyc3RJbnRlcm1lZGlhdGVWZXJ0ZXgsXG4gICAgICAgICAgICB0aGlyZFZlcnRleCxcbiAgICAgICAgICAgIHNlY29uZEludGVybWVkaWF0ZVZlcnRleFxuICAgICAgICAgIF0sXG4gICAgICAgICAgZmlyc3RGYWNldCA9IEZhY2V0LmZyb21WZXJ0aWNlcyhmaXJzdFZlcnRpY2VzKSxcbiAgICAgICAgICBzZWNvbmRGYWNldCA9IEZhY2V0LmZyb21WZXJ0aWNlcyhzZWNvbmRWZXJ0aWNlcyksXG4gICAgICAgICAgdGhpcmRGYWNldCA9IEZhY2V0LmZyb21WZXJ0aWNlcyh0aGlyZFZlcnRpY2VzKSxcbiAgICAgICAgICBmYWNldHMgPSBbXG4gICAgICAgICAgICBmaXJzdEZhY2V0LFxuICAgICAgICAgICAgc2Vjb25kRmFjZXQsXG4gICAgICAgICAgICB0aGlyZEZhY2V0XG4gICAgICAgICAgXTtcblxuICAgIHJldHVybiBmYWNldHM7XG4gIH1cblxuICBzcGxpdFdpdGhPbmVOb25Ucml2aWFsSW50ZXJzZWN0aW9uKGludGVyc2VjdGlvbnMpIHtcbiAgICBjb25zdCB2ZXJ0aWNlc0xlbmd0aCA9IDMsXG4gICAgICAgICAgbm9uVHJpdmlhbEludGVyc2VjdGlvbkluZGV4ID0gY2FsY3VsYXRlTm9uVHJpdmlhbEludGVyc2VjdGlvbkluZGV4KGludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIHBsYWNlcyA9ICh2ZXJ0aWNlc0xlbmd0aCAtIG5vblRyaXZpYWxJbnRlcnNlY3Rpb25JbmRleCkgJSB2ZXJ0aWNlc0xlbmd0aDtcblxuICAgIGludGVyc2VjdGlvbnMgPSBwZXJtdXRlKGludGVyc2VjdGlvbnMsIHBsYWNlcyk7XG5cbiAgICB0aGlzLnZlcnRpY2VzID0gcGVybXV0ZSh0aGlzLnZlcnRpY2VzLCBwbGFjZXMpO1xuXG4gICAgY29uc3QgZmlyc3RWZXJ0ZXggPSBmaXJzdCh0aGlzLnZlcnRpY2VzKSxcbiAgICAgICAgICBzZWNvbmRWZXJ0ZXggPSBzZWNvbmQodGhpcy52ZXJ0aWNlcyksXG4gICAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh0aGlzLnZlcnRpY2VzKSxcbiAgICAgICAgICBmaXJzdEludGVyc2VjdGlvbiA9IGZpcnN0KGludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIG5vblRyaXZpYWxJbnRlcnNlY3Rpb24gPSBmaXJzdEludGVyc2VjdGlvbiwgLy8vXG4gICAgICAgICAgaW50ZXJtZWRpYXRlVmVydGV4ID0gY2FsY3VsYXRlSW50ZXJtZWRpYXRlVmVydGV4KGZpcnN0VmVydGV4LCBzZWNvbmRWZXJ0ZXgsIG5vblRyaXZpYWxJbnRlcnNlY3Rpb24pLFxuICAgICAgICAgIGZpcnN0VmVydGljZXMgPSBbXG4gICAgICAgICAgICBmaXJzdFZlcnRleCxcbiAgICAgICAgICAgIGludGVybWVkaWF0ZVZlcnRleCxcbiAgICAgICAgICAgIHRoaXJkVmVydGV4XG4gICAgICAgICAgXSxcbiAgICAgICAgICBzZWNvbmRWZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgIGludGVybWVkaWF0ZVZlcnRleCxcbiAgICAgICAgICAgIHNlY29uZFZlcnRleCxcbiAgICAgICAgICAgIHRoaXJkVmVydGV4XG4gICAgICAgICAgXSxcbiAgICAgICAgICBmaXJzdEZhY2V0SW5YWVBsYW5lID0gRmFjZXQuZnJvbVZlcnRpY2VzKGZpcnN0VmVydGljZXMpLFxuICAgICAgICAgIHNlY29uZEZhY2V0SW5YWVBsYW5lID0gRmFjZXQuZnJvbVZlcnRpY2VzKHNlY29uZFZlcnRpY2VzKSxcbiAgICAgICAgICBmYWNldHMgPSBbXG4gICAgICAgICAgICBmaXJzdEZhY2V0SW5YWVBsYW5lLFxuICAgICAgICAgICAgc2Vjb25kRmFjZXRJblhZUGxhbmVcbiAgICAgICAgICBdO1xuXG4gICAgcmV0dXJuIGZhY2V0cztcbiAgfVxuXG4gIHNwbGl0V2l0aFR3b05vblRyaXZpYWxJbnRlcnNlY3Rpb24oaW50ZXJzZWN0aW9ucykge1xuICAgIGNvbnN0IHZlcnRpY2VzTGVuZ3RoID0gMyxcbiAgICAgICAgICB0cml2aWFsSW50ZXJzZWN0aW9uSW5kZXggPSBjYWxjdWxhdGVUcml2aWFsSW50ZXJzZWN0aW9uSW5kZXgoaW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgcGxhY2VzID0gKHZlcnRpY2VzTGVuZ3RoIC0gdHJpdmlhbEludGVyc2VjdGlvbkluZGV4KSAlIHZlcnRpY2VzTGVuZ3RoO1xuXG4gICAgaW50ZXJzZWN0aW9ucyA9IHBlcm11dGUoaW50ZXJzZWN0aW9ucywgcGxhY2VzKTtcblxuICAgIHRoaXMudmVydGljZXMgPSBwZXJtdXRlKHRoaXMudmVydGljZXMsIHBsYWNlcyk7XG5cbiAgICBjb25zdCBmaXJzdFZlcnRleCA9IGZpcnN0KHRoaXMudmVydGljZXMpLFxuICAgICAgICAgIHNlY29uZFZlcnRleCA9IHNlY29uZCh0aGlzLnZlcnRpY2VzKSxcbiAgICAgICAgICB0aGlyZFZlcnRleCA9IHRoaXJkKHRoaXMudmVydGljZXMpLFxuICAgICAgICAgIG5vblRyaXZpYWxJbnRlcnNlY3Rpb25zID0gaW50ZXJzZWN0aW9ucy5zbGljZSgxKSxcbiAgICAgICAgICBmaXJzdE5vblRyaXZpYWxJbnRlcnNlY3Rpb24gPSBmaXJzdChub25Ucml2aWFsSW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgc2Vjb25kTm9uVHJpdmlhbEludGVyc2VjdGlvbiA9IHNlY29uZChub25Ucml2aWFsSW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgZmlyc3RJbnRlcm1lZGlhdGVWZXJ0ZXggPSBjYWxjdWxhdGVJbnRlcm1lZGlhdGVWZXJ0ZXgoc2Vjb25kVmVydGV4LCB0aGlyZFZlcnRleCwgZmlyc3ROb25Ucml2aWFsSW50ZXJzZWN0aW9uKSxcbiAgICAgICAgICBzZWNvbmRJbnRlcm1lZGlhdGVWZXJ0ZXggPSBjYWxjdWxhdGVJbnRlcm1lZGlhdGVWZXJ0ZXgodGhpcmRWZXJ0ZXgsIGZpcnN0VmVydGV4LCBzZWNvbmROb25Ucml2aWFsSW50ZXJzZWN0aW9uKSxcbiAgICAgICAgICBmaXJzdFZlcnRpY2VzID0gW1xuICAgICAgICAgICAgZmlyc3RWZXJ0ZXgsXG4gICAgICAgICAgICBzZWNvbmRWZXJ0ZXgsXG4gICAgICAgICAgICBmaXJzdEludGVybWVkaWF0ZVZlcnRleFxuICAgICAgICAgIF0sXG4gICAgICAgICAgc2Vjb25kVmVydGljZXMgPSBbXG4gICAgICAgICAgICBmaXJzdFZlcnRleCxcbiAgICAgICAgICAgIGZpcnN0SW50ZXJtZWRpYXRlVmVydGV4LFxuICAgICAgICAgICAgc2Vjb25kSW50ZXJtZWRpYXRlVmVydGV4XG4gICAgICAgICAgXSxcbiAgICAgICAgICB0aGlyZFZlcnRpY2VzID0gW1xuICAgICAgICAgICAgZmlyc3RJbnRlcm1lZGlhdGVWZXJ0ZXgsXG4gICAgICAgICAgICB0aGlyZFZlcnRleCxcbiAgICAgICAgICAgIHNlY29uZEludGVybWVkaWF0ZVZlcnRleFxuICAgICAgICAgIF0sXG4gICAgICAgICAgZmlyc3RGYWNldEluWFlQbGFuZSA9IEZhY2V0LmZyb21WZXJ0aWNlcyhmaXJzdFZlcnRpY2VzKSxcbiAgICAgICAgICBzZWNvbmRGYWNldEluWFlQbGFuZSA9IEZhY2V0LmZyb21WZXJ0aWNlcyhzZWNvbmRWZXJ0aWNlcyksXG4gICAgICAgICAgdGhpcmRGYWNldEluWFlQbGFuZSA9IEZhY2V0LmZyb21WZXJ0aWNlcyh0aGlyZFZlcnRpY2VzKSxcbiAgICAgICAgICBmYWNldHMgPSBbXG4gICAgICAgICAgICBmaXJzdEZhY2V0SW5YWVBsYW5lLFxuICAgICAgICAgICAgc2Vjb25kRmFjZXRJblhZUGxhbmUsXG4gICAgICAgICAgICB0aGlyZEZhY2V0SW5YWVBsYW5lXG4gICAgICAgICAgXTtcblxuICAgIHJldHVybiBmYWNldHM7XG4gIH1cblxuICBjYWxjdWxhdGVJbnRlcnNlY3Rpb25zV2l0aFZlcnRpY2FsTGluZUluWFlQbGFuZSh2ZXJ0aWNhbExpbmVJblhZUGxhbmUpIHtcbiAgICBjb25zdCBsaW5lcyA9IHRoaXMuZ2V0TGluZXMoKSxcbiAgICAgICAgICBpbnRlcnNlY3Rpb25zID0gbGluZXMubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IGxpbmUuY2FsY3VsYXRlSW50ZXJzZWN0aW9uV2l0aFZlcnRpY2FsTGluZUluWFlQbGFuZSh2ZXJ0aWNhbExpbmVJblhZUGxhbmUpO1xuICBcbiAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb247XG4gICAgICAgICAgfSk7XG5cbiAgICByZXR1cm4gaW50ZXJzZWN0aW9ucztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tVmVydGljZXModmVydGljZXMpIHtcbiAgICBjb25zdCBub3JtYWwgPSBjYWxjdWxhdGVOb3JtYWwodmVydGljZXMpLFxuICAgICAgICAgIGZhY2V0ID0gbmV3IEZhY2V0KHZlcnRpY2VzLCBub3JtYWwpO1xuXG4gICAgcmV0dXJuIGZhY2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRmFjZXQ7XG5cbmZ1bmN0aW9uIGlzSW50ZXJzZWN0aW9uVHJpdmlhbChpbnRlcnNlY3Rpb24pIHtcbiAgY29uc3QgaW50ZXJzZWN0aW9uTm9uVHJpdmlhbCA9IGlzSW50ZXJzZWN0aW9uTm9uVHJpdmlhbChpbnRlcnNlY3Rpb24pLFxuICAgICAgaW50ZXJzZWN0aW9uVHJpdmlhbCA9ICFpbnRlcnNlY3Rpb25Ob25Ucml2aWFsO1xuXG4gIHJldHVybiBpbnRlcnNlY3Rpb25Ucml2aWFsO1xufVxuXG5mdW5jdGlvbiBpc0ludGVyc2VjdGlvbk5vblRyaXZpYWwoaW50ZXJzZWN0aW9uKSB7XG4gIGNvbnN0IGludGVyc2VjdGlvbk5vblRyaXZpYWwgPSAoKGludGVyc2VjdGlvbiA+IDApICYmIChpbnRlcnNlY3Rpb24gPCAxKSk7XG5cbiAgcmV0dXJuIGludGVyc2VjdGlvbk5vblRyaXZpYWw7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUludGVybWVkaWF0ZVZlcnRleChzdGFydFZlcnRleCwgZW5kVmVydGV4LCBub25OdWxsSW50ZXJzZWN0aW9uKSB7XG4gIGNvbnN0IGRpcmVjdGlvbiA9IHN1YnRyYWN0KGVuZFZlcnRleCwgc3RhcnRWZXJ0ZXgpLFxuICAgICAgb2Zmc2V0ID0gc2NhbGUoZGlyZWN0aW9uLCBub25OdWxsSW50ZXJzZWN0aW9uKSxcbiAgICAgIGludGVybWVkaWF0ZVZlcnRleCA9IGFkZChzdGFydFZlcnRleCwgb2Zmc2V0KTtcblxuICByZXR1cm4gaW50ZXJtZWRpYXRlVmVydGV4O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVOb25OdWxsSW50ZXJzZWN0aW9ucyhpbnRlcnNlY3Rpb25zKSB7XG4gIGNvbnN0IG5vbk51bGxJbnRlcnNlY3Rpb25zID0gaW50ZXJzZWN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24obm9uTnVsbEludGVyc2VjdGlvbnMsIGludGVyc2VjdGlvbikge1xuICAgIGNvbnN0IGludGVyc2VjdGlvbk5vbk51bGwgPSAoaW50ZXJzZWN0aW9uICE9PSBudWxsKTtcblxuICAgIGlmIChpbnRlcnNlY3Rpb25Ob25OdWxsKSB7XG4gICAgICBjb25zdCBub25OdWxsSW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uOyAvLy9cblxuICAgICAgbm9uTnVsbEludGVyc2VjdGlvbnMucHVzaChub25OdWxsSW50ZXJzZWN0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9uTnVsbEludGVyc2VjdGlvbnM7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gbm9uTnVsbEludGVyc2VjdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vblRyaXZpYWxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMpIHtcbiAgY29uc3Qgbm9uVHJpdmlhbEludGVyc2VjdGlvbnMgPSBpbnRlcnNlY3Rpb25zLnJlZHVjZShmdW5jdGlvbihub25Ucml2aWFsSW50ZXJzZWN0aW9ucywgaW50ZXJzZWN0aW9uKSB7XG4gICAgY29uc3QgaW50ZXJzZWN0aW9uTm9uVHJpdmlhbCA9IGlzSW50ZXJzZWN0aW9uTm9uVHJpdmlhbChpbnRlcnNlY3Rpb24pO1xuXG4gICAgaWYgKGludGVyc2VjdGlvbk5vblRyaXZpYWwpIHtcbiAgICAgIGNvbnN0IG5vblRyaXZpYWxJbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247ICAvLy9cblxuICAgICAgbm9uVHJpdmlhbEludGVyc2VjdGlvbnMucHVzaChub25Ucml2aWFsSW50ZXJzZWN0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9uVHJpdmlhbEludGVyc2VjdGlvbnM7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gbm9uVHJpdmlhbEludGVyc2VjdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25JbmRleChpbnRlcnNlY3Rpb25zKSB7XG4gIGNvbnN0IG51bGxJbnRlcnNlY3Rpb25JbmRleCA9IGludGVyc2VjdGlvbnMuaW5kZXhPZihudWxsKTtcblxuICByZXR1cm4gbnVsbEludGVyc2VjdGlvbkluZGV4O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVUcml2aWFsSW50ZXJzZWN0aW9uSW5kZXgoaW50ZXJzZWN0aW9ucykge1xuICBjb25zdCB0cml2aWFsSW50ZXJzZWN0aW9uSW5kZXggPSBpbnRlcnNlY3Rpb25zLnJlZHVjZShmdW5jdGlvbih0cml2aWFsSW50ZXJzZWN0aW9uSW5kZXgsIGludGVyc2VjdGlvbiwgaW5kZXgpIHtcbiAgICBpZiAodHJpdmlhbEludGVyc2VjdGlvbkluZGV4ID09PSBudWxsKSB7XG4gICAgICBjb25zdCBpbnRlcnNlY3Rpb25Ob25Ucml2aWFsID0gaXNJbnRlcnNlY3Rpb25Ucml2aWFsKGludGVyc2VjdGlvbik7XG5cbiAgICAgIGlmIChpbnRlcnNlY3Rpb25Ob25Ucml2aWFsKSB7XG4gICAgICAgIHRyaXZpYWxJbnRlcnNlY3Rpb25JbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cml2aWFsSW50ZXJzZWN0aW9uSW5kZXg7XG4gIH0sIG51bGwpO1xuXG4gIHJldHVybiB0cml2aWFsSW50ZXJzZWN0aW9uSW5kZXg7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vblRyaXZpYWxJbnRlcnNlY3Rpb25JbmRleChpbnRlcnNlY3Rpb25zKSB7XG4gIGNvbnN0IG5vblRyaXZpYWxJbnRlcnNlY3Rpb25JbmRleCA9IGludGVyc2VjdGlvbnMucmVkdWNlKGZ1bmN0aW9uKG5vblRyaXZpYWxJbnRlcnNlY3Rpb25JbmRleCwgaW50ZXJzZWN0aW9uLCBpbmRleCkge1xuICAgIGlmIChub25Ucml2aWFsSW50ZXJzZWN0aW9uSW5kZXggPT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGludGVyc2VjdGlvbk5vblRyaXZpYWwgPSBpc0ludGVyc2VjdGlvbk5vblRyaXZpYWwoaW50ZXJzZWN0aW9uKTtcblxuICAgICAgaWYgKGludGVyc2VjdGlvbk5vblRyaXZpYWwpIHtcbiAgICAgICAgbm9uVHJpdmlhbEludGVyc2VjdGlvbkluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vblRyaXZpYWxJbnRlcnNlY3Rpb25JbmRleDtcbiAgfSwgbnVsbCk7XG5cbiAgcmV0dXJuIG5vblRyaXZpYWxJbnRlcnNlY3Rpb25JbmRleDtcbn1cbiJdfQ==