'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Line = require('./line'),
    arrayUtilities = require('./utilities/array'),
    vectorUtilities = require('./utilities/vector'),
    vertexUtilities = require('./utilities/vertex'),
    verticesUtilities = require('./utilities/vertices'),
    approximateUtilities = require('./utilities/approximate');

var _rotateAboutZAxis = vertexUtilities.rotateAboutZAxis,
    isApproximatelyEqualToZero = approximateUtilities.isApproximatelyEqualToZero,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    permute = arrayUtilities.permute,
    calculateNormal = verticesUtilities.calculateNormal,
    rotateVertices = verticesUtilities.rotateVertices,
    add3 = vectorUtilities.add3,
    subtract3 = vectorUtilities.subtract3,
    scale3 = vectorUtilities.scale3,
    length3 = vectorUtilities.length3;

var Facet = function () {
  function Facet(vertices, normal) {
    _classCallCheck(this, Facet);

    this.vertices = vertices;
    this.normal = normal;
  }

  _createClass(Facet, [{
    key: 'clone',
    value: function clone() {
      var vertices = this.vertices.map(function (vertex) {
        return vertex.slice();
      }),
          normal = this.normal.slice(),
          facet = new Facet(vertices, normal);

      return facet;
    }
  }, {
    key: 'getVertices',
    value: function getVertices() {
      return this.vertices;
    }
  }, {
    key: 'getNormal',
    value: function getNormal() {
      return this.normal;
    }
  }, {
    key: 'getLines',
    value: function getLines() {
      var verticesLength = 3,
          ///
      lines = this.vertices.map(function (vertex, index) {
        var startIndex = index,
            endIndex = (startIndex + 1) % verticesLength,
            startVertex = this.vertices[startIndex],
            endVertex = this.vertices[endIndex],
            line = Line.fromVertices(startVertex, endVertex);

        return line;
      }.bind(this));

      return lines;
    }
  }, {
    key: 'getMidPoint',
    value: function getMidPoint() {
      var midPoint = this.vertices.reduce(function (midPoint, vertex) {
        var scaledVertex = scale3(vertex, 1 / 3);

        midPoint = add3(midPoint, scaledVertex);

        return midPoint;
      }, [0, 0, 0]);

      return midPoint;
    }
  }, {
    key: 'isTooSmall',
    value: function isTooSmall() {
      var normalLength = length3(this.normal),
          normalLengthApproximatelyEqualToZero = isApproximatelyEqualToZero(normalLength),
          tooSmall = normalLengthApproximatelyEqualToZero; ///

      return tooSmall;
    }
  }, {
    key: 'isInsideLinesInXYPlane',
    value: function isInsideLinesInXYPlane(linesInXYPlane) {
      var midPoint = this.getMidPoint(),
          midPointToOneSideOfLinesInXYPlane = isMidPointToOneSideOfLinesInXYPlane(midPoint, linesInXYPlane),
          insideLinesInXYPlane = midPointToOneSideOfLinesInXYPlane; ///

      return insideLinesInXYPlane;
    }
  }, {
    key: 'applyTransforms',
    value: function applyTransforms(transforms) {
      this.vertices = this.vertices.map(function (vertex) {
        transforms.forEach(function (transform) {
          vertex = transform(vertex);
        });

        return vertex;
      });

      this.normal = calculateNormal(this.vertices);
    }
  }, {
    key: 'rotate',
    value: function rotate(rotationQuaternion) {
      this.vertices = rotateVertices(this.vertices, rotationQuaternion);

      this.normal = calculateNormal(this.vertices);
    }
  }, {
    key: 'rotateAboutZAxis',
    value: function rotateAboutZAxis(rotationAboutZAxisMatrix) {
      this.vertices = this.vertices.map(function (vertex) {
        vertex = _rotateAboutZAxis(vertex, rotationAboutZAxisMatrix);

        return vertex;
      });

      this.normal = calculateNormal(this.vertices);
    }
  }, {
    key: 'split',
    value: function split(intersections, smallerFacets) {
      var nonNullIntersections = calculateNonNullIntersections(intersections),
          nonNullIntersectionsLength = nonNullIntersections.length;

      switch (nonNullIntersectionsLength) {
        case 2:
          this.splitWithTwoNonNullIntersections(intersections, smallerFacets);
          break;

        case 1:
          this.splitWithOneNonNullIntersection(intersections, smallerFacets);
          break;

        default:
          var smallerFacet = this; ///

          smallerFacets.push(smallerFacet);
          break;
      }
    }
  }, {
    key: 'splitWithTwoNonNullIntersections',
    value: function splitWithTwoNonNullIntersections(intersections, smallerFacets) {
      var verticesLength = 3,
          nullIntersectionIndex = calculateNullIntersectionIndex(intersections),
          places = (verticesLength - nullIntersectionIndex) % verticesLength;

      intersections = permute(intersections, places);

      this.vertices = permute(this.vertices, places);

      var firstVertex = first(this.vertices),
          secondVertex = second(this.vertices),
          thirdVertex = third(this.vertices),
          nonNullIntersections = intersections.slice(1),
          firstNonNullIntersection = first(nonNullIntersections),
          secondNonNullIntersection = second(nonNullIntersections),
          firstIntermediateVertex = calculateIntermediateVertex(secondVertex, thirdVertex, firstNonNullIntersection),
          secondIntermediateVertex = calculateIntermediateVertex(thirdVertex, firstVertex, secondNonNullIntersection),
          firstVertices = [firstVertex, secondVertex, firstIntermediateVertex],
          secondVertices = [firstIntermediateVertex, secondIntermediateVertex, firstVertex],
          thirdVertices = [firstIntermediateVertex, thirdVertex, secondIntermediateVertex],
          firstFacet = Facet.fromVertices(firstVertices),
          secondFacet = Facet.fromVertices(secondVertices),
          thirdFacet = Facet.fromVertices(thirdVertices),
          firstFacetTooSmall = firstFacet.isTooSmall(),
          secondFacetTooSmall = secondFacet.isTooSmall(),
          thirdFacetTooSmall = thirdFacet.isTooSmall();

      if (!firstFacetTooSmall) {
        smallerFacets.push(firstFacet);
      }

      if (!secondFacetTooSmall) {
        smallerFacets.push(secondFacet);
      }

      if (!thirdFacetTooSmall) {
        smallerFacets.push(thirdFacet);
      }
    }
  }, {
    key: 'splitWithOneNonNullIntersection',
    value: function splitWithOneNonNullIntersection(intersections, smallerFacets) {
      var verticesLength = 3,
          nonNullIntersectionIndex = calculateNonNullIntersectionIndex(intersections),
          places = (verticesLength - nonNullIntersectionIndex) % verticesLength;

      intersections = permute(intersections, places);

      this.vertices = permute(this.vertices, places);

      var firstVertex = first(this.vertices),
          secondVertex = second(this.vertices),
          thirdVertex = third(this.vertices),
          firstIntersection = first(intersections),
          intermediateVertex = calculateIntermediateVertex(firstVertex, secondVertex, firstIntersection),
          firstVertices = [firstVertex, intermediateVertex, thirdVertex],
          secondVertices = [intermediateVertex, secondVertex, thirdVertex],
          firstFacet = Facet.fromVertices(firstVertices),
          secondFacet = Facet.fromVertices(secondVertices),
          firstFacetTooSmall = firstFacet.isTooSmall(),
          secondFacetTooSmall = secondFacet.isTooSmall();

      if (!firstFacetTooSmall) {
        smallerFacets.push(firstFacet);
      }

      if (!secondFacetTooSmall) {
        smallerFacets.push(secondFacet);
      }
    }
  }, {
    key: 'calculateIntersectionsWithVerticalLineInXYPlane',
    value: function calculateIntersectionsWithVerticalLineInXYPlane(verticalLineInXYPlane) {
      var lines = this.getLines(),
          intersections = lines.map(function (line) {
        var intersection = line.calculateIntersectionWithVerticalLineInXYPlane(verticalLineInXYPlane);

        return intersection;
      });

      return intersections;
    }
  }], [{
    key: 'fromVertices',
    value: function fromVertices(vertices) {
      var normal = calculateNormal(vertices),
          facet = new Facet(vertices, normal);

      return facet;
    }
  }, {
    key: 'fromVerticesAndIndexes',
    value: function fromVerticesAndIndexes(vertices, indexes) {
      vertices = indexes.map(function (index) {
        var vertex = vertices[index];

        return vertex;
      });

      var facet = Facet.fromVertices(vertices);

      return facet;
    }
  }]);

  return Facet;
}();

module.exports = Facet;

function calculateIntermediateVertex(startVertex, endVertex, nonNullIntersection) {
  var direction = subtract3(endVertex, startVertex),
      offset = scale3(direction, nonNullIntersection),
      intermediateVertex = add3(startVertex, offset);

  return intermediateVertex;
}

function calculateNonNullIntersections(intersections) {
  var nonNullIntersections = intersections.reduce(function (nonNullIntersections, intersection) {
    if (intersection !== null) {
      var nonNullIntersection = intersection; ///

      nonNullIntersections.push(nonNullIntersection);
    }

    return nonNullIntersections;
  }, []);

  return nonNullIntersections;
}

function calculateNullIntersectionIndex(intersections) {
  var nullIntersectionIndex = intersections.reduce(function (nullIntersectionIndex, intersection, index) {
    if (nullIntersectionIndex === null) {
      if (intersection === null) {
        nullIntersectionIndex = index;
      }
    }

    return nullIntersectionIndex;
  }, null);

  return nullIntersectionIndex;
}

function calculateNonNullIntersectionIndex(intersections) {
  var nullIntersectionIndex = intersections.reduce(function (nullIntersectionIndex, intersection, index) {
    if (nullIntersectionIndex === null) {
      if (intersection !== null) {
        nullIntersectionIndex = index;
      }
    }

    return nullIntersectionIndex;
  }, null);

  return nullIntersectionIndex;
}

function isMidPointToOneSideOfLinesInXYPlane(midPoint, linesInXYPlane) {
  var midPointToTheLeftOfLinesInXYPlane = isMidPointToTheLeftOfLinesInXYPlane(midPoint, linesInXYPlane),
      midPointToTheRightOfLinesInXYPlane = isMidPointToTheRightOfLinesInXYPlane(midPoint, linesInXYPlane),
      midPointToOneSideOfLinesInXYPlane = midPointToTheLeftOfLinesInXYPlane || midPointToTheRightOfLinesInXYPlane; ///

  return midPointToOneSideOfLinesInXYPlane;
}

function isMidPointToTheLeftOfLinesInXYPlane(midPoint, linesInXYPlane) {
  var midPointToTheLeftOfLinesInXYPlane = linesInXYPlane.reduce(function (midPointToTheLeftOfLinesInXYPlane, lineInXYPlane) {
    if (midPointToTheLeftOfLinesInXYPlane) {
      var midPointToTheLeftOfLineInXYPlane = lineInXYPlane.isMidPointToTheLeft(midPoint);

      midPointToTheLeftOfLinesInXYPlane = midPointToTheLeftOfLineInXYPlane;
    }

    return midPointToTheLeftOfLinesInXYPlane;
  }, true);

  return midPointToTheLeftOfLinesInXYPlane;
}

function isMidPointToTheRightOfLinesInXYPlane(midPoint, linesInXYPlane) {
  var midPointToTheRightOfLinesInXYPlane = linesInXYPlane.reduce(function (midPointToTheRightOfLinesInXYPlane, lineInXYPlane) {
    if (midPointToTheRightOfLinesInXYPlane) {
      var midPointToTheRightOfLineInXYPlane = lineInXYPlane.isMidPointToTheRight(midPoint);

      midPointToTheRightOfLinesInXYPlane = midPointToTheRightOfLineInXYPlane;
    }

    return midPointToTheRightOfLinesInXYPlane;
  }, true);

  return midPointToTheRightOfLinesInXYPlane;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9mYWNldC5qcyJdLCJuYW1lcyI6WyJMaW5lIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwidmVjdG9yVXRpbGl0aWVzIiwidmVydGV4VXRpbGl0aWVzIiwidmVydGljZXNVdGlsaXRpZXMiLCJhcHByb3hpbWF0ZVV0aWxpdGllcyIsInJvdGF0ZUFib3V0WkF4aXMiLCJpc0FwcHJveGltYXRlbHlFcXVhbFRvWmVybyIsImZpcnN0Iiwic2Vjb25kIiwidGhpcmQiLCJwZXJtdXRlIiwiY2FsY3VsYXRlTm9ybWFsIiwicm90YXRlVmVydGljZXMiLCJhZGQzIiwic3VidHJhY3QzIiwic2NhbGUzIiwibGVuZ3RoMyIsIkZhY2V0IiwidmVydGljZXMiLCJub3JtYWwiLCJtYXAiLCJ2ZXJ0ZXgiLCJzbGljZSIsImZhY2V0IiwidmVydGljZXNMZW5ndGgiLCJsaW5lcyIsImluZGV4Iiwic3RhcnRJbmRleCIsImVuZEluZGV4Iiwic3RhcnRWZXJ0ZXgiLCJlbmRWZXJ0ZXgiLCJsaW5lIiwiZnJvbVZlcnRpY2VzIiwiYmluZCIsIm1pZFBvaW50IiwicmVkdWNlIiwic2NhbGVkVmVydGV4Iiwibm9ybWFsTGVuZ3RoIiwibm9ybWFsTGVuZ3RoQXBwcm94aW1hdGVseUVxdWFsVG9aZXJvIiwidG9vU21hbGwiLCJsaW5lc0luWFlQbGFuZSIsImdldE1pZFBvaW50IiwibWlkUG9pbnRUb09uZVNpZGVPZkxpbmVzSW5YWVBsYW5lIiwiaXNNaWRQb2ludFRvT25lU2lkZU9mTGluZXNJblhZUGxhbmUiLCJpbnNpZGVMaW5lc0luWFlQbGFuZSIsInRyYW5zZm9ybXMiLCJmb3JFYWNoIiwidHJhbnNmb3JtIiwicm90YXRpb25RdWF0ZXJuaW9uIiwicm90YXRpb25BYm91dFpBeGlzTWF0cml4IiwiaW50ZXJzZWN0aW9ucyIsInNtYWxsZXJGYWNldHMiLCJub25OdWxsSW50ZXJzZWN0aW9ucyIsImNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25zIiwibm9uTnVsbEludGVyc2VjdGlvbnNMZW5ndGgiLCJsZW5ndGgiLCJzcGxpdFdpdGhUd29Ob25OdWxsSW50ZXJzZWN0aW9ucyIsInNwbGl0V2l0aE9uZU5vbk51bGxJbnRlcnNlY3Rpb24iLCJzbWFsbGVyRmFjZXQiLCJwdXNoIiwibnVsbEludGVyc2VjdGlvbkluZGV4IiwiY2FsY3VsYXRlTnVsbEludGVyc2VjdGlvbkluZGV4IiwicGxhY2VzIiwiZmlyc3RWZXJ0ZXgiLCJzZWNvbmRWZXJ0ZXgiLCJ0aGlyZFZlcnRleCIsImZpcnN0Tm9uTnVsbEludGVyc2VjdGlvbiIsInNlY29uZE5vbk51bGxJbnRlcnNlY3Rpb24iLCJmaXJzdEludGVybWVkaWF0ZVZlcnRleCIsImNhbGN1bGF0ZUludGVybWVkaWF0ZVZlcnRleCIsInNlY29uZEludGVybWVkaWF0ZVZlcnRleCIsImZpcnN0VmVydGljZXMiLCJzZWNvbmRWZXJ0aWNlcyIsInRoaXJkVmVydGljZXMiLCJmaXJzdEZhY2V0Iiwic2Vjb25kRmFjZXQiLCJ0aGlyZEZhY2V0IiwiZmlyc3RGYWNldFRvb1NtYWxsIiwiaXNUb29TbWFsbCIsInNlY29uZEZhY2V0VG9vU21hbGwiLCJ0aGlyZEZhY2V0VG9vU21hbGwiLCJub25OdWxsSW50ZXJzZWN0aW9uSW5kZXgiLCJjYWxjdWxhdGVOb25OdWxsSW50ZXJzZWN0aW9uSW5kZXgiLCJmaXJzdEludGVyc2VjdGlvbiIsImludGVybWVkaWF0ZVZlcnRleCIsInZlcnRpY2FsTGluZUluWFlQbGFuZSIsImdldExpbmVzIiwiaW50ZXJzZWN0aW9uIiwiY2FsY3VsYXRlSW50ZXJzZWN0aW9uV2l0aFZlcnRpY2FsTGluZUluWFlQbGFuZSIsImluZGV4ZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwibm9uTnVsbEludGVyc2VjdGlvbiIsImRpcmVjdGlvbiIsIm9mZnNldCIsIm1pZFBvaW50VG9UaGVMZWZ0T2ZMaW5lc0luWFlQbGFuZSIsImlzTWlkUG9pbnRUb1RoZUxlZnRPZkxpbmVzSW5YWVBsYW5lIiwibWlkUG9pbnRUb1RoZVJpZ2h0T2ZMaW5lc0luWFlQbGFuZSIsImlzTWlkUG9pbnRUb1RoZVJpZ2h0T2ZMaW5lc0luWFlQbGFuZSIsImxpbmVJblhZUGxhbmUiLCJtaWRQb2ludFRvVGhlTGVmdE9mTGluZUluWFlQbGFuZSIsImlzTWlkUG9pbnRUb1RoZUxlZnQiLCJtaWRQb2ludFRvVGhlUmlnaHRPZkxpbmVJblhZUGxhbmUiLCJpc01pZFBvaW50VG9UaGVSaWdodCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLE9BQU9DLFFBQVEsUUFBUixDQUFiO0FBQUEsSUFDTUMsaUJBQWlCRCxRQUFRLG1CQUFSLENBRHZCO0FBQUEsSUFFTUUsa0JBQWtCRixRQUFRLG9CQUFSLENBRnhCO0FBQUEsSUFHTUcsa0JBQWtCSCxRQUFRLG9CQUFSLENBSHhCO0FBQUEsSUFJTUksb0JBQW9CSixRQUFRLHNCQUFSLENBSjFCO0FBQUEsSUFLTUssdUJBQXVCTCxRQUFRLHlCQUFSLENBTDdCOztBQU9NLElBQUVNLGlCQUFGLEdBQXVCSCxlQUF2QixDQUFFRyxnQkFBRjtBQUFBLElBQ0VDLDBCQURGLEdBQ2lDRixvQkFEakMsQ0FDRUUsMEJBREY7QUFBQSxJQUVFQyxLQUZGLEdBRW9DUCxjQUZwQyxDQUVFTyxLQUZGO0FBQUEsSUFFU0MsTUFGVCxHQUVvQ1IsY0FGcEMsQ0FFU1EsTUFGVDtBQUFBLElBRWlCQyxLQUZqQixHQUVvQ1QsY0FGcEMsQ0FFaUJTLEtBRmpCO0FBQUEsSUFFd0JDLE9BRnhCLEdBRW9DVixjQUZwQyxDQUV3QlUsT0FGeEI7QUFBQSxJQUdFQyxlQUhGLEdBR3NDUixpQkFIdEMsQ0FHRVEsZUFIRjtBQUFBLElBR21CQyxjQUhuQixHQUdzQ1QsaUJBSHRDLENBR21CUyxjQUhuQjtBQUFBLElBSUVDLElBSkYsR0FJdUNaLGVBSnZDLENBSUVZLElBSkY7QUFBQSxJQUlRQyxTQUpSLEdBSXVDYixlQUp2QyxDQUlRYSxTQUpSO0FBQUEsSUFJbUJDLE1BSm5CLEdBSXVDZCxlQUp2QyxDQUltQmMsTUFKbkI7QUFBQSxJQUkyQkMs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blxuY29uc3QgTGluZSA9IHJlcXVpcmUoJy4vbGluZScpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgdmVjdG9yVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvdmVjdG9yJyksXG4gICAgICB2ZXJ0ZXhVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy92ZXJ0ZXgnKSxcbiAgICAgIHZlcnRpY2VzVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvdmVydGljZXMnKSxcbiAgICAgIGFwcHJveGltYXRlVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvYXBwcm94aW1hdGUnKTtcblxuY29uc3QgeyByb3RhdGVBYm91dFpBeGlzIH0gPSB2ZXJ0ZXhVdGlsaXRpZXMsXG4gICAgICB7IGlzQXBwcm94aW1hdGVseUVxdWFsVG9aZXJvIH0gPSBhcHByb3hpbWF0ZVV0aWxpdGllcyxcbiAgICAgIHsgZmlyc3QsIHNlY29uZCwgdGhpcmQsIHBlcm11dGUgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBjYWxjdWxhdGVOb3JtYWwsIHJvdGF0ZVZlcnRpY2VzIH0gPSB2ZXJ0aWNlc1V0aWxpdGllcyxcbiAgICAgIHsgYWRkMywgc3VidHJhY3QzLCBzY2FsZTMsIGxlbmd0aDMgfSA9IHZlY3RvclV0aWxpdGllcztcblxuY2xhc3MgRmFjZXQge1xuICBjb25zdHJ1Y3Rvcih2ZXJ0aWNlcywgbm9ybWFsKSB7XG4gICAgdGhpcy52ZXJ0aWNlcyA9IHZlcnRpY2VzO1xuICAgIHRoaXMubm9ybWFsID0gbm9ybWFsO1xuICB9XG5cbiAgY2xvbmUoKSB7XG4gICAgY29uc3QgdmVydGljZXMgPSB0aGlzLnZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB2ZXJ0ZXguc2xpY2UoKTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBub3JtYWwgPSB0aGlzLm5vcm1hbC5zbGljZSgpLFxuICAgICAgICAgIGZhY2V0ID0gbmV3IEZhY2V0KHZlcnRpY2VzLCBub3JtYWwpO1xuXG4gICAgcmV0dXJuIGZhY2V0O1xuICB9XG5cbiAgZ2V0VmVydGljZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMudmVydGljZXM7XG4gIH1cblxuICBnZXROb3JtYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9ybWFsO1xuICB9XG5cbiAgZ2V0TGluZXMoKSB7XG4gICAgY29uc3QgdmVydGljZXNMZW5ndGggPSAzLCAvLy9cbiAgICAgICAgICBsaW5lcyA9IHRoaXMudmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleCxcbiAgICAgICAgICAgICAgICAgIGVuZEluZGV4ID0gKHN0YXJ0SW5kZXggKyAxKSAlIHZlcnRpY2VzTGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgc3RhcnRWZXJ0ZXggPSB0aGlzLnZlcnRpY2VzW3N0YXJ0SW5kZXhdLFxuICAgICAgICAgICAgICAgICAgZW5kVmVydGV4ID0gdGhpcy52ZXJ0aWNlc1tlbmRJbmRleF0sXG4gICAgICAgICAgICAgICAgICBsaW5lID0gTGluZS5mcm9tVmVydGljZXMoc3RhcnRWZXJ0ZXgsIGVuZFZlcnRleCk7XG4gIFxuICAgICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICAgIHJldHVybiBsaW5lcztcbiAgfVxuICBcbiAgZ2V0TWlkUG9pbnQoKSB7XG4gICAgY29uc3QgbWlkUG9pbnQgPSB0aGlzLnZlcnRpY2VzLnJlZHVjZShmdW5jdGlvbihtaWRQb2ludCwgdmVydGV4KSB7XG4gICAgICBjb25zdCBzY2FsZWRWZXJ0ZXggPSBzY2FsZTModmVydGV4LCAxLzMpO1xuICAgICAgXG4gICAgICBtaWRQb2ludCA9IGFkZDMobWlkUG9pbnQsIHNjYWxlZFZlcnRleCk7XG4gICAgICBcbiAgICAgIHJldHVybiBtaWRQb2ludDtcbiAgICB9LCBbIDAsIDAsIDAgXSk7XG4gICAgXG4gICAgcmV0dXJuIG1pZFBvaW50O1xuICB9XG4gIFxuICBpc1Rvb1NtYWxsKCkge1xuICAgIGNvbnN0IG5vcm1hbExlbmd0aCA9IGxlbmd0aDModGhpcy5ub3JtYWwpLFxuICAgICAgICAgIG5vcm1hbExlbmd0aEFwcHJveGltYXRlbHlFcXVhbFRvWmVybyA9IGlzQXBwcm94aW1hdGVseUVxdWFsVG9aZXJvKG5vcm1hbExlbmd0aCksXG4gICAgICAgICAgdG9vU21hbGwgPSBub3JtYWxMZW5ndGhBcHByb3hpbWF0ZWx5RXF1YWxUb1plcm87ICAvLy9cbiAgICBcbiAgICByZXR1cm4gdG9vU21hbGw7XG4gIH1cbiAgXG4gIGlzSW5zaWRlTGluZXNJblhZUGxhbmUobGluZXNJblhZUGxhbmUpIHtcbiAgICBjb25zdCBtaWRQb2ludCA9IHRoaXMuZ2V0TWlkUG9pbnQoKSxcbiAgICAgICAgICBtaWRQb2ludFRvT25lU2lkZU9mTGluZXNJblhZUGxhbmUgPSBpc01pZFBvaW50VG9PbmVTaWRlT2ZMaW5lc0luWFlQbGFuZShtaWRQb2ludCwgbGluZXNJblhZUGxhbmUpLFxuICAgICAgICAgIGluc2lkZUxpbmVzSW5YWVBsYW5lID0gbWlkUG9pbnRUb09uZVNpZGVPZkxpbmVzSW5YWVBsYW5lOyAgLy8vXG5cbiAgICByZXR1cm4gaW5zaWRlTGluZXNJblhZUGxhbmU7XG4gIH1cbiAgXG4gIGFwcGx5VHJhbnNmb3Jtcyh0cmFuc2Zvcm1zKSB7XG4gICAgdGhpcy52ZXJ0aWNlcyA9IHRoaXMudmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgdHJhbnNmb3Jtcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zZm9ybSkge1xuICAgICAgICB2ZXJ0ZXggPSB0cmFuc2Zvcm0odmVydGV4KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdmVydGV4O1xuICAgIH0pO1xuXG4gICAgdGhpcy5ub3JtYWwgPSBjYWxjdWxhdGVOb3JtYWwodGhpcy52ZXJ0aWNlcyk7XG4gIH1cbiAgXG4gIHJvdGF0ZShyb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgICB0aGlzLnZlcnRpY2VzID0gcm90YXRlVmVydGljZXModGhpcy52ZXJ0aWNlcywgcm90YXRpb25RdWF0ZXJuaW9uKTtcbiAgICBcbiAgICB0aGlzLm5vcm1hbCA9IGNhbGN1bGF0ZU5vcm1hbCh0aGlzLnZlcnRpY2VzKTtcbiAgfVxuXG4gIHJvdGF0ZUFib3V0WkF4aXMocm90YXRpb25BYm91dFpBeGlzTWF0cml4KSB7XG4gICAgdGhpcy52ZXJ0aWNlcyA9IHRoaXMudmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgdmVydGV4ID0gcm90YXRlQWJvdXRaQXhpcyh2ZXJ0ZXgsIHJvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCk7XG5cbiAgICAgIHJldHVybiB2ZXJ0ZXg7XG4gICAgfSk7XG5cbiAgICB0aGlzLm5vcm1hbCA9IGNhbGN1bGF0ZU5vcm1hbCh0aGlzLnZlcnRpY2VzKTtcbiAgfVxuICBcbiAgc3BsaXQoaW50ZXJzZWN0aW9ucywgc21hbGxlckZhY2V0cykge1xuICAgIGNvbnN0IG5vbk51bGxJbnRlcnNlY3Rpb25zID0gY2FsY3VsYXRlTm9uTnVsbEludGVyc2VjdGlvbnMoaW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgbm9uTnVsbEludGVyc2VjdGlvbnNMZW5ndGggPSBub25OdWxsSW50ZXJzZWN0aW9ucy5sZW5ndGg7XG5cbiAgICBzd2l0Y2ggKG5vbk51bGxJbnRlcnNlY3Rpb25zTGVuZ3RoKSB7XG4gICAgICBjYXNlIDIgOlxuICAgICAgICB0aGlzLnNwbGl0V2l0aFR3b05vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAxIDpcbiAgICAgICAgdGhpcy5zcGxpdFdpdGhPbmVOb25OdWxsSW50ZXJzZWN0aW9uKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdCA6XG4gICAgICAgIGNvbnN0IHNtYWxsZXJGYWNldCA9IHRoaXM7ICAvLy9cblxuICAgICAgICBzbWFsbGVyRmFjZXRzLnB1c2goc21hbGxlckZhY2V0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgc3BsaXRXaXRoVHdvTm9uTnVsbEludGVyc2VjdGlvbnMoaW50ZXJzZWN0aW9ucywgc21hbGxlckZhY2V0cykge1xuICAgIGNvbnN0IHZlcnRpY2VzTGVuZ3RoID0gMyxcbiAgICAgICAgICBudWxsSW50ZXJzZWN0aW9uSW5kZXggPSBjYWxjdWxhdGVOdWxsSW50ZXJzZWN0aW9uSW5kZXgoaW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgcGxhY2VzID0gKHZlcnRpY2VzTGVuZ3RoIC0gbnVsbEludGVyc2VjdGlvbkluZGV4KSAlIHZlcnRpY2VzTGVuZ3RoO1xuXG4gICAgaW50ZXJzZWN0aW9ucyA9IHBlcm11dGUoaW50ZXJzZWN0aW9ucywgcGxhY2VzKTtcblxuICAgIHRoaXMudmVydGljZXMgPSBwZXJtdXRlKHRoaXMudmVydGljZXMsIHBsYWNlcyk7XG5cbiAgICBjb25zdCBmaXJzdFZlcnRleCA9IGZpcnN0KHRoaXMudmVydGljZXMpLFxuICAgICAgICAgIHNlY29uZFZlcnRleCA9IHNlY29uZCh0aGlzLnZlcnRpY2VzKSxcbiAgICAgICAgICB0aGlyZFZlcnRleCA9IHRoaXJkKHRoaXMudmVydGljZXMpLFxuICAgICAgICAgIG5vbk51bGxJbnRlcnNlY3Rpb25zID0gaW50ZXJzZWN0aW9ucy5zbGljZSgxKSxcbiAgICAgICAgICBmaXJzdE5vbk51bGxJbnRlcnNlY3Rpb24gPSBmaXJzdChub25OdWxsSW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgc2Vjb25kTm9uTnVsbEludGVyc2VjdGlvbiA9IHNlY29uZChub25OdWxsSW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgZmlyc3RJbnRlcm1lZGlhdGVWZXJ0ZXggPSBjYWxjdWxhdGVJbnRlcm1lZGlhdGVWZXJ0ZXgoc2Vjb25kVmVydGV4LCB0aGlyZFZlcnRleCwgZmlyc3ROb25OdWxsSW50ZXJzZWN0aW9uKSxcbiAgICAgICAgICBzZWNvbmRJbnRlcm1lZGlhdGVWZXJ0ZXggPSBjYWxjdWxhdGVJbnRlcm1lZGlhdGVWZXJ0ZXgodGhpcmRWZXJ0ZXgsIGZpcnN0VmVydGV4LCBzZWNvbmROb25OdWxsSW50ZXJzZWN0aW9uKSxcbiAgICAgICAgICBmaXJzdFZlcnRpY2VzID0gW1xuICAgICAgICAgICAgZmlyc3RWZXJ0ZXgsXG4gICAgICAgICAgICBzZWNvbmRWZXJ0ZXgsXG4gICAgICAgICAgICBmaXJzdEludGVybWVkaWF0ZVZlcnRleFxuICAgICAgICAgIF0sXG4gICAgICAgICAgc2Vjb25kVmVydGljZXMgPSBbXG4gICAgICAgICAgICBmaXJzdEludGVybWVkaWF0ZVZlcnRleCxcbiAgICAgICAgICAgIHNlY29uZEludGVybWVkaWF0ZVZlcnRleCxcbiAgICAgICAgICAgIGZpcnN0VmVydGV4XG4gICAgICAgICAgXSxcbiAgICAgICAgICB0aGlyZFZlcnRpY2VzID0gW1xuICAgICAgICAgICAgZmlyc3RJbnRlcm1lZGlhdGVWZXJ0ZXgsXG4gICAgICAgICAgICB0aGlyZFZlcnRleCxcbiAgICAgICAgICAgIHNlY29uZEludGVybWVkaWF0ZVZlcnRleFxuICAgICAgICAgIF0sXG4gICAgICAgICAgZmlyc3RGYWNldCA9IEZhY2V0LmZyb21WZXJ0aWNlcyhmaXJzdFZlcnRpY2VzKSxcbiAgICAgICAgICBzZWNvbmRGYWNldCA9IEZhY2V0LmZyb21WZXJ0aWNlcyhzZWNvbmRWZXJ0aWNlcyksXG4gICAgICAgICAgdGhpcmRGYWNldCA9IEZhY2V0LmZyb21WZXJ0aWNlcyh0aGlyZFZlcnRpY2VzKSxcbiAgICAgICAgICBmaXJzdEZhY2V0VG9vU21hbGwgPSBmaXJzdEZhY2V0LmlzVG9vU21hbGwoKSxcbiAgICAgICAgICBzZWNvbmRGYWNldFRvb1NtYWxsID0gc2Vjb25kRmFjZXQuaXNUb29TbWFsbCgpLFxuICAgICAgICAgIHRoaXJkRmFjZXRUb29TbWFsbCA9IHRoaXJkRmFjZXQuaXNUb29TbWFsbCgpO1xuXG4gICAgaWYgKCFmaXJzdEZhY2V0VG9vU21hbGwpIHtcbiAgICAgIHNtYWxsZXJGYWNldHMucHVzaChmaXJzdEZhY2V0KTtcbiAgICB9XG5cbiAgICBpZiAoIXNlY29uZEZhY2V0VG9vU21hbGwpIHtcbiAgICAgIHNtYWxsZXJGYWNldHMucHVzaChzZWNvbmRGYWNldCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlyZEZhY2V0VG9vU21hbGwpIHtcbiAgICAgIHNtYWxsZXJGYWNldHMucHVzaCh0aGlyZEZhY2V0KTtcbiAgICB9XG4gIH1cblxuICBzcGxpdFdpdGhPbmVOb25OdWxsSW50ZXJzZWN0aW9uKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpIHtcbiAgICBjb25zdCB2ZXJ0aWNlc0xlbmd0aCA9IDMsXG4gICAgICAgICAgbm9uTnVsbEludGVyc2VjdGlvbkluZGV4ID0gY2FsY3VsYXRlTm9uTnVsbEludGVyc2VjdGlvbkluZGV4KGludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIHBsYWNlcyA9ICh2ZXJ0aWNlc0xlbmd0aCAtIG5vbk51bGxJbnRlcnNlY3Rpb25JbmRleCkgJSB2ZXJ0aWNlc0xlbmd0aDtcblxuICAgIGludGVyc2VjdGlvbnMgPSBwZXJtdXRlKGludGVyc2VjdGlvbnMsIHBsYWNlcyk7XG5cbiAgICB0aGlzLnZlcnRpY2VzID0gcGVybXV0ZSh0aGlzLnZlcnRpY2VzLCBwbGFjZXMpO1xuXG4gICAgY29uc3QgZmlyc3RWZXJ0ZXggPSBmaXJzdCh0aGlzLnZlcnRpY2VzKSxcbiAgICAgICAgICBzZWNvbmRWZXJ0ZXggPSBzZWNvbmQodGhpcy52ZXJ0aWNlcyksXG4gICAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh0aGlzLnZlcnRpY2VzKSxcbiAgICAgICAgICBmaXJzdEludGVyc2VjdGlvbiA9IGZpcnN0KGludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIGludGVybWVkaWF0ZVZlcnRleCA9IGNhbGN1bGF0ZUludGVybWVkaWF0ZVZlcnRleChmaXJzdFZlcnRleCwgc2Vjb25kVmVydGV4LCBmaXJzdEludGVyc2VjdGlvbiksXG4gICAgICAgICAgZmlyc3RWZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgIGZpcnN0VmVydGV4LFxuICAgICAgICAgICAgaW50ZXJtZWRpYXRlVmVydGV4LFxuICAgICAgICAgICAgdGhpcmRWZXJ0ZXhcbiAgICAgICAgICBdLFxuICAgICAgICAgIHNlY29uZFZlcnRpY2VzID0gW1xuICAgICAgICAgICAgaW50ZXJtZWRpYXRlVmVydGV4LFxuICAgICAgICAgICAgc2Vjb25kVmVydGV4LFxuICAgICAgICAgICAgdGhpcmRWZXJ0ZXhcbiAgICAgICAgICBdLFxuICAgICAgICAgIGZpcnN0RmFjZXQgPSBGYWNldC5mcm9tVmVydGljZXMoZmlyc3RWZXJ0aWNlcyksXG4gICAgICAgICAgc2Vjb25kRmFjZXQgPSBGYWNldC5mcm9tVmVydGljZXMoc2Vjb25kVmVydGljZXMpLFxuICAgICAgICAgIGZpcnN0RmFjZXRUb29TbWFsbCA9IGZpcnN0RmFjZXQuaXNUb29TbWFsbCgpLFxuICAgICAgICAgIHNlY29uZEZhY2V0VG9vU21hbGwgPSBzZWNvbmRGYWNldC5pc1Rvb1NtYWxsKCk7XG5cbiAgICBpZiAoIWZpcnN0RmFjZXRUb29TbWFsbCkge1xuICAgICAgc21hbGxlckZhY2V0cy5wdXNoKGZpcnN0RmFjZXQpO1xuICAgIH1cblxuICAgIGlmICghc2Vjb25kRmFjZXRUb29TbWFsbCkge1xuICAgICAgc21hbGxlckZhY2V0cy5wdXNoKHNlY29uZEZhY2V0KTtcbiAgICB9XG4gIH1cblxuICBjYWxjdWxhdGVJbnRlcnNlY3Rpb25zV2l0aFZlcnRpY2FsTGluZUluWFlQbGFuZSh2ZXJ0aWNhbExpbmVJblhZUGxhbmUpIHtcbiAgICBjb25zdCBsaW5lcyA9IHRoaXMuZ2V0TGluZXMoKSxcbiAgICAgICAgICBpbnRlcnNlY3Rpb25zID0gbGluZXMubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IGxpbmUuY2FsY3VsYXRlSW50ZXJzZWN0aW9uV2l0aFZlcnRpY2FsTGluZUluWFlQbGFuZSh2ZXJ0aWNhbExpbmVJblhZUGxhbmUpO1xuICBcbiAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb247XG4gICAgICAgICAgfSk7XG5cbiAgICByZXR1cm4gaW50ZXJzZWN0aW9ucztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tVmVydGljZXModmVydGljZXMpIHtcbiAgICBjb25zdCBub3JtYWwgPSBjYWxjdWxhdGVOb3JtYWwodmVydGljZXMpLFxuICAgICAgICAgIGZhY2V0ID0gbmV3IEZhY2V0KHZlcnRpY2VzLCBub3JtYWwpO1xuXG4gICAgcmV0dXJuIGZhY2V0O1xuICB9XG5cbiAgc3RhdGljIGZyb21WZXJ0aWNlc0FuZEluZGV4ZXModmVydGljZXMsIGluZGV4ZXMpIHtcbiAgICB2ZXJ0aWNlcyA9IGluZGV4ZXMubWFwKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICBjb25zdCB2ZXJ0ZXggPSB2ZXJ0aWNlc1tpbmRleF07XG5cbiAgICAgIHJldHVybiB2ZXJ0ZXg7XG4gICAgfSk7XG5cbiAgICBjb25zdCBmYWNldCA9IEZhY2V0LmZyb21WZXJ0aWNlcyh2ZXJ0aWNlcyk7XG5cbiAgICByZXR1cm4gZmFjZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGYWNldDtcblxuZnVuY3Rpb24gY2FsY3VsYXRlSW50ZXJtZWRpYXRlVmVydGV4KHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgsIG5vbk51bGxJbnRlcnNlY3Rpb24pIHtcbiAgY29uc3QgZGlyZWN0aW9uID0gc3VidHJhY3QzKGVuZFZlcnRleCwgc3RhcnRWZXJ0ZXgpLFxuICAgICAgICBvZmZzZXQgPSBzY2FsZTMoZGlyZWN0aW9uLCBub25OdWxsSW50ZXJzZWN0aW9uKSxcbiAgICAgICAgaW50ZXJtZWRpYXRlVmVydGV4ID0gYWRkMyhzdGFydFZlcnRleCwgb2Zmc2V0KTtcblxuICByZXR1cm4gaW50ZXJtZWRpYXRlVmVydGV4O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVOb25OdWxsSW50ZXJzZWN0aW9ucyhpbnRlcnNlY3Rpb25zKSB7XG4gIGNvbnN0IG5vbk51bGxJbnRlcnNlY3Rpb25zID0gaW50ZXJzZWN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24obm9uTnVsbEludGVyc2VjdGlvbnMsIGludGVyc2VjdGlvbikge1xuICAgIGlmIChpbnRlcnNlY3Rpb24gIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IG5vbk51bGxJbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247IC8vL1xuXG4gICAgICBub25OdWxsSW50ZXJzZWN0aW9ucy5wdXNoKG5vbk51bGxJbnRlcnNlY3Rpb24pO1xuICAgIH1cblxuICAgIHJldHVybiBub25OdWxsSW50ZXJzZWN0aW9ucztcbiAgfSwgW10pO1xuXG4gIHJldHVybiBub25OdWxsSW50ZXJzZWN0aW9ucztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlTnVsbEludGVyc2VjdGlvbkluZGV4KGludGVyc2VjdGlvbnMpIHtcbiAgY29uc3QgbnVsbEludGVyc2VjdGlvbkluZGV4ID0gaW50ZXJzZWN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24obnVsbEludGVyc2VjdGlvbkluZGV4LCBpbnRlcnNlY3Rpb24sIGluZGV4KSB7XG4gICAgaWYgKG51bGxJbnRlcnNlY3Rpb25JbmRleCA9PT0gbnVsbCkge1xuICAgICAgaWYgKGludGVyc2VjdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICBudWxsSW50ZXJzZWN0aW9uSW5kZXggPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbEludGVyc2VjdGlvbkluZGV4O1xuICB9LCBudWxsKTtcblxuICByZXR1cm4gbnVsbEludGVyc2VjdGlvbkluZGV4O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVOb25OdWxsSW50ZXJzZWN0aW9uSW5kZXgoaW50ZXJzZWN0aW9ucykge1xuICBjb25zdCBudWxsSW50ZXJzZWN0aW9uSW5kZXggPSBpbnRlcnNlY3Rpb25zLnJlZHVjZShmdW5jdGlvbihudWxsSW50ZXJzZWN0aW9uSW5kZXgsIGludGVyc2VjdGlvbiwgaW5kZXgpIHtcbiAgICBpZiAobnVsbEludGVyc2VjdGlvbkluZGV4ID09PSBudWxsKSB7XG4gICAgICBpZiAoaW50ZXJzZWN0aW9uICE9PSBudWxsKSB7XG4gICAgICAgIG51bGxJbnRlcnNlY3Rpb25JbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsSW50ZXJzZWN0aW9uSW5kZXg7XG4gIH0sIG51bGwpO1xuXG4gIHJldHVybiBudWxsSW50ZXJzZWN0aW9uSW5kZXg7XG59XG5cbmZ1bmN0aW9uIGlzTWlkUG9pbnRUb09uZVNpZGVPZkxpbmVzSW5YWVBsYW5lKG1pZFBvaW50LCBsaW5lc0luWFlQbGFuZSkge1xuICBjb25zdCBtaWRQb2ludFRvVGhlTGVmdE9mTGluZXNJblhZUGxhbmUgPSBpc01pZFBvaW50VG9UaGVMZWZ0T2ZMaW5lc0luWFlQbGFuZShtaWRQb2ludCwgbGluZXNJblhZUGxhbmUpLFxuICAgICAgICBtaWRQb2ludFRvVGhlUmlnaHRPZkxpbmVzSW5YWVBsYW5lID0gaXNNaWRQb2ludFRvVGhlUmlnaHRPZkxpbmVzSW5YWVBsYW5lKG1pZFBvaW50LCBsaW5lc0luWFlQbGFuZSksXG4gICAgICAgIG1pZFBvaW50VG9PbmVTaWRlT2ZMaW5lc0luWFlQbGFuZSA9IG1pZFBvaW50VG9UaGVMZWZ0T2ZMaW5lc0luWFlQbGFuZSB8fCBtaWRQb2ludFRvVGhlUmlnaHRPZkxpbmVzSW5YWVBsYW5lOyAvLy9cblxuICByZXR1cm4gbWlkUG9pbnRUb09uZVNpZGVPZkxpbmVzSW5YWVBsYW5lO1xufVxuXG5mdW5jdGlvbiBpc01pZFBvaW50VG9UaGVMZWZ0T2ZMaW5lc0luWFlQbGFuZShtaWRQb2ludCwgbGluZXNJblhZUGxhbmUpIHtcbiAgY29uc3QgbWlkUG9pbnRUb1RoZUxlZnRPZkxpbmVzSW5YWVBsYW5lID0gbGluZXNJblhZUGxhbmUucmVkdWNlKGZ1bmN0aW9uKG1pZFBvaW50VG9UaGVMZWZ0T2ZMaW5lc0luWFlQbGFuZSwgbGluZUluWFlQbGFuZSkge1xuICAgIGlmIChtaWRQb2ludFRvVGhlTGVmdE9mTGluZXNJblhZUGxhbmUpIHtcbiAgICAgIGNvbnN0IG1pZFBvaW50VG9UaGVMZWZ0T2ZMaW5lSW5YWVBsYW5lID0gbGluZUluWFlQbGFuZS5pc01pZFBvaW50VG9UaGVMZWZ0KG1pZFBvaW50KTtcblxuICAgICAgbWlkUG9pbnRUb1RoZUxlZnRPZkxpbmVzSW5YWVBsYW5lID0gbWlkUG9pbnRUb1RoZUxlZnRPZkxpbmVJblhZUGxhbmU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1pZFBvaW50VG9UaGVMZWZ0T2ZMaW5lc0luWFlQbGFuZTtcbiAgfSwgdHJ1ZSk7XG5cbiAgcmV0dXJuIG1pZFBvaW50VG9UaGVMZWZ0T2ZMaW5lc0luWFlQbGFuZTtcbn1cblxuZnVuY3Rpb24gaXNNaWRQb2ludFRvVGhlUmlnaHRPZkxpbmVzSW5YWVBsYW5lKG1pZFBvaW50LCBsaW5lc0luWFlQbGFuZSkge1xuICBjb25zdCBtaWRQb2ludFRvVGhlUmlnaHRPZkxpbmVzSW5YWVBsYW5lID0gbGluZXNJblhZUGxhbmUucmVkdWNlKGZ1bmN0aW9uKG1pZFBvaW50VG9UaGVSaWdodE9mTGluZXNJblhZUGxhbmUsIGxpbmVJblhZUGxhbmUpIHtcbiAgICBpZiAobWlkUG9pbnRUb1RoZVJpZ2h0T2ZMaW5lc0luWFlQbGFuZSkge1xuICAgICAgY29uc3QgbWlkUG9pbnRUb1RoZVJpZ2h0T2ZMaW5lSW5YWVBsYW5lID0gbGluZUluWFlQbGFuZS5pc01pZFBvaW50VG9UaGVSaWdodChtaWRQb2ludCk7XG5cbiAgICAgIG1pZFBvaW50VG9UaGVSaWdodE9mTGluZXNJblhZUGxhbmUgPSBtaWRQb2ludFRvVGhlUmlnaHRPZkxpbmVJblhZUGxhbmU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1pZFBvaW50VG9UaGVSaWdodE9mTGluZXNJblhZUGxhbmU7XG4gIH0sIHRydWUpO1xuXG4gIHJldHVybiBtaWRQb2ludFRvVGhlUmlnaHRPZkxpbmVzSW5YWVBsYW5lO1xufVxuIl19