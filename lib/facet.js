'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Edge = require('./edge'),
    constants = require('./constants'),
    vectorMaths = require('./maths/vector'),
    facetUtilities = require('./utilities/facet'),
    arrayUtilities = require('./utilities/array'),
    rotationUtilities = require('./utilities/rotation'),
    approximateUtilities = require('./utilities/approximate');

var VERTICES_LENGTH = constants.VERTICES_LENGTH,
    add3 = vectorMaths.add3,
    subtract3 = vectorMaths.subtract3,
    scale3 = vectorMaths.scale3,
    normalise3 = vectorMaths.normalise3,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    _permute = arrayUtilities.permute,
    isApproximatelyEqualToZero = approximateUtilities.isApproximatelyEqualToZero,
    rotateVertices = rotationUtilities.rotateVertices,
    rotateVertexAboutZAxis = rotationUtilities.rotateVertexAboutZAxis,
    calculateEdges = facetUtilities.calculateEdges,
    calculateNormal = facetUtilities.calculateNormal,
    calculateArea = facetUtilities.calculateArea;

var Facet = function () {
  function Facet(vertices, normal, edges) {
    _classCallCheck(this, Facet);

    this.vertices = vertices;
    this.normal = normal;
    this.edges = edges;
  }

  _createClass(Facet, [{
    key: 'getVertices',
    value: function getVertices() {
      return this.vertices;
    }
  }, {
    key: 'getNormal',
    value: function getNormal() {
      return this.normal;
    }
  }, {
    key: 'getEdges',
    value: function getEdges() {
      return this.edges;
    }
  }, {
    key: 'getMidPoint',
    value: function getMidPoint() {
      var midPoint = this.vertices.reduce(function (midPoint, vertex) {
        var scaledVertex = scale3(vertex, 1 / 3);

        midPoint = add3(midPoint, scaledVertex);

        return midPoint;
      }, [0, 0, 0]);

      return midPoint;
    }
  }, {
    key: 'getVertexPositions',
    value: function getVertexPositions() {
      var vertexPositions = this.vertices.map(function (vertex) {
        var vertexPosition = vertex.slice(); ///

        return vertexPosition;
      });

      return vertexPositions;
    }
  }, {
    key: 'getVertexNormals',
    value: function getVertexNormals() {
      var vertexNormal = normalise3(this.normal),
          vertexNormals = [vertexNormal, vertexNormal, vertexNormal];

      return vertexNormals;
    }
  }, {
    key: 'getVertexIndexes',
    value: function getVertexIndexes(index) {
      ///
      var vertexIndex = index * 3,
          vertexIndexes = [vertexIndex + 0, vertexIndex + 1, vertexIndex + 2];

      return vertexIndexes;
    }
  }, {
    key: 'isTooSmall',
    value: function isTooSmall() {
      var area = calculateArea(this.vertices),
          areaApproximatelyEqualToZero = isApproximatelyEqualToZero(area),
          tooSmall = areaApproximatelyEqualToZero; ///

      return tooSmall;
    }
  }, {
    key: 'isMasked',
    value: function isMasked(maskingFacet) {
      var edgesInXYPlane = maskingFacet.getEdgesInXYPlane(),
          midPoint = this.getMidPoint(),
          midPointToOneSideOfEdgesInXYPlane = isMidPointToOneSideOfEdgesInXYPlane(midPoint, edgesInXYPlane),
          masked = midPointToOneSideOfEdgesInXYPlane; ///

      return masked;
    }
  }, {
    key: 'applyTransforms',
    value: function applyTransforms(transforms) {
      this.vertices = this.vertices.map(function (vertex) {
        transforms.forEach(function (transform) {
          vertex = transform(vertex);
        });

        return vertex;
      });

      this.normal = calculateNormal(this.vertices);

      this.edges = calculateEdges(this.vertices, Edge);
    }
  }, {
    key: 'rotate',
    value: function rotate(rotationQuaternion) {
      this.vertices = rotateVertices(this.vertices, rotationQuaternion);

      this.normal = calculateNormal(this.vertices);

      this.edges = calculateEdges(this.vertices, Edge);
    }
  }, {
    key: 'rotateAboutZAxis',
    value: function rotateAboutZAxis(rotationAboutZAxisMatrix) {
      this.vertices = this.vertices.map(function (vertex) {
        vertex = rotateVertexAboutZAxis(vertex, rotationAboutZAxisMatrix);

        return vertex;
      });

      this.normal = calculateNormal(this.vertices);

      this.edges = calculateEdges(this.vertices, Edge);
    }
  }, {
    key: 'split',
    value: function split(intersections, smallerFacets) {
      var nonNullIntersections = calculateNonNullIntersections(intersections),
          nonNullIntersectionsLength = nonNullIntersections.length;

      switch (nonNullIntersectionsLength) {
        case 2:
          this.splitWithTwoNonNullIntersections(intersections, smallerFacets);
          break;

        case 1:
          this.splitWithOneNonNullIntersection(intersections, smallerFacets);
          break;

        case 0:
          this.splitWithZeroNonNullIntersections(intersections, smallerFacets);
          break;
      }
    }
  }, {
    key: 'permute',
    value: function permute(places) {
      this.vertices = _permute(this.vertices, places);
    }
  }, {
    key: 'splitWithTwoNonNullIntersections',
    value: function splitWithTwoNonNullIntersections(intersections, smallerFacets, facet) {
      var nullIntersectionIndex = calculateNullIntersectionIndex(intersections),
          places = (VERTICES_LENGTH - nullIntersectionIndex) % VERTICES_LENGTH;

      intersections = _permute(intersections, places);

      intersections = intersections.slice(1); ///

      this.permute(places);

      var firstVertex = first(this.vertices),
          secondVertex = second(this.vertices),
          thirdVertex = third(this.vertices),
          firstIntersection = first(intersections),
          secondIntersection = second(intersections),
          firstIntermediateVertex = calculateIntermediateVertex(secondVertex, thirdVertex, firstIntersection),
          secondIntermediateVertex = calculateIntermediateVertex(thirdVertex, firstVertex, secondIntersection),
          firstVertices = [firstVertex, secondVertex, firstIntermediateVertex],
          secondVertices = [firstIntermediateVertex, secondIntermediateVertex, firstVertex],
          thirdVertices = [firstIntermediateVertex, thirdVertex, secondIntermediateVertex],
          firstFacet = facet.fromVertices(firstVertices),
          secondFacet = facet.fromVertices(secondVertices),
          thirdFacet = facet.fromVertices(thirdVertices),
          firstFacetTooSmall = firstFacet.isTooSmall(),
          secondFacetTooSmall = secondFacet.isTooSmall(),
          thirdFacetTooSmall = thirdFacet.isTooSmall();

      if (!firstFacetTooSmall) {
        smallerFacets.push(firstFacet);
      }

      if (!secondFacetTooSmall) {
        smallerFacets.push(secondFacet);
      }

      if (!thirdFacetTooSmall) {
        smallerFacets.push(thirdFacet);
      }
    }
  }, {
    key: 'splitWithOneNonNullIntersection',
    value: function splitWithOneNonNullIntersection(intersections, smallerFacets, facet) {
      var nonNullIntersectionIndex = calculateNonNullIntersectionIndex(intersections),
          places = (VERTICES_LENGTH - nonNullIntersectionIndex) % VERTICES_LENGTH;

      intersections = _permute(intersections, places);

      this.permute(places);

      var firstVertex = first(this.vertices),
          secondVertex = second(this.vertices),
          thirdVertex = third(this.vertices),
          firstIntersection = first(intersections),
          intermediateVertex = calculateIntermediateVertex(firstVertex, secondVertex, firstIntersection),
          firstVertices = [firstVertex, intermediateVertex, thirdVertex],
          secondVertices = [intermediateVertex, secondVertex, thirdVertex],
          parentVertices = this.vertices,
          firstFacet = facet.fromVertices(firstVertices),
          secondFacet = facet.fromVertices(secondVertices),
          firstFacetTooSmall = firstFacet.isTooSmall(),
          secondFacetTooSmall = secondFacet.isTooSmall();

      if (!firstFacetTooSmall) {
        smallerFacets.push(firstFacet);
      }

      if (!secondFacetTooSmall) {
        smallerFacets.push(secondFacet);
      }
    }
  }, {
    key: 'splitWithZeroNonNullIntersections',
    value: function splitWithZeroNonNullIntersections(intersections, smallerFacets) {
      var smallerFacet = this; ///

      smallerFacets.push(smallerFacet);
    }
  }, {
    key: 'calculateIntersectionsWithVerticalLineInXYPlane',
    value: function calculateIntersectionsWithVerticalLineInXYPlane(verticalLineInXYPlane) {
      var edges = this.getEdges(),
          intersections = edges.map(function (edge) {
        var intersection = edge.calculateIntersectionWithVerticalLineInXYPlane(verticalLineInXYPlane);

        return intersection;
      });

      return intersections;
    }
  }]);

  return Facet;
}();

module.exports = Facet;

function calculateIntermediateVertex(startVertex, endVertex, intersection) {
  var direction = subtract3(endVertex, startVertex),
      offset = scale3(direction, intersection),
      intermediateVertex = add3(startVertex, offset);

  return intermediateVertex;
}

function calculateNonNullIntersections(intersections) {
  var nonNullIntersections = intersections.reduce(function (nonNullIntersections, intersection) {
    if (intersection !== null) {
      var nonNullIntersection = intersection; ///

      nonNullIntersections.push(nonNullIntersection);
    }

    return nonNullIntersections;
  }, []);

  return nonNullIntersections;
}

function calculateNullIntersectionIndex(intersections) {
  var nullIntersectionIndex = intersections.reduce(function (nullIntersectionIndex, intersection, index) {
    if (nullIntersectionIndex === null) {
      if (intersection === null) {
        nullIntersectionIndex = index;
      }
    }

    return nullIntersectionIndex;
  }, null);

  return nullIntersectionIndex;
}

function calculateNonNullIntersectionIndex(intersections) {
  var nullIntersectionIndex = intersections.reduce(function (nullIntersectionIndex, intersection, index) {
    if (nullIntersectionIndex === null) {
      if (intersection !== null) {
        nullIntersectionIndex = index;
      }
    }

    return nullIntersectionIndex;
  }, null);

  return nullIntersectionIndex;
}

function isMidPointToOneSideOfEdgesInXYPlane(midPoint, edgesInXYPlane) {
  var midPointToTheLeftOfEdgesInXYPlane = isMidPointToTheLeftOfEdgesInXYPlane(midPoint, edgesInXYPlane),
      midPointToTheRightOfEdgesInXYPlane = isMidPointToTheRightOfEdgesInXYPlane(midPoint, edgesInXYPlane),
      midPointToOneSideOfEdgesInXYPlane = midPointToTheLeftOfEdgesInXYPlane || midPointToTheRightOfEdgesInXYPlane; ///

  return midPointToOneSideOfEdgesInXYPlane;
}

function isMidPointToTheLeftOfEdgesInXYPlane(midPoint, edgesInXYPlane) {
  var midPointToTheLeftOfEdgesInXYPlane = edgesInXYPlane.reduce(function (midPointToTheLeftOfEdgesInXYPlane, edgeInXYPlane) {
    if (midPointToTheLeftOfEdgesInXYPlane) {
      var midPointToTheLeftOfEdgeInXYPlane = edgeInXYPlane.isMidPointToTheLeft(midPoint);

      midPointToTheLeftOfEdgesInXYPlane = midPointToTheLeftOfEdgeInXYPlane;
    }

    return midPointToTheLeftOfEdgesInXYPlane;
  }, true);

  return midPointToTheLeftOfEdgesInXYPlane;
}

function isMidPointToTheRightOfEdgesInXYPlane(midPoint, edgesInXYPlane) {
  var midPointToTheRightOfEdgesInXYPlane = edgesInXYPlane.reduce(function (midPointToTheRightOfEdgesInXYPlane, edgeInXYPlane) {
    if (midPointToTheRightOfEdgesInXYPlane) {
      var midPointToTheRightOfEdgeInXYPlane = edgeInXYPlane.isMidPointToTheRight(midPoint);

      midPointToTheRightOfEdgesInXYPlane = midPointToTheRightOfEdgeInXYPlane;
    }

    return midPointToTheRightOfEdgesInXYPlane;
  }, true);

  return midPointToTheRightOfEdgesInXYPlane;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9mYWNldC5qcyJdLCJuYW1lcyI6WyJFZGdlIiwicmVxdWlyZSIsImNvbnN0YW50cyIsInZlY3Rvck1hdGhzIiwiZmFjZXRVdGlsaXRpZXMiLCJhcnJheVV0aWxpdGllcyIsInJvdGF0aW9uVXRpbGl0aWVzIiwiYXBwcm94aW1hdGVVdGlsaXRpZXMiLCJWRVJUSUNFU19MRU5HVEgiLCJhZGQzIiwic3VidHJhY3QzIiwic2NhbGUzIiwibm9ybWFsaXNlMyIsImZpcnN0Iiwic2Vjb25kIiwidGhpcmQiLCJwZXJtdXRlIiwiaXNBcHByb3hpbWF0ZWx5RXF1YWxUb1plcm8iLCJyb3RhdGVWZXJ0aWNlcyIsInJvdGF0ZVZlcnRleEFib3V0WkF4aXMiLCJjYWxjdWxhdGVFZGdlcyIsImNhbGN1bGF0ZU5vcm1hbCIsImNhbGN1bGF0ZUFyZWEiLCJGYWNldCIsInZlcnRpY2VzIiwibm9ybWFsIiwiZWRnZXMiLCJtaWRQb2ludCIsInJlZHVjZSIsInZlcnRleCIsInNjYWxlZFZlcnRleCIsInZlcnRleFBvc2l0aW9ucyIsIm1hcCIsInZlcnRleFBvc2l0aW9uIiwic2xpY2UiLCJ2ZXJ0ZXhOb3JtYWwiLCJ2ZXJ0ZXhOb3JtYWxzIiwiaW5kZXgiLCJ2ZXJ0ZXhJbmRleCIsInZlcnRleEluZGV4ZXMiLCJhcmVhIiwiYXJlYUFwcHJveGltYXRlbHlFcXVhbFRvWmVybyIsInRvb1NtYWxsIiwibWFza2luZ0ZhY2V0IiwiZWRnZXNJblhZUGxhbmUiLCJnZXRFZGdlc0luWFlQbGFuZSIsImdldE1pZFBvaW50IiwibWlkUG9pbnRUb09uZVNpZGVPZkVkZ2VzSW5YWVBsYW5lIiwiaXNNaWRQb2ludFRvT25lU2lkZU9mRWRnZXNJblhZUGxhbmUiLCJtYXNrZWQiLCJ0cmFuc2Zvcm1zIiwiZm9yRWFjaCIsInRyYW5zZm9ybSIsInJvdGF0aW9uUXVhdGVybmlvbiIsInJvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCIsImludGVyc2VjdGlvbnMiLCJzbWFsbGVyRmFjZXRzIiwibm9uTnVsbEludGVyc2VjdGlvbnMiLCJjYWxjdWxhdGVOb25OdWxsSW50ZXJzZWN0aW9ucyIsIm5vbk51bGxJbnRlcnNlY3Rpb25zTGVuZ3RoIiwibGVuZ3RoIiwic3BsaXRXaXRoVHdvTm9uTnVsbEludGVyc2VjdGlvbnMiLCJzcGxpdFdpdGhPbmVOb25OdWxsSW50ZXJzZWN0aW9uIiwic3BsaXRXaXRoWmVyb05vbk51bGxJbnRlcnNlY3Rpb25zIiwicGxhY2VzIiwiZmFjZXQiLCJudWxsSW50ZXJzZWN0aW9uSW5kZXgiLCJjYWxjdWxhdGVOdWxsSW50ZXJzZWN0aW9uSW5kZXgiLCJmaXJzdFZlcnRleCIsInNlY29uZFZlcnRleCIsInRoaXJkVmVydGV4IiwiZmlyc3RJbnRlcnNlY3Rpb24iLCJzZWNvbmRJbnRlcnNlY3Rpb24iLCJmaXJzdEludGVybWVkaWF0ZVZlcnRleCIsImNhbGN1bGF0ZUludGVybWVkaWF0ZVZlcnRleCIsInNlY29uZEludGVybWVkaWF0ZVZlcnRleCIsImZpcnN0VmVydGljZXMiLCJzZWNvbmRWZXJ0aWNlcyIsInRoaXJkVmVydGljZXMiLCJmaXJzdEZhY2V0IiwiZnJvbVZlcnRpY2VzIiwic2Vjb25kRmFjZXQiLCJ0aGlyZEZhY2V0IiwiZmlyc3RGYWNldFRvb1NtYWxsIiwiaXNUb29TbWFsbCIsInNlY29uZEZhY2V0VG9vU21hbGwiLCJ0aGlyZEZhY2V0VG9vU21hbGwiLCJwdXNoIiwibm9uTnVsbEludGVyc2VjdGlvbkluZGV4IiwiY2FsY3VsYXRlTm9uTnVsbEludGVyc2VjdGlvbkluZGV4IiwiaW50ZXJtZWRpYXRlVmVydGV4IiwicGFyZW50VmVydGljZXMiLCJzbWFsbGVyRmFjZXQiLCJ2ZXJ0aWNhbExpbmVJblhZUGxhbmUiLCJnZXRFZGdlcyIsImVkZ2UiLCJpbnRlcnNlY3Rpb24iLCJjYWxjdWxhdGVJbnRlcnNlY3Rpb25XaXRoVmVydGljYWxMaW5lSW5YWVBsYW5lIiwibW9kdWxlIiwiZXhwb3J0cyIsInN0YXJ0VmVydGV4IiwiZW5kVmVydGV4IiwiZGlyZWN0aW9uIiwib2Zmc2V0Iiwibm9uTnVsbEludGVyc2VjdGlvbiIsIm1pZFBvaW50VG9UaGVMZWZ0T2ZFZGdlc0luWFlQbGFuZSIsImlzTWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VzSW5YWVBsYW5lIiwibWlkUG9pbnRUb1RoZVJpZ2h0T2ZFZGdlc0luWFlQbGFuZSIsImlzTWlkUG9pbnRUb1RoZVJpZ2h0T2ZFZGdlc0luWFlQbGFuZSIsImVkZ2VJblhZUGxhbmUiLCJtaWRQb2ludFRvVGhlTGVmdE9mRWRnZUluWFlQbGFuZSIsImlzTWlkUG9pbnRUb1RoZUxlZnQiLCJtaWRQb2ludFRvVGhlUmlnaHRPZkVkZ2VJblhZUGxhbmUiLCJpc01pZFBvaW50VG9UaGVSaWdodCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLE9BQU9DLFFBQVEsUUFBUixDQUFiO0FBQUEsSUFDTUMsWUFBWUQsUUFBUSxhQUFSLENBRGxCO0FBQUEsSUFFTUUsY0FBY0YsUUFBUSxnQkFBUixDQUZwQjtBQUFBLElBR01HLGlCQUFpQkgsUUFBUSxtQkFBUixDQUh2QjtBQUFBLElBSU1JLGlCQUFpQkosUUFBUSxtQkFBUixDQUp2QjtBQUFBLElBS01LLG9CQUFvQkwsUUFBUSxzQkFBUixDQUwxQjtBQUFBLElBTU1NLHVCQUF1Qk4sUUFBUSx5QkFBUixDQU43Qjs7QUFRTSxJQUFFTyxlQUFGLEdBQXNCTixTQUF0QixDQUFFTSxlQUFGO0FBQUEsSUFDRUMsSUFERixHQUMwQ04sV0FEMUMsQ0FDRU0sSUFERjtBQUFBLElBQ1FDLFNBRFIsR0FDMENQLFdBRDFDLENBQ1FPLFNBRFI7QUFBQSxJQUNtQkMsTUFEbkIsR0FDMENSLFdBRDFDLENBQ21CUSxNQURuQjtBQUFBLElBQzJCQyxVQUQzQixHQUMwQ1QsV0FEMUMsQ0FDMkJTLFVBRDNCO0FBQUEsSUFFRUMsS0FGRixHQUVvQ1IsY0FGcEMsQ0FFRVEsS0FGRjtBQUFBLElBRVNDLE1BRlQsR0FFb0NULGNBRnBDLENBRVNTLE1BRlQ7QUFBQSxJQUVpQkMsS0FGakIsR0FFb0NWLGNB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OztBQUVBZ0YsMkNBQXFDSyxpQ0FBckM7QUFDRDs7QUFFRCxXQUFPTCxrQ0FBUDtBQUNELEdBUjBDLEVBUXhDLElBUndDLENBQTNDOztBQVVBLFNBQU9BLGtDQUFQO0FBQ0QiLCJmaWxlIjoiZmFjZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEVkZ2UgPSByZXF1aXJlKCcuL2VkZ2UnKSxcbiAgICAgIGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyksXG4gICAgICB2ZWN0b3JNYXRocyA9IHJlcXVpcmUoJy4vbWF0aHMvdmVjdG9yJyksXG4gICAgICBmYWNldFV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL2ZhY2V0JyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICByb3RhdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL3JvdGF0aW9uJyksXG4gICAgICBhcHByb3hpbWF0ZVV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL2FwcHJveGltYXRlJyk7XG5cbmNvbnN0IHsgVkVSVElDRVNfTEVOR1RIIH0gPSBjb25zdGFudHMsXG4gICAgICB7IGFkZDMsIHN1YnRyYWN0Mywgc2NhbGUzLCBub3JtYWxpc2UzIH0gPSB2ZWN0b3JNYXRocyxcbiAgICAgIHsgZmlyc3QsIHNlY29uZCwgdGhpcmQsIHBlcm11dGUgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBpc0FwcHJveGltYXRlbHlFcXVhbFRvWmVybyB9ID0gYXBwcm94aW1hdGVVdGlsaXRpZXMsXG4gICAgICB7IHJvdGF0ZVZlcnRpY2VzLCByb3RhdGVWZXJ0ZXhBYm91dFpBeGlzIH0gPSByb3RhdGlvblV0aWxpdGllcyxcbiAgICAgIHsgY2FsY3VsYXRlRWRnZXMsIGNhbGN1bGF0ZU5vcm1hbCwgY2FsY3VsYXRlQXJlYSB9ID0gZmFjZXRVdGlsaXRpZXM7XG5cbmNsYXNzIEZhY2V0IHtcbiAgY29uc3RydWN0b3IodmVydGljZXMsIG5vcm1hbCwgZWRnZXMpIHtcbiAgICB0aGlzLnZlcnRpY2VzID0gdmVydGljZXM7XG4gICAgdGhpcy5ub3JtYWwgPSBub3JtYWw7XG4gICAgdGhpcy5lZGdlcyA9IGVkZ2VzO1xuICB9XG5cbiAgZ2V0VmVydGljZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMudmVydGljZXM7XG4gIH1cblxuICBnZXROb3JtYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9ybWFsO1xuICB9XG5cbiAgZ2V0RWRnZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRnZXM7XG4gIH1cbiAgXG4gIGdldE1pZFBvaW50KCkge1xuICAgIGNvbnN0IG1pZFBvaW50ID0gdGhpcy52ZXJ0aWNlcy5yZWR1Y2UoZnVuY3Rpb24obWlkUG9pbnQsIHZlcnRleCkge1xuICAgICAgY29uc3Qgc2NhbGVkVmVydGV4ID0gc2NhbGUzKHZlcnRleCwgMS8zKTtcbiAgICAgIFxuICAgICAgbWlkUG9pbnQgPSBhZGQzKG1pZFBvaW50LCBzY2FsZWRWZXJ0ZXgpO1xuICAgICAgXG4gICAgICByZXR1cm4gbWlkUG9pbnQ7XG4gICAgfSwgWyAwLCAwLCAwIF0pO1xuICAgIFxuICAgIHJldHVybiBtaWRQb2ludDtcbiAgfVxuICBcbiAgZ2V0VmVydGV4UG9zaXRpb25zKCkge1xuICAgIGNvbnN0IHZlcnRleFBvc2l0aW9ucyA9IHRoaXMudmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgY29uc3QgdmVydGV4UG9zaXRpb24gPSB2ZXJ0ZXguc2xpY2UoKTsgLy8vXG4gICAgICBcbiAgICAgIHJldHVybiB2ZXJ0ZXhQb3NpdGlvbjtcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gdmVydGV4UG9zaXRpb25zO1xuICB9XG4gIFxuICBnZXRWZXJ0ZXhOb3JtYWxzKCkge1xuICAgIGNvbnN0IHZlcnRleE5vcm1hbCA9IG5vcm1hbGlzZTModGhpcy5ub3JtYWwpLFxuICAgICAgICAgIHZlcnRleE5vcm1hbHMgPSBbXG4gICAgICAgICAgICB2ZXJ0ZXhOb3JtYWwsXG4gICAgICAgICAgICB2ZXJ0ZXhOb3JtYWwsXG4gICAgICAgICAgICB2ZXJ0ZXhOb3JtYWwsXG4gICAgICAgICAgXTtcbiAgICBcbiAgICByZXR1cm4gdmVydGV4Tm9ybWFscztcbiAgfVxuICBcbiAgZ2V0VmVydGV4SW5kZXhlcyhpbmRleCkgeyAvLy9cbiAgICBjb25zdCB2ZXJ0ZXhJbmRleCA9IGluZGV4ICogMyxcbiAgICAgICAgICB2ZXJ0ZXhJbmRleGVzID0gW1xuICAgICAgICAgICAgdmVydGV4SW5kZXggKyAwLFxuICAgICAgICAgICAgdmVydGV4SW5kZXggKyAxLFxuICAgICAgICAgICAgdmVydGV4SW5kZXggKyAyLFxuICAgICAgICAgIF07XG4gICAgXG4gICAgcmV0dXJuIHZlcnRleEluZGV4ZXM7XG4gIH1cbiAgXG4gIGlzVG9vU21hbGwoKSB7XG4gICAgY29uc3QgYXJlYSA9IGNhbGN1bGF0ZUFyZWEodGhpcy52ZXJ0aWNlcyksXG4gICAgICAgICAgYXJlYUFwcHJveGltYXRlbHlFcXVhbFRvWmVybyA9IGlzQXBwcm94aW1hdGVseUVxdWFsVG9aZXJvKGFyZWEpLFxuICAgICAgICAgIHRvb1NtYWxsID0gYXJlYUFwcHJveGltYXRlbHlFcXVhbFRvWmVybzsgIC8vL1xuICAgIFxuICAgIHJldHVybiB0b29TbWFsbDtcbiAgfVxuICBcbiAgaXNNYXNrZWQobWFza2luZ0ZhY2V0KSB7XG4gICAgY29uc3QgZWRnZXNJblhZUGxhbmUgPSBtYXNraW5nRmFjZXQuZ2V0RWRnZXNJblhZUGxhbmUoKSxcbiAgICAgICAgICBtaWRQb2ludCA9IHRoaXMuZ2V0TWlkUG9pbnQoKSxcbiAgICAgICAgICBtaWRQb2ludFRvT25lU2lkZU9mRWRnZXNJblhZUGxhbmUgPSBpc01pZFBvaW50VG9PbmVTaWRlT2ZFZGdlc0luWFlQbGFuZShtaWRQb2ludCwgZWRnZXNJblhZUGxhbmUpLFxuICAgICAgICAgIG1hc2tlZCA9IG1pZFBvaW50VG9PbmVTaWRlT2ZFZGdlc0luWFlQbGFuZTsgIC8vL1xuICAgIFxuICAgIHJldHVybiBtYXNrZWQ7XG4gIH1cbiAgXG4gIGFwcGx5VHJhbnNmb3Jtcyh0cmFuc2Zvcm1zKSB7XG4gICAgdGhpcy52ZXJ0aWNlcyA9IHRoaXMudmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgdHJhbnNmb3Jtcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zZm9ybSkge1xuICAgICAgICB2ZXJ0ZXggPSB0cmFuc2Zvcm0odmVydGV4KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdmVydGV4O1xuICAgIH0pO1xuXG4gICAgdGhpcy5ub3JtYWwgPSBjYWxjdWxhdGVOb3JtYWwodGhpcy52ZXJ0aWNlcyk7XG5cbiAgICB0aGlzLmVkZ2VzID0gY2FsY3VsYXRlRWRnZXModGhpcy52ZXJ0aWNlcywgRWRnZSk7XG4gIH1cbiAgXG4gIHJvdGF0ZShyb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgICB0aGlzLnZlcnRpY2VzID0gcm90YXRlVmVydGljZXModGhpcy52ZXJ0aWNlcywgcm90YXRpb25RdWF0ZXJuaW9uKTtcbiAgICBcbiAgICB0aGlzLm5vcm1hbCA9IGNhbGN1bGF0ZU5vcm1hbCh0aGlzLnZlcnRpY2VzKTtcblxuICAgIHRoaXMuZWRnZXMgPSBjYWxjdWxhdGVFZGdlcyh0aGlzLnZlcnRpY2VzLCBFZGdlKTtcbiAgfVxuXG4gIHJvdGF0ZUFib3V0WkF4aXMocm90YXRpb25BYm91dFpBeGlzTWF0cml4KSB7XG4gICAgdGhpcy52ZXJ0aWNlcyA9IHRoaXMudmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgdmVydGV4ID0gcm90YXRlVmVydGV4QWJvdXRaQXhpcyh2ZXJ0ZXgsIHJvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCk7XG5cbiAgICAgIHJldHVybiB2ZXJ0ZXg7XG4gICAgfSk7XG5cbiAgICB0aGlzLm5vcm1hbCA9IGNhbGN1bGF0ZU5vcm1hbCh0aGlzLnZlcnRpY2VzKTtcblxuICAgIHRoaXMuZWRnZXMgPSBjYWxjdWxhdGVFZGdlcyh0aGlzLnZlcnRpY2VzLCBFZGdlKTtcbiAgfVxuICBcbiAgc3BsaXQoaW50ZXJzZWN0aW9ucywgc21hbGxlckZhY2V0cykge1xuICAgIGNvbnN0IG5vbk51bGxJbnRlcnNlY3Rpb25zID0gY2FsY3VsYXRlTm9uTnVsbEludGVyc2VjdGlvbnMoaW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgbm9uTnVsbEludGVyc2VjdGlvbnNMZW5ndGggPSBub25OdWxsSW50ZXJzZWN0aW9ucy5sZW5ndGg7XG5cbiAgICBzd2l0Y2ggKG5vbk51bGxJbnRlcnNlY3Rpb25zTGVuZ3RoKSB7XG4gICAgICBjYXNlIDIgOlxuICAgICAgICB0aGlzLnNwbGl0V2l0aFR3b05vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAxIDpcbiAgICAgICAgdGhpcy5zcGxpdFdpdGhPbmVOb25OdWxsSW50ZXJzZWN0aW9uKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAwIDpcbiAgICAgICAgdGhpcy5zcGxpdFdpdGhaZXJvTm9uTnVsbEludGVyc2VjdGlvbnMoaW50ZXJzZWN0aW9ucywgc21hbGxlckZhY2V0cyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBcbiAgcGVybXV0ZShwbGFjZXMpIHtcbiAgICB0aGlzLnZlcnRpY2VzID0gcGVybXV0ZSh0aGlzLnZlcnRpY2VzLCBwbGFjZXMpO1xuICB9XG5cbiAgc3BsaXRXaXRoVHdvTm9uTnVsbEludGVyc2VjdGlvbnMoaW50ZXJzZWN0aW9ucywgc21hbGxlckZhY2V0cywgZmFjZXQpIHtcbiAgICBjb25zdCBudWxsSW50ZXJzZWN0aW9uSW5kZXggPSBjYWxjdWxhdGVOdWxsSW50ZXJzZWN0aW9uSW5kZXgoaW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgcGxhY2VzID0gKFZFUlRJQ0VTX0xFTkdUSCAtIG51bGxJbnRlcnNlY3Rpb25JbmRleCkgJSBWRVJUSUNFU19MRU5HVEg7XG5cbiAgICBpbnRlcnNlY3Rpb25zID0gcGVybXV0ZShpbnRlcnNlY3Rpb25zLCBwbGFjZXMpO1xuXG4gICAgaW50ZXJzZWN0aW9ucyA9IGludGVyc2VjdGlvbnMuc2xpY2UoMSk7IC8vL1xuICAgIFxuICAgIHRoaXMucGVybXV0ZShwbGFjZXMpO1xuXG4gICAgY29uc3QgZmlyc3RWZXJ0ZXggPSBmaXJzdCh0aGlzLnZlcnRpY2VzKSxcbiAgICAgICAgICBzZWNvbmRWZXJ0ZXggPSBzZWNvbmQodGhpcy52ZXJ0aWNlcyksXG4gICAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh0aGlzLnZlcnRpY2VzKSxcbiAgICAgICAgICBmaXJzdEludGVyc2VjdGlvbiA9IGZpcnN0KGludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIHNlY29uZEludGVyc2VjdGlvbiA9IHNlY29uZChpbnRlcnNlY3Rpb25zKSxcbiAgICAgICAgICBmaXJzdEludGVybWVkaWF0ZVZlcnRleCA9IGNhbGN1bGF0ZUludGVybWVkaWF0ZVZlcnRleChzZWNvbmRWZXJ0ZXgsIHRoaXJkVmVydGV4LCBmaXJzdEludGVyc2VjdGlvbiksXG4gICAgICAgICAgc2Vjb25kSW50ZXJtZWRpYXRlVmVydGV4ID0gY2FsY3VsYXRlSW50ZXJtZWRpYXRlVmVydGV4KHRoaXJkVmVydGV4LCBmaXJzdFZlcnRleCwgc2Vjb25kSW50ZXJzZWN0aW9uKSxcbiAgICAgICAgICBmaXJzdFZlcnRpY2VzID0gW1xuICAgICAgICAgICAgZmlyc3RWZXJ0ZXgsXG4gICAgICAgICAgICBzZWNvbmRWZXJ0ZXgsXG4gICAgICAgICAgICBmaXJzdEludGVybWVkaWF0ZVZlcnRleFxuICAgICAgICAgIF0sXG4gICAgICAgICAgc2Vjb25kVmVydGljZXMgPSBbXG4gICAgICAgICAgICBmaXJzdEludGVybWVkaWF0ZVZlcnRleCxcbiAgICAgICAgICAgIHNlY29uZEludGVybWVkaWF0ZVZlcnRleCxcbiAgICAgICAgICAgIGZpcnN0VmVydGV4XG4gICAgICAgICAgXSxcbiAgICAgICAgICB0aGlyZFZlcnRpY2VzID0gW1xuICAgICAgICAgICAgZmlyc3RJbnRlcm1lZGlhdGVWZXJ0ZXgsXG4gICAgICAgICAgICB0aGlyZFZlcnRleCxcbiAgICAgICAgICAgIHNlY29uZEludGVybWVkaWF0ZVZlcnRleFxuICAgICAgICAgIF0sXG4gICAgICAgICAgZmlyc3RGYWNldCA9IGZhY2V0LmZyb21WZXJ0aWNlcyhmaXJzdFZlcnRpY2VzKSxcbiAgICAgICAgICBzZWNvbmRGYWNldCA9IGZhY2V0LmZyb21WZXJ0aWNlcyhzZWNvbmRWZXJ0aWNlcyksXG4gICAgICAgICAgdGhpcmRGYWNldCA9IGZhY2V0LmZyb21WZXJ0aWNlcyh0aGlyZFZlcnRpY2VzKSxcbiAgICAgICAgICBmaXJzdEZhY2V0VG9vU21hbGwgPSBmaXJzdEZhY2V0LmlzVG9vU21hbGwoKSxcbiAgICAgICAgICBzZWNvbmRGYWNldFRvb1NtYWxsID0gc2Vjb25kRmFjZXQuaXNUb29TbWFsbCgpLFxuICAgICAgICAgIHRoaXJkRmFjZXRUb29TbWFsbCA9IHRoaXJkRmFjZXQuaXNUb29TbWFsbCgpO1xuXG4gICAgaWYgKCFmaXJzdEZhY2V0VG9vU21hbGwpIHtcbiAgICAgIHNtYWxsZXJGYWNldHMucHVzaChmaXJzdEZhY2V0KTtcbiAgICB9XG5cbiAgICBpZiAoIXNlY29uZEZhY2V0VG9vU21hbGwpIHtcbiAgICAgIHNtYWxsZXJGYWNldHMucHVzaChzZWNvbmRGYWNldCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlyZEZhY2V0VG9vU21hbGwpIHtcbiAgICAgIHNtYWxsZXJGYWNldHMucHVzaCh0aGlyZEZhY2V0KTtcbiAgICB9XG4gIH1cblxuICBzcGxpdFdpdGhPbmVOb25OdWxsSW50ZXJzZWN0aW9uKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMsIGZhY2V0KSB7XG4gICAgY29uc3Qgbm9uTnVsbEludGVyc2VjdGlvbkluZGV4ID0gY2FsY3VsYXRlTm9uTnVsbEludGVyc2VjdGlvbkluZGV4KGludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIHBsYWNlcyA9IChWRVJUSUNFU19MRU5HVEggLSBub25OdWxsSW50ZXJzZWN0aW9uSW5kZXgpICUgVkVSVElDRVNfTEVOR1RIO1xuXG4gICAgaW50ZXJzZWN0aW9ucyA9IHBlcm11dGUoaW50ZXJzZWN0aW9ucywgcGxhY2VzKTtcblxuICAgIHRoaXMucGVybXV0ZShwbGFjZXMpO1xuXG4gICAgY29uc3QgZmlyc3RWZXJ0ZXggPSBmaXJzdCh0aGlzLnZlcnRpY2VzKSxcbiAgICAgICAgICBzZWNvbmRWZXJ0ZXggPSBzZWNvbmQodGhpcy52ZXJ0aWNlcyksXG4gICAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh0aGlzLnZlcnRpY2VzKSxcbiAgICAgICAgICBmaXJzdEludGVyc2VjdGlvbiA9IGZpcnN0KGludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIGludGVybWVkaWF0ZVZlcnRleCA9IGNhbGN1bGF0ZUludGVybWVkaWF0ZVZlcnRleChmaXJzdFZlcnRleCwgc2Vjb25kVmVydGV4LCBmaXJzdEludGVyc2VjdGlvbiksXG4gICAgICAgICAgZmlyc3RWZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgIGZpcnN0VmVydGV4LFxuICAgICAgICAgICAgaW50ZXJtZWRpYXRlVmVydGV4LFxuICAgICAgICAgICAgdGhpcmRWZXJ0ZXhcbiAgICAgICAgICBdLFxuICAgICAgICAgIHNlY29uZFZlcnRpY2VzID0gW1xuICAgICAgICAgICAgaW50ZXJtZWRpYXRlVmVydGV4LFxuICAgICAgICAgICAgc2Vjb25kVmVydGV4LFxuICAgICAgICAgICAgdGhpcmRWZXJ0ZXhcbiAgICAgICAgICBdLFxuICAgICAgICAgIHBhcmVudFZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcyxcbiAgICAgICAgICBmaXJzdEZhY2V0ID0gZmFjZXQuZnJvbVZlcnRpY2VzKGZpcnN0VmVydGljZXMpLFxuICAgICAgICAgIHNlY29uZEZhY2V0ID0gZmFjZXQuZnJvbVZlcnRpY2VzKHNlY29uZFZlcnRpY2VzKSxcbiAgICAgICAgICBmaXJzdEZhY2V0VG9vU21hbGwgPSBmaXJzdEZhY2V0LmlzVG9vU21hbGwoKSxcbiAgICAgICAgICBzZWNvbmRGYWNldFRvb1NtYWxsID0gc2Vjb25kRmFjZXQuaXNUb29TbWFsbCgpO1xuXG4gICAgaWYgKCFmaXJzdEZhY2V0VG9vU21hbGwpIHtcbiAgICAgIHNtYWxsZXJGYWNldHMucHVzaChmaXJzdEZhY2V0KTtcbiAgICB9XG5cbiAgICBpZiAoIXNlY29uZEZhY2V0VG9vU21hbGwpIHtcbiAgICAgIHNtYWxsZXJGYWNldHMucHVzaChzZWNvbmRGYWNldCk7XG4gICAgfVxuICB9XG5cbiAgc3BsaXRXaXRoWmVyb05vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpIHtcbiAgICBjb25zdCBzbWFsbGVyRmFjZXQgPSB0aGlzOyAgLy8vXG5cbiAgICBzbWFsbGVyRmFjZXRzLnB1c2goc21hbGxlckZhY2V0KTtcbiAgfVxuXG4gIGNhbGN1bGF0ZUludGVyc2VjdGlvbnNXaXRoVmVydGljYWxMaW5lSW5YWVBsYW5lKHZlcnRpY2FsTGluZUluWFlQbGFuZSkge1xuICAgIGNvbnN0IGVkZ2VzID0gdGhpcy5nZXRFZGdlcygpLFxuICAgICAgICAgIGludGVyc2VjdGlvbnMgPSBlZGdlcy5tYXAoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uID0gZWRnZS5jYWxjdWxhdGVJbnRlcnNlY3Rpb25XaXRoVmVydGljYWxMaW5lSW5YWVBsYW5lKHZlcnRpY2FsTGluZUluWFlQbGFuZSk7XG4gIFxuICAgICAgICAgICAgcmV0dXJuIGludGVyc2VjdGlvbjtcbiAgICAgICAgICB9KTtcblxuICAgIHJldHVybiBpbnRlcnNlY3Rpb25zO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRmFjZXQ7XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUludGVybWVkaWF0ZVZlcnRleChzdGFydFZlcnRleCwgZW5kVmVydGV4LCBpbnRlcnNlY3Rpb24pIHtcbiAgY29uc3QgZGlyZWN0aW9uID0gc3VidHJhY3QzKGVuZFZlcnRleCwgc3RhcnRWZXJ0ZXgpLFxuICAgICAgICBvZmZzZXQgPSBzY2FsZTMoZGlyZWN0aW9uLCBpbnRlcnNlY3Rpb24pLFxuICAgICAgICBpbnRlcm1lZGlhdGVWZXJ0ZXggPSBhZGQzKHN0YXJ0VmVydGV4LCBvZmZzZXQpO1xuXG4gIHJldHVybiBpbnRlcm1lZGlhdGVWZXJ0ZXg7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMpIHtcbiAgY29uc3Qgbm9uTnVsbEludGVyc2VjdGlvbnMgPSBpbnRlcnNlY3Rpb25zLnJlZHVjZShmdW5jdGlvbihub25OdWxsSW50ZXJzZWN0aW9ucywgaW50ZXJzZWN0aW9uKSB7XG4gICAgaWYgKGludGVyc2VjdGlvbiAhPT0gbnVsbCkge1xuICAgICAgY29uc3Qgbm9uTnVsbEludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjsgLy8vXG5cbiAgICAgIG5vbk51bGxJbnRlcnNlY3Rpb25zLnB1c2gobm9uTnVsbEludGVyc2VjdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vbk51bGxJbnRlcnNlY3Rpb25zO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIG5vbk51bGxJbnRlcnNlY3Rpb25zO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVOdWxsSW50ZXJzZWN0aW9uSW5kZXgoaW50ZXJzZWN0aW9ucykge1xuICBjb25zdCBudWxsSW50ZXJzZWN0aW9uSW5kZXggPSBpbnRlcnNlY3Rpb25zLnJlZHVjZShmdW5jdGlvbihudWxsSW50ZXJzZWN0aW9uSW5kZXgsIGludGVyc2VjdGlvbiwgaW5kZXgpIHtcbiAgICBpZiAobnVsbEludGVyc2VjdGlvbkluZGV4ID09PSBudWxsKSB7XG4gICAgICBpZiAoaW50ZXJzZWN0aW9uID09PSBudWxsKSB7XG4gICAgICAgIG51bGxJbnRlcnNlY3Rpb25JbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsSW50ZXJzZWN0aW9uSW5kZXg7XG4gIH0sIG51bGwpO1xuXG4gIHJldHVybiBudWxsSW50ZXJzZWN0aW9uSW5kZXg7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25JbmRleChpbnRlcnNlY3Rpb25zKSB7XG4gIGNvbnN0IG51bGxJbnRlcnNlY3Rpb25JbmRleCA9IGludGVyc2VjdGlvbnMucmVkdWNlKGZ1bmN0aW9uKG51bGxJbnRlcnNlY3Rpb25JbmRleCwgaW50ZXJzZWN0aW9uLCBpbmRleCkge1xuICAgIGlmIChudWxsSW50ZXJzZWN0aW9uSW5kZXggPT09IG51bGwpIHtcbiAgICAgIGlmIChpbnRlcnNlY3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgbnVsbEludGVyc2VjdGlvbkluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxJbnRlcnNlY3Rpb25JbmRleDtcbiAgfSwgbnVsbCk7XG5cbiAgcmV0dXJuIG51bGxJbnRlcnNlY3Rpb25JbmRleDtcbn1cblxuZnVuY3Rpb24gaXNNaWRQb2ludFRvT25lU2lkZU9mRWRnZXNJblhZUGxhbmUobWlkUG9pbnQsIGVkZ2VzSW5YWVBsYW5lKSB7XG4gIGNvbnN0IG1pZFBvaW50VG9UaGVMZWZ0T2ZFZGdlc0luWFlQbGFuZSA9IGlzTWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VzSW5YWVBsYW5lKG1pZFBvaW50LCBlZGdlc0luWFlQbGFuZSksXG4gICAgICAgIG1pZFBvaW50VG9UaGVSaWdodE9mRWRnZXNJblhZUGxhbmUgPSBpc01pZFBvaW50VG9UaGVSaWdodE9mRWRnZXNJblhZUGxhbmUobWlkUG9pbnQsIGVkZ2VzSW5YWVBsYW5lKSxcbiAgICAgICAgbWlkUG9pbnRUb09uZVNpZGVPZkVkZ2VzSW5YWVBsYW5lID0gbWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VzSW5YWVBsYW5lIHx8IG1pZFBvaW50VG9UaGVSaWdodE9mRWRnZXNJblhZUGxhbmU7IC8vL1xuXG4gIHJldHVybiBtaWRQb2ludFRvT25lU2lkZU9mRWRnZXNJblhZUGxhbmU7XG59XG5cbmZ1bmN0aW9uIGlzTWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VzSW5YWVBsYW5lKG1pZFBvaW50LCBlZGdlc0luWFlQbGFuZSkge1xuICBjb25zdCBtaWRQb2ludFRvVGhlTGVmdE9mRWRnZXNJblhZUGxhbmUgPSBlZGdlc0luWFlQbGFuZS5yZWR1Y2UoZnVuY3Rpb24obWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VzSW5YWVBsYW5lLCBlZGdlSW5YWVBsYW5lKSB7XG4gICAgaWYgKG1pZFBvaW50VG9UaGVMZWZ0T2ZFZGdlc0luWFlQbGFuZSkge1xuICAgICAgY29uc3QgbWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VJblhZUGxhbmUgPSBlZGdlSW5YWVBsYW5lLmlzTWlkUG9pbnRUb1RoZUxlZnQobWlkUG9pbnQpO1xuXG4gICAgICBtaWRQb2ludFRvVGhlTGVmdE9mRWRnZXNJblhZUGxhbmUgPSBtaWRQb2ludFRvVGhlTGVmdE9mRWRnZUluWFlQbGFuZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VzSW5YWVBsYW5lO1xuICB9LCB0cnVlKTtcblxuICByZXR1cm4gbWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VzSW5YWVBsYW5lO1xufVxuXG5mdW5jdGlvbiBpc01pZFBvaW50VG9UaGVSaWdodE9mRWRnZXNJblhZUGxhbmUobWlkUG9pbnQsIGVkZ2VzSW5YWVBsYW5lKSB7XG4gIGNvbnN0IG1pZFBvaW50VG9UaGVSaWdodE9mRWRnZXNJblhZUGxhbmUgPSBlZGdlc0luWFlQbGFuZS5yZWR1Y2UoZnVuY3Rpb24obWlkUG9pbnRUb1RoZVJpZ2h0T2ZFZGdlc0luWFlQbGFuZSwgZWRnZUluWFlQbGFuZSkge1xuICAgIGlmIChtaWRQb2ludFRvVGhlUmlnaHRPZkVkZ2VzSW5YWVBsYW5lKSB7XG4gICAgICBjb25zdCBtaWRQb2ludFRvVGhlUmlnaHRPZkVkZ2VJblhZUGxhbmUgPSBlZGdlSW5YWVBsYW5lLmlzTWlkUG9pbnRUb1RoZVJpZ2h0KG1pZFBvaW50KTtcblxuICAgICAgbWlkUG9pbnRUb1RoZVJpZ2h0T2ZFZGdlc0luWFlQbGFuZSA9IG1pZFBvaW50VG9UaGVSaWdodE9mRWRnZUluWFlQbGFuZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWlkUG9pbnRUb1RoZVJpZ2h0T2ZFZGdlc0luWFlQbGFuZTtcbiAgfSwgdHJ1ZSk7XG5cbiAgcmV0dXJuIG1pZFBvaW50VG9UaGVSaWdodE9mRWRnZXNJblhZUGxhbmU7XG59XG5cbiJdfQ==