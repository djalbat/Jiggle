'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Edge = require('./edge'),
    constants = require('./constants'),
    vectorMaths = require('./maths/vector'),
    facetUtilities = require('./utilities/facet'),
    arrayUtilities = require('./utilities/array'),
    rotationUtilities = require('./utilities/rotation'),
    approximateUtilities = require('./utilities/approximate');

var VERTICES_LENGTH = constants.VERTICES_LENGTH,
    add3 = vectorMaths.add3,
    subtract3 = vectorMaths.subtract3,
    scale3 = vectorMaths.scale3,
    normalise3 = vectorMaths.normalise3,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    _permute = arrayUtilities.permute,
    isApproximatelyEqualToZero = approximateUtilities.isApproximatelyEqualToZero,
    rotateVertices = rotationUtilities.rotateVertices,
    rotateVertexAboutZAxis = rotationUtilities.rotateVertexAboutZAxis,
    calculateEdges = facetUtilities.calculateEdges,
    calculateNormal = facetUtilities.calculateNormal,
    calculateArea = facetUtilities.calculateArea;

var Facet = function () {
  function Facet(vertices, normal, edges) {
    _classCallCheck(this, Facet);

    this.vertices = vertices;
    this.normal = normal;
    this.edges = edges;
  }

  _createClass(Facet, [{
    key: 'getVertices',
    value: function getVertices() {
      return this.vertices;
    }
  }, {
    key: 'getNormal',
    value: function getNormal() {
      return this.normal;
    }
  }, {
    key: 'getEdges',
    value: function getEdges() {
      return this.edges;
    }
  }, {
    key: 'getMidPoint',
    value: function getMidPoint() {
      var midPoint = this.vertices.reduce(function (midPoint, vertex) {
        var scaledVertex = scale3(vertex, 1 / 3);

        midPoint = add3(midPoint, scaledVertex);

        return midPoint;
      }, [0, 0, 0]);

      return midPoint;
    }
  }, {
    key: 'getVertexPositions',
    value: function getVertexPositions() {
      var vertexPositions = this.vertices.map(function (vertex) {
        var vertexPosition = vertex.slice(); ///

        return vertexPosition;
      });

      return vertexPositions;
    }
  }, {
    key: 'getVertexNormals',
    value: function getVertexNormals() {
      var vertexNormal = normalise3(this.normal),
          vertexNormals = [vertexNormal, vertexNormal, vertexNormal];

      return vertexNormals;
    }
  }, {
    key: 'getVertexIndexes',
    value: function getVertexIndexes(index) {
      ///
      var vertexIndex = index * 3,
          vertexIndexes = [vertexIndex + 0, vertexIndex + 1, vertexIndex + 2];

      return vertexIndexes;
    }
  }, {
    key: 'isTooSmall',
    value: function isTooSmall() {
      var area = calculateArea(this.vertices),
          areaApproximatelyEqualToZero = isApproximatelyEqualToZero(area),
          tooSmall = areaApproximatelyEqualToZero; ///

      return tooSmall;
    }
  }, {
    key: 'isMasked',
    value: function isMasked(maskingFacet) {
      var maskingEdges = maskingFacet.getMaskingEdges(),
          midPoint = this.getMidPoint(),
          midPointToOneSideOfMaskingEdges = isMidPointToOneSideOfMaskingEdges(midPoint, maskingEdges),
          masked = midPointToOneSideOfMaskingEdges; ///

      return masked;
    }
  }, {
    key: 'applyTransforms',
    value: function applyTransforms(transforms) {
      this.vertices = this.vertices.map(function (vertex) {
        transforms.forEach(function (transform) {
          vertex = transform(vertex);
        });

        return vertex;
      });

      this.normal = calculateNormal(this.vertices);

      this.edges = calculateEdges(this.vertices, Edge);
    }
  }, {
    key: 'rotate',
    value: function rotate(rotationQuaternion) {
      this.vertices = rotateVertices(this.vertices, rotationQuaternion);

      this.normal = calculateNormal(this.vertices);

      this.edges = calculateEdges(this.vertices, Edge);
    }
  }, {
    key: 'rotateAboutZAxis',
    value: function rotateAboutZAxis(rotationAboutZAxisMatrix) {
      this.vertices = this.vertices.map(function (vertex) {
        vertex = rotateVertexAboutZAxis(vertex, rotationAboutZAxisMatrix);

        return vertex;
      });

      this.normal = calculateNormal(this.vertices);

      this.edges = calculateEdges(this.vertices, Edge);
    }
  }, {
    key: 'split',
    value: function split(intersections, smallerFacets) {
      var nonNullIntersections = calculateNonNullIntersections(intersections),
          nonNullIntersectionsLength = nonNullIntersections.length;

      switch (nonNullIntersectionsLength) {
        case 2:
          this.splitWithTwoNonNullIntersections(intersections, smallerFacets);
          break;

        case 1:
          this.splitWithOneNonNullIntersection(intersections, smallerFacets);
          break;

        case 0:
          this.splitWithZeroNonNullIntersections(intersections, smallerFacets);
          break;
      }
    }
  }, {
    key: 'permute',
    value: function permute(places) {
      this.vertices = _permute(this.vertices, places);
    }
  }, {
    key: 'splitWithTwoNonNullIntersections',
    value: function splitWithTwoNonNullIntersections(intersections, smallerFacets, facet) {
      var nullIntersectionIndex = calculateNullIntersectionIndex(intersections),
          places = (VERTICES_LENGTH - nullIntersectionIndex) % VERTICES_LENGTH;

      intersections = _permute(intersections, places);

      intersections = intersections.slice(1); ///

      this.permute(places);

      var firstVertex = first(this.vertices),
          secondVertex = second(this.vertices),
          thirdVertex = third(this.vertices),
          firstIntersection = first(intersections),
          secondIntersection = second(intersections),
          firstIntermediateVertex = calculateIntermediateVertex(secondVertex, thirdVertex, firstIntersection),
          secondIntermediateVertex = calculateIntermediateVertex(thirdVertex, firstVertex, secondIntersection),
          firstVertices = [firstVertex, secondVertex, firstIntermediateVertex],
          secondVertices = [firstIntermediateVertex, secondIntermediateVertex, firstVertex],
          thirdVertices = [firstIntermediateVertex, thirdVertex, secondIntermediateVertex],
          firstFacet = facet.fromVertices(firstVertices),
          secondFacet = facet.fromVertices(secondVertices),
          thirdFacet = facet.fromVertices(thirdVertices),
          firstFacetTooSmall = firstFacet.isTooSmall(),
          secondFacetTooSmall = secondFacet.isTooSmall(),
          thirdFacetTooSmall = thirdFacet.isTooSmall();

      if (!firstFacetTooSmall) {
        smallerFacets.push(firstFacet);
      }

      if (!secondFacetTooSmall) {
        smallerFacets.push(secondFacet);
      }

      if (!thirdFacetTooSmall) {
        smallerFacets.push(thirdFacet);
      }
    }
  }, {
    key: 'splitWithOneNonNullIntersection',
    value: function splitWithOneNonNullIntersection(intersections, smallerFacets, facet) {
      var nonNullIntersectionIndex = calculateNonNullIntersectionIndex(intersections),
          places = (VERTICES_LENGTH - nonNullIntersectionIndex) % VERTICES_LENGTH;

      intersections = _permute(intersections, places);

      this.permute(places);

      var firstVertex = first(this.vertices),
          secondVertex = second(this.vertices),
          thirdVertex = third(this.vertices),
          firstIntersection = first(intersections),
          intermediateVertex = calculateIntermediateVertex(firstVertex, secondVertex, firstIntersection),
          firstVertices = [firstVertex, intermediateVertex, thirdVertex],
          secondVertices = [intermediateVertex, secondVertex, thirdVertex],
          firstFacet = facet.fromVertices(firstVertices),
          secondFacet = facet.fromVertices(secondVertices),
          firstFacetTooSmall = firstFacet.isTooSmall(),
          secondFacetTooSmall = secondFacet.isTooSmall();

      if (!firstFacetTooSmall) {
        smallerFacets.push(firstFacet);
      }

      if (!secondFacetTooSmall) {
        smallerFacets.push(secondFacet);
      }
    }
  }, {
    key: 'splitWithZeroNonNullIntersections',
    value: function splitWithZeroNonNullIntersections(intersections, smallerFacets) {
      var smallerFacet = this; ///

      smallerFacets.push(smallerFacet);
    }
  }, {
    key: 'calculateIntersectionsWithVerticalLine',
    value: function calculateIntersectionsWithVerticalLine(verticalLine) {
      var edges = this.getEdges(),
          intersections = edges.map(function (edge) {
        var intersection = edge.calculateIntersectionWithVerticalLine(verticalLine);

        return intersection;
      });

      return intersections;
    }
  }]);

  return Facet;
}();

module.exports = Facet;

function calculateIntermediateVertex(startVertex, endVertex, intersection) {
  var direction = subtract3(endVertex, startVertex),
      offset = scale3(direction, intersection),
      intermediateVertex = add3(startVertex, offset);

  return intermediateVertex;
}

function calculateNonNullIntersections(intersections) {
  var nonNullIntersections = intersections.reduce(function (nonNullIntersections, intersection) {
    if (intersection !== null) {
      var nonNullIntersection = intersection; ///

      nonNullIntersections.push(nonNullIntersection);
    }

    return nonNullIntersections;
  }, []);

  return nonNullIntersections;
}

function calculateNullIntersectionIndex(intersections) {
  var nullIntersectionIndex = intersections.reduce(function (nullIntersectionIndex, intersection, index) {
    if (nullIntersectionIndex === null) {
      if (intersection === null) {
        nullIntersectionIndex = index;
      }
    }

    return nullIntersectionIndex;
  }, null);

  return nullIntersectionIndex;
}

function calculateNonNullIntersectionIndex(intersections) {
  var nullIntersectionIndex = intersections.reduce(function (nullIntersectionIndex, intersection, index) {
    if (nullIntersectionIndex === null) {
      if (intersection !== null) {
        nullIntersectionIndex = index;
      }
    }

    return nullIntersectionIndex;
  }, null);

  return nullIntersectionIndex;
}

function isMidPointToOneSideOfMaskingEdges(midPoint, maskingEdges) {
  var midPointToTheLeftOfMaskingEdges = isMidPointToTheLeftOfMaskingEdges(midPoint, maskingEdges),
      midPointToTheRightOfMaskingEdges = isMidPointToTheRightOfMaskingEdges(midPoint, maskingEdges),
      midPointToOneSideOfMaskingEdges = midPointToTheLeftOfMaskingEdges || midPointToTheRightOfMaskingEdges; ///

  return midPointToOneSideOfMaskingEdges;
}

function isMidPointToTheLeftOfMaskingEdges(midPoint, maskingEdges) {
  var midPointToTheLeftOfMaskingEdges = maskingEdges.reduce(function (midPointToTheLeftOfMaskingEdges, maskingEdge) {
    if (midPointToTheLeftOfMaskingEdges) {
      var midPointToTheLeftOfMaskingEdge = maskingEdge.isMidPointToTheLeft(midPoint);

      midPointToTheLeftOfMaskingEdges = midPointToTheLeftOfMaskingEdge;
    }

    return midPointToTheLeftOfMaskingEdges;
  }, true);

  return midPointToTheLeftOfMaskingEdges;
}

function isMidPointToTheRightOfMaskingEdges(midPoint, maskingEdges) {
  var midPointToTheRightOfMaskingEdges = maskingEdges.reduce(function (midPointToTheRightOfMaskingEdges, maskingEdge) {
    if (midPointToTheRightOfMaskingEdges) {
      var midPointToTheRightOfMaskingEdge = maskingEdge.isMidPointToTheRight(midPoint);

      midPointToTheRightOfMaskingEdges = midPointToTheRightOfMaskingEdge;
    }

    return midPointToTheRightOfMaskingEdges;
  }, true);

  return midPointToTheRightOfMaskingEdges;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9mYWNldC5qcyJdLCJuYW1lcyI6WyJFZGdlIiwicmVxdWlyZSIsImNvbnN0YW50cyIsInZlY3Rvck1hdGhzIiwiZmFjZXRVdGlsaXRpZXMiLCJhcnJheVV0aWxpdGllcyIsInJvdGF0aW9uVXRpbGl0aWVzIiwiYXBwcm94aW1hdGVVdGlsaXRpZXMiLCJWRVJUSUNFU19MRU5HVEgiLCJhZGQzIiwic3VidHJhY3QzIiwic2NhbGUzIiwibm9ybWFsaXNlMyIsImZpcnN0Iiwic2Vjb25kIiwidGhpcmQiLCJwZXJtdXRlIiwiaXNBcHByb3hpbWF0ZWx5RXF1YWxUb1plcm8iLCJyb3RhdGVWZXJ0aWNlcyIsInJvdGF0ZVZlcnRleEFib3V0WkF4aXMiLCJjYWxjdWxhdGVFZGdlcyIsImNhbGN1bGF0ZU5vcm1hbCIsImNhbGN1bGF0ZUFyZWEiLCJGYWNldCIsInZlcnRpY2VzIiwibm9ybWFsIiwiZWRnZXMiLCJtaWRQb2ludCIsInJlZHVjZSIsInZlcnRleCIsInNjYWxlZFZlcnRleCIsInZlcnRleFBvc2l0aW9ucyIsIm1hcCIsInZlcnRleFBvc2l0aW9uIiwic2xpY2UiLCJ2ZXJ0ZXhOb3JtYWwiLCJ2ZXJ0ZXhOb3JtYWxzIiwiaW5kZXgiLCJ2ZXJ0ZXhJbmRleCIsInZlcnRleEluZGV4ZXMiLCJhcmVhIiwiYXJlYUFwcHJveGltYXRlbHlFcXVhbFRvWmVybyIsInRvb1NtYWxsIiwibWFza2luZ0ZhY2V0IiwibWFza2luZ0VkZ2VzIiwiZ2V0TWFza2luZ0VkZ2VzIiwiZ2V0TWlkUG9pbnQiLCJtaWRQb2ludFRvT25lU2lkZU9mTWFza2luZ0VkZ2VzIiwiaXNNaWRQb2ludFRvT25lU2lkZU9mTWFza2luZ0VkZ2VzIiwibWFza2VkIiwidHJhbnNmb3JtcyIsImZvckVhY2giLCJ0cmFuc2Zvcm0iLCJyb3RhdGlvblF1YXRlcm5pb24iLCJyb3RhdGlvbkFib3V0WkF4aXNNYXRyaXgiLCJpbnRlcnNlY3Rpb25zIiwic21hbGxlckZhY2V0cyIsIm5vbk51bGxJbnRlcnNlY3Rpb25zIiwiY2FsY3VsYXRlTm9uTnVsbEludGVyc2VjdGlvbnMiLCJub25OdWxsSW50ZXJzZWN0aW9uc0xlbmd0aCIsImxlbmd0aCIsInNwbGl0V2l0aFR3b05vbk51bGxJbnRlcnNlY3Rpb25zIiwic3BsaXRXaXRoT25lTm9uTnVsbEludGVyc2VjdGlvbiIsInNwbGl0V2l0aFplcm9Ob25OdWxsSW50ZXJzZWN0aW9ucyIsInBsYWNlcyIsImZhY2V0IiwibnVsbEludGVyc2VjdGlvbkluZGV4IiwiY2FsY3VsYXRlTnVsbEludGVyc2VjdGlvbkluZGV4IiwiZmlyc3RWZXJ0ZXgiLCJzZWNvbmRWZXJ0ZXgiLCJ0aGlyZFZlcnRleCIsImZpcnN0SW50ZXJzZWN0aW9uIiwic2Vjb25kSW50ZXJzZWN0aW9uIiwiZmlyc3RJbnRlcm1lZGlhdGVWZXJ0ZXgiLCJjYWxjdWxhdGVJbnRlcm1lZGlhdGVWZXJ0ZXgiLCJzZWNvbmRJbnRlcm1lZGlhdGVWZXJ0ZXgiLCJmaXJzdFZlcnRpY2VzIiwic2Vjb25kVmVydGljZXMiLCJ0aGlyZFZlcnRpY2VzIiwiZmlyc3RGYWNldCIsImZyb21WZXJ0aWNlcyIsInNlY29uZEZhY2V0IiwidGhpcmRGYWNldCIsImZpcnN0RmFjZXRUb29TbWFsbCIsImlzVG9vU21hbGwiLCJzZWNvbmRGYWNldFRvb1NtYWxsIiwidGhpcmRGYWNldFRvb1NtYWxsIiwicHVzaCIsIm5vbk51bGxJbnRlcnNlY3Rpb25JbmRleCIsImNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25JbmRleCIsImludGVybWVkaWF0ZVZlcnRleCIsInNtYWxsZXJGYWNldCIsInZlcnRpY2FsTGluZSIsImdldEVkZ2VzIiwiZWRnZSIsImludGVyc2VjdGlvbiIsImNhbGN1bGF0ZUludGVyc2VjdGlvbldpdGhWZXJ0aWNhbExpbmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3RhcnRWZXJ0ZXgiLCJlbmRWZXJ0ZXgiLCJkaXJlY3Rpb24iLCJvZmZzZXQiLCJub25OdWxsSW50ZXJzZWN0aW9uIiwibWlkUG9pbnRUb1RoZUxlZnRPZk1hc2tpbmdFZGdlcyIsImlzTWlkUG9pbnRUb1RoZUxlZnRPZk1hc2tpbmdFZGdlcyIsIm1pZFBvaW50VG9UaGVSaWdodE9mTWFza2luZ0VkZ2VzIiwiaXNNaWRQb2ludFRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlcyIsIm1hc2tpbmdFZGdlIiwibWlkUG9pbnRUb1RoZUxlZnRPZk1hc2tpbmdFZGdlIiwiaXNNaWRQb2ludFRvVGhlTGVmdCIsIm1pZFBvaW50VG9UaGVSaWdodE9mTWFza2luZ0VkZ2UiLCJpc01pZFBvaW50VG9UaGVSaWdodCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLE9BQU9DLFFBQVEsUUFBUixDQUFiO0FBQUEsSUFDTUMsWUFBWUQsUUFBUSxhQUFSLENBRGxCO0FBQUEsSUFFTUUsY0FBY0YsUUFBUSxnQkFBUixDQUZwQjtBQUFBLElBR01HLGlCQUFpQkgsUUFBUSxtQkFBUixDQUh2QjtBQUFBLElBSU1JLGlCQUFpQkosUUFBUSxtQkFBUixDQUp2QjtBQUFBLElBS01LLG9CQUFvQkwsUUFBUSxzQkFBUixDQUwxQjtBQUFBLElBTU1NLHVCQUF1Qk4sUUFBUSx5QkFBUixDQU43Qjs7QUFRTSxJQUFFTyxlQUFGLEdBQXNCTixTQUF0QixDQUFFTSxlQUFGO0FBQUEsSUFDRUMsSUFERixHQUMwQ04sV0FEMUMsQ0FDRU0sSUFERjtBQUFBLElBQ1FDLFNBRFIsR0FDMENQLFdBRDFDLENBQ1FPLFNBRFI7QUFBQSxJQUNtQkMsTUFEbkIsR0FDMENSLFdBRDFDLENBQ21CUSxNQURuQjtBQUFBLElBQzJCQyxVQUQzQixHQUMwQ1QsV0FEMUMsQ0FDMkJTLFVBRDNCO0FBQUEsSUFFRUMsS0FGRixHQUVvQ1IsY0FGcEMsQ0FFRVEsS0FGRjtBQUFBLElBRVNDLE1BRlQsR0FFb0NULGNBRnBDLENBRVNTLE1BRlQ7QUFBQSxJQUVpQkMsS0FGakIsR0FFb0NWLGNBRnBDLENBRWlCVSxLQUZqQjtBQUFBLElBRXdCQyxRQUZ4QixHQUVvQ1gsY0FGcEMsQ0FFd0JXLE9BRnhCO0FBQUEsSUFHRUMsMEJBSEYsR0FHaUNWLG9CQUhqQyxDQUdFVSwwQkFIRjtBQUFBLElBSUVDLGNBSkYsR0FJNkNaLGlCQUo3QyxDQUlFWSxjQUpGO0FBQUEsSUFJa0JDLHNCQUpsQixHQUk2Q2IsaUJBSjdDLENBSWtCYSxzQkFKbEI7QUFBQSxJQUtFQyxjQUxGLEdBS3FEaEIsY0FMckQsQ0FLRWdCLGNBTEY7QUFBQSxJQUtrQkMsZUFMbEIsR0FLcURqQixjQUxyRCxDQUtrQmlCLGVBTGxCO0FBQUEsSUFLbUNDLGFBTG5DLEdBS3FEbEIsY0FMckQsQ0FLbUNrQixhQUxuQzs7SUFPQUMsSztBQUNKLGlCQUFZQyxRQUFaLEVBQXNCQyxNQUF0QixFQUE4QkMsS0FBOUIsRUFBcUM7QUFBQTs7QUFDbkMsU0FBS0YsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLQyxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxTQUFLQyxLQUFMLEdBQWFBLEtBQWI7QUFDRDs7OztrQ0FFYTtBQUNaLGFBQU8sS0FBS0YsUUFBWjtBQUNEOzs7Z0NBRVc7QUFDVixhQUFPLEtBQUtDLE1BQVo7QUFDRDs7OytCQUVVO0FBQ1QsYUFBTyxLQUFLQyxLQUFaO0FBQ0Q7OztrQ0FFYTtBQUNaLFVBQU1DLFdBQVcsS0FBS0gsUUFBTCxDQUFjSSxNQUFkLENBQXFCLFVBQVNELFFBQVQsRUFBbUJFLE1BQW5CLEVBQTJCO0FBQy9ELFlBQU1DLGVBQWVuQixPQUFPa0IsTUFBUCxFQUFlLElBQUUsQ0FBakIsQ0FBckI7O0FBRUFGLG1CQUFXbEIsS0FBS2tCLFFBQUwsRUFBZUcsWUFBZixDQUFYOztBQUVBLGVBQU9ILFFBQVA7QUFDRCxPQU5nQixFQU1kLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBTmMsQ0FBakI7O0FBUUEsYUFBT0EsUUFBUDtBQUNEOzs7eUNBRW9CO0FBQ25CLFVBQU1JLGtCQUFrQixLQUFLUCxRQUFMLENBQWNRLEdBQWQsQ0FBa0IsVUFBU0gsTUFBVCxFQUFpQjtBQUN6RCxZQUFNSSxpQkFBaUJKLE9BQU9LLEtBQVAsRUFBdkIsQ0FEeUQsQ0FDbEI7O0FBRXZDLGVBQU9ELGNBQVA7QUFDRCxPQUp1QixDQUF4Qjs7QUFNQSxhQUFPRixlQUFQO0FBQ0Q7Ozt1Q0FFa0I7QUFDakIsVUFBTUksZUFBZXZCLFdBQVcsS0FBS2EsTUFBaEIsQ0FBckI7QUFBQSxVQUNNVyxnQkFBZ0IsQ0FDZEQsWUFEYyxFQUVkQSxZQUZjLEVBR2RBLFlBSGMsQ0FEdEI7O0FBT0EsYUFBT0MsYUFBUDtBQUNEOzs7cUNBRWdCQyxLLEVBQU87QUFBRTtBQUN4QixVQUFNQyxjQUFjRCxRQUFRLENBQTVCO0FBQUEsVUFDTUUsZ0JBQWdCLENBQ2RELGNBQWMsQ0FEQSxFQUVkQSxjQUFjLENBRkEsRUFHZEEsY0FBYyxDQUhBLENBRHRCOztBQU9BLGFBQU9DLGFBQVA7QUFDRDs7O2lDQUVZO0FBQ1gsVUFBTUMsT0FBT2xCLGNBQWMsS0FBS0UsUUFBbkIsQ0FBYjtBQUFBLFVBQ01pQiwrQkFBK0J4QiwyQkFBMkJ1QixJQUEzQixDQURyQztBQUFBLFVBRU1FLFdBQVdELDRCQUZqQixDQURXLENBR3FDOztBQUVoRCxhQUFPQyxRQUFQO0FBQ0Q7Ozs2QkFFUUMsWSxFQUFjO0FBQ3JCLFVBQU1DLGVBQWVELGFBQWFFLGVBQWIsRUFBckI7QUFBQSxVQUNNbEIsV0FBVyxLQUFLbUIsV0FBTCxFQURqQjtBQUFBLFVBRU1DLGtDQUFrQ0Msa0NBQWtDckIsUUFBbEMsRUFBNENpQixZQUE1QyxDQUZ4QztBQUFBLFVBR01LLFNBQVNGLCtCQUhmLENBRHFCLENBSTRCOztBQUVqRCxhQUFPRSxNQUFQO0FBQ0Q7OztvQ0FFZUMsVSxFQUFZO0FBQzFCLFdBQUsxQixRQUFMLEdBQWdCLEtBQUtBLFFBQUwsQ0FBY1EsR0FBZCxDQUFrQixVQUFTSCxNQUFULEVBQWlCO0FBQ2pEcUIsbUJBQVdDLE9BQVgsQ0FBbUIsVUFBU0MsU0FBVCxFQUFvQjtBQUNyQ3ZCLG1CQUFTdUIsVUFBVXZCLE1BQVYsQ0FBVDtBQUNELFNBRkQ7O0FBSUEsZUFBT0EsTUFBUDtBQUNELE9BTmUsQ0FBaEI7O0FBUUEsV0FBS0osTUFBTCxHQUFjSixnQkFBZ0IsS0FBS0csUUFBckIsQ0FBZDs7QUFFQSxXQUFLRSxLQUFMLEdBQWFOLGVBQWUsS0FBS0ksUUFBcEIsRUFBOEJ4QixJQUE5QixDQUFiO0FBQ0Q7OzsyQkFFTXFELGtCLEVBQW9CO0FBQ3pCLFdBQUs3QixRQUFMLEdBQWdCTixlQUFlLEtBQUtNLFFBQXBCLEVBQThCNkIsa0JBQTlCLENBQWhCOztBQUVBLFdBQUs1QixNQUFMLEdBQWNKLGdCQUFnQixLQUFLRyxRQUFyQixDQUFkOztBQUVBLFdBQUtFLEtBQUwsR0FBYU4sZUFBZSxLQUFLSSxRQUFwQixFQUE4QnhCLElBQTlCLENBQWI7QUFDRDs7O3FDQUVnQnNELHdCLEVBQTBCO0FBQ3pDLFdBQUs5QixRQUFMLEdBQWdCLEtBQUtBLFFBQUwsQ0FBY1EsR0FBZCxDQUFrQixVQUFTSCxNQUFULEVBQWlCO0FBQ2pEQSxpQkFBU1YsdUJBQXVCVSxNQUF2QixFQUErQnlCLHdCQUEvQixDQUFUOztBQUVBLGVBQU96QixNQUFQO0FBQ0QsT0FKZSxDQUFoQjs7QUFNQSxXQUFLSixNQUFMLEdBQWNKLGdCQUFnQixLQUFLRyxRQUFyQixDQUFkOztBQUVBLFdBQUtFLEtBQUwsR0FBYU4sZUFBZSxLQUFLSSxRQUFwQixFQUE4QnhCLElBQTlCLENBQWI7QUFDRDs7OzBCQUVLdUQsYSxFQUFlQyxhLEVBQWU7QUFDbEMsVUFBTUMsdUJBQXVCQyw4QkFBOEJILGFBQTlCLENBQTdCO0FBQUEsVUFDTUksNkJBQTZCRixxQkFBcUJHLE1BRHhEOztBQUdBLGNBQVFELDBCQUFSO0FBQ0UsYUFBSyxDQUFMO0FBQ0UsZUFBS0UsZ0NBQUwsQ0FBc0NOLGFBQXRDLEVBQXFEQyxhQUFyRDtBQUNBOztBQUVGLGFBQUssQ0FBTDtBQUNFLGVBQUtNLCtCQUFMLENBQXFDUCxhQUFyQyxFQUFvREMsYUFBcEQ7QUFDQTs7QUFFRixhQUFLLENBQUw7QUFDRSxlQUFLTyxpQ0FBTCxDQUF1Q1IsYUFBdkMsRUFBc0RDLGFBQXREO0FBQ0E7QUFYSjtBQWFEOzs7NEJBRU9RLE0sRUFBUTtBQUNkLFdBQUt4QyxRQUFMLEdBQWdCUixTQUFRLEtBQUtRLFFBQWIsRUFBdUJ3QyxNQUF2QixDQUFoQjtBQUNEOzs7cURBRWdDVCxhLEVBQWVDLGEsRUFBZVMsSyxFQUFPO0FBQ3BFLFVBQU1DLHdCQUF3QkMsK0JBQStCWixhQUEvQixDQUE5QjtBQUFBLFVBQ01TLFNBQVMsQ0FBQ3hELGtCQUFrQjBELHFCQUFuQixJQUE0QzFELGVBRDNEOztBQUdBK0Msc0JBQWdCdkMsU0FBUXVDLGFBQVIsRUFBdUJTLE1BQXZCLENBQWhCOztBQUVBVCxzQkFBZ0JBLGNBQWNyQixLQUFkLENBQW9CLENBQXBCLENBQWhCLENBTm9FLENBTTVCOztBQUV4QyxXQUFLbEIsT0FBTCxDQUFhZ0QsTUFBYjs7QUFFQSxVQUFNSSxjQUFjdkQsTUFBTSxLQUFLVyxRQUFYLENBQXBCO0FBQUEsVUFDTTZDLGVBQWV2RCxPQUFPLEtBQUtVLFFBQVosQ0FEckI7QUFBQSxVQUVNOEMsY0FBY3ZELE1BQU0sS0FBS1MsUUFBWCxDQUZwQjtBQUFBLFVBR00rQyxvQkFBb0IxRCxNQUFNMEMsYUFBTixDQUgxQjtBQUFBLFVBSU1pQixxQkFBcUIxRCxPQUFPeUMsYUFBUCxDQUozQjtBQUFBLFVBS01rQiwwQkFBMEJDLDRCQUE0QkwsWUFBNUIsRUFBMENDLFdBQTFDLEVBQXVEQyxpQkFBdkQsQ0FMaEM7QUFBQSxVQU1NSSwyQkFBMkJELDRCQUE0QkosV0FBNUIsRUFBeUNGLFdBQXpDLEVBQXNESSxrQkFBdEQsQ0FOakM7QUFBQSxVQU9NSSxnQkFBZ0IsQ0FDZFIsV0FEYyxFQUVkQyxZQUZjLEVBR2RJLHVCQUhjLENBUHRCO0FBQUEsVUFZTUksaUJBQWlCLENBQ2ZKLHVCQURlLEVBRWZFLHdCQUZlLEVBR2ZQLFdBSGUsQ0FadkI7QUFBQSxVQWlCTVUsZ0JBQWdCLENBQ2RMLHVCQURjLEVBRWRILFdBRmMsRUFHZEssd0JBSGMsQ0FqQnRCO0FBQUEsVUFzQk1JLGFBQWFkLE1BQU1lLFlBQU4sQ0FBbUJKLGFBQW5CLENBdEJuQjtBQUFBLFVBdUJNSyxjQUFjaEIsTUFBTWUsWUFBTixDQUFtQkgsY0FBbkIsQ0F2QnBCO0FBQUEsVUF3Qk1LLGFBQWFqQixNQUFNZSxZQUFOLENBQW1CRixhQUFuQixDQXhCbkI7QUFBQSxVQXlCTUsscUJBQXFCSixXQUFXSyxVQUFYLEVBekIzQjtBQUFBLFVBMEJNQyxzQkFBc0JKLFlBQVlHLFVBQVosRUExQjVCO0FBQUEsVUEyQk1FLHFCQUFxQkosV0FBV0UsVUFBWCxFQTNCM0I7O0FBNkJBLFVBQUksQ0FBQ0Qsa0JBQUwsRUFBeUI7QUFDdkIzQixzQkFBYytCLElBQWQsQ0FBbUJSLFVBQW5CO0FBQ0Q7O0FBRUQsVUFBSSxDQUFDTSxtQkFBTCxFQUEwQjtBQUN4QjdCLHNCQUFjK0IsSUFBZCxDQUFtQk4sV0FBbkI7QUFDRDs7QUFFRCxVQUFJLENBQUNLLGtCQUFMLEVBQXlCO0FBQ3ZCOUIsc0JBQWMrQixJQUFkLENBQW1CTCxVQUFuQjtBQUNEO0FBQ0Y7OztvREFFK0IzQixhLEVBQWVDLGEsRUFBZVMsSyxFQUFPO0FBQ25FLFVBQU11QiwyQkFBMkJDLGtDQUFrQ2xDLGFBQWxDLENBQWpDO0FBQUEsVUFDTVMsU0FBUyxDQUFDeEQsa0JBQWtCZ0Ysd0JBQW5CLElBQStDaEYsZUFEOUQ7O0FBR0ErQyxzQkFBZ0J2QyxTQUFRdUMsYUFBUixFQUF1QlMsTUFBdkIsQ0FBaEI7O0FBRUEsV0FBS2hELE9BQUwsQ0FBYWdELE1BQWI7O0FBRUEsVUFBTUksY0FBY3ZELE1BQU0sS0FBS1csUUFBWCxDQUFwQjtBQUFBLFVBQ002QyxlQUFldkQsT0FBTyxLQUFLVSxRQUFaLENBRHJCO0FBQUEsVUFFTThDLGNBQWN2RCxNQUFNLEtBQUtTLFFBQVgsQ0FGcEI7QUFBQSxVQUdNK0Msb0JBQW9CMUQsTUFBTTBDLGFBQU4sQ0FIMUI7QUFBQSxVQUlNbUMscUJBQXFCaEIsNEJBQTRCTixXQUE1QixFQUF5Q0MsWUFBekMsRUFBdURFLGlCQUF2RCxDQUozQjtBQUFBLFVBS01LLGdCQUFnQixDQUNkUixXQURjLEVBRWRzQixrQkFGYyxFQUdkcEIsV0FIYyxDQUx0QjtBQUFBLFVBVU1PLGlCQUFpQixDQUNmYSxrQkFEZSxFQUVmckIsWUFGZSxFQUdmQyxXQUhlLENBVnZCO0FBQUEsVUFlTVMsYUFBYWQsTUFBTWUsWUFBTixDQUFtQkosYUFBbkIsQ0FmbkI7QUFBQSxVQWdCTUssY0FBY2hCLE1BQU1lLFlBQU4sQ0FBbUJILGNBQW5CLENBaEJwQjtBQUFBLFVBaUJNTSxxQkFBcUJKLFdBQVdLLFVBQVgsRUFqQjNCO0FBQUEsVUFrQk1DLHNCQUFzQkosWUFBWUcsVUFBWixFQWxCNUI7O0FBb0JBLFVBQUksQ0FBQ0Qsa0JBQUwsRUFBeUI7QUFDdkIzQixzQkFBYytCLElBQWQsQ0FBbUJSLFVBQW5CO0FBQ0Q7O0FBRUQsVUFBSSxDQUFDTSxtQkFBTCxFQUEwQjtBQUN4QjdCLHNCQUFjK0IsSUFBZCxDQUFtQk4sV0FBbkI7QUFDRDtBQUNGOzs7c0RBRWlDMUIsYSxFQUFlQyxhLEVBQWU7QUFDOUQsVUFBTW1DLGVBQWUsSUFBckIsQ0FEOEQsQ0FDbEM7O0FBRTVCbkMsb0JBQWMrQixJQUFkLENBQW1CSSxZQUFuQjtBQUNEOzs7MkRBRXNDQyxZLEVBQWM7QUFDbkQsVUFBTWxFLFFBQVEsS0FBS21FLFFBQUwsRUFBZDtBQUFBLFVBQ010QyxnQkFBZ0I3QixNQUFNTSxHQUFOLENBQVUsVUFBUzhELElBQVQsRUFBZTtBQUN2QyxZQUFNQyxlQUFlRCxLQUFLRSxxQ0FBTCxDQUEyQ0osWUFBM0MsQ0FBckI7O0FBRUEsZUFBT0csWUFBUDtBQUNELE9BSmUsQ0FEdEI7O0FBT0EsYUFBT3hDLGFBQVA7QUFDRDs7Ozs7O0FBR0gwQyxPQUFPQyxPQUFQLEdBQWlCM0UsS0FBakI7O0FBRUEsU0FBU21ELDJCQUFULENBQXFDeUIsV0FBckMsRUFBa0RDLFNBQWxELEVBQTZETCxZQUE3RCxFQUEyRTtBQUN6RSxNQUFNTSxZQUFZM0YsVUFBVTBGLFNBQVYsRUFBcUJELFdBQXJCLENBQWxCO0FBQUEsTUFDTUcsU0FBUzNGLE9BQU8wRixTQUFQLEVBQWtCTixZQUFsQixDQURmO0FBQUEsTUFFTUwscUJBQXFCakYsS0FBSzBGLFdBQUwsRUFBa0JHLE1BQWxCLENBRjNCOztBQUlBLFNBQU9aLGtCQUFQO0FBQ0Q7O0FBRUQsU0FBU2hDLDZCQUFULENBQXVDSCxhQUF2QyxFQUFzRDtBQUNwRCxNQUFNRSx1QkFBdUJGLGNBQWMzQixNQUFkLENBQXFCLFVBQVM2QixvQkFBVCxFQUErQnNDLFlBQS9CLEVBQTZDO0FBQzdGLFFBQUlBLGlCQUFpQixJQUFyQixFQUEyQjtBQUN6QixVQUFNUSxzQkFBc0JSLFlBQTVCLENBRHlCLENBQ2lCOztBQUUxQ3RDLDJCQUFxQjhCLElBQXJCLENBQTBCZ0IsbUJBQTFCO0FBQ0Q7O0FBRUQsV0FBTzlDLG9CQUFQO0FBQ0QsR0FSNEIsRUFRMUIsRUFSMEIsQ0FBN0I7O0FBVUEsU0FBT0Esb0JBQVA7QUFDRDs7QUFFRCxTQUFTVSw4QkFBVCxDQUF3Q1osYUFBeEMsRUFBdUQ7QUFDckQsTUFBTVcsd0JBQXdCWCxjQUFjM0IsTUFBZCxDQUFxQixVQUFTc0MscUJBQVQsRUFBZ0M2QixZQUFoQyxFQUE4QzFELEtBQTlDLEVBQXFEO0FBQ3RHLFFBQUk2QiwwQkFBMEIsSUFBOUIsRUFBb0M7QUFDbEMsVUFBSTZCLGlCQUFpQixJQUFyQixFQUEyQjtBQUN6QjdCLGdDQUF3QjdCLEtBQXhCO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPNkIscUJBQVA7QUFDRCxHQVI2QixFQVEzQixJQVIyQixDQUE5Qjs7QUFVQSxTQUFPQSxxQkFBUDtBQUNEOztBQUVELFNBQVN1QixpQ0FBVCxDQUEyQ2xDLGFBQTNDLEVBQTBEO0FBQ3hELE1BQU1XLHdCQUF3QlgsY0FBYzNCLE1BQWQsQ0FBcUIsVUFBU3NDLHFCQUFULEVBQWdDNkIsWUFBaEMsRUFBOEMxRCxLQUE5QyxFQUFxRDtBQUN0RyxRQUFJNkIsMEJBQTBCLElBQTlCLEVBQW9DO0FBQ2xDLFVBQUk2QixpQkFBaUIsSUFBckIsRUFBMkI7QUFDekI3QixnQ0FBd0I3QixLQUF4QjtBQUNEO0FBQ0Y7O0FBRUQsV0FBTzZCLHFCQUFQO0FBQ0QsR0FSNkIsRUFRM0IsSUFSMkIsQ0FBOUI7O0FBVUEsU0FBT0EscUJBQVA7QUFDRDs7QUFFRCxTQUFTbEIsaUNBQVQsQ0FBMkNyQixRQUEzQyxFQUFxRGlCLFlBQXJELEVBQW1FO0FBQ2pFLE1BQU00RCxrQ0FBa0NDLGtDQUFrQzlFLFFBQWxDLEVBQTRDaUIsWUFBNUMsQ0FBeEM7QUFBQSxNQUNNOEQsbUNBQW1DQyxtQ0FBbUNoRixRQUFuQyxFQUE2Q2lCLFlBQTdDLENBRHpDO0FBQUEsTUFFTUcsa0NBQWtDeUQsbUNBQW1DRSxnQ0FGM0UsQ0FEaUUsQ0FHNEM7O0FBRTdHLFNBQU8zRCwrQkFBUDtBQUNEOztBQUVELFNBQVMwRCxpQ0FBVCxDQUEyQzlFLFFBQTNDLEVBQXFEaUIsWUFBckQsRUFBbUU7QUFDakUsTUFBTTRELGtDQUFrQzVELGFBQWFoQixNQUFiLENBQW9CLFVBQVM0RSwrQkFBVCxFQUEwQ0ksV0FBMUMsRUFBdUQ7QUFDakgsUUFBSUosK0JBQUosRUFBcUM7QUFDbkMsVUFBTUssaUNBQWlDRCxZQUFZRSxtQkFBWixDQUFnQ25GLFFBQWhDLENBQXZDOztBQUVBNkUsd0NBQWtDSyw4QkFBbEM7QUFDRDs7QUFFRCxXQUFPTCwrQkFBUDtBQUNELEdBUnVDLEVBUXJDLElBUnFDLENBQXhDOztBQVVBLFNBQU9BLCtCQUFQO0FBQ0Q7O0FBRUQsU0FBU0csa0NBQVQsQ0FBNENoRixRQUE1QyxFQUFzRGlCLFlBQXRELEVBQW9FO0FBQ2xFLE1BQU04RCxtQ0FBbUM5RCxhQUFhaEIsTUFBYixDQUFvQixVQUFTOEUsZ0NBQVQsRUFBMkNFLFdBQTNDLEVBQXdEO0FBQ25ILFFBQUlGLGdDQUFKLEVBQXNDO0FBQ3BDLFVBQU1LLGtDQUFrQ0gsWUFBWUksb0JBQVosQ0FBaUNyRixRQUFqQyxDQUF4Qzs7QUFFQStFLHlDQUFtQ0ssK0JBQW5DO0FBQ0Q7O0FBRUQsV0FBT0wsZ0NBQVA7QUFDRCxHQVJ3QyxFQVF0QyxJQVJzQyxDQUF6Qzs7QUFVQSxTQUFPQSxnQ0FBUDtBQUNEIiwiZmlsZSI6ImZhY2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFZGdlID0gcmVxdWlyZSgnLi9lZGdlJyksXG4gICAgICBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpLFxuICAgICAgdmVjdG9yTWF0aHMgPSByZXF1aXJlKCcuL21hdGhzL3ZlY3RvcicpLFxuICAgICAgZmFjZXRVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9mYWNldCcpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgcm90YXRpb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9yb3RhdGlvbicpLFxuICAgICAgYXBwcm94aW1hdGVVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9hcHByb3hpbWF0ZScpO1xuXG5jb25zdCB7IFZFUlRJQ0VTX0xFTkdUSCB9ID0gY29uc3RhbnRzLFxuICAgICAgeyBhZGQzLCBzdWJ0cmFjdDMsIHNjYWxlMywgbm9ybWFsaXNlMyB9ID0gdmVjdG9yTWF0aHMsXG4gICAgICB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkLCBwZXJtdXRlIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgaXNBcHByb3hpbWF0ZWx5RXF1YWxUb1plcm8gfSA9IGFwcHJveGltYXRlVXRpbGl0aWVzLFxuICAgICAgeyByb3RhdGVWZXJ0aWNlcywgcm90YXRlVmVydGV4QWJvdXRaQXhpcyB9ID0gcm90YXRpb25VdGlsaXRpZXMsXG4gICAgICB7IGNhbGN1bGF0ZUVkZ2VzLCBjYWxjdWxhdGVOb3JtYWwsIGNhbGN1bGF0ZUFyZWEgfSA9IGZhY2V0VXRpbGl0aWVzO1xuXG5jbGFzcyBGYWNldCB7XG4gIGNvbnN0cnVjdG9yKHZlcnRpY2VzLCBub3JtYWwsIGVkZ2VzKSB7XG4gICAgdGhpcy52ZXJ0aWNlcyA9IHZlcnRpY2VzO1xuICAgIHRoaXMubm9ybWFsID0gbm9ybWFsO1xuICAgIHRoaXMuZWRnZXMgPSBlZGdlcztcbiAgfVxuXG4gIGdldFZlcnRpY2VzKCkge1xuICAgIHJldHVybiB0aGlzLnZlcnRpY2VzO1xuICB9XG5cbiAgZ2V0Tm9ybWFsKCkge1xuICAgIHJldHVybiB0aGlzLm5vcm1hbDtcbiAgfVxuXG4gIGdldEVkZ2VzKCkge1xuICAgIHJldHVybiB0aGlzLmVkZ2VzO1xuICB9XG4gIFxuICBnZXRNaWRQb2ludCgpIHtcbiAgICBjb25zdCBtaWRQb2ludCA9IHRoaXMudmVydGljZXMucmVkdWNlKGZ1bmN0aW9uKG1pZFBvaW50LCB2ZXJ0ZXgpIHtcbiAgICAgIGNvbnN0IHNjYWxlZFZlcnRleCA9IHNjYWxlMyh2ZXJ0ZXgsIDEvMyk7XG4gICAgICBcbiAgICAgIG1pZFBvaW50ID0gYWRkMyhtaWRQb2ludCwgc2NhbGVkVmVydGV4KTtcbiAgICAgIFxuICAgICAgcmV0dXJuIG1pZFBvaW50O1xuICAgIH0sIFsgMCwgMCwgMCBdKTtcbiAgICBcbiAgICByZXR1cm4gbWlkUG9pbnQ7XG4gIH1cbiAgXG4gIGdldFZlcnRleFBvc2l0aW9ucygpIHtcbiAgICBjb25zdCB2ZXJ0ZXhQb3NpdGlvbnMgPSB0aGlzLnZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICAgIGNvbnN0IHZlcnRleFBvc2l0aW9uID0gdmVydGV4LnNsaWNlKCk7IC8vL1xuICAgICAgXG4gICAgICByZXR1cm4gdmVydGV4UG9zaXRpb247XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHZlcnRleFBvc2l0aW9ucztcbiAgfVxuICBcbiAgZ2V0VmVydGV4Tm9ybWFscygpIHtcbiAgICBjb25zdCB2ZXJ0ZXhOb3JtYWwgPSBub3JtYWxpc2UzKHRoaXMubm9ybWFsKSxcbiAgICAgICAgICB2ZXJ0ZXhOb3JtYWxzID0gW1xuICAgICAgICAgICAgdmVydGV4Tm9ybWFsLFxuICAgICAgICAgICAgdmVydGV4Tm9ybWFsLFxuICAgICAgICAgICAgdmVydGV4Tm9ybWFsLFxuICAgICAgICAgIF07XG4gICAgXG4gICAgcmV0dXJuIHZlcnRleE5vcm1hbHM7XG4gIH1cbiAgXG4gIGdldFZlcnRleEluZGV4ZXMoaW5kZXgpIHsgLy8vXG4gICAgY29uc3QgdmVydGV4SW5kZXggPSBpbmRleCAqIDMsXG4gICAgICAgICAgdmVydGV4SW5kZXhlcyA9IFtcbiAgICAgICAgICAgIHZlcnRleEluZGV4ICsgMCxcbiAgICAgICAgICAgIHZlcnRleEluZGV4ICsgMSxcbiAgICAgICAgICAgIHZlcnRleEluZGV4ICsgMixcbiAgICAgICAgICBdO1xuICAgIFxuICAgIHJldHVybiB2ZXJ0ZXhJbmRleGVzO1xuICB9XG4gIFxuICBpc1Rvb1NtYWxsKCkge1xuICAgIGNvbnN0IGFyZWEgPSBjYWxjdWxhdGVBcmVhKHRoaXMudmVydGljZXMpLFxuICAgICAgICAgIGFyZWFBcHByb3hpbWF0ZWx5RXF1YWxUb1plcm8gPSBpc0FwcHJveGltYXRlbHlFcXVhbFRvWmVybyhhcmVhKSxcbiAgICAgICAgICB0b29TbWFsbCA9IGFyZWFBcHByb3hpbWF0ZWx5RXF1YWxUb1plcm87ICAvLy9cbiAgICBcbiAgICByZXR1cm4gdG9vU21hbGw7XG4gIH1cbiAgXG4gIGlzTWFza2VkKG1hc2tpbmdGYWNldCkge1xuICAgIGNvbnN0IG1hc2tpbmdFZGdlcyA9IG1hc2tpbmdGYWNldC5nZXRNYXNraW5nRWRnZXMoKSxcbiAgICAgICAgICBtaWRQb2ludCA9IHRoaXMuZ2V0TWlkUG9pbnQoKSxcbiAgICAgICAgICBtaWRQb2ludFRvT25lU2lkZU9mTWFza2luZ0VkZ2VzID0gaXNNaWRQb2ludFRvT25lU2lkZU9mTWFza2luZ0VkZ2VzKG1pZFBvaW50LCBtYXNraW5nRWRnZXMpLFxuICAgICAgICAgIG1hc2tlZCA9IG1pZFBvaW50VG9PbmVTaWRlT2ZNYXNraW5nRWRnZXM7ICAvLy9cbiAgICBcbiAgICByZXR1cm4gbWFza2VkO1xuICB9XG4gIFxuICBhcHBseVRyYW5zZm9ybXModHJhbnNmb3Jtcykge1xuICAgIHRoaXMudmVydGljZXMgPSB0aGlzLnZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICAgIHRyYW5zZm9ybXMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2Zvcm0pIHtcbiAgICAgICAgdmVydGV4ID0gdHJhbnNmb3JtKHZlcnRleCk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHZlcnRleDtcbiAgICB9KTtcblxuICAgIHRoaXMubm9ybWFsID0gY2FsY3VsYXRlTm9ybWFsKHRoaXMudmVydGljZXMpO1xuXG4gICAgdGhpcy5lZGdlcyA9IGNhbGN1bGF0ZUVkZ2VzKHRoaXMudmVydGljZXMsIEVkZ2UpO1xuICB9XG4gIFxuICByb3RhdGUocm90YXRpb25RdWF0ZXJuaW9uKSB7XG4gICAgdGhpcy52ZXJ0aWNlcyA9IHJvdGF0ZVZlcnRpY2VzKHRoaXMudmVydGljZXMsIHJvdGF0aW9uUXVhdGVybmlvbik7XG4gICAgXG4gICAgdGhpcy5ub3JtYWwgPSBjYWxjdWxhdGVOb3JtYWwodGhpcy52ZXJ0aWNlcyk7XG5cbiAgICB0aGlzLmVkZ2VzID0gY2FsY3VsYXRlRWRnZXModGhpcy52ZXJ0aWNlcywgRWRnZSk7XG4gIH1cblxuICByb3RhdGVBYm91dFpBeGlzKHJvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCkge1xuICAgIHRoaXMudmVydGljZXMgPSB0aGlzLnZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICAgIHZlcnRleCA9IHJvdGF0ZVZlcnRleEFib3V0WkF4aXModmVydGV4LCByb3RhdGlvbkFib3V0WkF4aXNNYXRyaXgpO1xuXG4gICAgICByZXR1cm4gdmVydGV4O1xuICAgIH0pO1xuXG4gICAgdGhpcy5ub3JtYWwgPSBjYWxjdWxhdGVOb3JtYWwodGhpcy52ZXJ0aWNlcyk7XG5cbiAgICB0aGlzLmVkZ2VzID0gY2FsY3VsYXRlRWRnZXModGhpcy52ZXJ0aWNlcywgRWRnZSk7XG4gIH1cbiAgXG4gIHNwbGl0KGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpIHtcbiAgICBjb25zdCBub25OdWxsSW50ZXJzZWN0aW9ucyA9IGNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIG5vbk51bGxJbnRlcnNlY3Rpb25zTGVuZ3RoID0gbm9uTnVsbEludGVyc2VjdGlvbnMubGVuZ3RoO1xuXG4gICAgc3dpdGNoIChub25OdWxsSW50ZXJzZWN0aW9uc0xlbmd0aCkge1xuICAgICAgY2FzZSAyIDpcbiAgICAgICAgdGhpcy5zcGxpdFdpdGhUd29Ob25OdWxsSW50ZXJzZWN0aW9ucyhpbnRlcnNlY3Rpb25zLCBzbWFsbGVyRmFjZXRzKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMSA6XG4gICAgICAgIHRoaXMuc3BsaXRXaXRoT25lTm9uTnVsbEludGVyc2VjdGlvbihpbnRlcnNlY3Rpb25zLCBzbWFsbGVyRmFjZXRzKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMCA6XG4gICAgICAgIHRoaXMuc3BsaXRXaXRoWmVyb05vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgXG4gIHBlcm11dGUocGxhY2VzKSB7XG4gICAgdGhpcy52ZXJ0aWNlcyA9IHBlcm11dGUodGhpcy52ZXJ0aWNlcywgcGxhY2VzKTtcbiAgfVxuXG4gIHNwbGl0V2l0aFR3b05vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMsIGZhY2V0KSB7XG4gICAgY29uc3QgbnVsbEludGVyc2VjdGlvbkluZGV4ID0gY2FsY3VsYXRlTnVsbEludGVyc2VjdGlvbkluZGV4KGludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIHBsYWNlcyA9IChWRVJUSUNFU19MRU5HVEggLSBudWxsSW50ZXJzZWN0aW9uSW5kZXgpICUgVkVSVElDRVNfTEVOR1RIO1xuXG4gICAgaW50ZXJzZWN0aW9ucyA9IHBlcm11dGUoaW50ZXJzZWN0aW9ucywgcGxhY2VzKTtcblxuICAgIGludGVyc2VjdGlvbnMgPSBpbnRlcnNlY3Rpb25zLnNsaWNlKDEpOyAvLy9cbiAgICBcbiAgICB0aGlzLnBlcm11dGUocGxhY2VzKTtcblxuICAgIGNvbnN0IGZpcnN0VmVydGV4ID0gZmlyc3QodGhpcy52ZXJ0aWNlcyksXG4gICAgICAgICAgc2Vjb25kVmVydGV4ID0gc2Vjb25kKHRoaXMudmVydGljZXMpLFxuICAgICAgICAgIHRoaXJkVmVydGV4ID0gdGhpcmQodGhpcy52ZXJ0aWNlcyksXG4gICAgICAgICAgZmlyc3RJbnRlcnNlY3Rpb24gPSBmaXJzdChpbnRlcnNlY3Rpb25zKSxcbiAgICAgICAgICBzZWNvbmRJbnRlcnNlY3Rpb24gPSBzZWNvbmQoaW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgZmlyc3RJbnRlcm1lZGlhdGVWZXJ0ZXggPSBjYWxjdWxhdGVJbnRlcm1lZGlhdGVWZXJ0ZXgoc2Vjb25kVmVydGV4LCB0aGlyZFZlcnRleCwgZmlyc3RJbnRlcnNlY3Rpb24pLFxuICAgICAgICAgIHNlY29uZEludGVybWVkaWF0ZVZlcnRleCA9IGNhbGN1bGF0ZUludGVybWVkaWF0ZVZlcnRleCh0aGlyZFZlcnRleCwgZmlyc3RWZXJ0ZXgsIHNlY29uZEludGVyc2VjdGlvbiksXG4gICAgICAgICAgZmlyc3RWZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgIGZpcnN0VmVydGV4LFxuICAgICAgICAgICAgc2Vjb25kVmVydGV4LFxuICAgICAgICAgICAgZmlyc3RJbnRlcm1lZGlhdGVWZXJ0ZXhcbiAgICAgICAgICBdLFxuICAgICAgICAgIHNlY29uZFZlcnRpY2VzID0gW1xuICAgICAgICAgICAgZmlyc3RJbnRlcm1lZGlhdGVWZXJ0ZXgsXG4gICAgICAgICAgICBzZWNvbmRJbnRlcm1lZGlhdGVWZXJ0ZXgsXG4gICAgICAgICAgICBmaXJzdFZlcnRleFxuICAgICAgICAgIF0sXG4gICAgICAgICAgdGhpcmRWZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgIGZpcnN0SW50ZXJtZWRpYXRlVmVydGV4LFxuICAgICAgICAgICAgdGhpcmRWZXJ0ZXgsXG4gICAgICAgICAgICBzZWNvbmRJbnRlcm1lZGlhdGVWZXJ0ZXhcbiAgICAgICAgICBdLFxuICAgICAgICAgIGZpcnN0RmFjZXQgPSBmYWNldC5mcm9tVmVydGljZXMoZmlyc3RWZXJ0aWNlcyksXG4gICAgICAgICAgc2Vjb25kRmFjZXQgPSBmYWNldC5mcm9tVmVydGljZXMoc2Vjb25kVmVydGljZXMpLFxuICAgICAgICAgIHRoaXJkRmFjZXQgPSBmYWNldC5mcm9tVmVydGljZXModGhpcmRWZXJ0aWNlcyksXG4gICAgICAgICAgZmlyc3RGYWNldFRvb1NtYWxsID0gZmlyc3RGYWNldC5pc1Rvb1NtYWxsKCksXG4gICAgICAgICAgc2Vjb25kRmFjZXRUb29TbWFsbCA9IHNlY29uZEZhY2V0LmlzVG9vU21hbGwoKSxcbiAgICAgICAgICB0aGlyZEZhY2V0VG9vU21hbGwgPSB0aGlyZEZhY2V0LmlzVG9vU21hbGwoKTtcblxuICAgIGlmICghZmlyc3RGYWNldFRvb1NtYWxsKSB7XG4gICAgICBzbWFsbGVyRmFjZXRzLnB1c2goZmlyc3RGYWNldCk7XG4gICAgfVxuXG4gICAgaWYgKCFzZWNvbmRGYWNldFRvb1NtYWxsKSB7XG4gICAgICBzbWFsbGVyRmFjZXRzLnB1c2goc2Vjb25kRmFjZXQpO1xuICAgIH1cblxuICAgIGlmICghdGhpcmRGYWNldFRvb1NtYWxsKSB7XG4gICAgICBzbWFsbGVyRmFjZXRzLnB1c2godGhpcmRGYWNldCk7XG4gICAgfVxuICB9XG5cbiAgc3BsaXRXaXRoT25lTm9uTnVsbEludGVyc2VjdGlvbihpbnRlcnNlY3Rpb25zLCBzbWFsbGVyRmFjZXRzLCBmYWNldCkge1xuICAgIGNvbnN0IG5vbk51bGxJbnRlcnNlY3Rpb25JbmRleCA9IGNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25JbmRleChpbnRlcnNlY3Rpb25zKSxcbiAgICAgICAgICBwbGFjZXMgPSAoVkVSVElDRVNfTEVOR1RIIC0gbm9uTnVsbEludGVyc2VjdGlvbkluZGV4KSAlIFZFUlRJQ0VTX0xFTkdUSDtcblxuICAgIGludGVyc2VjdGlvbnMgPSBwZXJtdXRlKGludGVyc2VjdGlvbnMsIHBsYWNlcyk7XG5cbiAgICB0aGlzLnBlcm11dGUocGxhY2VzKTtcblxuICAgIGNvbnN0IGZpcnN0VmVydGV4ID0gZmlyc3QodGhpcy52ZXJ0aWNlcyksXG4gICAgICAgICAgc2Vjb25kVmVydGV4ID0gc2Vjb25kKHRoaXMudmVydGljZXMpLFxuICAgICAgICAgIHRoaXJkVmVydGV4ID0gdGhpcmQodGhpcy52ZXJ0aWNlcyksXG4gICAgICAgICAgZmlyc3RJbnRlcnNlY3Rpb24gPSBmaXJzdChpbnRlcnNlY3Rpb25zKSxcbiAgICAgICAgICBpbnRlcm1lZGlhdGVWZXJ0ZXggPSBjYWxjdWxhdGVJbnRlcm1lZGlhdGVWZXJ0ZXgoZmlyc3RWZXJ0ZXgsIHNlY29uZFZlcnRleCwgZmlyc3RJbnRlcnNlY3Rpb24pLFxuICAgICAgICAgIGZpcnN0VmVydGljZXMgPSBbXG4gICAgICAgICAgICBmaXJzdFZlcnRleCxcbiAgICAgICAgICAgIGludGVybWVkaWF0ZVZlcnRleCxcbiAgICAgICAgICAgIHRoaXJkVmVydGV4XG4gICAgICAgICAgXSxcbiAgICAgICAgICBzZWNvbmRWZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgIGludGVybWVkaWF0ZVZlcnRleCxcbiAgICAgICAgICAgIHNlY29uZFZlcnRleCxcbiAgICAgICAgICAgIHRoaXJkVmVydGV4XG4gICAgICAgICAgXSxcbiAgICAgICAgICBmaXJzdEZhY2V0ID0gZmFjZXQuZnJvbVZlcnRpY2VzKGZpcnN0VmVydGljZXMpLFxuICAgICAgICAgIHNlY29uZEZhY2V0ID0gZmFjZXQuZnJvbVZlcnRpY2VzKHNlY29uZFZlcnRpY2VzKSxcbiAgICAgICAgICBmaXJzdEZhY2V0VG9vU21hbGwgPSBmaXJzdEZhY2V0LmlzVG9vU21hbGwoKSxcbiAgICAgICAgICBzZWNvbmRGYWNldFRvb1NtYWxsID0gc2Vjb25kRmFjZXQuaXNUb29TbWFsbCgpO1xuXG4gICAgaWYgKCFmaXJzdEZhY2V0VG9vU21hbGwpIHtcbiAgICAgIHNtYWxsZXJGYWNldHMucHVzaChmaXJzdEZhY2V0KTtcbiAgICB9XG5cbiAgICBpZiAoIXNlY29uZEZhY2V0VG9vU21hbGwpIHtcbiAgICAgIHNtYWxsZXJGYWNldHMucHVzaChzZWNvbmRGYWNldCk7XG4gICAgfVxuICB9XG5cbiAgc3BsaXRXaXRoWmVyb05vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpIHtcbiAgICBjb25zdCBzbWFsbGVyRmFjZXQgPSB0aGlzOyAgLy8vXG5cbiAgICBzbWFsbGVyRmFjZXRzLnB1c2goc21hbGxlckZhY2V0KTtcbiAgfVxuXG4gIGNhbGN1bGF0ZUludGVyc2VjdGlvbnNXaXRoVmVydGljYWxMaW5lKHZlcnRpY2FsTGluZSkge1xuICAgIGNvbnN0IGVkZ2VzID0gdGhpcy5nZXRFZGdlcygpLFxuICAgICAgICAgIGludGVyc2VjdGlvbnMgPSBlZGdlcy5tYXAoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uID0gZWRnZS5jYWxjdWxhdGVJbnRlcnNlY3Rpb25XaXRoVmVydGljYWxMaW5lKHZlcnRpY2FsTGluZSk7XG4gIFxuICAgICAgICAgICAgcmV0dXJuIGludGVyc2VjdGlvbjtcbiAgICAgICAgICB9KTtcblxuICAgIHJldHVybiBpbnRlcnNlY3Rpb25zO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRmFjZXQ7XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUludGVybWVkaWF0ZVZlcnRleChzdGFydFZlcnRleCwgZW5kVmVydGV4LCBpbnRlcnNlY3Rpb24pIHtcbiAgY29uc3QgZGlyZWN0aW9uID0gc3VidHJhY3QzKGVuZFZlcnRleCwgc3RhcnRWZXJ0ZXgpLFxuICAgICAgICBvZmZzZXQgPSBzY2FsZTMoZGlyZWN0aW9uLCBpbnRlcnNlY3Rpb24pLFxuICAgICAgICBpbnRlcm1lZGlhdGVWZXJ0ZXggPSBhZGQzKHN0YXJ0VmVydGV4LCBvZmZzZXQpO1xuXG4gIHJldHVybiBpbnRlcm1lZGlhdGVWZXJ0ZXg7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMpIHtcbiAgY29uc3Qgbm9uTnVsbEludGVyc2VjdGlvbnMgPSBpbnRlcnNlY3Rpb25zLnJlZHVjZShmdW5jdGlvbihub25OdWxsSW50ZXJzZWN0aW9ucywgaW50ZXJzZWN0aW9uKSB7XG4gICAgaWYgKGludGVyc2VjdGlvbiAhPT0gbnVsbCkge1xuICAgICAgY29uc3Qgbm9uTnVsbEludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjsgLy8vXG5cbiAgICAgIG5vbk51bGxJbnRlcnNlY3Rpb25zLnB1c2gobm9uTnVsbEludGVyc2VjdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vbk51bGxJbnRlcnNlY3Rpb25zO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIG5vbk51bGxJbnRlcnNlY3Rpb25zO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVOdWxsSW50ZXJzZWN0aW9uSW5kZXgoaW50ZXJzZWN0aW9ucykge1xuICBjb25zdCBudWxsSW50ZXJzZWN0aW9uSW5kZXggPSBpbnRlcnNlY3Rpb25zLnJlZHVjZShmdW5jdGlvbihudWxsSW50ZXJzZWN0aW9uSW5kZXgsIGludGVyc2VjdGlvbiwgaW5kZXgpIHtcbiAgICBpZiAobnVsbEludGVyc2VjdGlvbkluZGV4ID09PSBudWxsKSB7XG4gICAgICBpZiAoaW50ZXJzZWN0aW9uID09PSBudWxsKSB7XG4gICAgICAgIG51bGxJbnRlcnNlY3Rpb25JbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsSW50ZXJzZWN0aW9uSW5kZXg7XG4gIH0sIG51bGwpO1xuXG4gIHJldHVybiBudWxsSW50ZXJzZWN0aW9uSW5kZXg7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25JbmRleChpbnRlcnNlY3Rpb25zKSB7XG4gIGNvbnN0IG51bGxJbnRlcnNlY3Rpb25JbmRleCA9IGludGVyc2VjdGlvbnMucmVkdWNlKGZ1bmN0aW9uKG51bGxJbnRlcnNlY3Rpb25JbmRleCwgaW50ZXJzZWN0aW9uLCBpbmRleCkge1xuICAgIGlmIChudWxsSW50ZXJzZWN0aW9uSW5kZXggPT09IG51bGwpIHtcbiAgICAgIGlmIChpbnRlcnNlY3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgbnVsbEludGVyc2VjdGlvbkluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxJbnRlcnNlY3Rpb25JbmRleDtcbiAgfSwgbnVsbCk7XG5cbiAgcmV0dXJuIG51bGxJbnRlcnNlY3Rpb25JbmRleDtcbn1cblxuZnVuY3Rpb24gaXNNaWRQb2ludFRvT25lU2lkZU9mTWFza2luZ0VkZ2VzKG1pZFBvaW50LCBtYXNraW5nRWRnZXMpIHtcbiAgY29uc3QgbWlkUG9pbnRUb1RoZUxlZnRPZk1hc2tpbmdFZGdlcyA9IGlzTWlkUG9pbnRUb1RoZUxlZnRPZk1hc2tpbmdFZGdlcyhtaWRQb2ludCwgbWFza2luZ0VkZ2VzKSxcbiAgICAgICAgbWlkUG9pbnRUb1RoZVJpZ2h0T2ZNYXNraW5nRWRnZXMgPSBpc01pZFBvaW50VG9UaGVSaWdodE9mTWFza2luZ0VkZ2VzKG1pZFBvaW50LCBtYXNraW5nRWRnZXMpLFxuICAgICAgICBtaWRQb2ludFRvT25lU2lkZU9mTWFza2luZ0VkZ2VzID0gbWlkUG9pbnRUb1RoZUxlZnRPZk1hc2tpbmdFZGdlcyB8fCBtaWRQb2ludFRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlczsgLy8vXG5cbiAgcmV0dXJuIG1pZFBvaW50VG9PbmVTaWRlT2ZNYXNraW5nRWRnZXM7XG59XG5cbmZ1bmN0aW9uIGlzTWlkUG9pbnRUb1RoZUxlZnRPZk1hc2tpbmdFZGdlcyhtaWRQb2ludCwgbWFza2luZ0VkZ2VzKSB7XG4gIGNvbnN0IG1pZFBvaW50VG9UaGVMZWZ0T2ZNYXNraW5nRWRnZXMgPSBtYXNraW5nRWRnZXMucmVkdWNlKGZ1bmN0aW9uKG1pZFBvaW50VG9UaGVMZWZ0T2ZNYXNraW5nRWRnZXMsIG1hc2tpbmdFZGdlKSB7XG4gICAgaWYgKG1pZFBvaW50VG9UaGVMZWZ0T2ZNYXNraW5nRWRnZXMpIHtcbiAgICAgIGNvbnN0IG1pZFBvaW50VG9UaGVMZWZ0T2ZNYXNraW5nRWRnZSA9IG1hc2tpbmdFZGdlLmlzTWlkUG9pbnRUb1RoZUxlZnQobWlkUG9pbnQpO1xuXG4gICAgICBtaWRQb2ludFRvVGhlTGVmdE9mTWFza2luZ0VkZ2VzID0gbWlkUG9pbnRUb1RoZUxlZnRPZk1hc2tpbmdFZGdlO1xuICAgIH1cblxuICAgIHJldHVybiBtaWRQb2ludFRvVGhlTGVmdE9mTWFza2luZ0VkZ2VzO1xuICB9LCB0cnVlKTtcblxuICByZXR1cm4gbWlkUG9pbnRUb1RoZUxlZnRPZk1hc2tpbmdFZGdlcztcbn1cblxuZnVuY3Rpb24gaXNNaWRQb2ludFRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlcyhtaWRQb2ludCwgbWFza2luZ0VkZ2VzKSB7XG4gIGNvbnN0IG1pZFBvaW50VG9UaGVSaWdodE9mTWFza2luZ0VkZ2VzID0gbWFza2luZ0VkZ2VzLnJlZHVjZShmdW5jdGlvbihtaWRQb2ludFRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlcywgbWFza2luZ0VkZ2UpIHtcbiAgICBpZiAobWlkUG9pbnRUb1RoZVJpZ2h0T2ZNYXNraW5nRWRnZXMpIHtcbiAgICAgIGNvbnN0IG1pZFBvaW50VG9UaGVSaWdodE9mTWFza2luZ0VkZ2UgPSBtYXNraW5nRWRnZS5pc01pZFBvaW50VG9UaGVSaWdodChtaWRQb2ludCk7XG5cbiAgICAgIG1pZFBvaW50VG9UaGVSaWdodE9mTWFza2luZ0VkZ2VzID0gbWlkUG9pbnRUb1RoZVJpZ2h0T2ZNYXNraW5nRWRnZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWlkUG9pbnRUb1RoZVJpZ2h0T2ZNYXNraW5nRWRnZXM7XG4gIH0sIHRydWUpO1xuXG4gIHJldHVybiBtaWRQb2ludFRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlcztcbn1cblxuIl19