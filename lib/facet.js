'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Edge = require('./edge'),
    constants = require('./constants'),
    arrayUtilities = require('./utilities/array'),
    vectorUtilities = require('./utilities/vector'),
    vertexUtilities = require('./utilities/vertex'),
    verticesUtilities = require('./utilities/vertices'),
    approximateUtilities = require('./utilities/approximate');

var VERTICES_LENGTH = constants.VERTICES_LENGTH,
    _rotateAboutZAxis = vertexUtilities.rotateAboutZAxis,
    isApproximatelyEqualToZero = approximateUtilities.isApproximatelyEqualToZero,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    permute = arrayUtilities.permute,
    calculateNormal = verticesUtilities.calculateNormal,
    rotateVertices = verticesUtilities.rotateVertices,
    add3 = vectorUtilities.add3,
    subtract3 = vectorUtilities.subtract3,
    scale3 = vectorUtilities.scale3,
    length3 = vectorUtilities.length3,
    normalise3 = vectorUtilities.normalise3;

var Facet = function () {
  function Facet(vertices, normal) {
    _classCallCheck(this, Facet);

    this.vertices = vertices;
    this.normal = normal;
  }

  _createClass(Facet, [{
    key: 'getVertices',
    value: function getVertices() {
      return this.vertices;
    }
  }, {
    key: 'getNormal',
    value: function getNormal() {
      return this.normal;
    }
  }, {
    key: 'getEdges',
    value: function getEdges() {
      var edges = this.vertices.map(function (vertex, index) {
        var startIndex = index,
            endIndex = (startIndex + 1) % VERTICES_LENGTH,
            startVertex = this.vertices[startIndex],
            endVertex = this.vertices[endIndex],
            edge = Edge.fromVertices(startVertex, endVertex);

        return edge;
      }.bind(this));

      return edges;
    }
  }, {
    key: 'getMidPoint',
    value: function getMidPoint() {
      var midPoint = this.vertices.reduce(function (midPoint, vertex) {
        var scaledVertex = scale3(vertex, 1 / 3);

        midPoint = add3(midPoint, scaledVertex);

        return midPoint;
      }, [0, 0, 0]);

      return midPoint;
    }
  }, {
    key: 'getVertexPositions',
    value: function getVertexPositions() {
      var vertexPositions = this.vertices.map(function (vertex) {
        var vertexPosition = vertex.slice(); ///

        return vertexPosition;
      });

      return vertexPositions;
    }
  }, {
    key: 'getVertexNormals',
    value: function getVertexNormals() {
      var vertexNormal = normalise3(this.normal),
          vertexNormals = [vertexNormal, vertexNormal, vertexNormal];

      return vertexNormals;
    }
  }, {
    key: 'getVertexIndexes',
    value: function getVertexIndexes(index) {
      ///
      var vertexIndex = index * 3,
          vertexIndexes = [vertexIndex + 0, vertexIndex + 1, vertexIndex + 2];

      return vertexIndexes;
    }
  }, {
    key: 'isTooSmall',
    value: function isTooSmall() {
      var normalLength = length3(this.normal),
          normalLengthApproximatelyEqualToZero = isApproximatelyEqualToZero(normalLength),
          tooSmall = normalLengthApproximatelyEqualToZero; ///

      return tooSmall;
    }
  }, {
    key: 'isMasked',
    value: function isMasked(maskingFacet) {
      var edgesInXYPlane = maskingFacet.getEdgesInXYPlane(),
          midPoint = this.getMidPoint(),
          midPointToOneSideOfEdgesInXYPlane = isMidPointToOneSideOfEdgesInXYPlane(midPoint, edgesInXYPlane),
          masked = midPointToOneSideOfEdgesInXYPlane; ///

      return masked;
    }
  }, {
    key: 'applyTransforms',
    value: function applyTransforms(transforms) {
      this.vertices = this.vertices.map(function (vertex) {
        transforms.forEach(function (transform) {
          vertex = transform(vertex);
        });

        return vertex;
      });

      this.normal = calculateNormal(this.vertices);
    }
  }, {
    key: 'rotate',
    value: function rotate(rotationQuaternion) {
      this.vertices = rotateVertices(this.vertices, rotationQuaternion);

      this.normal = calculateNormal(this.vertices);
    }
  }, {
    key: 'rotateAboutZAxis',
    value: function rotateAboutZAxis(rotationAboutZAxisMatrix) {
      this.vertices = this.vertices.map(function (vertex) {
        vertex = _rotateAboutZAxis(vertex, rotationAboutZAxisMatrix);

        return vertex;
      });

      this.normal = calculateNormal(this.vertices);
    }
  }, {
    key: 'split',
    value: function split(intersections, smallerFacets) {
      var nonNullIntersections = calculateNonNullIntersections(intersections),
          nonNullIntersectionsLength = nonNullIntersections.length;

      switch (nonNullIntersectionsLength) {
        case 2:
          this.splitWithTwoNonNullIntersections(intersections, smallerFacets);
          break;

        case 1:
          this.splitWithOneNonNullIntersection(intersections, smallerFacets);
          break;

        case 0:
          this.splitWithZeroNonNullIntersections(intersections, smallerFacets);
          break;
      }
    }
  }, {
    key: 'splitWithTwoNonNullIntersections',
    value: function splitWithTwoNonNullIntersections(intersections, smallerFacets, facet) {
      var nullIntersectionIndex = calculateNullIntersectionIndex(intersections),
          places = (VERTICES_LENGTH - nullIntersectionIndex) % VERTICES_LENGTH;

      intersections = permute(intersections, places);

      intersections = intersections.slice(1); ///

      this.vertices = permute(this.vertices, places);

      var firstVertex = first(this.vertices),
          secondVertex = second(this.vertices),
          thirdVertex = third(this.vertices),
          firstIntersection = first(intersections),
          secondIntersection = second(intersections),
          firstIntermediateVertex = calculateIntermediateVertex(secondVertex, thirdVertex, firstIntersection),
          secondIntermediateVertex = calculateIntermediateVertex(thirdVertex, firstVertex, secondIntersection),
          firstVertices = [firstVertex, secondVertex, firstIntermediateVertex],
          secondVertices = [firstIntermediateVertex, secondIntermediateVertex, firstVertex],
          thirdVertices = [firstIntermediateVertex, thirdVertex, secondIntermediateVertex],
          firstFacet = facet.fromVertices(firstVertices),
          secondFacet = facet.fromVertices(secondVertices),
          thirdFacet = facet.fromVertices(thirdVertices),
          firstFacetTooSmall = firstFacet.isTooSmall(),
          secondFacetTooSmall = secondFacet.isTooSmall(),
          thirdFacetTooSmall = thirdFacet.isTooSmall();

      if (!firstFacetTooSmall) {
        smallerFacets.push(firstFacet);
      }

      if (!secondFacetTooSmall) {
        smallerFacets.push(secondFacet);
      }

      if (!thirdFacetTooSmall) {
        smallerFacets.push(thirdFacet);
      }
    }
  }, {
    key: 'splitWithOneNonNullIntersection',
    value: function splitWithOneNonNullIntersection(intersections, smallerFacets, facet) {
      var nonNullIntersectionIndex = calculateNonNullIntersectionIndex(intersections),
          places = (VERTICES_LENGTH - nonNullIntersectionIndex) % VERTICES_LENGTH;

      intersections = permute(intersections, places);

      this.vertices = permute(this.vertices, places);

      var firstVertex = first(this.vertices),
          secondVertex = second(this.vertices),
          thirdVertex = third(this.vertices),
          firstIntersection = first(intersections),
          intermediateVertex = calculateIntermediateVertex(firstVertex, secondVertex, firstIntersection),
          firstVertices = [firstVertex, intermediateVertex, thirdVertex],
          secondVertices = [intermediateVertex, secondVertex, thirdVertex],
          firstFacet = facet.fromVertices(firstVertices),
          secondFacet = facet.fromVertices(secondVertices),
          firstFacetTooSmall = firstFacet.isTooSmall(),
          secondFacetTooSmall = secondFacet.isTooSmall();

      if (!firstFacetTooSmall) {
        smallerFacets.push(firstFacet);
      }

      if (!secondFacetTooSmall) {
        smallerFacets.push(secondFacet);
      }
    }
  }, {
    key: 'splitWithZeroNonNullIntersections',
    value: function splitWithZeroNonNullIntersections(intersections, smallerFacets) {
      var smallerFacet = this; ///

      smallerFacets.push(smallerFacet);
    }
  }, {
    key: 'calculateIntersectionsWithVerticalLineInXYPlane',
    value: function calculateIntersectionsWithVerticalLineInXYPlane(verticalLineInXYPlane) {
      var edges = this.getEdges(),
          intersections = edges.map(function (edge) {
        var intersection = edge.calculateIntersectionWithVerticalLineInXYPlane(verticalLineInXYPlane);

        return intersection;
      });

      return intersections;
    }
  }]);

  return Facet;
}();

module.exports = Facet;

function calculateIntermediateVertex(startVertex, endVertex, intersection) {
  var direction = subtract3(endVertex, startVertex),
      offset = scale3(direction, intersection),
      intermediateVertex = add3(startVertex, offset);

  return intermediateVertex;
}

function calculateNonNullIntersections(intersections) {
  var nonNullIntersections = intersections.reduce(function (nonNullIntersections, intersection) {
    if (intersection !== null) {
      var nonNullIntersection = intersection; ///

      nonNullIntersections.push(nonNullIntersection);
    }

    return nonNullIntersections;
  }, []);

  return nonNullIntersections;
}

function calculateNullIntersectionIndex(intersections) {
  var nullIntersectionIndex = intersections.reduce(function (nullIntersectionIndex, intersection, index) {
    if (nullIntersectionIndex === null) {
      if (intersection === null) {
        nullIntersectionIndex = index;
      }
    }

    return nullIntersectionIndex;
  }, null);

  return nullIntersectionIndex;
}

function calculateNonNullIntersectionIndex(intersections) {
  var nullIntersectionIndex = intersections.reduce(function (nullIntersectionIndex, intersection, index) {
    if (nullIntersectionIndex === null) {
      if (intersection !== null) {
        nullIntersectionIndex = index;
      }
    }

    return nullIntersectionIndex;
  }, null);

  return nullIntersectionIndex;
}

function isMidPointToOneSideOfEdgesInXYPlane(midPoint, edgesInXYPlane) {
  var midPointToTheLeftOfEdgesInXYPlane = isMidPointToTheLeftOfEdgesInXYPlane(midPoint, edgesInXYPlane),
      midPointToTheRightOfEdgesInXYPlane = isMidPointToTheRightOfEdgesInXYPlane(midPoint, edgesInXYPlane),
      midPointToOneSideOfEdgesInXYPlane = midPointToTheLeftOfEdgesInXYPlane || midPointToTheRightOfEdgesInXYPlane; ///

  return midPointToOneSideOfEdgesInXYPlane;
}

function isMidPointToTheLeftOfEdgesInXYPlane(midPoint, edgesInXYPlane) {
  var midPointToTheLeftOfEdgesInXYPlane = edgesInXYPlane.reduce(function (midPointToTheLeftOfEdgesInXYPlane, edgeInXYPlane) {
    if (midPointToTheLeftOfEdgesInXYPlane) {
      var midPointToTheLeftOfEdgeInXYPlane = edgeInXYPlane.isMidPointToTheLeft(midPoint);

      midPointToTheLeftOfEdgesInXYPlane = midPointToTheLeftOfEdgeInXYPlane;
    }

    return midPointToTheLeftOfEdgesInXYPlane;
  }, true);

  return midPointToTheLeftOfEdgesInXYPlane;
}

function isMidPointToTheRightOfEdgesInXYPlane(midPoint, edgesInXYPlane) {
  var midPointToTheRightOfEdgesInXYPlane = edgesInXYPlane.reduce(function (midPointToTheRightOfEdgesInXYPlane, edgeInXYPlane) {
    if (midPointToTheRightOfEdgesInXYPlane) {
      var midPointToTheRightOfEdgeInXYPlane = edgeInXYPlane.isMidPointToTheRight(midPoint);

      midPointToTheRightOfEdgesInXYPlane = midPointToTheRightOfEdgeInXYPlane;
    }

    return midPointToTheRightOfEdgesInXYPlane;
  }, true);

  return midPointToTheRightOfEdgesInXYPlane;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9mYWNldC5qcyJdLCJuYW1lcyI6WyJFZGdlIiwicmVxdWlyZSIsImNvbnN0YW50cyIsImFycmF5VXRpbGl0aWVzIiwidmVjdG9yVXRpbGl0aWVzIiwidmVydGV4VXRpbGl0aWVzIiwidmVydGljZXNVdGlsaXRpZXMiLCJhcHByb3hpbWF0ZVV0aWxpdGllcyIsIlZFUlRJQ0VTX0xFTkdUSCIsInJvdGF0ZUFib3V0WkF4aXMiLCJpc0FwcHJveGltYXRlbHlFcXVhbFRvWmVybyIsImZpcnN0Iiwic2Vjb25kIiwidGhpcmQiLCJwZXJtdXRlIiwiY2FsY3VsYXRlTm9ybWFsIiwicm90YXRlVmVydGljZXMiLCJhZGQzIiwic3VidHJhY3QzIiwic2NhbGUzIiwibGVuZ3RoMyIsIm5vcm1hbGlzZTMiLCJGYWNldCIsInZlcnRpY2VzIiwibm9ybWFsIiwiZWRnZXMiLCJtYXAiLCJ2ZXJ0ZXgiLCJpbmRleCIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsInN0YXJ0VmVydGV4IiwiZW5kVmVydGV4IiwiZWRnZSIsImZyb21WZXJ0aWNlcyIsImJpbmQiLCJtaWRQb2ludCIsInJlZHVjZSIsInNjYWxlZFZlcnRleCIsInZlcnRleFBvc2l0aW9ucyIsInZlcnRleFBvc2l0aW9uIiwic2xpY2UiLCJ2ZXJ0ZXhOb3JtYWwiLCJ2ZXJ0ZXhOb3JtYWxzIiwidmVydGV4SW5kZXgiLCJ2ZXJ0ZXhJbmRleGVzIiwibm9ybWFsTGVuZ3RoIiwibm9ybWFsTGVuZ3RoQXBwcm94aW1hdGVseUVxdWFsVG9aZXJvIiwidG9vU21hbGwiLCJtYXNraW5nRmFjZXQiLCJlZGdlc0luWFlQbGFuZSIsImdldEVkZ2VzSW5YWVBsYW5lIiwiZ2V0TWlkUG9pbnQiLCJtaWRQb2ludFRvT25lU2lkZU9mRWRnZXNJblhZUGxhbmUiLCJpc01pZFBvaW50VG9PbmVTaWRlT2ZFZGdlc0luWFlQbGFuZSIsIm1hc2tlZCIsInRyYW5zZm9ybXMiLCJmb3JFYWNoIiwidHJhbnNmb3JtIiwicm90YXRpb25RdWF0ZXJuaW9uIiwicm90YXRpb25BYm91dFpBeGlzTWF0cml4IiwiaW50ZXJzZWN0aW9ucyIsInNtYWxsZXJGYWNldHMiLCJub25OdWxsSW50ZXJzZWN0aW9ucyIsImNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25zIiwibm9uTnVsbEludGVyc2VjdGlvbnNMZW5ndGgiLCJsZW5ndGgiLCJzcGxpdFdpdGhUd29Ob25OdWxsSW50ZXJzZWN0aW9ucyIsInNwbGl0V2l0aE9uZU5vbk51bGxJbnRlcnNlY3Rpb24iLCJzcGxpdFdpdGhaZXJvTm9uTnVsbEludGVyc2VjdGlvbnMiLCJmYWNldCIsIm51bGxJbnRlcnNlY3Rpb25JbmRleCIsImNhbGN1bGF0ZU51bGxJbnRlcnNlY3Rpb25JbmRleCIsInBsYWNlcyIsImZpcnN0VmVydGV4Iiwic2Vjb25kVmVydGV4IiwidGhpcmRWZXJ0ZXgiLCJmaXJzdEludGVyc2VjdGlvbiIsInNlY29uZEludGVyc2VjdGlvbiIsImZpcnN0SW50ZXJtZWRpYXRlVmVydGV4IiwiY2FsY3VsYXRlSW50ZXJtZWRpYXRlVmVydGV4Iiwic2Vjb25kSW50ZXJtZWRpYXRlVmVydGV4IiwiZmlyc3RWZXJ0aWNlcyIsInNlY29uZFZlcnRpY2VzIiwidGhpcmRWZXJ0aWNlcyIsImZpcnN0RmFjZXQiLCJzZWNvbmRGYWNldCIsInRoaXJkRmFjZXQiLCJmaXJzdEZhY2V0VG9vU21hbGwiLCJpc1Rvb1NtYWxsIiwic2Vjb25kRmFjZXRUb29TbWFsbCIsInRoaXJkRmFjZXRUb29TbWFsbCIsInB1c2giLCJub25OdWxsSW50ZXJzZWN0aW9uSW5kZXgiLCJjYWxjdWxhdGVOb25OdWxsSW50ZXJzZWN0aW9uSW5kZXgiLCJpbnRlcm1lZGlhdGVWZXJ0ZXgiLCJzbWFsbGVyRmFjZXQiLCJ2ZXJ0aWNhbExpbmVJblhZUGxhbmUiLCJnZXRFZGdlcyIsImludGVyc2VjdGlvbiIsImNhbGN1bGF0ZUludGVyc2VjdGlvbldpdGhWZXJ0aWNhbExpbmVJblhZUGxhbmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGlyZWN0aW9uIiwib2Zmc2V0Iiwibm9uTnVsbEludGVyc2VjdGlvbiIsIm1pZFBvaW50VG9UaGVMZWZ0T2ZFZGdlc0luWFlQbGFuZSIsImlzTWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VzSW5YWVBsYW5lIiwibWlkUG9pbnRUb1RoZVJpZ2h0T2ZFZGdlc0luWFlQbGFuZSIsImlzTWlkUG9pbnRUb1RoZVJpZ2h0T2ZFZGdlc0luWFlQbGFuZSIsImVkZ2VJblhZUGxhbmUiLCJtaWRQb2ludFRvVGhlTGVmdE9mRWRnZUluWFlQbGFuZSIsImlzTWlkUG9pbnRUb1RoZUxlZnQiLCJtaWRQb2ludFRvVGhlUmlnaHRPZkVkZ2VJblhZUGxhbmUiLCJpc01pZFBvaW50VG9UaGVSaWdodCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLE9BQU9DLFFBQVEsUUFBUixDQUFiO0FBQUEsSUFDTUMsWUFBWUQsUUFBUSxhQUFSLENBRGxCO0FBQUEsSUFFTUUsaUJBQWlCRixRQUFRLG1CQUFSLENBRnZCO0FBQUEsSUFHTUcsa0JBQWtCSCxRQUFRLG9CQUFSLENBSHhCO0FBQUEsSUFJTUksa0JBQWtCSixRQUFRLG9CQUFSLENBSnhCO0FBQUEsSUFLTUssb0JBQW9CTCxRQUFRLHNCQUFSLENBTDFCO0FBQUEsSUFNTU0sdUJBQXVCTixRQUFRLHlCQUFSLENBTjdCOztBQVFNLElBQUVPLGVBQUYsR0FBc0JOLFNBQXRCLENBQUVNLGVBQUY7QUFBQSxJQUNFQyxpQkFERixHQUN1QkosZUFEdkIsQ0FDRUksZ0JBREY7QUFBQSxJQUVFQywwQkFGRixHQUVpQ0gsb0JBRmpDLENBRUVHLDBCQUZGO0FBQUEsSUFHRUMsS0FIRixHQUdvQ1IsY0FIcEMsQ0FHRVEsS0FIRjtBQUFBLElBR1NDLE1BSFQsR0FHb0NULGNBSHBDLENBR1NTLE1BSFQ7QUFBQSxJQUdpQkMsS0FIakIsR0FHb0NWLGNBSHBDLENBR2lCVSxLQUhqQjtBQUFBLElBR3dCQyxPQUh4QixHQUdvQ1gsY0FIcEMsQ0FHd0JXLE9BSHhCO0FBQUEsSUFJRUMsZUFK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QztBQUN0QyxVQUFNSyxvQ0FBb0NILGNBQWNJLG9CQUFkLENBQW1DOUUsUUFBbkMsQ0FBMUM7O0FBRUF3RSwyQ0FBcUNLLGlDQUFyQztBQUNEOztBQUVELFdBQU9MLGtDQUFQO0FBQ0QsR0FSMEMsRUFReEMsSUFSd0MsQ0FBM0M7O0FBVUEsU0FBT0Esa0NBQVA7QUFDRCIsImZpbGUiOiJmYWNldC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRWRnZSA9IHJlcXVpcmUoJy4vZWRnZScpLFxuICAgICAgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIHZlY3RvclV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL3ZlY3RvcicpLFxuICAgICAgdmVydGV4VXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvdmVydGV4JyksXG4gICAgICB2ZXJ0aWNlc1V0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL3ZlcnRpY2VzJyksXG4gICAgICBhcHByb3hpbWF0ZVV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL2FwcHJveGltYXRlJyk7XG5cbmNvbnN0IHsgVkVSVElDRVNfTEVOR1RIIH0gPSBjb25zdGFudHMsXG4gICAgICB7IHJvdGF0ZUFib3V0WkF4aXMgfSA9IHZlcnRleFV0aWxpdGllcyxcbiAgICAgIHsgaXNBcHByb3hpbWF0ZWx5RXF1YWxUb1plcm8gfSA9IGFwcHJveGltYXRlVXRpbGl0aWVzLFxuICAgICAgeyBmaXJzdCwgc2Vjb25kLCB0aGlyZCwgcGVybXV0ZSB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGNhbGN1bGF0ZU5vcm1hbCwgcm90YXRlVmVydGljZXMgfSA9IHZlcnRpY2VzVXRpbGl0aWVzLFxuICAgICAgeyBhZGQzLCBzdWJ0cmFjdDMsIHNjYWxlMywgbGVuZ3RoMywgbm9ybWFsaXNlMyB9ID0gdmVjdG9yVXRpbGl0aWVzO1xuXG5jbGFzcyBGYWNldCB7XG4gIGNvbnN0cnVjdG9yKHZlcnRpY2VzLCBub3JtYWwpIHtcbiAgICB0aGlzLnZlcnRpY2VzID0gdmVydGljZXM7XG4gICAgdGhpcy5ub3JtYWwgPSBub3JtYWw7XG4gIH1cblxuICBnZXRWZXJ0aWNlcygpIHtcbiAgICByZXR1cm4gdGhpcy52ZXJ0aWNlcztcbiAgfVxuXG4gIGdldE5vcm1hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub3JtYWw7XG4gIH1cblxuICBnZXRFZGdlcygpIHtcbiAgICBjb25zdCBlZGdlcyA9IHRoaXMudmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleCxcbiAgICAgICAgICAgICAgICAgIGVuZEluZGV4ID0gKHN0YXJ0SW5kZXggKyAxKSAlIFZFUlRJQ0VTX0xFTkdUSCxcbiAgICAgICAgICAgICAgICAgIHN0YXJ0VmVydGV4ID0gdGhpcy52ZXJ0aWNlc1tzdGFydEluZGV4XSxcbiAgICAgICAgICAgICAgICAgIGVuZFZlcnRleCA9IHRoaXMudmVydGljZXNbZW5kSW5kZXhdLFxuICAgICAgICAgICAgICAgICAgZWRnZSA9IEVkZ2UuZnJvbVZlcnRpY2VzKHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgpO1xuICBcbiAgICAgICAgICAgIHJldHVybiBlZGdlO1xuICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICByZXR1cm4gZWRnZXM7XG4gIH1cbiAgXG4gIGdldE1pZFBvaW50KCkge1xuICAgIGNvbnN0IG1pZFBvaW50ID0gdGhpcy52ZXJ0aWNlcy5yZWR1Y2UoZnVuY3Rpb24obWlkUG9pbnQsIHZlcnRleCkge1xuICAgICAgY29uc3Qgc2NhbGVkVmVydGV4ID0gc2NhbGUzKHZlcnRleCwgMS8zKTtcbiAgICAgIFxuICAgICAgbWlkUG9pbnQgPSBhZGQzKG1pZFBvaW50LCBzY2FsZWRWZXJ0ZXgpO1xuICAgICAgXG4gICAgICByZXR1cm4gbWlkUG9pbnQ7XG4gICAgfSwgWyAwLCAwLCAwIF0pO1xuICAgIFxuICAgIHJldHVybiBtaWRQb2ludDtcbiAgfVxuICBcbiAgZ2V0VmVydGV4UG9zaXRpb25zKCkge1xuICAgIGNvbnN0IHZlcnRleFBvc2l0aW9ucyA9IHRoaXMudmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgY29uc3QgdmVydGV4UG9zaXRpb24gPSB2ZXJ0ZXguc2xpY2UoKTsgLy8vXG4gICAgICBcbiAgICAgIHJldHVybiB2ZXJ0ZXhQb3NpdGlvbjtcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gdmVydGV4UG9zaXRpb25zO1xuICB9XG4gIFxuICBnZXRWZXJ0ZXhOb3JtYWxzKCkge1xuICAgIGNvbnN0IHZlcnRleE5vcm1hbCA9IG5vcm1hbGlzZTModGhpcy5ub3JtYWwpLFxuICAgICAgICAgIHZlcnRleE5vcm1hbHMgPSBbXG4gICAgICAgICAgICB2ZXJ0ZXhOb3JtYWwsXG4gICAgICAgICAgICB2ZXJ0ZXhOb3JtYWwsXG4gICAgICAgICAgICB2ZXJ0ZXhOb3JtYWwsXG4gICAgICAgICAgXTtcbiAgICBcbiAgICByZXR1cm4gdmVydGV4Tm9ybWFscztcbiAgfVxuICBcbiAgZ2V0VmVydGV4SW5kZXhlcyhpbmRleCkgeyAvLy9cbiAgICBjb25zdCB2ZXJ0ZXhJbmRleCA9IGluZGV4ICogMyxcbiAgICAgICAgICB2ZXJ0ZXhJbmRleGVzID0gW1xuICAgICAgICAgICAgdmVydGV4SW5kZXggKyAwLFxuICAgICAgICAgICAgdmVydGV4SW5kZXggKyAxLFxuICAgICAgICAgICAgdmVydGV4SW5kZXggKyAyLFxuICAgICAgICAgIF07XG4gICAgXG4gICAgcmV0dXJuIHZlcnRleEluZGV4ZXM7XG4gIH1cbiAgXG4gIGlzVG9vU21hbGwoKSB7XG4gICAgY29uc3Qgbm9ybWFsTGVuZ3RoID0gbGVuZ3RoMyh0aGlzLm5vcm1hbCksXG4gICAgICAgICAgbm9ybWFsTGVuZ3RoQXBwcm94aW1hdGVseUVxdWFsVG9aZXJvID0gaXNBcHByb3hpbWF0ZWx5RXF1YWxUb1plcm8obm9ybWFsTGVuZ3RoKSxcbiAgICAgICAgICB0b29TbWFsbCA9IG5vcm1hbExlbmd0aEFwcHJveGltYXRlbHlFcXVhbFRvWmVybzsgIC8vL1xuICAgIFxuICAgIHJldHVybiB0b29TbWFsbDtcbiAgfVxuICBcbiAgaXNNYXNrZWQobWFza2luZ0ZhY2V0KSB7XG4gICAgY29uc3QgZWRnZXNJblhZUGxhbmUgPSBtYXNraW5nRmFjZXQuZ2V0RWRnZXNJblhZUGxhbmUoKSxcbiAgICAgICAgICBtaWRQb2ludCA9IHRoaXMuZ2V0TWlkUG9pbnQoKSxcbiAgICAgICAgICBtaWRQb2ludFRvT25lU2lkZU9mRWRnZXNJblhZUGxhbmUgPSBpc01pZFBvaW50VG9PbmVTaWRlT2ZFZGdlc0luWFlQbGFuZShtaWRQb2ludCwgZWRnZXNJblhZUGxhbmUpLFxuICAgICAgICAgIG1hc2tlZCA9IG1pZFBvaW50VG9PbmVTaWRlT2ZFZGdlc0luWFlQbGFuZTsgIC8vL1xuICAgIFxuICAgIHJldHVybiBtYXNrZWQ7XG4gIH1cbiAgXG4gIGFwcGx5VHJhbnNmb3Jtcyh0cmFuc2Zvcm1zKSB7XG4gICAgdGhpcy52ZXJ0aWNlcyA9IHRoaXMudmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgdHJhbnNmb3Jtcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zZm9ybSkge1xuICAgICAgICB2ZXJ0ZXggPSB0cmFuc2Zvcm0odmVydGV4KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdmVydGV4O1xuICAgIH0pO1xuXG4gICAgdGhpcy5ub3JtYWwgPSBjYWxjdWxhdGVOb3JtYWwodGhpcy52ZXJ0aWNlcyk7XG4gIH1cbiAgXG4gIHJvdGF0ZShyb3RhdGlvblF1YXRlcm5pb24pIHtcbiAgICB0aGlzLnZlcnRpY2VzID0gcm90YXRlVmVydGljZXModGhpcy52ZXJ0aWNlcywgcm90YXRpb25RdWF0ZXJuaW9uKTtcbiAgICBcbiAgICB0aGlzLm5vcm1hbCA9IGNhbGN1bGF0ZU5vcm1hbCh0aGlzLnZlcnRpY2VzKTtcbiAgfVxuXG4gIHJvdGF0ZUFib3V0WkF4aXMocm90YXRpb25BYm91dFpBeGlzTWF0cml4KSB7XG4gICAgdGhpcy52ZXJ0aWNlcyA9IHRoaXMudmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgdmVydGV4ID0gcm90YXRlQWJvdXRaQXhpcyh2ZXJ0ZXgsIHJvdGF0aW9uQWJvdXRaQXhpc01hdHJpeCk7XG5cbiAgICAgIHJldHVybiB2ZXJ0ZXg7XG4gICAgfSk7XG5cbiAgICB0aGlzLm5vcm1hbCA9IGNhbGN1bGF0ZU5vcm1hbCh0aGlzLnZlcnRpY2VzKTtcbiAgfVxuICBcbiAgc3BsaXQoaW50ZXJzZWN0aW9ucywgc21hbGxlckZhY2V0cykge1xuICAgIGNvbnN0IG5vbk51bGxJbnRlcnNlY3Rpb25zID0gY2FsY3VsYXRlTm9uTnVsbEludGVyc2VjdGlvbnMoaW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgbm9uTnVsbEludGVyc2VjdGlvbnNMZW5ndGggPSBub25OdWxsSW50ZXJzZWN0aW9ucy5sZW5ndGg7XG5cbiAgICBzd2l0Y2ggKG5vbk51bGxJbnRlcnNlY3Rpb25zTGVuZ3RoKSB7XG4gICAgICBjYXNlIDIgOlxuICAgICAgICB0aGlzLnNwbGl0V2l0aFR3b05vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAxIDpcbiAgICAgICAgdGhpcy5zcGxpdFdpdGhPbmVOb25OdWxsSW50ZXJzZWN0aW9uKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAwIDpcbiAgICAgICAgdGhpcy5zcGxpdFdpdGhaZXJvTm9uTnVsbEludGVyc2VjdGlvbnMoaW50ZXJzZWN0aW9ucywgc21hbGxlckZhY2V0cyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHNwbGl0V2l0aFR3b05vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMsIGZhY2V0KSB7XG4gICAgY29uc3QgbnVsbEludGVyc2VjdGlvbkluZGV4ID0gY2FsY3VsYXRlTnVsbEludGVyc2VjdGlvbkluZGV4KGludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIHBsYWNlcyA9IChWRVJUSUNFU19MRU5HVEggLSBudWxsSW50ZXJzZWN0aW9uSW5kZXgpICUgVkVSVElDRVNfTEVOR1RIO1xuXG4gICAgaW50ZXJzZWN0aW9ucyA9IHBlcm11dGUoaW50ZXJzZWN0aW9ucywgcGxhY2VzKTtcblxuICAgIGludGVyc2VjdGlvbnMgPSBpbnRlcnNlY3Rpb25zLnNsaWNlKDEpOyAvLy9cblxuICAgIHRoaXMudmVydGljZXMgPSBwZXJtdXRlKHRoaXMudmVydGljZXMsIHBsYWNlcyk7XG5cbiAgICBjb25zdCBmaXJzdFZlcnRleCA9IGZpcnN0KHRoaXMudmVydGljZXMpLFxuICAgICAgICAgIHNlY29uZFZlcnRleCA9IHNlY29uZCh0aGlzLnZlcnRpY2VzKSxcbiAgICAgICAgICB0aGlyZFZlcnRleCA9IHRoaXJkKHRoaXMudmVydGljZXMpLFxuICAgICAgICAgIGZpcnN0SW50ZXJzZWN0aW9uID0gZmlyc3QoaW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgc2Vjb25kSW50ZXJzZWN0aW9uID0gc2Vjb25kKGludGVyc2VjdGlvbnMpLFxuICAgICAgICAgIGZpcnN0SW50ZXJtZWRpYXRlVmVydGV4ID0gY2FsY3VsYXRlSW50ZXJtZWRpYXRlVmVydGV4KHNlY29uZFZlcnRleCwgdGhpcmRWZXJ0ZXgsIGZpcnN0SW50ZXJzZWN0aW9uKSxcbiAgICAgICAgICBzZWNvbmRJbnRlcm1lZGlhdGVWZXJ0ZXggPSBjYWxjdWxhdGVJbnRlcm1lZGlhdGVWZXJ0ZXgodGhpcmRWZXJ0ZXgsIGZpcnN0VmVydGV4LCBzZWNvbmRJbnRlcnNlY3Rpb24pLFxuICAgICAgICAgIGZpcnN0VmVydGljZXMgPSBbXG4gICAgICAgICAgICBmaXJzdFZlcnRleCxcbiAgICAgICAgICAgIHNlY29uZFZlcnRleCxcbiAgICAgICAgICAgIGZpcnN0SW50ZXJtZWRpYXRlVmVydGV4XG4gICAgICAgICAgXSxcbiAgICAgICAgICBzZWNvbmRWZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgIGZpcnN0SW50ZXJtZWRpYXRlVmVydGV4LFxuICAgICAgICAgICAgc2Vjb25kSW50ZXJtZWRpYXRlVmVydGV4LFxuICAgICAgICAgICAgZmlyc3RWZXJ0ZXhcbiAgICAgICAgICBdLFxuICAgICAgICAgIHRoaXJkVmVydGljZXMgPSBbXG4gICAgICAgICAgICBmaXJzdEludGVybWVkaWF0ZVZlcnRleCxcbiAgICAgICAgICAgIHRoaXJkVmVydGV4LFxuICAgICAgICAgICAgc2Vjb25kSW50ZXJtZWRpYXRlVmVydGV4XG4gICAgICAgICAgXSxcbiAgICAgICAgICBmaXJzdEZhY2V0ID0gZmFjZXQuZnJvbVZlcnRpY2VzKGZpcnN0VmVydGljZXMpLFxuICAgICAgICAgIHNlY29uZEZhY2V0ID0gZmFjZXQuZnJvbVZlcnRpY2VzKHNlY29uZFZlcnRpY2VzKSxcbiAgICAgICAgICB0aGlyZEZhY2V0ID0gZmFjZXQuZnJvbVZlcnRpY2VzKHRoaXJkVmVydGljZXMpLFxuICAgICAgICAgIGZpcnN0RmFjZXRUb29TbWFsbCA9IGZpcnN0RmFjZXQuaXNUb29TbWFsbCgpLFxuICAgICAgICAgIHNlY29uZEZhY2V0VG9vU21hbGwgPSBzZWNvbmRGYWNldC5pc1Rvb1NtYWxsKCksXG4gICAgICAgICAgdGhpcmRGYWNldFRvb1NtYWxsID0gdGhpcmRGYWNldC5pc1Rvb1NtYWxsKCk7XG5cbiAgICBpZiAoIWZpcnN0RmFjZXRUb29TbWFsbCkge1xuICAgICAgc21hbGxlckZhY2V0cy5wdXNoKGZpcnN0RmFjZXQpO1xuICAgIH1cblxuICAgIGlmICghc2Vjb25kRmFjZXRUb29TbWFsbCkge1xuICAgICAgc21hbGxlckZhY2V0cy5wdXNoKHNlY29uZEZhY2V0KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXJkRmFjZXRUb29TbWFsbCkge1xuICAgICAgc21hbGxlckZhY2V0cy5wdXNoKHRoaXJkRmFjZXQpO1xuICAgIH1cbiAgfVxuXG4gIHNwbGl0V2l0aE9uZU5vbk51bGxJbnRlcnNlY3Rpb24oaW50ZXJzZWN0aW9ucywgc21hbGxlckZhY2V0cywgZmFjZXQpIHtcbiAgICBjb25zdCBub25OdWxsSW50ZXJzZWN0aW9uSW5kZXggPSBjYWxjdWxhdGVOb25OdWxsSW50ZXJzZWN0aW9uSW5kZXgoaW50ZXJzZWN0aW9ucyksXG4gICAgICAgICAgcGxhY2VzID0gKFZFUlRJQ0VTX0xFTkdUSCAtIG5vbk51bGxJbnRlcnNlY3Rpb25JbmRleCkgJSBWRVJUSUNFU19MRU5HVEg7XG5cbiAgICBpbnRlcnNlY3Rpb25zID0gcGVybXV0ZShpbnRlcnNlY3Rpb25zLCBwbGFjZXMpO1xuXG4gICAgdGhpcy52ZXJ0aWNlcyA9IHBlcm11dGUodGhpcy52ZXJ0aWNlcywgcGxhY2VzKTtcblxuICAgIGNvbnN0IGZpcnN0VmVydGV4ID0gZmlyc3QodGhpcy52ZXJ0aWNlcyksXG4gICAgICAgICAgc2Vjb25kVmVydGV4ID0gc2Vjb25kKHRoaXMudmVydGljZXMpLFxuICAgICAgICAgIHRoaXJkVmVydGV4ID0gdGhpcmQodGhpcy52ZXJ0aWNlcyksXG4gICAgICAgICAgZmlyc3RJbnRlcnNlY3Rpb24gPSBmaXJzdChpbnRlcnNlY3Rpb25zKSxcbiAgICAgICAgICBpbnRlcm1lZGlhdGVWZXJ0ZXggPSBjYWxjdWxhdGVJbnRlcm1lZGlhdGVWZXJ0ZXgoZmlyc3RWZXJ0ZXgsIHNlY29uZFZlcnRleCwgZmlyc3RJbnRlcnNlY3Rpb24pLFxuICAgICAgICAgIGZpcnN0VmVydGljZXMgPSBbXG4gICAgICAgICAgICBmaXJzdFZlcnRleCxcbiAgICAgICAgICAgIGludGVybWVkaWF0ZVZlcnRleCxcbiAgICAgICAgICAgIHRoaXJkVmVydGV4XG4gICAgICAgICAgXSxcbiAgICAgICAgICBzZWNvbmRWZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgIGludGVybWVkaWF0ZVZlcnRleCxcbiAgICAgICAgICAgIHNlY29uZFZlcnRleCxcbiAgICAgICAgICAgIHRoaXJkVmVydGV4XG4gICAgICAgICAgXSxcbiAgICAgICAgICBmaXJzdEZhY2V0ID0gZmFjZXQuZnJvbVZlcnRpY2VzKGZpcnN0VmVydGljZXMpLFxuICAgICAgICAgIHNlY29uZEZhY2V0ID0gZmFjZXQuZnJvbVZlcnRpY2VzKHNlY29uZFZlcnRpY2VzKSxcbiAgICAgICAgICBmaXJzdEZhY2V0VG9vU21hbGwgPSBmaXJzdEZhY2V0LmlzVG9vU21hbGwoKSxcbiAgICAgICAgICBzZWNvbmRGYWNldFRvb1NtYWxsID0gc2Vjb25kRmFjZXQuaXNUb29TbWFsbCgpO1xuXG4gICAgaWYgKCFmaXJzdEZhY2V0VG9vU21hbGwpIHtcbiAgICAgIHNtYWxsZXJGYWNldHMucHVzaChmaXJzdEZhY2V0KTtcbiAgICB9XG5cbiAgICBpZiAoIXNlY29uZEZhY2V0VG9vU21hbGwpIHtcbiAgICAgIHNtYWxsZXJGYWNldHMucHVzaChzZWNvbmRGYWNldCk7XG4gICAgfVxuICB9XG5cbiAgc3BsaXRXaXRoWmVyb05vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMsIHNtYWxsZXJGYWNldHMpIHtcbiAgICBjb25zdCBzbWFsbGVyRmFjZXQgPSB0aGlzOyAgLy8vXG5cbiAgICBzbWFsbGVyRmFjZXRzLnB1c2goc21hbGxlckZhY2V0KTtcbiAgfVxuXG4gIGNhbGN1bGF0ZUludGVyc2VjdGlvbnNXaXRoVmVydGljYWxMaW5lSW5YWVBsYW5lKHZlcnRpY2FsTGluZUluWFlQbGFuZSkge1xuICAgIGNvbnN0IGVkZ2VzID0gdGhpcy5nZXRFZGdlcygpLFxuICAgICAgICAgIGludGVyc2VjdGlvbnMgPSBlZGdlcy5tYXAoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uID0gZWRnZS5jYWxjdWxhdGVJbnRlcnNlY3Rpb25XaXRoVmVydGljYWxMaW5lSW5YWVBsYW5lKHZlcnRpY2FsTGluZUluWFlQbGFuZSk7XG4gIFxuICAgICAgICAgICAgcmV0dXJuIGludGVyc2VjdGlvbjtcbiAgICAgICAgICB9KTtcblxuICAgIHJldHVybiBpbnRlcnNlY3Rpb25zO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRmFjZXQ7XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUludGVybWVkaWF0ZVZlcnRleChzdGFydFZlcnRleCwgZW5kVmVydGV4LCBpbnRlcnNlY3Rpb24pIHtcbiAgY29uc3QgZGlyZWN0aW9uID0gc3VidHJhY3QzKGVuZFZlcnRleCwgc3RhcnRWZXJ0ZXgpLFxuICAgICAgICBvZmZzZXQgPSBzY2FsZTMoZGlyZWN0aW9uLCBpbnRlcnNlY3Rpb24pLFxuICAgICAgICBpbnRlcm1lZGlhdGVWZXJ0ZXggPSBhZGQzKHN0YXJ0VmVydGV4LCBvZmZzZXQpO1xuXG4gIHJldHVybiBpbnRlcm1lZGlhdGVWZXJ0ZXg7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25zKGludGVyc2VjdGlvbnMpIHtcbiAgY29uc3Qgbm9uTnVsbEludGVyc2VjdGlvbnMgPSBpbnRlcnNlY3Rpb25zLnJlZHVjZShmdW5jdGlvbihub25OdWxsSW50ZXJzZWN0aW9ucywgaW50ZXJzZWN0aW9uKSB7XG4gICAgaWYgKGludGVyc2VjdGlvbiAhPT0gbnVsbCkge1xuICAgICAgY29uc3Qgbm9uTnVsbEludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjsgLy8vXG5cbiAgICAgIG5vbk51bGxJbnRlcnNlY3Rpb25zLnB1c2gobm9uTnVsbEludGVyc2VjdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vbk51bGxJbnRlcnNlY3Rpb25zO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIG5vbk51bGxJbnRlcnNlY3Rpb25zO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVOdWxsSW50ZXJzZWN0aW9uSW5kZXgoaW50ZXJzZWN0aW9ucykge1xuICBjb25zdCBudWxsSW50ZXJzZWN0aW9uSW5kZXggPSBpbnRlcnNlY3Rpb25zLnJlZHVjZShmdW5jdGlvbihudWxsSW50ZXJzZWN0aW9uSW5kZXgsIGludGVyc2VjdGlvbiwgaW5kZXgpIHtcbiAgICBpZiAobnVsbEludGVyc2VjdGlvbkluZGV4ID09PSBudWxsKSB7XG4gICAgICBpZiAoaW50ZXJzZWN0aW9uID09PSBudWxsKSB7XG4gICAgICAgIG51bGxJbnRlcnNlY3Rpb25JbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsSW50ZXJzZWN0aW9uSW5kZXg7XG4gIH0sIG51bGwpO1xuXG4gIHJldHVybiBudWxsSW50ZXJzZWN0aW9uSW5kZXg7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU5vbk51bGxJbnRlcnNlY3Rpb25JbmRleChpbnRlcnNlY3Rpb25zKSB7XG4gIGNvbnN0IG51bGxJbnRlcnNlY3Rpb25JbmRleCA9IGludGVyc2VjdGlvbnMucmVkdWNlKGZ1bmN0aW9uKG51bGxJbnRlcnNlY3Rpb25JbmRleCwgaW50ZXJzZWN0aW9uLCBpbmRleCkge1xuICAgIGlmIChudWxsSW50ZXJzZWN0aW9uSW5kZXggPT09IG51bGwpIHtcbiAgICAgIGlmIChpbnRlcnNlY3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgbnVsbEludGVyc2VjdGlvbkluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxJbnRlcnNlY3Rpb25JbmRleDtcbiAgfSwgbnVsbCk7XG5cbiAgcmV0dXJuIG51bGxJbnRlcnNlY3Rpb25JbmRleDtcbn1cblxuZnVuY3Rpb24gaXNNaWRQb2ludFRvT25lU2lkZU9mRWRnZXNJblhZUGxhbmUobWlkUG9pbnQsIGVkZ2VzSW5YWVBsYW5lKSB7XG4gIGNvbnN0IG1pZFBvaW50VG9UaGVMZWZ0T2ZFZGdlc0luWFlQbGFuZSA9IGlzTWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VzSW5YWVBsYW5lKG1pZFBvaW50LCBlZGdlc0luWFlQbGFuZSksXG4gICAgICAgIG1pZFBvaW50VG9UaGVSaWdodE9mRWRnZXNJblhZUGxhbmUgPSBpc01pZFBvaW50VG9UaGVSaWdodE9mRWRnZXNJblhZUGxhbmUobWlkUG9pbnQsIGVkZ2VzSW5YWVBsYW5lKSxcbiAgICAgICAgbWlkUG9pbnRUb09uZVNpZGVPZkVkZ2VzSW5YWVBsYW5lID0gbWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VzSW5YWVBsYW5lIHx8IG1pZFBvaW50VG9UaGVSaWdodE9mRWRnZXNJblhZUGxhbmU7IC8vL1xuXG4gIHJldHVybiBtaWRQb2ludFRvT25lU2lkZU9mRWRnZXNJblhZUGxhbmU7XG59XG5cbmZ1bmN0aW9uIGlzTWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VzSW5YWVBsYW5lKG1pZFBvaW50LCBlZGdlc0luWFlQbGFuZSkge1xuICBjb25zdCBtaWRQb2ludFRvVGhlTGVmdE9mRWRnZXNJblhZUGxhbmUgPSBlZGdlc0luWFlQbGFuZS5yZWR1Y2UoZnVuY3Rpb24obWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VzSW5YWVBsYW5lLCBlZGdlSW5YWVBsYW5lKSB7XG4gICAgaWYgKG1pZFBvaW50VG9UaGVMZWZ0T2ZFZGdlc0luWFlQbGFuZSkge1xuICAgICAgY29uc3QgbWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VJblhZUGxhbmUgPSBlZGdlSW5YWVBsYW5lLmlzTWlkUG9pbnRUb1RoZUxlZnQobWlkUG9pbnQpO1xuXG4gICAgICBtaWRQb2ludFRvVGhlTGVmdE9mRWRnZXNJblhZUGxhbmUgPSBtaWRQb2ludFRvVGhlTGVmdE9mRWRnZUluWFlQbGFuZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VzSW5YWVBsYW5lO1xuICB9LCB0cnVlKTtcblxuICByZXR1cm4gbWlkUG9pbnRUb1RoZUxlZnRPZkVkZ2VzSW5YWVBsYW5lO1xufVxuXG5mdW5jdGlvbiBpc01pZFBvaW50VG9UaGVSaWdodE9mRWRnZXNJblhZUGxhbmUobWlkUG9pbnQsIGVkZ2VzSW5YWVBsYW5lKSB7XG4gIGNvbnN0IG1pZFBvaW50VG9UaGVSaWdodE9mRWRnZXNJblhZUGxhbmUgPSBlZGdlc0luWFlQbGFuZS5yZWR1Y2UoZnVuY3Rpb24obWlkUG9pbnRUb1RoZVJpZ2h0T2ZFZGdlc0luWFlQbGFuZSwgZWRnZUluWFlQbGFuZSkge1xuICAgIGlmIChtaWRQb2ludFRvVGhlUmlnaHRPZkVkZ2VzSW5YWVBsYW5lKSB7XG4gICAgICBjb25zdCBtaWRQb2ludFRvVGhlUmlnaHRPZkVkZ2VJblhZUGxhbmUgPSBlZGdlSW5YWVBsYW5lLmlzTWlkUG9pbnRUb1RoZVJpZ2h0KG1pZFBvaW50KTtcblxuICAgICAgbWlkUG9pbnRUb1RoZVJpZ2h0T2ZFZGdlc0luWFlQbGFuZSA9IG1pZFBvaW50VG9UaGVSaWdodE9mRWRnZUluWFlQbGFuZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWlkUG9pbnRUb1RoZVJpZ2h0T2ZFZGdlc0luWFlQbGFuZTtcbiAgfSwgdHJ1ZSk7XG5cbiAgcmV0dXJuIG1pZFBvaW50VG9UaGVSaWdodE9mRWRnZXNJblhZUGxhbmU7XG59XG4iXX0=