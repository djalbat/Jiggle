'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Edge = require('../edge'),
    Facet = require('../facet'),
    Vertex = require('../vertex'),
    matrixMaths = require('../maths/matrix'),
    vectorMaths = require('../maths/vector'),
    facetUtilities = require('../utilities/facet'),
    arrayUtilities = require('../utilities/array'),
    imageMapUtilities = require('../utilities/imageMap'),
    rotationUtilities = require('../utilities/rotation'),
    quaternionUtilities = require('../utilities/quaternion');

var rotateVertices = rotationUtilities.rotateVertices,
    invert2 = matrixMaths.invert2,
    invert3 = matrixMaths.invert3,
    getImageDetails = imageMapUtilities.getImageDetails,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    _permute = arrayUtilities.permute,
    calculateRotationQuaternion = quaternionUtilities.calculateRotationQuaternion,
    add2 = vectorMaths.add2,
    multiply2 = vectorMaths.multiply2,
    transform2 = vectorMaths.transform2,
    transform3 = vectorMaths.transform3,
    cloneEdges = facetUtilities.cloneEdges,
    cloneNormal = facetUtilities.cloneNormal,
    cloneVertices = facetUtilities.cloneVertices,
    calculateEdges = facetUtilities.calculateEdges,
    calculateNormal = facetUtilities.calculateNormal;

var TexturedFacet = function (_Facet) {
  _inherits(TexturedFacet, _Facet);

  function TexturedFacet(vertices, normal, edges, imageName, textureCoordinates) {
    _classCallCheck(this, TexturedFacet);

    var _this = _possibleConstructorReturn(this, (TexturedFacet.__proto__ || Object.getPrototypeOf(TexturedFacet)).call(this, vertices, normal, edges));

    _this.imageName = imageName;
    _this.textureCoordinates = textureCoordinates;
    return _this;
  }

  _createClass(TexturedFacet, [{
    key: 'clone',
    value: function clone() {
      var vertices = this.getVertices(),
          normal = this.getNormal(),
          edges = this.getEdges();

      vertices = cloneVertices(vertices);
      normal = cloneNormal(normal);
      edges = cloneEdges(edges);

      var imageName = this.imageName,
          textureCoordinates = cloneTextureCoordinates(this.textureCoordinates),
          texturedFacet = new TexturedFacet(vertices, normal, edges, imageName, textureCoordinates);

      return texturedFacet;
    }
  }, {
    key: 'getImageName',
    value: function getImageName() {
      return this.imageName;
    }
  }, {
    key: 'getTextureCoordinates',
    value: function getTextureCoordinates() {
      return this.textureCoordinates;
    }
  }, {
    key: 'getVertexTextureCoordinates',
    value: function getVertexTextureCoordinates() {
      var imageDetails = getImageDetails(this.imageName),
          left = imageDetails.left,
          bottom = imageDetails.bottom,
          width = imageDetails.width,
          height = imageDetails.height,
          vertexTextureCoordinates = translateTextureCoordinates(this.textureCoordinates, left, bottom, width, height);


      return vertexTextureCoordinates;
    }
  }, {
    key: 'permute',
    value: function permute(places) {
      _get(TexturedFacet.prototype.__proto__ || Object.getPrototypeOf(TexturedFacet.prototype), 'permute', this).call(this, places);

      this.textureCoordinates = _permute(this.textureCoordinates, places);
    }
  }, {
    key: 'fromVertices',
    value: function fromVertices(vertices) {
      var normal = calculateNormal(vertices),
          edges = calculateEdges(vertices, Edge),
          imageName = this.imageName,
          parentVertices = this.vertices,
          ///
      textureCoordinates = textureCoordinatesFromVerticesParentVerticesAndTextureCoordinates(vertices, parentVertices, this.textureCoordinates),
          texturedFacet = new TexturedFacet(vertices, normal, edges, imageName, textureCoordinates);

      return texturedFacet;
    }
  }], [{
    key: 'fromVertexCoordinatesImageNameAndTextureCoordinates',
    value: function fromVertexCoordinatesImageNameAndTextureCoordinates(vertexCoordinates, indexes, imageName, textureCoordinates, index) {
      textureCoordinates = textureCoordinatesFromTextureCoordinatesAndIndex(textureCoordinates, index); ///

      var vertices = verticesFromVertexCoordinatesAndIndexes(vertexCoordinates, indexes),
          normal = calculateNormal(vertices),
          edges = calculateEdges(vertices, Edge),
          texturedFacet = new TexturedFacet(vertices, normal, edges, imageName, textureCoordinates);

      return texturedFacet;
    }
  }]);

  return TexturedFacet;
}(Facet);

module.exports = TexturedFacet;

function verticesFromVertexCoordinatesAndIndexes(vertexCoordinates, indexes) {
  ///
  var vertices = indexes.map(function (index) {
    var coordinates = vertexCoordinates[index],
        ///
    vertex = Vertex.fromCoordinates(coordinates);

    return vertex;
  });

  return vertices;
}

function textureCoordinatesFromTextureCoordinatesAndIndex(textureCoordinates, index) {
  ///
  textureCoordinates = textureCoordinates.slice(index * 3, index * 3 + 3); ///

  return textureCoordinates;
}

function cloneTextureCoordinates(textureCoordinates) {
  textureCoordinates = textureCoordinates.map(function (textureCoordinates) {
    ///
    textureCoordinates = textureCoordinates.slice();

    return textureCoordinates;
  });

  return textureCoordinates;
}

function translateTextureCoordinates(textureCoordinates, left, bottom, width, height) {
  textureCoordinates = textureCoordinates.map(function (textureCoordinates) {
    ///
    textureCoordinates = add2(multiply2(textureCoordinates, [width, height]), [left, bottom]);

    return textureCoordinates;
  });

  return textureCoordinates;
}

function textureCoordinatesFromVerticesParentVerticesAndTextureCoordinates(vertices, parentVertices, textureCoordinates) {
  var normal = calculateNormal(vertices),
      rotationQuaternion = calculateRotationQuaternion(normal);

  vertices = rotateVertices(vertices, rotationQuaternion);

  parentVertices = rotateVertices(parentVertices, rotationQuaternion);

  var textureCoordinatesMatrix = calculateTextureCoordinatesMatrix(textureCoordinates),
      textureCoordinatesBasis = calculateTextureCoordinatesBasis(parentVertices, textureCoordinatesMatrix);

  textureCoordinates = calculateTextureCoordinates(vertices, textureCoordinatesBasis);

  return textureCoordinates;
}

function calculateTextureCoordinatesMatrix(textureCoordinates) {
  var firstTextureCoordinate = first(textureCoordinates),
      secondTextureCoordinate = second(textureCoordinates),
      thirdTextureCoordinate = third(textureCoordinates),
      P1u = firstTextureCoordinate[0],
      ///
  P1v = firstTextureCoordinate[1],
      ///
  P2u = secondTextureCoordinate[0],
      ///
  P2v = secondTextureCoordinate[1],
      ///
  P3u = thirdTextureCoordinate[0],
      ///
  P3v = thirdTextureCoordinate[1],
      ///
  textureCoordinatesMatrix = invert3([1, 1, 1, P1u, P2u, P3u, P1v, P2v, P3v]);

  return textureCoordinatesMatrix;
}

function calculateTextureCoordinatesBasis(parentVertices, textureCoordinatesMatrix) {
  var firstParentVertex = first(parentVertices),
      secondParentVertex = second(parentVertices),
      thirdParentVertex = third(parentVertices),
      P1x = firstParentVertex[0],
      ///
  P1y = firstParentVertex[1],
      ///
  P2x = secondParentVertex[0],
      ///
  P2y = secondParentVertex[1],
      ///
  P3x = thirdParentVertex[0],
      ///
  P3y = thirdParentVertex[1],
      ///
  xVector = transform3([P1x, P2x, P3x], textureCoordinatesMatrix),
      yVector = transform3([P1y, P2y, P3y], textureCoordinatesMatrix),
      textureCoordinatesBasis = [].concat(xVector).concat(yVector);

  return textureCoordinatesBasis;
}

function calculateTextureCoordinates(vertices, textureCoordinatesBasis) {
  var firstVertex = first(vertices),
      secondVertex = second(vertices),
      thirdVertex = third(vertices),
      R1x = firstVertex[0],
      ///
  R1y = firstVertex[1],
      ///
  R2x = secondVertex[0],
      ///
  R2y = secondVertex[1],
      ///
  R3x = thirdVertex[0],
      ///
  R3y = thirdVertex[1],
      ///
  Ox = textureCoordinatesBasis[0],
      ///
  Oy = textureCoordinatesBasis[3],
      ///
  Ux = textureCoordinatesBasis[1],
      ///
  Uy = textureCoordinatesBasis[4],
      ///
  Vx = textureCoordinatesBasis[2],
      ///
  Vy = textureCoordinatesBasis[5],
      ///
  matrix = invert2([Ux, Uy, Vx, Vy]),
      firstTextureCoordinates = transform2([R1x - Ox, R1y - Oy], matrix),
      secondTextureCoordinates = transform2([R2x - Ox, R2y - Oy], matrix),
      thirdTextureCoordinates = transform2([R3x - Ox, R3y - Oy], matrix),
      textureCoordinates = [firstTextureCoordinates, secondTextureCoordinates, thirdTextureCoordinates];

  return textureCoordinates;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mYWNldC90ZXh0dXJlZC5qcyJdLCJuYW1lcyI6WyJFZGdlIiwicmVxdWlyZSIsIkZhY2V0IiwiVmVydGV4IiwibWF0cml4TWF0aHMiLCJ2ZWN0b3JNYXRocyIsImZhY2V0VXRpbGl0aWVzIiwiYXJyYXlVdGlsaXRpZXMiLCJpbWFnZU1hcFV0aWxpdGllcyIsInJvdGF0aW9uVXRpbGl0aWVzIiwicXVhdGVybmlvblV0aWxpdGllcyIsInJvdGF0ZVZlcnRpY2VzIiwiaW52ZXJ0MiIsImludmVydDMiLCJnZXRJbWFnZURldGFpbHMiLCJmaXJzdCIsInNlY29uZCIsInRoaXJkIiwicGVybXV0ZSIsImNhbGN1bGF0ZVJvdGF0aW9uUXVhdGVybmlvbiIsImFkZDIiLCJtdWx0aXBseTIiLCJ0cmFuc2Zvcm0yIiwidHJhbnNmb3JtMyIsImNsb25lRWRnZXMiLCJjbG9uZU5vcm1hbCIsImNsb25lVmVydGljZXMiLCJjYWxjdWxhdGVFZGdlcyIsImNhbGN1bGF0ZU5vcm1hbCIsIlRleHR1cmVkRmFjZXQiLCJ2ZXJ0aWNlcyIsIm5vcm1hbCIsImVkZ2VzIiwiaW1hZ2VOYW1lIiwidGV4dHVyZUNvb3JkaW5hdGVzIiwiZ2V0VmVydGljZXMiLCJnZXROb3JtYWwiLCJnZXRFZGdlcyIsImNsb25lVGV4dHVyZUNvb3JkaW5hdGVzIiwidGV4dHVyZWRGYWNldCIsImxlZnQiLCJpbWFnZURldGFpbHMiLCJib3R0b20iLCJ3aWR0aCIsImhlaWdodCIsInZlcnRleFRleHR1cmVDb29yZGluYXRlcyIsInRyYW5zbGF0ZVRleHR1cmVDb29yZGluYXRlcyIsInBsYWNlcyIsInBhcmVudFZlcnRpY2VzIiwidGV4dHVyZUNvb3JkaW5hdGVzRnJvbVZlcnRpY2VzUGFyZW50VmVydGljZXNBbmRUZXh0dXJlQ29vcmRpbmF0ZXMiLCJ2ZXJ0ZXhDb29yZGluYXRlcyIsImluZGV4ZXMiLCJpbmRleCIsInRleHR1cmVDb29yZGluYXRlc0Zyb21UZXh0dXJlQ29vcmRpbmF0ZXNBbmRJbmRleCIsInZlcnRpY2VzRnJvbVZlcnRleENvb3JkaW5hdGVzQW5kSW5kZXhlcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJtYXAiLCJjb29yZGluYXRlcyIsInZlcnRleCIsImZyb21Db29yZGluYXRlcyIsInNsaWNlIiwicm90YXRpb25RdWF0ZXJuaW9uIiwidGV4dHVyZUNvb3JkaW5hdGVzTWF0cml4IiwiY2FsY3VsYXRlVGV4dHVyZUNvb3JkaW5hdGVzTWF0cml4IiwidGV4dHVyZUNvb3JkaW5hdGVzQmFzaXMiLCJjYWxjdWxhdGVUZXh0dXJlQ29vcmRpbmF0ZXNCYXNpcyIsImNhbGN1bGF0ZVRleHR1cmVDb29yZGluYXRlcyIsImZpcnN0VGV4dHVyZUNvb3JkaW5hdGUiLCJzZWNvbmRUZXh0dXJlQ29vcmRpbmF0ZSIsInRoaXJkVGV4dHVyZUNvb3JkaW5hdGUiLCJQMXUiLCJQMXYiLCJQMnUiLCJQMnYiLCJQM3UiLCJQM3YiLCJmaXJzdFBhcmVudFZlcnRleCIsInNlY29uZFBhcmVudFZlcnRleCIsInRoaXJkUGFyZW50VmVydGV4IiwiUDF4IiwiUDF5IiwiUDJ4IiwiUDJ5IiwiUDN4IiwiUDN5IiwieFZlY3RvciIsInlWZWN0b3IiLCJjb25jYXQiLCJmaXJzdFZlcnRleCIsInNlY29uZFZlcnRleCIsInRoaXJkVmVydGV4IiwiUjF4IiwiUjF5IiwiUjJ4IiwiUjJ5IiwiUjN4IiwiUjN5IiwiT3giLCJPeSIsIlV4IiwiVXkiLCJWeCIsIlZ5IiwibWF0cml4IiwiZmlyc3RUZXh0dXJlQ29vcmRpbmF0ZXMiLCJzZWNvbmRUZXh0dXJlQ29vcmRpbmF0ZXMiLCJ0aGlyZFRleHR1cmVDb29yZGluYXRlcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLE9BQU9DLFFBQVEsU0FBUixDQUFiO0FBQUEsSUFDTUMsUUFBUUQsUUFBUSxVQUFSLENBRGQ7QUFBQSxJQUVNRSxTQUFTRixRQUFRLFdBQVIsQ0FGZjtBQUFBLElBR01HLGNBQWNILFFBQVEsaUJBQVIsQ0FIcEI7QUFBQSxJ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RUFBWUwsTUFBTU0sRUFBbEIsQ0FBWCxFQUFtQ0ssTUFBbkMsQ0FoQmhDO0FBQUEsTUFpQk1FLDJCQUEyQnBGLFdBQVcsQ0FBRXdFLE1BQU1JLEVBQVIsRUFBWUgsTUFBTUksRUFBbEIsQ0FBWCxFQUFtQ0ssTUFBbkMsQ0FqQmpDO0FBQUEsTUFrQk1HLDBCQUEwQnJGLFdBQVcsQ0FBRTBFLE1BQU1FLEVBQVIsRUFBWUQsTUFBTUUsRUFBbEIsQ0FBWCxFQUFtQ0ssTUFBbkMsQ0FsQmhDO0FBQUEsTUFtQk10RSxxQkFBcUIsQ0FDbkJ1RSx1QkFEbUIsRUFFbkJDLHdCQUZtQixFQUduQkMsdUJBSG1CLENBbkIzQjs7QUF5QkEsU0FBT3pFLGtCQUFQO0FBQ0QiLCJmaWxlIjoidGV4dHVyZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEVkZ2UgPSByZXF1aXJlKCcuLi9lZGdlJyksXG4gICAgICBGYWNldCA9IHJlcXVpcmUoJy4uL2ZhY2V0JyksXG4gICAgICBWZXJ0ZXggPSByZXF1aXJlKCcuLi92ZXJ0ZXgnKSxcbiAgICAgIG1hdHJpeE1hdGhzID0gcmVxdWlyZSgnLi4vbWF0aHMvbWF0cml4JyksXG4gICAgICB2ZWN0b3JNYXRocyA9IHJlcXVpcmUoJy4uL21hdGhzL3ZlY3RvcicpLFxuICAgICAgZmFjZXRVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvZmFjZXQnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICBpbWFnZU1hcFV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9pbWFnZU1hcCcpLFxuICAgICAgcm90YXRpb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvcm90YXRpb24nKSxcbiAgICAgIHF1YXRlcm5pb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvcXVhdGVybmlvbicpO1xuXG5jb25zdCB7IHJvdGF0ZVZlcnRpY2VzIH0gPSByb3RhdGlvblV0aWxpdGllcyxcbiAgICAgIHsgaW52ZXJ0MiwgaW52ZXJ0MyB9ID0gbWF0cml4TWF0aHMsXG4gICAgICB7IGdldEltYWdlRGV0YWlscyB9ID0gaW1hZ2VNYXBVdGlsaXRpZXMsXG4gICAgICB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkLCBwZXJtdXRlIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgY2FsY3VsYXRlUm90YXRpb25RdWF0ZXJuaW9uIH0gPSBxdWF0ZXJuaW9uVXRpbGl0aWVzLFxuICAgICAgeyBhZGQyLCBtdWx0aXBseTIsIHRyYW5zZm9ybTIsIHRyYW5zZm9ybTMgfSA9IHZlY3Rvck1hdGhzLFxuICAgICAgeyBjbG9uZUVkZ2VzLCBjbG9uZU5vcm1hbCwgY2xvbmVWZXJ0aWNlcywgY2FsY3VsYXRlRWRnZXMsIGNhbGN1bGF0ZU5vcm1hbCB9ID0gZmFjZXRVdGlsaXRpZXM7XG5cbmNsYXNzIFRleHR1cmVkRmFjZXQgZXh0ZW5kcyBGYWNldCB7XG4gIGNvbnN0cnVjdG9yKHZlcnRpY2VzLCBub3JtYWwsIGVkZ2VzLCBpbWFnZU5hbWUsIHRleHR1cmVDb29yZGluYXRlcykge1xuICAgIHN1cGVyKHZlcnRpY2VzLCBub3JtYWwsIGVkZ2VzKTtcblxuICAgIHRoaXMuaW1hZ2VOYW1lID0gaW1hZ2VOYW1lO1xuICAgIHRoaXMudGV4dHVyZUNvb3JkaW5hdGVzID0gdGV4dHVyZUNvb3JkaW5hdGVzO1xuICB9XG5cbiAgY2xvbmUoKSB7XG4gICAgbGV0IHZlcnRpY2VzID0gdGhpcy5nZXRWZXJ0aWNlcygpLFxuICAgICAgICBub3JtYWwgPSB0aGlzLmdldE5vcm1hbCgpLFxuICAgICAgICBlZGdlcyA9IHRoaXMuZ2V0RWRnZXMoKTtcblxuICAgIHZlcnRpY2VzID0gY2xvbmVWZXJ0aWNlcyh2ZXJ0aWNlcyk7XG4gICAgbm9ybWFsID0gY2xvbmVOb3JtYWwobm9ybWFsKTtcbiAgICBlZGdlcyA9IGNsb25lRWRnZXMoZWRnZXMpO1xuXG4gICAgY29uc3QgaW1hZ2VOYW1lID0gdGhpcy5pbWFnZU5hbWUsXG4gICAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzID0gY2xvbmVUZXh0dXJlQ29vcmRpbmF0ZXModGhpcy50ZXh0dXJlQ29vcmRpbmF0ZXMpLFxuICAgICAgICAgIHRleHR1cmVkRmFjZXQgPSBuZXcgVGV4dHVyZWRGYWNldCh2ZXJ0aWNlcywgbm9ybWFsLCBlZGdlcywgaW1hZ2VOYW1lLCB0ZXh0dXJlQ29vcmRpbmF0ZXMpO1xuXG4gICAgcmV0dXJuIHRleHR1cmVkRmFjZXQ7XG4gIH1cblxuICBnZXRJbWFnZU5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1hZ2VOYW1lO1xuICB9XG5cbiAgZ2V0VGV4dHVyZUNvb3JkaW5hdGVzKCkge1xuICAgIHJldHVybiB0aGlzLnRleHR1cmVDb29yZGluYXRlcztcbiAgfVxuXG4gIGdldFZlcnRleFRleHR1cmVDb29yZGluYXRlcygpIHtcbiAgICBjb25zdCBpbWFnZURldGFpbHMgPSBnZXRJbWFnZURldGFpbHModGhpcy5pbWFnZU5hbWUpLFxuICAgICAgICAgIHsgbGVmdCwgYm90dG9tLCB3aWR0aCwgaGVpZ2h0IH0gPSBpbWFnZURldGFpbHMsXG4gICAgICAgICAgdmVydGV4VGV4dHVyZUNvb3JkaW5hdGVzID0gdHJhbnNsYXRlVGV4dHVyZUNvb3JkaW5hdGVzKHRoaXMudGV4dHVyZUNvb3JkaW5hdGVzLCBsZWZ0LCBib3R0b20sIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgcmV0dXJuIHZlcnRleFRleHR1cmVDb29yZGluYXRlcztcbiAgfVxuXG4gIHBlcm11dGUocGxhY2VzKSB7XG4gICAgc3VwZXIucGVybXV0ZShwbGFjZXMpO1xuXG4gICAgdGhpcy50ZXh0dXJlQ29vcmRpbmF0ZXMgPSBwZXJtdXRlKHRoaXMudGV4dHVyZUNvb3JkaW5hdGVzLCBwbGFjZXMpO1xuICB9XG5cbiAgZnJvbVZlcnRpY2VzKHZlcnRpY2VzKSB7XG4gICAgY29uc3Qgbm9ybWFsID0gY2FsY3VsYXRlTm9ybWFsKHZlcnRpY2VzKSxcbiAgICAgICAgICBlZGdlcyA9IGNhbGN1bGF0ZUVkZ2VzKHZlcnRpY2VzLCBFZGdlKSxcbiAgICAgICAgICBpbWFnZU5hbWUgPSB0aGlzLmltYWdlTmFtZSxcbiAgICAgICAgICBwYXJlbnRWZXJ0aWNlcyA9IHRoaXMudmVydGljZXMsIC8vL1xuICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlcyA9IHRleHR1cmVDb29yZGluYXRlc0Zyb21WZXJ0aWNlc1BhcmVudFZlcnRpY2VzQW5kVGV4dHVyZUNvb3JkaW5hdGVzKHZlcnRpY2VzLCBwYXJlbnRWZXJ0aWNlcywgdGhpcy50ZXh0dXJlQ29vcmRpbmF0ZXMpLFxuICAgICAgICAgIHRleHR1cmVkRmFjZXQgPSBuZXcgVGV4dHVyZWRGYWNldCh2ZXJ0aWNlcywgbm9ybWFsLCBlZGdlcywgaW1hZ2VOYW1lLCB0ZXh0dXJlQ29vcmRpbmF0ZXMpO1xuXG4gICAgcmV0dXJuIHRleHR1cmVkRmFjZXQ7XG4gIH1cblxuICBzdGF0aWMgZnJvbVZlcnRleENvb3JkaW5hdGVzSW1hZ2VOYW1lQW5kVGV4dHVyZUNvb3JkaW5hdGVzKHZlcnRleENvb3JkaW5hdGVzLCBpbmRleGVzLCBpbWFnZU5hbWUsIHRleHR1cmVDb29yZGluYXRlcywgaW5kZXgpIHtcbiAgICB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSB0ZXh0dXJlQ29vcmRpbmF0ZXNGcm9tVGV4dHVyZUNvb3JkaW5hdGVzQW5kSW5kZXgodGV4dHVyZUNvb3JkaW5hdGVzLCBpbmRleCk7ICAvLy9cblxuICAgIGNvbnN0IHZlcnRpY2VzID0gdmVydGljZXNGcm9tVmVydGV4Q29vcmRpbmF0ZXNBbmRJbmRleGVzKHZlcnRleENvb3JkaW5hdGVzLCBpbmRleGVzKSxcbiAgICAgICAgICBub3JtYWwgPSBjYWxjdWxhdGVOb3JtYWwodmVydGljZXMpLFxuICAgICAgICAgIGVkZ2VzID0gY2FsY3VsYXRlRWRnZXModmVydGljZXMsIEVkZ2UpLFxuICAgICAgICAgIHRleHR1cmVkRmFjZXQgPSBuZXcgVGV4dHVyZWRGYWNldCh2ZXJ0aWNlcywgbm9ybWFsLCBlZGdlcywgaW1hZ2VOYW1lLCB0ZXh0dXJlQ29vcmRpbmF0ZXMpO1xuXG4gICAgcmV0dXJuIHRleHR1cmVkRmFjZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUZXh0dXJlZEZhY2V0O1xuXG5mdW5jdGlvbiB2ZXJ0aWNlc0Zyb21WZXJ0ZXhDb29yZGluYXRlc0FuZEluZGV4ZXModmVydGV4Q29vcmRpbmF0ZXMsIGluZGV4ZXMpIHsgIC8vL1xuICBjb25zdCB2ZXJ0aWNlcyA9IGluZGV4ZXMubWFwKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgY29uc3QgY29vcmRpbmF0ZXMgPSB2ZXJ0ZXhDb29yZGluYXRlc1tpbmRleF0sIC8vL1xuICAgICAgICAgIHZlcnRleCA9IFZlcnRleC5mcm9tQ29vcmRpbmF0ZXMoY29vcmRpbmF0ZXMpO1xuXG4gICAgcmV0dXJuIHZlcnRleDtcbiAgfSk7XG5cbiAgcmV0dXJuIHZlcnRpY2VzO1xufVxuXG5mdW5jdGlvbiB0ZXh0dXJlQ29vcmRpbmF0ZXNGcm9tVGV4dHVyZUNvb3JkaW5hdGVzQW5kSW5kZXgodGV4dHVyZUNvb3JkaW5hdGVzLCBpbmRleCkgeyAgLy8vXG4gIHRleHR1cmVDb29yZGluYXRlcyA9IHRleHR1cmVDb29yZGluYXRlcy5zbGljZShpbmRleCAqIDMsIGluZGV4ICogMyArIDMpOyAgLy8vXG5cbiAgcmV0dXJuIHRleHR1cmVDb29yZGluYXRlcztcbn1cblxuZnVuY3Rpb24gY2xvbmVUZXh0dXJlQ29vcmRpbmF0ZXModGV4dHVyZUNvb3JkaW5hdGVzKSB7XG4gIHRleHR1cmVDb29yZGluYXRlcyA9IHRleHR1cmVDb29yZGluYXRlcy5tYXAoZnVuY3Rpb24odGV4dHVyZUNvb3JkaW5hdGVzKSB7ICAvLy9cbiAgICB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSB0ZXh0dXJlQ29vcmRpbmF0ZXMuc2xpY2UoKTtcblxuICAgIHJldHVybiB0ZXh0dXJlQ29vcmRpbmF0ZXM7XG4gIH0pO1xuXG4gIHJldHVybiB0ZXh0dXJlQ29vcmRpbmF0ZXM7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVRleHR1cmVDb29yZGluYXRlcyh0ZXh0dXJlQ29vcmRpbmF0ZXMsIGxlZnQsIGJvdHRvbSwgd2lkdGgsIGhlaWdodCApIHtcbiAgdGV4dHVyZUNvb3JkaW5hdGVzID0gdGV4dHVyZUNvb3JkaW5hdGVzLm1hcChmdW5jdGlvbih0ZXh0dXJlQ29vcmRpbmF0ZXMpIHsgIC8vL1xuICAgIHRleHR1cmVDb29yZGluYXRlcyA9IGFkZDIobXVsdGlwbHkyKHRleHR1cmVDb29yZGluYXRlcywgWyB3aWR0aCwgaGVpZ2h0IF0gKSwgWyBsZWZ0LCBib3R0b20gXSk7XG5cbiAgICByZXR1cm4gdGV4dHVyZUNvb3JkaW5hdGVzO1xuICB9KTtcblxuICByZXR1cm4gdGV4dHVyZUNvb3JkaW5hdGVzO1xufVxuXG5mdW5jdGlvbiB0ZXh0dXJlQ29vcmRpbmF0ZXNGcm9tVmVydGljZXNQYXJlbnRWZXJ0aWNlc0FuZFRleHR1cmVDb29yZGluYXRlcyh2ZXJ0aWNlcywgcGFyZW50VmVydGljZXMsIHRleHR1cmVDb29yZGluYXRlcykge1xuICBjb25zdCBub3JtYWwgPSBjYWxjdWxhdGVOb3JtYWwodmVydGljZXMpLFxuICAgICAgICByb3RhdGlvblF1YXRlcm5pb24gPSBjYWxjdWxhdGVSb3RhdGlvblF1YXRlcm5pb24obm9ybWFsKTtcblxuICB2ZXJ0aWNlcyA9IHJvdGF0ZVZlcnRpY2VzKHZlcnRpY2VzLCByb3RhdGlvblF1YXRlcm5pb24pO1xuXG4gIHBhcmVudFZlcnRpY2VzID0gcm90YXRlVmVydGljZXMocGFyZW50VmVydGljZXMsIHJvdGF0aW9uUXVhdGVybmlvbik7XG5cbiAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVzTWF0cml4ID0gY2FsY3VsYXRlVGV4dHVyZUNvb3JkaW5hdGVzTWF0cml4KHRleHR1cmVDb29yZGluYXRlcyksXG4gICAgICAgIHRleHR1cmVDb29yZGluYXRlc0Jhc2lzID0gY2FsY3VsYXRlVGV4dHVyZUNvb3JkaW5hdGVzQmFzaXMocGFyZW50VmVydGljZXMsIHRleHR1cmVDb29yZGluYXRlc01hdHJpeCk7XG5cbiAgdGV4dHVyZUNvb3JkaW5hdGVzID0gY2FsY3VsYXRlVGV4dHVyZUNvb3JkaW5hdGVzKHZlcnRpY2VzLCB0ZXh0dXJlQ29vcmRpbmF0ZXNCYXNpcyk7XG5cbiAgcmV0dXJuIHRleHR1cmVDb29yZGluYXRlcztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlVGV4dHVyZUNvb3JkaW5hdGVzTWF0cml4KHRleHR1cmVDb29yZGluYXRlcykge1xuICBjb25zdCBmaXJzdFRleHR1cmVDb29yZGluYXRlID0gZmlyc3QodGV4dHVyZUNvb3JkaW5hdGVzKSxcbiAgICAgICAgc2Vjb25kVGV4dHVyZUNvb3JkaW5hdGUgPSBzZWNvbmQodGV4dHVyZUNvb3JkaW5hdGVzKSxcbiAgICAgICAgdGhpcmRUZXh0dXJlQ29vcmRpbmF0ZSA9IHRoaXJkKHRleHR1cmVDb29yZGluYXRlcyksXG4gICAgICAgIFAxdSA9IGZpcnN0VGV4dHVyZUNvb3JkaW5hdGVbMF0sIC8vL1xuICAgICAgICBQMXYgPSBmaXJzdFRleHR1cmVDb29yZGluYXRlWzFdLCAvLy9cbiAgICAgICAgUDJ1ID0gc2Vjb25kVGV4dHVyZUNvb3JkaW5hdGVbMF0sIC8vL1xuICAgICAgICBQMnYgPSBzZWNvbmRUZXh0dXJlQ29vcmRpbmF0ZVsxXSwgLy8vXG4gICAgICAgIFAzdSA9IHRoaXJkVGV4dHVyZUNvb3JkaW5hdGVbMF0sIC8vL1xuICAgICAgICBQM3YgPSB0aGlyZFRleHR1cmVDb29yZGluYXRlWzFdLCAvLy9cbiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzTWF0cml4ID0gaW52ZXJ0MyhbIDEsIDEsIDEsIFAxdSwgUDJ1LCBQM3UsIFAxdiwgUDJ2LCBQM3YgXSk7XG5cbiAgcmV0dXJuIHRleHR1cmVDb29yZGluYXRlc01hdHJpeDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlVGV4dHVyZUNvb3JkaW5hdGVzQmFzaXMocGFyZW50VmVydGljZXMsIHRleHR1cmVDb29yZGluYXRlc01hdHJpeCkge1xuICBjb25zdCBmaXJzdFBhcmVudFZlcnRleCA9IGZpcnN0KHBhcmVudFZlcnRpY2VzKSxcbiAgICAgICAgc2Vjb25kUGFyZW50VmVydGV4ID0gc2Vjb25kKHBhcmVudFZlcnRpY2VzKSxcbiAgICAgICAgdGhpcmRQYXJlbnRWZXJ0ZXggPSB0aGlyZChwYXJlbnRWZXJ0aWNlcyksXG4gICAgICAgIFAxeCA9IGZpcnN0UGFyZW50VmVydGV4WzBdLCAvLy9cbiAgICAgICAgUDF5ID0gZmlyc3RQYXJlbnRWZXJ0ZXhbMV0sIC8vL1xuICAgICAgICBQMnggPSBzZWNvbmRQYXJlbnRWZXJ0ZXhbMF0sIC8vL1xuICAgICAgICBQMnkgPSBzZWNvbmRQYXJlbnRWZXJ0ZXhbMV0sIC8vL1xuICAgICAgICBQM3ggPSB0aGlyZFBhcmVudFZlcnRleFswXSwgLy8vXG4gICAgICAgIFAzeSA9IHRoaXJkUGFyZW50VmVydGV4WzFdLCAvLy9cbiAgICAgICAgeFZlY3RvciA9IHRyYW5zZm9ybTMoWyBQMXgsIFAyeCwgUDN4IF0sIHRleHR1cmVDb29yZGluYXRlc01hdHJpeCksXG4gICAgICAgIHlWZWN0b3IgPSB0cmFuc2Zvcm0zKFsgUDF5LCBQMnksIFAzeSBdLCB0ZXh0dXJlQ29vcmRpbmF0ZXNNYXRyaXgpLFxuICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNCYXNpcyA9IFtdLmNvbmNhdCh4VmVjdG9yKS5jb25jYXQoeVZlY3Rvcik7XG5cbiAgcmV0dXJuIHRleHR1cmVDb29yZGluYXRlc0Jhc2lzO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVUZXh0dXJlQ29vcmRpbmF0ZXModmVydGljZXMsIHRleHR1cmVDb29yZGluYXRlc0Jhc2lzKSB7XG4gIGNvbnN0IGZpcnN0VmVydGV4ID0gZmlyc3QodmVydGljZXMpLFxuICAgICAgICBzZWNvbmRWZXJ0ZXggPSBzZWNvbmQodmVydGljZXMpLFxuICAgICAgICB0aGlyZFZlcnRleCA9IHRoaXJkKHZlcnRpY2VzKSxcbiAgICAgICAgUjF4ID0gZmlyc3RWZXJ0ZXhbMF0sICAvLy9cbiAgICAgICAgUjF5ID0gZmlyc3RWZXJ0ZXhbMV0sICAvLy9cbiAgICAgICAgUjJ4ID0gc2Vjb25kVmVydGV4WzBdLCAvLy9cbiAgICAgICAgUjJ5ID0gc2Vjb25kVmVydGV4WzFdLCAvLy9cbiAgICAgICAgUjN4ID0gdGhpcmRWZXJ0ZXhbMF0sICAvLy9cbiAgICAgICAgUjN5ID0gdGhpcmRWZXJ0ZXhbMV0sICAvLy9cbiAgICAgICAgT3ggPSB0ZXh0dXJlQ29vcmRpbmF0ZXNCYXNpc1swXSwgIC8vL1xuICAgICAgICBPeSA9IHRleHR1cmVDb29yZGluYXRlc0Jhc2lzWzNdLCAgLy8vXG4gICAgICAgIFV4ID0gdGV4dHVyZUNvb3JkaW5hdGVzQmFzaXNbMV0sICAvLy9cbiAgICAgICAgVXkgPSB0ZXh0dXJlQ29vcmRpbmF0ZXNCYXNpc1s0XSwgIC8vL1xuICAgICAgICBWeCA9IHRleHR1cmVDb29yZGluYXRlc0Jhc2lzWzJdLCAgLy8vXG4gICAgICAgIFZ5ID0gdGV4dHVyZUNvb3JkaW5hdGVzQmFzaXNbNV0sICAvLy9cbiAgICAgICAgbWF0cml4ID0gaW52ZXJ0MihbIFV4LCBVeSwgVngsIFZ5IF0pLFxuICAgICAgICBmaXJzdFRleHR1cmVDb29yZGluYXRlcyA9IHRyYW5zZm9ybTIoWyBSMXggLSBPeCwgUjF5IC0gT3kgXSwgbWF0cml4KSxcbiAgICAgICAgc2Vjb25kVGV4dHVyZUNvb3JkaW5hdGVzID0gdHJhbnNmb3JtMihbIFIyeCAtIE94LCBSMnkgLSBPeSBdLCBtYXRyaXgpLFxuICAgICAgICB0aGlyZFRleHR1cmVDb29yZGluYXRlcyA9IHRyYW5zZm9ybTIoWyBSM3ggLSBPeCwgUjN5IC0gT3kgXSwgbWF0cml4KSxcbiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzID0gW1xuICAgICAgICAgIGZpcnN0VGV4dHVyZUNvb3JkaW5hdGVzLFxuICAgICAgICAgIHNlY29uZFRleHR1cmVDb29yZGluYXRlcyxcbiAgICAgICAgICB0aGlyZFRleHR1cmVDb29yZGluYXRlcyxcbiAgICAgICAgXTtcblxuICByZXR1cm4gdGV4dHVyZUNvb3JkaW5hdGVzO1xufVxuIl19