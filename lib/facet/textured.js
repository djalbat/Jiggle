'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Facet = require('../facet'),
    arrayUtilities = require('../utilities/array'),
    matrixUtilities = require('../utilities/matrix'),
    vectorUtilities = require('../utilities/vector'),
    verticesUtilities = require('../utilities/vertices'),
    imageMapUtilities = require('../utilities/imageMap'),
    rotationUtilities = require('../utilities/rotation');

var invert2 = matrixUtilities.invert2,
    invert3 = matrixUtilities.invert3,
    getImageDetails = imageMapUtilities.getImageDetails,
    calculateRotationQuaternion = rotationUtilities.calculateRotationQuaternion,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    third = arrayUtilities.third,
    _permute = arrayUtilities.permute,
    calculateNormal = verticesUtilities.calculateNormal,
    rotateVertices = verticesUtilities.rotateVertices,
    add2 = vectorUtilities.add2,
    multiply2 = vectorUtilities.multiply2,
    transform2 = vectorUtilities.transform2,
    transform3 = vectorUtilities.transform3;

var TexturedFacet = function (_Facet) {
  _inherits(TexturedFacet, _Facet);

  function TexturedFacet(vertices, normal, imageName, textureCoordinates) {
    _classCallCheck(this, TexturedFacet);

    var _this = _possibleConstructorReturn(this, (TexturedFacet.__proto__ || Object.getPrototypeOf(TexturedFacet)).call(this, vertices, normal));

    _this.imageName = imageName;
    _this.textureCoordinates = textureCoordinates;
    return _this;
  }

  _createClass(TexturedFacet, [{
    key: 'getImageName',
    value: function getImageName() {
      return this.imageName;
    }
  }, {
    key: 'getTextureCoordinates',
    value: function getTextureCoordinates() {
      return this.textureCoordinates;
    }
  }, {
    key: 'getVertexTextureCoordinates',
    value: function getVertexTextureCoordinates() {
      var imageDetails = getImageDetails(this.imageName),
          left = imageDetails.left,
          bottom = imageDetails.bottom,
          width = imageDetails.width,
          height = imageDetails.height,
          vertexTextureCoordinates = translateTextureCoordinates(this.textureCoordinates, left, bottom, width, height);


      return vertexTextureCoordinates;
    }
  }, {
    key: 'permute',
    value: function permute(places) {
      _get(TexturedFacet.prototype.__proto__ || Object.getPrototypeOf(TexturedFacet.prototype), 'permute', this).call(this, places);

      this.textureCoordinates = _permute(this.textureCoordinates, places);
    }
  }, {
    key: 'splitWithTwoNonNullIntersections',
    value: function splitWithTwoNonNullIntersections(intersections, smallerFacets, Facet) {
      _get(TexturedFacet.prototype.__proto__ || Object.getPrototypeOf(TexturedFacet.prototype), 'splitWithTwoNonNullIntersections', this).call(this, intersections, smallerFacets, this);
    } ///

  }, {
    key: 'splitWithOneNonNullIntersection',
    value: function splitWithOneNonNullIntersection(intersections, smallerFacets, Facet) {
      _get(TexturedFacet.prototype.__proto__ || Object.getPrototypeOf(TexturedFacet.prototype), 'splitWithOneNonNullIntersection', this).call(this, intersections, smallerFacets, this);
    } ///

  }, {
    key: 'clone',
    value: function clone() {
      var vertices = this.getVertices(),
          normal = this.getNormal();

      vertices = vertices.map(function (vertex) {
        vertex = vertex.slice(); ///

        return vertex;
      });

      normal = normal.slice(); ///

      var imageName = this.imageName,
          textureCoordinates = this.textureCoordinates.map(function (textureCoordinates) {
        textureCoordinates = textureCoordinates.slice(); ///

        return textureCoordinates;
      }),
          texturedFacet = new TexturedFacet(vertices, normal, imageName, textureCoordinates);

      return texturedFacet;
    }
  }, {
    key: 'fromVertices',
    value: function fromVertices(vertices) {
      var normal = calculateNormal(vertices),
          imageName = this.imageName,
          parentVertices = this.vertices,
          ///
      textureCoordinates = textureCoordinatesFromVerticesParentVerticesAndTextureCoordinates(vertices, parentVertices, this.textureCoordinates),
          texturedFacet = new TexturedFacet(vertices, normal, imageName, textureCoordinates);

      return texturedFacet;
    }
  }], [{
    key: 'fromVerticesIndexesImageNameAndTextureCoordinates',
    value: function fromVerticesIndexesImageNameAndTextureCoordinates(vertices, indexes, imageName, textureCoordinates, index) {
      vertices = indexes.map(function (index) {
        return vertices[index];
      }); ///

      textureCoordinates = textureCoordinates.slice(index * 3, index * 3 + 3); ///

      var normal = calculateNormal(vertices),
          texturedFacet = new TexturedFacet(vertices, normal, imageName, textureCoordinates);

      return texturedFacet;
    }
  }]);

  return TexturedFacet;
}(Facet);

module.exports = TexturedFacet;

function translateTextureCoordinates(textureCoordinates, left, bottom, width, height) {
  textureCoordinates = textureCoordinates.map(function (textureCoordinates) {
    ///
    textureCoordinates = add2(multiply2(textureCoordinates, [width, height]), [left, bottom]);

    return textureCoordinates;
  });

  return textureCoordinates;
}

function textureCoordinatesFromVerticesParentVerticesAndTextureCoordinates(vertices, parentVertices, textureCoordinates) {
  var normal = calculateNormal(vertices),
      rotationQuaternion = calculateRotationQuaternion(normal),
      verticesInXYPlane = rotateVertices(vertices, rotationQuaternion),
      parentVerticesInXYPlane = rotateVertices(parentVertices, rotationQuaternion),
      textureCoordinatesMatrix = calculateTextureCoordinatesMatrix(textureCoordinates),
      textureCoordinatesBasis = calculateTextureCoordinatesBasis(parentVerticesInXYPlane, textureCoordinatesMatrix);

  textureCoordinates = calculateTextureCoordinates(verticesInXYPlane, textureCoordinatesBasis);

  return textureCoordinates;
}

function calculateTextureCoordinatesMatrix(textureCoordinates) {
  var firstTextureCoordinate = first(textureCoordinates),
      secondTextureCoordinate = second(textureCoordinates),
      thirdTextureCoordinate = third(textureCoordinates),
      P1u = firstTextureCoordinate[0],
      ///
  P1v = firstTextureCoordinate[1],
      ///
  P2u = secondTextureCoordinate[0],
      ///
  P2v = secondTextureCoordinate[1],
      ///
  P3u = thirdTextureCoordinate[0],
      ///
  P3v = thirdTextureCoordinate[1],
      ///
  textureCoordinatesMatrix = invert3([1, 1, 1, P1u, P2u, P3u, P1v, P2v, P3v]);

  return textureCoordinatesMatrix;
}

function calculateTextureCoordinatesBasis(parentVerticesInXYPlane, textureCoordinatesMatrix) {
  var firstParentVertexInXYPlane = first(parentVerticesInXYPlane),
      secondParentVertexInXYPlane = second(parentVerticesInXYPlane),
      thirdParentVertexInXYPlane = third(parentVerticesInXYPlane),
      P1x = firstParentVertexInXYPlane[0],
      ///
  P1y = firstParentVertexInXYPlane[1],
      ///
  P2x = secondParentVertexInXYPlane[0],
      ///
  P2y = secondParentVertexInXYPlane[1],
      ///
  P3x = thirdParentVertexInXYPlane[0],
      ///
  P3y = thirdParentVertexInXYPlane[1],
      ///
  xVector = transform3([P1x, P2x, P3x], textureCoordinatesMatrix),
      yVector = transform3([P1y, P2y, P3y], textureCoordinatesMatrix),
      textureCoordinatesBasis = [].concat(xVector).concat(yVector);

  return textureCoordinatesBasis;
}

function calculateTextureCoordinates(verticesInXYPlane, textureCoordinatesBasis) {
  var firstVertexInXYPlane = first(verticesInXYPlane),
      secondVertexInXYPlane = second(verticesInXYPlane),
      thirdVertexInXYPlane = third(verticesInXYPlane),
      R1x = firstVertexInXYPlane[0],
      ///
  R1y = firstVertexInXYPlane[1],
      ///
  R2x = secondVertexInXYPlane[0],
      ///
  R2y = secondVertexInXYPlane[1],
      ///
  R3x = thirdVertexInXYPlane[0],
      ///
  R3y = thirdVertexInXYPlane[1],
      ///
  Ox = textureCoordinatesBasis[0],
      ///
  Oy = textureCoordinatesBasis[3],
      ///
  Ux = textureCoordinatesBasis[1],
      ///
  Uy = textureCoordinatesBasis[4],
      ///
  Vx = textureCoordinatesBasis[2],
      ///
  Vy = textureCoordinatesBasis[5],
      ///
  matrix = invert2([Ux, Uy, Vx, Vy]),
      firstTextureCoordinates = transform2([R1x - Ox, R1y - Oy], matrix),
      secondTextureCoordinates = transform2([R2x - Ox, R2y - Oy], matrix),
      thirdTextureCoordinates = transform2([R3x - Ox, R3y - Oy], matrix),
      textureCoordinates = [firstTextureCoordinates, secondTextureCoordinates, thirdTextureCoordinates];

  return textureCoordinates;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,