'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var arrayUtilities = require('../../utilities/array'),
    vectorUtilities = require('../../utilities/vector'),
    vertexUtilities = require('../../utilities/vertex'),
    rotationUtilities = require('../../utilities/rotation'),
    approximateUtilities = require('../../utilities/approximate');

var first = arrayUtilities.first,
    second = arrayUtilities.second,
    rotateAboutZAxis = vertexUtilities.rotateAboutZAxis,
    normalise3 = vectorUtilities.normalise3,
    isApproximatelyEqualToZero = approximateUtilities.isApproximatelyEqualToZero,
    calculateForwardsRotationAboutZAxisMatrix = rotationUtilities.calculateForwardsRotationAboutZAxisMatrix,
    calculateBackwardsRotationAboutZAxisMatrix = rotationUtilities.calculateBackwardsRotationAboutZAxisMatrix;

var VerticalLineInXYPlane = function () {
  function VerticalLineInXYPlane(position, rotationAboutZAxisMatrix) {
    _classCallCheck(this, VerticalLineInXYPlane);

    this.position = position;

    this.rotationAboutZAxisMatrix = rotationAboutZAxisMatrix;
  }

  _createClass(VerticalLineInXYPlane, [{
    key: 'getRotationAboutZAxisMatrix',
    value: function getRotationAboutZAxisMatrix() {
      return this.rotationAboutZAxisMatrix;
    }
  }, {
    key: 'splitFacets',
    value: function splitFacets(facets) {
      var smallerFacets = [],
          forwardsRotationAboutZAxisMatrix = calculateForwardsRotationAboutZAxisMatrix(this.rotationAboutZAxisMatrix),
          backwardsRotationAboutZAxisMatrix = calculateBackwardsRotationAboutZAxisMatrix(this.rotationAboutZAxisMatrix);

      facets.forEach(function (facet) {
        facet.rotateAboutZAxis(forwardsRotationAboutZAxisMatrix);

        this.splitFacet(facet, smallerFacets);
      }.bind(this));

      smallerFacets.forEach(function (smallerFacet) {
        smallerFacet.rotateAboutZAxis(backwardsRotationAboutZAxisMatrix);
      });

      return smallerFacets;
    }
  }, {
    key: 'splitFacet',
    value: function splitFacet(facet, smallerFacets) {
      var intersections = this.calculateIntersectionsWithFacet(facet);

      facet.split(intersections, smallerFacets);
    }
  }, {
    key: 'calculateIntersectionsWithFacet',
    value: function calculateIntersectionsWithFacet(facet) {
      var lines = facet.getLines(),
          intersections = lines.map(function (line) {
        var intersection = this.calculateIntersection(line);

        return intersection;
      }.bind(this));

      return intersections;
    }
  }, {
    key: 'calculateIntersection',
    value: function calculateIntersection(line) {
      var intersection = null;

      var lineNonParallel = isLineNonParallel(line);

      if (lineNonParallel) {
        var lineIntersection = this.calculateLineIntersection(line),
            lineIntersectionNonTrivial = isIntersectionNonTrivial(lineIntersection);

        if (lineIntersectionNonTrivial) {
          intersection = lineIntersection; ///
        }
      }

      return intersection;
    }
  }, {
    key: 'calculateLineIntersection',
    value: function calculateLineIntersection(line) {
      var linePosition = line.getPosition(),
          lineExtent = line.getExtent(),
          positionComponents = this.position,
          ///
      linePositionComponents = linePosition,
          ///
      lineExtentComponents = lineExtent,
          ///
      firstPositionComponent = first(positionComponents),
          firstLinePositionComponent = first(linePositionComponents),
          firstLineExtentComponent = first(lineExtentComponents),
          lineIntersection = (firstPositionComponent - firstLinePositionComponent) / firstLineExtentComponent;

      return lineIntersection;
    }
  }], [{
    key: 'fromLineInXYPlane',
    value: function fromLineInXYPlane(lineInXYPlane) {
      var lineInXYPlanePosition = lineInXYPlane.getPosition(),
          lineInXYPlaneExtent = lineInXYPlane.getExtent(),
          unitLineInXYPlaneExtent = normalise3(lineInXYPlaneExtent),
          unitLineInXYPlaneExtentComponents = unitLineInXYPlaneExtent,
          ///
      firstUnitLineInXYPlaneExtentComponent = first(unitLineInXYPlaneExtentComponents),
          secondUnitLineInXYPlaneExtentComponent = second(unitLineInXYPlaneExtentComponents),
          angleOfRotationCosine = +secondUnitLineInXYPlaneExtentComponent,
          ///
      angleOfRotationSine = -firstUnitLineInXYPlaneExtentComponent,
          ///
      c = angleOfRotationCosine,
          s = angleOfRotationSine,
          rotationAboutZAxisMatrix = [c, -s, 0, +s, c, 0, 0, 0, 1],
          ///
      position = rotateAboutZAxis(lineInXYPlanePosition, rotationAboutZAxisMatrix);

      var verticalLineInXYPlane = new VerticalLineInXYPlane(position, rotationAboutZAxisMatrix);

      return verticalLineInXYPlane;
    }
  }]);

  return VerticalLineInXYPlane;
}();

module.exports = VerticalLineInXYPlane;

function isLineNonParallel(line) {
  var lineExtent = line.getExtent(),
      lineExtentComponents = lineExtent,
      ///
  firstLineExtentComponent = first(lineExtentComponents),
      secondLineExtentComponent = second(lineExtentComponents),
      lineAngleTangent = firstLineExtentComponent / secondLineExtentComponent,
      lineAngleTangentApproximatelyEqualToZero = isApproximatelyEqualToZero(lineAngleTangent),
      lineParallel = lineAngleTangentApproximatelyEqualToZero,
      ///
  lineNonParallel = !lineParallel;

  return lineNonParallel;
}

function isIntersectionNonTrivial(intersection) {
  var intersectionNonTrivial = intersection > 0 && intersection < 1;

  return intersectionNonTrivial;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,