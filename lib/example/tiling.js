'use strict';

var xgl = require('../../index'),
    ///
necessary = require('necessary');

var configuration = require('../miscellaneous/configuration'),
    ColouredSquare = require('./element/colouredSquare'),
    TexturedQuadrangle = require('./element/texturedQuadrangle');

var Canvas = xgl.Canvas,
    Scene = xgl.Scene,
    Part = xgl.Part,
    Mask = xgl.Mask,
    Camera = xgl.Camera,
    asynchronousUtilities = necessary.asynchronousUtilities,
    forEach = asynchronousUtilities.forEach;


var canvas = new Canvas(),
    mask = React.createElement(
  Mask,
  null,
  React.createElement(ColouredSquare, { scale: [0.25, 0.25, 1], position: [0.125, 0.125, 0] })
);

var tilingExample = function tilingExample() {
  var imageNames = configuration.imageNames,
      imageDirectoryURI = configuration.imageDirectoryURI;


  preloadImages(imageNames, imageDirectoryURI, function (images) {
    return React.createElement(
      Scene,
      { canvas: canvas },
      React.createElement(
        Part,
        { images: images, imageNames: imageNames, imageTiling: true },
        React.createElement(TexturedQuadrangle, { position: [0, 0, 0], imageName: 'paving.jpg', mask: mask }),
        React.createElement(TexturedQuadrangle, { position: [-0.5, -0.5, -0.5], imageName: 'plaster.jpg', mask: mask })
      ),
      React.createElement(Camera, null)
    );
  });
};

module.exports = tilingExample;

function preloadImages(imageNames, imageDirectoryURI, callback) {
  var images = [],
      context = {
    images: images
  };

  forEach(imageNames, function (imageName, next, done, context) {
    var image = new Image(),
        src = imageDirectoryURI + '/' + imageName;

    Object.assign(image, {
      src: src,
      onload: function onload(event) {
        images.push(image);

        next();
      }
    });
  }, done, context);

  function done() {
    var images = context.images;


    callback(images);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlL3RpbGluZy5qcyJdLCJuYW1lcyI6WyJ4Z2wiLCJyZXF1aXJlIiwibmVjZXNzYXJ5IiwiY29uZmlndXJhdGlvbiIsIkNvbG91cmVkU3F1YXJlIiwiVGV4dHVyZWRRdWFkcmFuZ2xlIiwiQ2FudmFzIiwiU2NlbmUiLCJQYXJ0IiwiTWFzayIsIkNhbWVyYSIsImFzeW5jaHJvbm91c1V0aWxpdGllcyIsImZvckVhY2giLCJjYW52YXMiLCJtYXNrIiwidGlsaW5nRXhhbXBsZSIsImltYWdlTmFtZXMiLCJpbWFnZURpcmVjdG9yeVVSSSIsInByZWxvYWRJbWFnZXMiLCJpbWFnZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FsbGJhY2siLCJjb250ZXh0IiwiaW1hZ2VOYW1lIiwibmV4dCIsImRvbmUiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiT2JqZWN0IiwiYXNzaWduIiwib25sb2FkIiwiZXZlbnQiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxNQUFNQyxRQUFRLGFBQVIsQ0FBWjtBQUFBLElBQW9DO0FBQzlCQyxZQUFZRCxRQUFRLFdBQVIsQ0FEbEI7O0FBR0EsSUFBTUUsZ0JBQWdCRixRQUFRLGdDQUFSLENBQXRCO0FBQUEsSUFDTUcsaUJBQWlCSCxRQUFRLDBCQUFSLENBRHZCO0FBQUEsSUFFTUkscUJBQXFCSixRQUFRLDhCQUFSLENBRjNCOztJQUlRSyxNLEdBQXNDTixHLENBQXRDTSxNO0lBQVFDLEssR0FBOEJQLEcsQ0FBOUJPLEs7SUFBT0MsSSxHQUF1QlIsRyxDQUF2QlEsSTtJQUFNQyxJLEdBQWlCVCxHLENBQWpCUyxJO0lBQU1DLE0sR0FBV1YsRyxDQUFYVSxNO0lBQzNCQyxxQixHQUEwQlQsUyxDQUExQlMscUI7SUFDQUMsTyxHQUFZRCxxQixDQUFaQyxPOzs7QUFFUixJQUFNQyxTQUFTLElBQUlQLE1BQUosRUFBZjtBQUFBLElBQ01RLE9BRUU7QUFBQyxNQUFEO0FBQUE7QUFDRSxzQkFBQyxjQUFELElBQWdCLE9BQU8sQ0FBRSxJQUFGLEVBQVEsSUFBUixFQUFjLENBQWQsQ0FBdkIsRUFBMEMsVUFBVSxDQUFFLEtBQUYsRUFBUyxLQUFULEVBQWdCLENBQWhCLENBQXBEO0FBREYsQ0FIUjs7QUFTQSxJQUFNQyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQU07QUFBQSxNQUNsQkMsVUFEa0IsR0FDZ0JiLGFBRGhCLENBQ2xCYSxVQURrQjtBQUFBLE1BQ05DLGlCQURNLEdBQ2dCZCxhQURoQixDQUNOYyxpQkFETTs7O0FBRzFCQyxnQkFBY0YsVUFBZCxFQUEwQkMsaUJBQTFCLEVBQTZDLFVBQUNFLE1BQUQsRUFBWTtBQUN2RCxXQUVFO0FBQUMsV0FBRDtBQUFBLFFBQU8sUUFBUU4sTUFBZjtBQUNFO0FBQUMsWUFBRDtBQUFBLFVBQU0sUUFBUU0sTUFBZCxFQUFzQixZQUFZSCxVQUFsQyxFQUE4QyxpQkFBOUM7QUFDRSw0QkFBQyxrQkFBRCxJQUFvQixVQUFVLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBQTlCLEVBQTJDLFdBQVcsWUFBdEQsRUFBb0UsTUFBTUYsSUFBMUUsR0FERjtBQUVFLDRCQUFDLGtCQUFELElBQW9CLFVBQVUsQ0FBRSxDQUFDLEdBQUgsRUFBUSxDQUFDLEdBQVQsRUFBYyxDQUFDLEdBQWYsQ0FBOUIsRUFBb0QsV0FBVyxhQUEvRCxFQUE4RSxNQUFNQSxJQUFwRjtBQUZGLE9BREY7QUFLRSwwQkFBQyxNQUFEO0FBTEYsS0FGRjtBQVdELEdBWkQ7QUFhRCxDQWhCRDs7QUFrQkFNLE9BQU9DLE9BQVAsR0FBaUJOLGFBQWpCOztBQUVBLFNBQVNHLGFBQVQsQ0FBdUJGLFVBQXZCLEVBQW1DQyxpQkFBbkMsRUFBc0RLLFFBQXRELEVBQWdFO0FBQzlELE1BQU1ILFNBQVMsRUFBZjtBQUFBLE1BQ01JLFVBQVU7QUFDUko7QUFEUSxHQURoQjs7QUFLQVAsVUFBUUksVUFBUixFQUFvQixVQUFDUSxTQUFELEVBQVlDLElBQVosRUFBa0JDLElBQWxCLEVBQXdCSCxPQUF4QixFQUFvQztBQUN0RCxRQUFNSSxRQUFRLElBQUlDLEtBQUosRUFBZDtBQUFBLFFBQ01DLE1BQVNaLGlCQUFULFNBQThCTyxTQURwQzs7QUFHQU0sV0FBT0MsTUFBUCxDQUFjSixLQUFkLEVBQXFCO0FBQ25CRSxjQURtQjtBQUVuQkcsY0FBUSxnQkFBQ0MsS0FBRCxFQUFXO0FBQ2pCZCxlQUFPZSxJQUFQLENBQVlQLEtBQVo7O0FBRUFGO0FBQ0Q7QUFOa0IsS0FBckI7QUFRRCxHQVpELEVBWUdDLElBWkgsRUFZU0gsT0FaVDs7QUFjQSxXQUFTRyxJQUFULEdBQWdCO0FBQUEsUUFDTlAsTUFETSxHQUNLSSxPQURMLENBQ05KLE1BRE07OztBQUdkRyxhQUFTSCxNQUFUO0FBQ0Q7QUFDRiIsImZpbGUiOiJ0aWxpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHhnbCA9IHJlcXVpcmUoJy4uLy4uL2luZGV4JyksIC8vL1xuICAgICAgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IGNvbmZpZ3VyYXRpb24gPSByZXF1aXJlKCcuLi9taXNjZWxsYW5lb3VzL2NvbmZpZ3VyYXRpb24nKSxcbiAgICAgIENvbG91cmVkU3F1YXJlID0gcmVxdWlyZSgnLi9lbGVtZW50L2NvbG91cmVkU3F1YXJlJyksXG4gICAgICBUZXh0dXJlZFF1YWRyYW5nbGUgPSByZXF1aXJlKCcuL2VsZW1lbnQvdGV4dHVyZWRRdWFkcmFuZ2xlJyk7XG5cbmNvbnN0IHsgQ2FudmFzLCBTY2VuZSwgUGFydCwgTWFzaywgQ2FtZXJhIH0gPSB4Z2wsXG4gICAgICB7IGFzeW5jaHJvbm91c1V0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBmb3JFYWNoIH0gPSBhc3luY2hyb25vdXNVdGlsaXRpZXM7XG5cbmNvbnN0IGNhbnZhcyA9IG5ldyBDYW52YXMoKSxcbiAgICAgIG1hc2sgPVxuXG4gICAgICAgIDxNYXNrPlxuICAgICAgICAgIDxDb2xvdXJlZFNxdWFyZSBzY2FsZT17WyAwLjI1LCAwLjI1LCAxIF19IHBvc2l0aW9uPXtbIDAuMTI1LCAwLjEyNSwgMCBdfSAvPlxuICAgICAgICA8L01hc2s+XG5cbiAgICAgIDtcblxuY29uc3QgdGlsaW5nRXhhbXBsZSA9ICgpID0+IHtcbiAgY29uc3QgeyBpbWFnZU5hbWVzLCBpbWFnZURpcmVjdG9yeVVSSSB9ID0gY29uZmlndXJhdGlvbjtcblxuICBwcmVsb2FkSW1hZ2VzKGltYWdlTmFtZXMsIGltYWdlRGlyZWN0b3J5VVJJLCAoaW1hZ2VzKSA9PiB7XG4gICAgcmV0dXJuIChcblxuICAgICAgPFNjZW5lIGNhbnZhcz17Y2FudmFzfT5cbiAgICAgICAgPFBhcnQgaW1hZ2VzPXtpbWFnZXN9IGltYWdlTmFtZXM9e2ltYWdlTmFtZXN9IGltYWdlVGlsaW5nID5cbiAgICAgICAgICA8VGV4dHVyZWRRdWFkcmFuZ2xlIHBvc2l0aW9uPXtbIDAsIDAsIDAgXX0gaW1hZ2VOYW1lPXsncGF2aW5nLmpwZyd9IG1hc2s9e21hc2t9IC8+XG4gICAgICAgICAgPFRleHR1cmVkUXVhZHJhbmdsZSBwb3NpdGlvbj17WyAtMC41LCAtMC41LCAtMC41IF19IGltYWdlTmFtZT17J3BsYXN0ZXIuanBnJ30gbWFzaz17bWFza30gLz5cbiAgICAgICAgPC9QYXJ0PlxuICAgICAgICA8Q2FtZXJhIC8+XG4gICAgICA8L1NjZW5lPlxuXG4gICAgKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRpbGluZ0V4YW1wbGU7XG5cbmZ1bmN0aW9uIHByZWxvYWRJbWFnZXMoaW1hZ2VOYW1lcywgaW1hZ2VEaXJlY3RvcnlVUkksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGltYWdlcyA9IFtdLFxuICAgICAgICBjb250ZXh0ID0ge1xuICAgICAgICAgIGltYWdlc1xuICAgICAgICB9O1xuXG4gIGZvckVhY2goaW1hZ2VOYW1lcywgKGltYWdlTmFtZSwgbmV4dCwgZG9uZSwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCksXG4gICAgICAgICAgc3JjID0gYCR7aW1hZ2VEaXJlY3RvcnlVUkl9LyR7aW1hZ2VOYW1lfWA7XG5cbiAgICBPYmplY3QuYXNzaWduKGltYWdlLCB7XG4gICAgICBzcmMsXG4gICAgICBvbmxvYWQ6IChldmVudCkgPT4ge1xuICAgICAgICBpbWFnZXMucHVzaChpbWFnZSk7XG5cbiAgICAgICAgbmV4dCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LCBkb25lLCBjb250ZXh0KTtcblxuICBmdW5jdGlvbiBkb25lKCkge1xuICAgIGNvbnN0IHsgaW1hZ2VzIH0gPSBjb250ZXh0O1xuXG4gICAgY2FsbGJhY2soaW1hZ2VzKTtcbiAgfVxufVxuIl19