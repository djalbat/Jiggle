'use strict';

var xgl = require('../../index'),
    ///
necessary = require('necessary');

var configuration = require('../miscellaneous/configuration'),
    ColouredSquare = require('./element/colouredSquare'),
    TexturedQuadrangle = require('./element/texturedQuadrangle');

var Canvas = xgl.Canvas,
    Scene = xgl.Scene,
    Part = xgl.Part,
    Mask = xgl.Mask,
    Camera = xgl.Camera,
    asynchronousUtilities = necessary.asynchronousUtilities,
    forEach = asynchronousUtilities.forEach;


var canvas = new Canvas(),
    mask = React.createElement(
  Mask,
  null,
  React.createElement(ColouredSquare, { scale: [0.25, 0.25, 1], position: [0.125, 0.125, 0] })
);

var tilingExample = function tilingExample() {
  var imageNames = configuration.imageNames,
      imageDirectoryURI = configuration.imageDirectoryURI;


  preloadImages(imageNames, imageDirectoryURI, function (images) {
    return React.createElement(
      Scene,
      { canvas: canvas, update: update, done: done },
      React.createElement(
        Part,
        { images: images, imageNames: imageNames, imageTiling: true },
        React.createElement(TexturedQuadrangle, { position: [0, 0, 0], imageName: 'floorboards.jpg', mask: mask }),
        React.createElement(TexturedQuadrangle, { position: [-0.5, -0.5, -0.5], imageName: 'paving.jpg', mask: mask })
      ),
      React.createElement(Camera, null)
    );
  });
};

module.exports = tilingExample;

function preloadImages(imageNames, imageDirectoryURI, callback) {
  var images = [],
      context = {
    images: images
  };

  forEach(imageNames, function (imageName, next, done, context) {
    var image = new Image(),
        src = imageDirectoryURI + '/' + imageName;

    Object.assign(image, {
      src: src,
      onload: onload
    });

    function onload() {
      images.push(image);

      next();
    }
  }, done, context);

  function done() {
    var images = context.images;


    callback(images);
  }
}

function update(progress) {
  console.log(progress);
}

function done() {
  console.log('Done.');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlL3RpbGluZy5qcyJdLCJuYW1lcyI6WyJ4Z2wiLCJyZXF1aXJlIiwibmVjZXNzYXJ5IiwiY29uZmlndXJhdGlvbiIsIkNvbG91cmVkU3F1YXJlIiwiVGV4dHVyZWRRdWFkcmFuZ2xlIiwiQ2FudmFzIiwiU2NlbmUiLCJQYXJ0IiwiTWFzayIsIkNhbWVyYSIsImFzeW5jaHJvbm91c1V0aWxpdGllcyIsImZvckVhY2giLCJjYW52YXMiLCJtYXNrIiwidGlsaW5nRXhhbXBsZSIsImltYWdlTmFtZXMiLCJpbWFnZURpcmVjdG9yeVVSSSIsInByZWxvYWRJbWFnZXMiLCJpbWFnZXMiLCJ1cGRhdGUiLCJkb25lIiwibW9kdWxlIiwiZXhwb3J0cyIsImNhbGxiYWNrIiwiY29udGV4dCIsImltYWdlTmFtZSIsIm5leHQiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiT2JqZWN0IiwiYXNzaWduIiwib25sb2FkIiwicHVzaCIsInByb2dyZXNzIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsTUFBTUMsUUFBUSxhQUFSLENBQVo7QUFBQSxJQUFvQztBQUM5QkMsWUFBWUQsUUFBUSxXQUFSLENBRGxCOztBQUdBLElBQU1FLGdCQUFnQkYsUUFBUSxnQ0FBUixDQUF0QjtBQUFBLElBQ01HLGlCQUFpQkgsUUFBUSwwQkFBUixDQUR2QjtBQUFBLElBRU1JLHFCQUFxQkosUUFBUSw4QkFBUixDQUYzQjs7SUFJUUssTSxHQUFzQ04sRyxDQUF0Q00sTTtJQUFRQyxLLEdBQThCUCxHLENBQTlCTyxLO0lBQU9DLEksR0FBdUJSLEcsQ0FBdkJRLEk7SUFBTUMsSSxHQUFpQlQsRyxDQUFqQlMsSTtJQUFNQyxNLEdBQVdWLEcsQ0FBWFUsTTtJQUMzQkMscUIsR0FBMEJULFMsQ0FBMUJTLHFCO0lBQ0FDLE8sR0FBWUQscUIsQ0FBWkMsTzs7O0FBRVIsSUFBTUMsU0FBUyxJQUFJUCxNQUFKLEVBQWY7QUFBQSxJQUNNUSxPQUVFO0FBQUMsTUFBRDtBQUFBO0FBQ0Usc0JBQUMsY0FBRCxJQUFnQixPQUFPLENBQUUsSUFBRixFQUFRLElBQVIsRUFBYyxDQUFkLENBQXZCLEVBQTBDLFVBQVUsQ0FBRSxLQUFGLEVBQVMsS0FBVCxFQUFnQixDQUFoQixDQUFwRDtBQURGLENBSFI7O0FBU0EsSUFBTUMsZ0JBQWdCLFNBQWhCQSxhQUFnQixHQUFNO0FBQUEsTUFDbEJDLFVBRGtCLEdBQ2dCYixhQURoQixDQUNsQmEsVUFEa0I7QUFBQSxNQUNOQyxpQkFETSxHQUNnQmQsYUFEaEIsQ0FDTmMsaUJBRE07OztBQUcxQkMsZ0JBQWNGLFVBQWQsRUFBMEJDLGlCQUExQixFQUE2QyxVQUFDRSxNQUFELEVBQVk7QUFDdkQsV0FFRTtBQUFDLFdBQUQ7QUFBQSxRQUFPLFFBQVFOLE1BQWYsRUFBdUIsUUFBUU8sTUFBL0IsRUFBdUMsTUFBTUMsSUFBN0M7QUFDRTtBQUFDLFlBQUQ7QUFBQSxVQUFNLFFBQVFGLE1BQWQsRUFBc0IsWUFBWUgsVUFBbEMsRUFBOEMsaUJBQTlDO0FBQ0UsNEJBQUMsa0JBQUQsSUFBb0IsVUFBVSxDQUFFLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixDQUE5QixFQUEyQyxXQUFXLGlCQUF0RCxFQUF5RSxNQUFNRixJQUEvRSxHQURGO0FBRUUsNEJBQUMsa0JBQUQsSUFBb0IsVUFBVSxDQUFFLENBQUMsR0FBSCxFQUFRLENBQUMsR0FBVCxFQUFjLENBQUMsR0FBZixDQUE5QixFQUFvRCxXQUFXLFlBQS9ELEVBQTZFLE1BQU1BLElBQW5GO0FBRkYsT0FERjtBQUtFLDBCQUFDLE1BQUQ7QUFMRixLQUZGO0FBV0QsR0FaRDtBQWFELENBaEJEOztBQWtCQVEsT0FBT0MsT0FBUCxHQUFpQlIsYUFBakI7O0FBRUEsU0FBU0csYUFBVCxDQUF1QkYsVUFBdkIsRUFBbUNDLGlCQUFuQyxFQUFzRE8sUUFBdEQsRUFBZ0U7QUFDOUQsTUFBTUwsU0FBUyxFQUFmO0FBQUEsTUFDTU0sVUFBVTtBQUNSTjtBQURRLEdBRGhCOztBQUtBUCxVQUFRSSxVQUFSLEVBQW9CLFVBQUNVLFNBQUQsRUFBWUMsSUFBWixFQUFrQk4sSUFBbEIsRUFBd0JJLE9BQXhCLEVBQW9DO0FBQ3RELFFBQU1HLFFBQVEsSUFBSUMsS0FBSixFQUFkO0FBQUEsUUFDTUMsTUFBU2IsaUJBQVQsU0FBOEJTLFNBRHBDOztBQUdBSyxXQUFPQyxNQUFQLENBQWNKLEtBQWQsRUFBcUI7QUFDbkJFLGNBRG1CO0FBRW5CRztBQUZtQixLQUFyQjs7QUFLQSxhQUFTQSxNQUFULEdBQWtCO0FBQ2hCZCxhQUFPZSxJQUFQLENBQVlOLEtBQVo7O0FBRUFEO0FBQ0Q7QUFDRixHQWRELEVBY0dOLElBZEgsRUFjU0ksT0FkVDs7QUFnQkEsV0FBU0osSUFBVCxHQUFnQjtBQUFBLFFBQ05GLE1BRE0sR0FDS00sT0FETCxDQUNOTixNQURNOzs7QUFHZEssYUFBU0wsTUFBVDtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0MsTUFBVCxDQUFnQmUsUUFBaEIsRUFBMEI7QUFDeEJDLFVBQVFDLEdBQVIsQ0FBWUYsUUFBWjtBQUNEOztBQUVELFNBQVNkLElBQVQsR0FBZ0I7QUFDZGUsVUFBUUMsR0FBUixDQUFZLE9BQVo7QUFDRCIsImZpbGUiOiJ0aWxpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHhnbCA9IHJlcXVpcmUoJy4uLy4uL2luZGV4JyksIC8vL1xuICAgICAgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IGNvbmZpZ3VyYXRpb24gPSByZXF1aXJlKCcuLi9taXNjZWxsYW5lb3VzL2NvbmZpZ3VyYXRpb24nKSxcbiAgICAgIENvbG91cmVkU3F1YXJlID0gcmVxdWlyZSgnLi9lbGVtZW50L2NvbG91cmVkU3F1YXJlJyksXG4gICAgICBUZXh0dXJlZFF1YWRyYW5nbGUgPSByZXF1aXJlKCcuL2VsZW1lbnQvdGV4dHVyZWRRdWFkcmFuZ2xlJyk7XG5cbmNvbnN0IHsgQ2FudmFzLCBTY2VuZSwgUGFydCwgTWFzaywgQ2FtZXJhIH0gPSB4Z2wsXG4gICAgICB7IGFzeW5jaHJvbm91c1V0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBmb3JFYWNoIH0gPSBhc3luY2hyb25vdXNVdGlsaXRpZXM7XG5cbmNvbnN0IGNhbnZhcyA9IG5ldyBDYW52YXMoKSxcbiAgICAgIG1hc2sgPVxuXG4gICAgICAgIDxNYXNrPlxuICAgICAgICAgIDxDb2xvdXJlZFNxdWFyZSBzY2FsZT17WyAwLjI1LCAwLjI1LCAxIF19IHBvc2l0aW9uPXtbIDAuMTI1LCAwLjEyNSwgMCBdfSAvPlxuICAgICAgICA8L01hc2s+XG5cbiAgICAgIDtcblxuY29uc3QgdGlsaW5nRXhhbXBsZSA9ICgpID0+IHtcbiAgY29uc3QgeyBpbWFnZU5hbWVzLCBpbWFnZURpcmVjdG9yeVVSSSB9ID0gY29uZmlndXJhdGlvbjtcblxuICBwcmVsb2FkSW1hZ2VzKGltYWdlTmFtZXMsIGltYWdlRGlyZWN0b3J5VVJJLCAoaW1hZ2VzKSA9PiB7XG4gICAgcmV0dXJuIChcblxuICAgICAgPFNjZW5lIGNhbnZhcz17Y2FudmFzfSB1cGRhdGU9e3VwZGF0ZX0gZG9uZT17ZG9uZX0gPlxuICAgICAgICA8UGFydCBpbWFnZXM9e2ltYWdlc30gaW1hZ2VOYW1lcz17aW1hZ2VOYW1lc30gaW1hZ2VUaWxpbmcgPlxuICAgICAgICAgIDxUZXh0dXJlZFF1YWRyYW5nbGUgcG9zaXRpb249e1sgMCwgMCwgMCBdfSBpbWFnZU5hbWU9eydmbG9vcmJvYXJkcy5qcGcnfSBtYXNrPXttYXNrfSAvPlxuICAgICAgICAgIDxUZXh0dXJlZFF1YWRyYW5nbGUgcG9zaXRpb249e1sgLTAuNSwgLTAuNSwgLTAuNSBdfSBpbWFnZU5hbWU9eydwYXZpbmcuanBnJ30gbWFzaz17bWFza30gLz5cbiAgICAgICAgPC9QYXJ0PlxuICAgICAgICA8Q2FtZXJhIC8+XG4gICAgICA8L1NjZW5lPlxuXG4gICAgKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRpbGluZ0V4YW1wbGU7XG5cbmZ1bmN0aW9uIHByZWxvYWRJbWFnZXMoaW1hZ2VOYW1lcywgaW1hZ2VEaXJlY3RvcnlVUkksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGltYWdlcyA9IFtdLFxuICAgICAgICBjb250ZXh0ID0ge1xuICAgICAgICAgIGltYWdlc1xuICAgICAgICB9O1xuXG4gIGZvckVhY2goaW1hZ2VOYW1lcywgKGltYWdlTmFtZSwgbmV4dCwgZG9uZSwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCksXG4gICAgICAgICAgc3JjID0gYCR7aW1hZ2VEaXJlY3RvcnlVUkl9LyR7aW1hZ2VOYW1lfWA7XG5cbiAgICBPYmplY3QuYXNzaWduKGltYWdlLCB7XG4gICAgICBzcmMsXG4gICAgICBvbmxvYWRcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZCgpIHtcbiAgICAgIGltYWdlcy5wdXNoKGltYWdlKTtcblxuICAgICAgbmV4dCgpO1xuICAgIH1cbiAgfSwgZG9uZSwgY29udGV4dCk7XG5cbiAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICBjb25zdCB7IGltYWdlcyB9ID0gY29udGV4dDtcblxuICAgIGNhbGxiYWNrKGltYWdlcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlKHByb2dyZXNzKSB7XG4gIGNvbnNvbGUubG9nKHByb2dyZXNzKTtcbn1cblxuZnVuY3Rpb24gZG9uZSgpIHtcbiAgY29uc29sZS5sb2coJ0RvbmUuJyk7XG59XG4iXX0=