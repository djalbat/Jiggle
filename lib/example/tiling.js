'use strict';

var xgl = require('../../index'),
    ///
necessary = require('necessary');

var configuration = require('../miscellaneous/configuration'),
    ColouredSquare = require('./element/colouredSquare'),
    TexturedQuadrangle = require('./element/texturedQuadrangle');

var Canvas = xgl.Canvas,
    Scene = xgl.Scene,
    Part = xgl.Part,
    Mask = xgl.Mask,
    Camera = xgl.Camera,
    asynchronousUtilities = necessary.asynchronousUtilities,
    forEach = asynchronousUtilities.forEach;


var canvas = new Canvas(),
    mask = React.createElement(
  Mask,
  null,
  React.createElement(ColouredSquare, { scale: [0.25, 0.25, 1], position: [0.125, 0.125, 0] })
);

var tilingExample = function tilingExample() {
  var imageNames = configuration.imageNames,
      imageDirectoryURI = configuration.imageDirectoryURI;


  preloadImages(imageNames, imageDirectoryURI, function (images) {
    return React.createElement(
      Scene,
      { canvas: canvas, done: done },
      React.createElement(
        Part,
        { images: images, imageNames: imageNames, imageTiling: true },
        React.createElement(TexturedQuadrangle, { position: [0, 0, 0], imageName: 'floorboards.jpg', mask: mask }),
        React.createElement(TexturedQuadrangle, { position: [-0.5, -0.5, -0.5], imageName: 'paving.jpg', mask: mask })
      ),
      React.createElement(Camera, null)
    );
  });
};

module.exports = tilingExample;

function preloadImages(imageNames, imageDirectoryURI, callback) {
  var images = [],
      context = {
    images: images
  };

  forEach(imageNames, function (imageName, next, done, context) {
    var image = new Image(),
        src = imageDirectoryURI + '/' + imageName;

    Object.assign(image, {
      src: src,
      onload: onload
    });

    function onload() {
      images.push(image);

      next();
    }
  }, done, context);

  function done() {
    var images = context.images;


    callback(images);
  }
}

function done() {
  console.log('Done!');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlL3RpbGluZy5qcyJdLCJuYW1lcyI6WyJ4Z2wiLCJyZXF1aXJlIiwibmVjZXNzYXJ5IiwiY29uZmlndXJhdGlvbiIsIkNvbG91cmVkU3F1YXJlIiwiVGV4dHVyZWRRdWFkcmFuZ2xlIiwiQ2FudmFzIiwiU2NlbmUiLCJQYXJ0IiwiTWFzayIsIkNhbWVyYSIsImFzeW5jaHJvbm91c1V0aWxpdGllcyIsImZvckVhY2giLCJjYW52YXMiLCJtYXNrIiwidGlsaW5nRXhhbXBsZSIsImltYWdlTmFtZXMiLCJpbWFnZURpcmVjdG9yeVVSSSIsInByZWxvYWRJbWFnZXMiLCJpbWFnZXMiLCJkb25lIiwibW9kdWxlIiwiZXhwb3J0cyIsImNhbGxiYWNrIiwiY29udGV4dCIsImltYWdlTmFtZSIsIm5leHQiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiT2JqZWN0IiwiYXNzaWduIiwib25sb2FkIiwicHVzaCIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLE1BQU1DLFFBQVEsYUFBUixDQUFaO0FBQUEsSUFBb0M7QUFDOUJDLFlBQVlELFFBQVEsV0FBUixDQURsQjs7QUFHQSxJQUFNRSxnQkFBZ0JGLFFBQVEsZ0NBQVIsQ0FBdEI7QUFBQSxJQUNNRyxpQkFBaUJILFFBQVEsMEJBQVIsQ0FEdkI7QUFBQSxJQUVNSSxxQkFBcUJKLFFBQVEsOEJBQVIsQ0FGM0I7O0lBSVFLLE0sR0FBc0NOLEcsQ0FBdENNLE07SUFBUUMsSyxHQUE4QlAsRyxDQUE5Qk8sSztJQUFPQyxJLEdBQXVCUixHLENBQXZCUSxJO0lBQU1DLEksR0FBaUJULEcsQ0FBakJTLEk7SUFBTUMsTSxHQUFXVixHLENBQVhVLE07SUFDM0JDLHFCLEdBQTBCVCxTLENBQTFCUyxxQjtJQUNBQyxPLEdBQVlELHFCLENBQVpDLE87OztBQUVSLElBQU1DLFNBQVMsSUFBSVAsTUFBSixFQUFmO0FBQUEsSUFDTVEsT0FFRTtBQUFDLE1BQUQ7QUFBQTtBQUNFLHNCQUFDLGNBQUQsSUFBZ0IsT0FBTyxDQUFFLElBQUYsRUFBUSxJQUFSLEVBQWMsQ0FBZCxDQUF2QixFQUEwQyxVQUFVLENBQUUsS0FBRixFQUFTLEtBQVQsRUFBZ0IsQ0FBaEIsQ0FBcEQ7QUFERixDQUhSOztBQVNBLElBQU1DLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBTTtBQUFBLE1BQ2xCQyxVQURrQixHQUNnQmIsYUFEaEIsQ0FDbEJhLFVBRGtCO0FBQUEsTUFDTkMsaUJBRE0sR0FDZ0JkLGFBRGhCLENBQ05jLGlCQURNOzs7QUFHMUJDLGdCQUFjRixVQUFkLEVBQTBCQyxpQkFBMUIsRUFBNkMsVUFBQ0UsTUFBRCxFQUFZO0FBQ3ZELFdBRUU7QUFBQyxXQUFEO0FBQUEsUUFBTyxRQUFRTixNQUFmLEVBQXVCLE1BQU1PLElBQTdCO0FBQ0U7QUFBQyxZQUFEO0FBQUEsVUFBTSxRQUFRRCxNQUFkLEVBQXNCLFlBQVlILFVBQWxDLEVBQThDLGlCQUE5QztBQUNFLDRCQUFDLGtCQUFELElBQW9CLFVBQVUsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsQ0FBOUIsRUFBMkMsV0FBVyxpQkFBdEQsRUFBeUUsTUFBTUYsSUFBL0UsR0FERjtBQUVFLDRCQUFDLGtCQUFELElBQW9CLFVBQVUsQ0FBRSxDQUFDLEdBQUgsRUFBUSxDQUFDLEdBQVQsRUFBYyxDQUFDLEdBQWYsQ0FBOUIsRUFBb0QsV0FBVyxZQUEvRCxFQUE2RSxNQUFNQSxJQUFuRjtBQUZGLE9BREY7QUFLRSwwQkFBQyxNQUFEO0FBTEYsS0FGRjtBQVdELEdBWkQ7QUFhRCxDQWhCRDs7QUFrQkFPLE9BQU9DLE9BQVAsR0FBaUJQLGFBQWpCOztBQUVBLFNBQVNHLGFBQVQsQ0FBdUJGLFVBQXZCLEVBQW1DQyxpQkFBbkMsRUFBc0RNLFFBQXRELEVBQWdFO0FBQzlELE1BQU1KLFNBQVMsRUFBZjtBQUFBLE1BQ01LLFVBQVU7QUFDUkw7QUFEUSxHQURoQjs7QUFLQVAsVUFBUUksVUFBUixFQUFvQixVQUFDUyxTQUFELEVBQVlDLElBQVosRUFBa0JOLElBQWxCLEVBQXdCSSxPQUF4QixFQUFvQztBQUN0RCxRQUFNRyxRQUFRLElBQUlDLEtBQUosRUFBZDtBQUFBLFFBQ01DLE1BQVNaLGlCQUFULFNBQThCUSxTQURwQzs7QUFHQUssV0FBT0MsTUFBUCxDQUFjSixLQUFkLEVBQXFCO0FBQ25CRSxjQURtQjtBQUVuQkc7QUFGbUIsS0FBckI7O0FBS0EsYUFBU0EsTUFBVCxHQUFrQjtBQUNoQmIsYUFBT2MsSUFBUCxDQUFZTixLQUFaOztBQUVBRDtBQUNEO0FBQ0YsR0FkRCxFQWNHTixJQWRILEVBY1NJLE9BZFQ7O0FBZ0JBLFdBQVNKLElBQVQsR0FBZ0I7QUFBQSxRQUNORCxNQURNLEdBQ0tLLE9BREwsQ0FDTkwsTUFETTs7O0FBR2RJLGFBQVNKLE1BQVQ7QUFDRDtBQUNGOztBQUVELFNBQVNDLElBQVQsR0FBZ0I7QUFDZGMsVUFBUUMsR0FBUixDQUFZLE9BQVo7QUFDRCIsImZpbGUiOiJ0aWxpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHhnbCA9IHJlcXVpcmUoJy4uLy4uL2luZGV4JyksIC8vL1xuICAgICAgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IGNvbmZpZ3VyYXRpb24gPSByZXF1aXJlKCcuLi9taXNjZWxsYW5lb3VzL2NvbmZpZ3VyYXRpb24nKSxcbiAgICAgIENvbG91cmVkU3F1YXJlID0gcmVxdWlyZSgnLi9lbGVtZW50L2NvbG91cmVkU3F1YXJlJyksXG4gICAgICBUZXh0dXJlZFF1YWRyYW5nbGUgPSByZXF1aXJlKCcuL2VsZW1lbnQvdGV4dHVyZWRRdWFkcmFuZ2xlJyk7XG5cbmNvbnN0IHsgQ2FudmFzLCBTY2VuZSwgUGFydCwgTWFzaywgQ2FtZXJhIH0gPSB4Z2wsXG4gICAgICB7IGFzeW5jaHJvbm91c1V0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBmb3JFYWNoIH0gPSBhc3luY2hyb25vdXNVdGlsaXRpZXM7XG5cbmNvbnN0IGNhbnZhcyA9IG5ldyBDYW52YXMoKSxcbiAgICAgIG1hc2sgPVxuXG4gICAgICAgIDxNYXNrPlxuICAgICAgICAgIDxDb2xvdXJlZFNxdWFyZSBzY2FsZT17WyAwLjI1LCAwLjI1LCAxIF19IHBvc2l0aW9uPXtbIDAuMTI1LCAwLjEyNSwgMCBdfSAvPlxuICAgICAgICA8L01hc2s+XG5cbiAgICAgIDtcblxuY29uc3QgdGlsaW5nRXhhbXBsZSA9ICgpID0+IHtcbiAgY29uc3QgeyBpbWFnZU5hbWVzLCBpbWFnZURpcmVjdG9yeVVSSSB9ID0gY29uZmlndXJhdGlvbjtcblxuICBwcmVsb2FkSW1hZ2VzKGltYWdlTmFtZXMsIGltYWdlRGlyZWN0b3J5VVJJLCAoaW1hZ2VzKSA9PiB7XG4gICAgcmV0dXJuIChcblxuICAgICAgPFNjZW5lIGNhbnZhcz17Y2FudmFzfSBkb25lPXtkb25lfT5cbiAgICAgICAgPFBhcnQgaW1hZ2VzPXtpbWFnZXN9IGltYWdlTmFtZXM9e2ltYWdlTmFtZXN9IGltYWdlVGlsaW5nID5cbiAgICAgICAgICA8VGV4dHVyZWRRdWFkcmFuZ2xlIHBvc2l0aW9uPXtbIDAsIDAsIDAgXX0gaW1hZ2VOYW1lPXsnZmxvb3Jib2FyZHMuanBnJ30gbWFzaz17bWFza30gLz5cbiAgICAgICAgICA8VGV4dHVyZWRRdWFkcmFuZ2xlIHBvc2l0aW9uPXtbIC0wLjUsIC0wLjUsIC0wLjUgXX0gaW1hZ2VOYW1lPXsncGF2aW5nLmpwZyd9IG1hc2s9e21hc2t9IC8+XG4gICAgICAgIDwvUGFydD5cbiAgICAgICAgPENhbWVyYSAvPlxuICAgICAgPC9TY2VuZT5cblxuICAgICk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB0aWxpbmdFeGFtcGxlO1xuXG5mdW5jdGlvbiBwcmVsb2FkSW1hZ2VzKGltYWdlTmFtZXMsIGltYWdlRGlyZWN0b3J5VVJJLCBjYWxsYmFjaykge1xuICBjb25zdCBpbWFnZXMgPSBbXSxcbiAgICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgICBpbWFnZXNcbiAgICAgICAgfTtcblxuICBmb3JFYWNoKGltYWdlTmFtZXMsIChpbWFnZU5hbWUsIG5leHQsIGRvbmUsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpLFxuICAgICAgICAgIHNyYyA9IGAke2ltYWdlRGlyZWN0b3J5VVJJfS8ke2ltYWdlTmFtZX1gO1xuXG4gICAgT2JqZWN0LmFzc2lnbihpbWFnZSwge1xuICAgICAgc3JjLFxuICAgICAgb25sb2FkXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWQoKSB7XG4gICAgICBpbWFnZXMucHVzaChpbWFnZSk7XG5cbiAgICAgIG5leHQoKTtcbiAgICB9XG4gIH0sIGRvbmUsIGNvbnRleHQpO1xuXG4gIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgY29uc3QgeyBpbWFnZXMgfSA9IGNvbnRleHQ7XG5cbiAgICBjYWxsYmFjayhpbWFnZXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRvbmUoKSB7XG4gIGNvbnNvbGUubG9nKCdEb25lIScpO1xufVxuIl19