'use strict';

var xgl = require('../../index'),
    ///
necessary = require('necessary');

var configuration = require('../miscellaneous/configuration'),
    ColouredSquare = require('./element/colouredSquare'),
    TexturedQuadrangle = require('./element/texturedQuadrangle');

var Canvas = xgl.Canvas,
    Scene = xgl.Scene,
    Part = xgl.Part,
    Mask = xgl.Mask,
    Camera = xgl.Camera,
    asynchronousUtilities = necessary.asynchronousUtilities,
    forEach = asynchronousUtilities.forEach;


var canvas = new Canvas(),
    mask = React.createElement(
  Mask,
  null,
  React.createElement(ColouredSquare, { scale: [0.25, 0.25, 1], position: [0.125, 0.125, 0] })
);

var tilingExample = function tilingExample() {
  var imageNames = configuration.imageNames,
      imageDirectoryURI = configuration.imageDirectoryURI;


  preloadImages(imageNames, imageDirectoryURI, function (images) {
    return React.createElement(
      Scene,
      { canvas: canvas },
      React.createElement(
        Part,
        { images: images, imageNames: imageNames, imageTiling: true },
        React.createElement(TexturedQuadrangle, { position: [0, 0, 0], imageName: 'floorboards.jpg', mask: mask }),
        React.createElement(TexturedQuadrangle, { position: [-0.5, -0.5, -0.5], imageName: 'paving.jpg', mask: mask })
      ),
      React.createElement(Camera, null)
    );
  });
};

module.exports = tilingExample;

function preloadImages(imageNames, imageDirectoryURI, callback) {
  var images = [],
      context = {
    images: images
  };

  forEach(imageNames, function (imageName, next, done, context) {
    var image = new Image(),
        src = imageDirectoryURI + '/' + imageName;

    Object.assign(image, {
      src: src,
      onload: function onload(event) {
        images.push(image);

        next();
      }
    });
  }, done, context);

  function done() {
    var images = context.images;


    callback(images);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlL3RpbGluZy5qcyJdLCJuYW1lcyI6WyJ4Z2wiLCJyZXF1aXJlIiwibmVjZXNzYXJ5IiwiY29uZmlndXJhdGlvbiIsIkNvbG91cmVkU3F1YXJlIiwiVGV4dHVyZWRRdWFkcmFuZ2xlIiwiQ2FudmFzIiwiU2NlbmUiLCJQYXJ0IiwiTWFzayIsIkNhbWVyYSIsImFzeW5jaHJvbm91c1V0aWxpdGllcyIsImZvckVhY2giLCJjYW52YXMiLCJtYXNrIiwidGlsaW5nRXhhbXBsZSIsImltYWdlTmFtZXMiLCJpbWFnZURpcmVjdG9yeVVSSSIsInByZWxvYWRJbWFnZXMiLCJpbWFnZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FsbGJhY2siLCJjb250ZXh0IiwiaW1hZ2VOYW1lIiwibmV4dCIsImRvbmUiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiT2JqZWN0IiwiYXNzaWduIiwib25sb2FkIiwiZXZlbnQiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxNQUFNQyxRQUFRLGFBQVIsQ0FBWjtBQUFBLElBQW9DO0FBQzlCQyxZQUFZRCxRQUFRLFdBQVIsQ0FEbEI7O0FBR0EsSUFBTUUsZ0JBQWdCRixRQUFRLGdDQUFSLENBQXRCO0FBQUEsSUFDTUcsaUJBQWlCSCxRQUFRLDBCQUFSLENBRHZCO0FBQUEsSUFFTUkscUJBQXFCSixRQUFRLDhCQUFSLENBRjNCOztJQUlRSyxNLEdBQXNDTixHLENBQXRDTSxNO0lBQVFDLEssR0FBOEJQLEcsQ0FBOUJPLEs7SUFBT0MsSSxHQUF1QlIsRyxDQUF2QlEsSTtJQUFNQyxJLEdBQWlCVCxHLENBQWpCUyxJO0lBQU1DLE0sR0FBV1YsRyxDQUFYVSxNO0lBQzNCQyxxQixHQUEwQlQsUyxDQUExQlMscUI7SUFDQUMsTyxHQUFZRCxxQixDQUFaQyxPOzs7QUFFUixJQUFNQyxTQUFTLElBQUlQLE1BQUosRUFBZjtBQUFBLElBQ01RLE9BRUU7QUFBQyxNQUFEO0FBQUE7QUFDRSxzQkFBQyxjQUFELElBQWdCLE9BQU8sQ0FBRSxJQUFGLEVBQVEsSUFBUixFQUFjLENBQWQsQ0FBdkIsRUFBMEMsVUFBVSxDQUFFLEtBQUYsRUFBUyxLQUFULEVBQWdCLENBQWhCLENBQXBEO0FBREYsQ0FIUjs7QUFTQSxJQUFNQyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQU07QUFBQSxNQUNsQkMsVUFEa0IsR0FDZ0JiLGFBRGhCLENBQ2xCYSxVQURrQjtBQUFBLE1BQ05DLGlCQURNLEdBQ2dCZCxhQURoQixDQUNOYyxpQkFETTs7O0FBRzFCQyxnQkFBY0YsVUFBZCxFQUEwQkMsaUJBQTFCLEVBQTZDLFVBQUNFLE1BQUQsRUFBWTtBQUN2RCxXQUVFO0FBQUMsV0FBRDtBQUFBLFFBQU8sUUFBUU4sTUFBZjtBQUNFO0FBQUMsWUFBRDtBQUFBLFVBQU0sUUFBUU0sTUFBZCxFQUFzQixZQUFZSCxVQUFsQyxFQUE4QyxpQkFBOUM7QUFDRSw0QkFBQyxrQkFBRCxJQUFvQixVQUFVLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBQTlCLEVBQTJDLFdBQVcsaUJBQXRELEVBQXlFLE1BQU1GLElBQS9FLEdBREY7QUFFRSw0QkFBQyxrQkFBRCxJQUFvQixVQUFVLENBQUUsQ0FBQyxHQUFILEVBQVEsQ0FBQyxHQUFULEVBQWMsQ0FBQyxHQUFmLENBQTlCLEVBQW9ELFdBQVcsWUFBL0QsRUFBNkUsTUFBTUEsSUFBbkY7QUFGRixPQURGO0FBS0UsMEJBQUMsTUFBRDtBQUxGLEtBRkY7QUFXRCxHQVpEO0FBYUQsQ0FoQkQ7O0FBa0JBTSxPQUFPQyxPQUFQLEdBQWlCTixhQUFqQjs7QUFFQSxTQUFTRyxhQUFULENBQXVCRixVQUF2QixFQUFtQ0MsaUJBQW5DLEVBQXNESyxRQUF0RCxFQUFnRTtBQUM5RCxNQUFNSCxTQUFTLEVBQWY7QUFBQSxNQUNNSSxVQUFVO0FBQ1JKO0FBRFEsR0FEaEI7O0FBS0FQLFVBQVFJLFVBQVIsRUFBb0IsVUFBQ1EsU0FBRCxFQUFZQyxJQUFaLEVBQWtCQyxJQUFsQixFQUF3QkgsT0FBeEIsRUFBb0M7QUFDdEQsUUFBTUksUUFBUSxJQUFJQyxLQUFKLEVBQWQ7QUFBQSxRQUNNQyxNQUFTWixpQkFBVCxTQUE4Qk8sU0FEcEM7O0FBR0FNLFdBQU9DLE1BQVAsQ0FBY0osS0FBZCxFQUFxQjtBQUNuQkUsY0FEbUI7QUFFbkJHLGNBQVEsZ0JBQUNDLEtBQUQsRUFBVztBQUNqQmQsZUFBT2UsSUFBUCxDQUFZUCxLQUFaOztBQUVBRjtBQUNEO0FBTmtCLEtBQXJCO0FBUUQsR0FaRCxFQVlHQyxJQVpILEVBWVNILE9BWlQ7O0FBY0EsV0FBU0csSUFBVCxHQUFnQjtBQUFBLFFBQ05QLE1BRE0sR0FDS0ksT0FETCxDQUNOSixNQURNOzs7QUFHZEcsYUFBU0gsTUFBVDtBQUNEO0FBQ0YiLCJmaWxlIjoidGlsaW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB4Z2wgPSByZXF1aXJlKCcuLi8uLi9pbmRleCcpLCAvLy9cbiAgICAgIG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCBjb25maWd1cmF0aW9uID0gcmVxdWlyZSgnLi4vbWlzY2VsbGFuZW91cy9jb25maWd1cmF0aW9uJyksXG4gICAgICBDb2xvdXJlZFNxdWFyZSA9IHJlcXVpcmUoJy4vZWxlbWVudC9jb2xvdXJlZFNxdWFyZScpLFxuICAgICAgVGV4dHVyZWRRdWFkcmFuZ2xlID0gcmVxdWlyZSgnLi9lbGVtZW50L3RleHR1cmVkUXVhZHJhbmdsZScpO1xuXG5jb25zdCB7IENhbnZhcywgU2NlbmUsIFBhcnQsIE1hc2ssIENhbWVyYSB9ID0geGdsLFxuICAgICAgeyBhc3luY2hyb25vdXNVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgZm9yRWFjaCB9ID0gYXN5bmNocm9ub3VzVXRpbGl0aWVzO1xuXG5jb25zdCBjYW52YXMgPSBuZXcgQ2FudmFzKCksXG4gICAgICBtYXNrID1cblxuICAgICAgICA8TWFzaz5cbiAgICAgICAgICA8Q29sb3VyZWRTcXVhcmUgc2NhbGU9e1sgMC4yNSwgMC4yNSwgMSBdfSBwb3NpdGlvbj17WyAwLjEyNSwgMC4xMjUsIDAgXX0gLz5cbiAgICAgICAgPC9NYXNrPlxuXG4gICAgICA7XG5cbmNvbnN0IHRpbGluZ0V4YW1wbGUgPSAoKSA9PiB7XG4gIGNvbnN0IHsgaW1hZ2VOYW1lcywgaW1hZ2VEaXJlY3RvcnlVUkkgfSA9IGNvbmZpZ3VyYXRpb247XG5cbiAgcHJlbG9hZEltYWdlcyhpbWFnZU5hbWVzLCBpbWFnZURpcmVjdG9yeVVSSSwgKGltYWdlcykgPT4ge1xuICAgIHJldHVybiAoXG5cbiAgICAgIDxTY2VuZSBjYW52YXM9e2NhbnZhc30+XG4gICAgICAgIDxQYXJ0IGltYWdlcz17aW1hZ2VzfSBpbWFnZU5hbWVzPXtpbWFnZU5hbWVzfSBpbWFnZVRpbGluZyA+XG4gICAgICAgICAgPFRleHR1cmVkUXVhZHJhbmdsZSBwb3NpdGlvbj17WyAwLCAwLCAwIF19IGltYWdlTmFtZT17J2Zsb29yYm9hcmRzLmpwZyd9IG1hc2s9e21hc2t9IC8+XG4gICAgICAgICAgPFRleHR1cmVkUXVhZHJhbmdsZSBwb3NpdGlvbj17WyAtMC41LCAtMC41LCAtMC41IF19IGltYWdlTmFtZT17J3BhdmluZy5qcGcnfSBtYXNrPXttYXNrfSAvPlxuICAgICAgICA8L1BhcnQ+XG4gICAgICAgIDxDYW1lcmEgLz5cbiAgICAgIDwvU2NlbmU+XG5cbiAgICApO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdGlsaW5nRXhhbXBsZTtcblxuZnVuY3Rpb24gcHJlbG9hZEltYWdlcyhpbWFnZU5hbWVzLCBpbWFnZURpcmVjdG9yeVVSSSwgY2FsbGJhY2spIHtcbiAgY29uc3QgaW1hZ2VzID0gW10sXG4gICAgICAgIGNvbnRleHQgPSB7XG4gICAgICAgICAgaW1hZ2VzXG4gICAgICAgIH07XG5cbiAgZm9yRWFjaChpbWFnZU5hbWVzLCAoaW1hZ2VOYW1lLCBuZXh0LCBkb25lLCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKSxcbiAgICAgICAgICBzcmMgPSBgJHtpbWFnZURpcmVjdG9yeVVSSX0vJHtpbWFnZU5hbWV9YDtcblxuICAgIE9iamVjdC5hc3NpZ24oaW1hZ2UsIHtcbiAgICAgIHNyYyxcbiAgICAgIG9ubG9hZDogKGV2ZW50KSA9PiB7XG4gICAgICAgIGltYWdlcy5wdXNoKGltYWdlKTtcblxuICAgICAgICBuZXh0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sIGRvbmUsIGNvbnRleHQpO1xuXG4gIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgY29uc3QgeyBpbWFnZXMgfSA9IGNvbnRleHQ7XG5cbiAgICBjYWxsYmFjayhpbWFnZXMpO1xuICB9XG59XG4iXX0=