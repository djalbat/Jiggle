'use strict';

var xgl = require('../../index'),
    ///
necessary = require('necessary');

var configuration = require('../miscellaneous/configuration'),
    ColouredSquare = require('./element/colouredSquare'),
    TexturedQuadrangle = require('./element/texturedQuadrangle');

var Canvas = xgl.Canvas,
    Scene = xgl.Scene,
    Part = xgl.Part,
    Mask = xgl.Mask,
    DesignCamera = xgl.DesignCamera,
    asynchronousUtilities = necessary.asynchronousUtilities,
    forEach = asynchronousUtilities.forEach;
var canvas = new Canvas(),
    mask = React.createElement(Mask, null, React.createElement(ColouredSquare, {
  scale: [0.25, 0.25, 1],
  position: [0.125, 0.125, 0]
}));

var tilingExample = function tilingExample() {
  var imageNames = configuration.imageNames,
      imageDirectoryURI = configuration.imageDirectoryURI;
  preloadImages(imageNames, imageDirectoryURI, function (images) {
    return React.createElement(Scene, {
      canvas: canvas
    }, React.createElement(Part, {
      images: images,
      imageNames: imageNames,
      imageTiling: true
    }, React.createElement(TexturedQuadrangle, {
      position: [0, 0, 0],
      imageName: 'floorboards.jpg',
      mask: mask
    }), React.createElement(TexturedQuadrangle, {
      position: [-0.5, -0.5, -0.5],
      imageName: 'paving.jpg',
      mask: mask
    })), React.createElement(DesignCamera, null));
  });
};

module.exports = tilingExample;

function preloadImages(imageNames, imageDirectoryURI, callback) {
  var images = [],
      context = {
    images: images
  };
  forEach(imageNames, function (imageName, next, done, context) {
    var image = new Image(),
        src = "".concat(imageDirectoryURI, "/").concat(imageName);
    Object.assign(image, {
      src: src,
      onload: onload
    });

    function onload() {
      images.push(image);
      next();
    }
  }, done, context);

  function done() {
    var images = context.images;
    callback(images);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRpbGluZy5qcyJdLCJuYW1lcyI6WyJ4Z2wiLCJyZXF1aXJlIiwibmVjZXNzYXJ5IiwiY29uZmlndXJhdGlvbiIsIkNvbG91cmVkU3F1YXJlIiwiVGV4dHVyZWRRdWFkcmFuZ2xlIiwiQ2FudmFzIiwiU2NlbmUiLCJQYXJ0IiwiTWFzayIsIkRlc2lnbkNhbWVyYSIsImFzeW5jaHJvbm91c1V0aWxpdGllcyIsImZvckVhY2giLCJjYW52YXMiLCJtYXNrIiwidGlsaW5nRXhhbXBsZSIsImltYWdlTmFtZXMiLCJpbWFnZURpcmVjdG9yeVVSSSIsInByZWxvYWRJbWFnZXMiLCJpbWFnZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FsbGJhY2siLCJjb250ZXh0IiwiaW1hZ2VOYW1lIiwibmV4dCIsImRvbmUiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiT2JqZWN0IiwiYXNzaWduIiwib25sb2FkIiwicHVzaCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsR0FBRyxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUFuQjtBQUFBLElBQW9DO0FBQzlCQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBRHpCOztBQUdBLElBQU1FLGFBQWEsR0FBR0YsT0FBTyxDQUFDLGdDQUFELENBQTdCO0FBQUEsSUFDTUcsY0FBYyxHQUFHSCxPQUFPLENBQUMsMEJBQUQsQ0FEOUI7QUFBQSxJQUVNSSxrQkFBa0IsR0FBR0osT0FBTyxDQUFDLDhCQUFELENBRmxDOztJQUlRSyxNLEdBQTRDTixHLENBQTVDTSxNO0lBQVFDLEssR0FBb0NQLEcsQ0FBcENPLEs7SUFBT0MsSSxHQUE2QlIsRyxDQUE3QlEsSTtJQUFNQyxJLEdBQXVCVCxHLENBQXZCUyxJO0lBQU1DLFksR0FBaUJWLEcsQ0FBakJVLFk7SUFDM0JDLHFCLEdBQTBCVCxTLENBQTFCUyxxQjtJQUNBQyxPLEdBQVlELHFCLENBQVpDLE87QUFFUixJQUFNQyxNQUFNLEdBQUcsSUFBSVAsTUFBSixFQUFmO0FBQUEsSUFDTVEsSUFBSSxHQUVGLG9CQUFDLElBQUQsUUFDRSxvQkFBQyxjQUFEO0FBQWdCLEVBQUEsS0FBSyxFQUFFLENBQUUsSUFBRixFQUFRLElBQVIsRUFBYyxDQUFkLENBQXZCO0FBQTBDLEVBQUEsUUFBUSxFQUFFLENBQUUsS0FBRixFQUFTLEtBQVQsRUFBZ0IsQ0FBaEI7QUFBcEQsRUFERixDQUhSOztBQVNBLElBQU1DLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsR0FBTTtBQUFBLE1BQ2xCQyxVQURrQixHQUNnQmIsYUFEaEIsQ0FDbEJhLFVBRGtCO0FBQUEsTUFDTkMsaUJBRE0sR0FDZ0JkLGFBRGhCLENBQ05jLGlCQURNO0FBRzFCQyxFQUFBQSxhQUFhLENBQUNGLFVBQUQsRUFBYUMsaUJBQWIsRUFBZ0MsVUFBQ0UsTUFBRCxFQUFZO0FBQ3ZELFdBRUUsb0JBQUMsS0FBRDtBQUFPLE1BQUEsTUFBTSxFQUFFTjtBQUFmLE9BQ0Usb0JBQUMsSUFBRDtBQUFNLE1BQUEsTUFBTSxFQUFFTSxNQUFkO0FBQXNCLE1BQUEsVUFBVSxFQUFFSCxVQUFsQztBQUE4QyxNQUFBLFdBQVc7QUFBekQsT0FDRSxvQkFBQyxrQkFBRDtBQUFvQixNQUFBLFFBQVEsRUFBRSxDQUFFLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixDQUE5QjtBQUEyQyxNQUFBLFNBQVMsRUFBRSxpQkFBdEQ7QUFBeUUsTUFBQSxJQUFJLEVBQUVGO0FBQS9FLE1BREYsRUFFRSxvQkFBQyxrQkFBRDtBQUFvQixNQUFBLFFBQVEsRUFBRSxDQUFFLENBQUMsR0FBSCxFQUFRLENBQUMsR0FBVCxFQUFjLENBQUMsR0FBZixDQUE5QjtBQUFvRCxNQUFBLFNBQVMsRUFBRSxZQUEvRDtBQUE2RSxNQUFBLElBQUksRUFBRUE7QUFBbkYsTUFGRixDQURGLEVBS0Usb0JBQUMsWUFBRCxPQUxGLENBRkY7QUFXRCxHQVpZLENBQWI7QUFhRCxDQWhCRDs7QUFrQkFNLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQk4sYUFBakI7O0FBRUEsU0FBU0csYUFBVCxDQUF1QkYsVUFBdkIsRUFBbUNDLGlCQUFuQyxFQUFzREssUUFBdEQsRUFBZ0U7QUFDOUQsTUFBTUgsTUFBTSxHQUFHLEVBQWY7QUFBQSxNQUNNSSxPQUFPLEdBQUc7QUFDUkosSUFBQUEsTUFBTSxFQUFOQTtBQURRLEdBRGhCO0FBS0FQLEVBQUFBLE9BQU8sQ0FBQ0ksVUFBRCxFQUFhLFVBQUNRLFNBQUQsRUFBWUMsSUFBWixFQUFrQkMsSUFBbEIsRUFBd0JILE9BQXhCLEVBQW9DO0FBQ3RELFFBQU1JLEtBQUssR0FBRyxJQUFJQyxLQUFKLEVBQWQ7QUFBQSxRQUNNQyxHQUFHLGFBQU1aLGlCQUFOLGNBQTJCTyxTQUEzQixDQURUO0FBR0FNLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSixLQUFkLEVBQXFCO0FBQ25CRSxNQUFBQSxHQUFHLEVBQUhBLEdBRG1CO0FBRW5CRyxNQUFBQSxNQUFNLEVBQU5BO0FBRm1CLEtBQXJCOztBQUtBLGFBQVNBLE1BQVQsR0FBa0I7QUFDaEJiLE1BQUFBLE1BQU0sQ0FBQ2MsSUFBUCxDQUFZTixLQUFaO0FBRUFGLE1BQUFBLElBQUk7QUFDTDtBQUNGLEdBZE0sRUFjSkMsSUFkSSxFQWNFSCxPQWRGLENBQVA7O0FBZ0JBLFdBQVNHLElBQVQsR0FBZ0I7QUFBQSxRQUNOUCxNQURNLEdBQ0tJLE9BREwsQ0FDTkosTUFETTtBQUdkRyxJQUFBQSxRQUFRLENBQUNILE1BQUQsQ0FBUjtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHhnbCA9IHJlcXVpcmUoJy4uLy4uL2luZGV4JyksIC8vL1xuICAgICAgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IGNvbmZpZ3VyYXRpb24gPSByZXF1aXJlKCcuLi9taXNjZWxsYW5lb3VzL2NvbmZpZ3VyYXRpb24nKSxcbiAgICAgIENvbG91cmVkU3F1YXJlID0gcmVxdWlyZSgnLi9lbGVtZW50L2NvbG91cmVkU3F1YXJlJyksXG4gICAgICBUZXh0dXJlZFF1YWRyYW5nbGUgPSByZXF1aXJlKCcuL2VsZW1lbnQvdGV4dHVyZWRRdWFkcmFuZ2xlJyk7XG5cbmNvbnN0IHsgQ2FudmFzLCBTY2VuZSwgUGFydCwgTWFzaywgRGVzaWduQ2FtZXJhIH0gPSB4Z2wsXG4gICAgICB7IGFzeW5jaHJvbm91c1V0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBmb3JFYWNoIH0gPSBhc3luY2hyb25vdXNVdGlsaXRpZXM7XG5cbmNvbnN0IGNhbnZhcyA9IG5ldyBDYW52YXMoKSxcbiAgICAgIG1hc2sgPVxuXG4gICAgICAgIDxNYXNrPlxuICAgICAgICAgIDxDb2xvdXJlZFNxdWFyZSBzY2FsZT17WyAwLjI1LCAwLjI1LCAxIF19IHBvc2l0aW9uPXtbIDAuMTI1LCAwLjEyNSwgMCBdfSAvPlxuICAgICAgICA8L01hc2s+XG5cbiAgICAgIDtcblxuY29uc3QgdGlsaW5nRXhhbXBsZSA9ICgpID0+IHtcbiAgY29uc3QgeyBpbWFnZU5hbWVzLCBpbWFnZURpcmVjdG9yeVVSSSB9ID0gY29uZmlndXJhdGlvbjtcblxuICBwcmVsb2FkSW1hZ2VzKGltYWdlTmFtZXMsIGltYWdlRGlyZWN0b3J5VVJJLCAoaW1hZ2VzKSA9PiB7XG4gICAgcmV0dXJuIChcblxuICAgICAgPFNjZW5lIGNhbnZhcz17Y2FudmFzfT5cbiAgICAgICAgPFBhcnQgaW1hZ2VzPXtpbWFnZXN9IGltYWdlTmFtZXM9e2ltYWdlTmFtZXN9IGltYWdlVGlsaW5nID5cbiAgICAgICAgICA8VGV4dHVyZWRRdWFkcmFuZ2xlIHBvc2l0aW9uPXtbIDAsIDAsIDAgXX0gaW1hZ2VOYW1lPXsnZmxvb3Jib2FyZHMuanBnJ30gbWFzaz17bWFza30gLz5cbiAgICAgICAgICA8VGV4dHVyZWRRdWFkcmFuZ2xlIHBvc2l0aW9uPXtbIC0wLjUsIC0wLjUsIC0wLjUgXX0gaW1hZ2VOYW1lPXsncGF2aW5nLmpwZyd9IG1hc2s9e21hc2t9IC8+XG4gICAgICAgIDwvUGFydD5cbiAgICAgICAgPERlc2lnbkNhbWVyYSAvPlxuICAgICAgPC9TY2VuZT5cblxuICAgICk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB0aWxpbmdFeGFtcGxlO1xuXG5mdW5jdGlvbiBwcmVsb2FkSW1hZ2VzKGltYWdlTmFtZXMsIGltYWdlRGlyZWN0b3J5VVJJLCBjYWxsYmFjaykge1xuICBjb25zdCBpbWFnZXMgPSBbXSxcbiAgICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgICBpbWFnZXNcbiAgICAgICAgfTtcblxuICBmb3JFYWNoKGltYWdlTmFtZXMsIChpbWFnZU5hbWUsIG5leHQsIGRvbmUsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpLFxuICAgICAgICAgIHNyYyA9IGAke2ltYWdlRGlyZWN0b3J5VVJJfS8ke2ltYWdlTmFtZX1gO1xuXG4gICAgT2JqZWN0LmFzc2lnbihpbWFnZSwge1xuICAgICAgc3JjLFxuICAgICAgb25sb2FkXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWQoKSB7XG4gICAgICBpbWFnZXMucHVzaChpbWFnZSk7XG5cbiAgICAgIG5leHQoKTtcbiAgICB9XG4gIH0sIGRvbmUsIGNvbnRleHQpO1xuXG4gIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgY29uc3QgeyBpbWFnZXMgfSA9IGNvbnRleHQ7XG5cbiAgICBjYWxsYmFjayhpbWFnZXMpO1xuICB9XG59XG4iXX0=