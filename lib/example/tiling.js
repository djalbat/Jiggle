'use strict';

var xgl = require('../../index'),
    ///
necessary = require('necessary');

var configuration = require('../miscellaneous/configuration'),
    ColouredSquare = require('./element/colouredSquare'),
    TexturedQuadrangle = require('./element/texturedQuadrangle');

var Canvas = xgl.Canvas,
    Scene = xgl.Scene,
    Part = xgl.Part,
    Mask = xgl.Mask,
    DesignCamera = xgl.DesignCamera,
    asynchronousUtilities = necessary.asynchronousUtilities,
    forEach = asynchronousUtilities.forEach;


var canvas = new Canvas(),
    mask = React.createElement(
  Mask,
  null,
  React.createElement(ColouredSquare, { scale: [0.25, 0.25, 1], position: [0.125, 0.125, 0] })
);

var tilingExample = function tilingExample() {
  var imageNames = configuration.imageNames,
      imageDirectoryURI = configuration.imageDirectoryURI;


  preloadImages(imageNames, imageDirectoryURI, function (images) {
    return React.createElement(
      Scene,
      { canvas: canvas },
      React.createElement(
        Part,
        { images: images, imageNames: imageNames, imageTiling: true },
        React.createElement(TexturedQuadrangle, { position: [0, 0, 0], imageName: 'floorboards.jpg', mask: mask }),
        React.createElement(TexturedQuadrangle, { position: [-0.5, -0.5, -0.5], imageName: 'paving.jpg', mask: mask })
      ),
      React.createElement(DesignCamera, { initialDistance: 25 })
    );
  });
};

module.exports = tilingExample;

function preloadImages(imageNames, imageDirectoryURI, callback) {
  var images = [],
      context = {
    images: images
  };

  forEach(imageNames, function (imageName, next, done, context) {
    var image = new Image(),
        src = imageDirectoryURI + '/' + imageName;

    Object.assign(image, {
      src: src,
      onload: onload
    });

    function onload() {
      images.push(image);

      next();
    }
  }, done, context);

  function done() {
    var images = context.images;


    callback(images);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlL3RpbGluZy5qcyJdLCJuYW1lcyI6WyJ4Z2wiLCJyZXF1aXJlIiwibmVjZXNzYXJ5IiwiY29uZmlndXJhdGlvbiIsIkNvbG91cmVkU3F1YXJlIiwiVGV4dHVyZWRRdWFkcmFuZ2xlIiwiQ2FudmFzIiwiU2NlbmUiLCJQYXJ0IiwiTWFzayIsIkRlc2lnbkNhbWVyYSIsImFzeW5jaHJvbm91c1V0aWxpdGllcyIsImZvckVhY2giLCJjYW52YXMiLCJtYXNrIiwidGlsaW5nRXhhbXBsZSIsImltYWdlTmFtZXMiLCJpbWFnZURpcmVjdG9yeVVSSSIsInByZWxvYWRJbWFnZXMiLCJpbWFnZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FsbGJhY2siLCJjb250ZXh0IiwiaW1hZ2VOYW1lIiwibmV4dCIsImRvbmUiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiT2JqZWN0IiwiYXNzaWduIiwib25sb2FkIiwicHVzaCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsTUFBTUMsUUFBUSxhQUFSLENBQVo7QUFBQSxJQUFvQztBQUM5QkMsWUFBWUQsUUFBUSxXQUFSLENBRGxCOztBQUdBLElBQU1FLGdCQUFnQkYsUUFBUSxnQ0FBUixDQUF0QjtBQUFBLElBQ01HLGlCQUFpQkgsUUFBUSwwQkFBUixDQUR2QjtBQUFBLElBRU1JLHFCQUFxQkosUUFBUSw4QkFBUixDQUYzQjs7SUFJUUssTSxHQUE0Q04sRyxDQUE1Q00sTTtJQUFRQyxLLEdBQW9DUCxHLENBQXBDTyxLO0lBQU9DLEksR0FBNkJSLEcsQ0FBN0JRLEk7SUFBTUMsSSxHQUF1QlQsRyxDQUF2QlMsSTtJQUFNQyxZLEdBQWlCVixHLENBQWpCVSxZO0lBQzNCQyxxQixHQUEwQlQsUyxDQUExQlMscUI7SUFDQUMsTyxHQUFZRCxxQixDQUFaQyxPOzs7QUFFUixJQUFNQyxTQUFTLElBQUlQLE1BQUosRUFBZjtBQUFBLElBQ01RLE9BRUU7QUFBQyxNQUFEO0FBQUE7QUFDRSxzQkFBQyxjQUFELElBQWdCLE9BQU8sQ0FBRSxJQUFGLEVBQVEsSUFBUixFQUFjLENBQWQsQ0FBdkIsRUFBMEMsVUFBVSxDQUFFLEtBQUYsRUFBUyxLQUFULEVBQWdCLENBQWhCLENBQXBEO0FBREYsQ0FIUjs7QUFTQSxJQUFNQyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQU07QUFBQSxNQUNsQkMsVUFEa0IsR0FDZ0JiLGFBRGhCLENBQ2xCYSxVQURrQjtBQUFBLE1BQ05DLGlCQURNLEdBQ2dCZCxhQURoQixDQUNOYyxpQkFETTs7O0FBRzFCQyxnQkFBY0YsVUFBZCxFQUEwQkMsaUJBQTFCLEVBQTZDLFVBQUNFLE1BQUQsRUFBWTtBQUN2RCxXQUVFO0FBQUMsV0FBRDtBQUFBLFFBQU8sUUFBUU4sTUFBZjtBQUNFO0FBQUMsWUFBRDtBQUFBLFVBQU0sUUFBUU0sTUFBZCxFQUFzQixZQUFZSCxVQUFsQyxFQUE4QyxpQkFBOUM7QUFDRSw0QkFBQyxrQkFBRCxJQUFvQixVQUFVLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBQTlCLEVBQTJDLFdBQVcsaUJBQXRELEVBQXlFLE1BQU1GLElBQS9FLEdBREY7QUFFRSw0QkFBQyxrQkFBRCxJQUFvQixVQUFVLENBQUUsQ0FBQyxHQUFILEVBQVEsQ0FBQyxHQUFULEVBQWMsQ0FBQyxHQUFmLENBQTlCLEVBQW9ELFdBQVcsWUFBL0QsRUFBNkUsTUFBTUEsSUFBbkY7QUFGRixPQURGO0FBS0UsMEJBQUMsWUFBRCxJQUFjLGlCQUFpQixFQUEvQjtBQUxGLEtBRkY7QUFXRCxHQVpEO0FBYUQsQ0FoQkQ7O0FBa0JBTSxPQUFPQyxPQUFQLEdBQWlCTixhQUFqQjs7QUFFQSxTQUFTRyxhQUFULENBQXVCRixVQUF2QixFQUFtQ0MsaUJBQW5DLEVBQXNESyxRQUF0RCxFQUFnRTtBQUM5RCxNQUFNSCxTQUFTLEVBQWY7QUFBQSxNQUNNSSxVQUFVO0FBQ1JKO0FBRFEsR0FEaEI7O0FBS0FQLFVBQVFJLFVBQVIsRUFBb0IsVUFBQ1EsU0FBRCxFQUFZQyxJQUFaLEVBQWtCQyxJQUFsQixFQUF3QkgsT0FBeEIsRUFBb0M7QUFDdEQsUUFBTUksUUFBUSxJQUFJQyxLQUFKLEVBQWQ7QUFBQSxRQUNNQyxNQUFTWixpQkFBVCxTQUE4Qk8sU0FEcEM7O0FBR0FNLFdBQU9DLE1BQVAsQ0FBY0osS0FBZCxFQUFxQjtBQUNuQkUsY0FEbUI7QUFFbkJHO0FBRm1CLEtBQXJCOztBQUtBLGFBQVNBLE1BQVQsR0FBa0I7QUFDaEJiLGFBQU9jLElBQVAsQ0FBWU4sS0FBWjs7QUFFQUY7QUFDRDtBQUNGLEdBZEQsRUFjR0MsSUFkSCxFQWNTSCxPQWRUOztBQWdCQSxXQUFTRyxJQUFULEdBQWdCO0FBQUEsUUFDTlAsTUFETSxHQUNLSSxPQURMLENBQ05KLE1BRE07OztBQUdkRyxhQUFTSCxNQUFUO0FBQ0Q7QUFDRiIsImZpbGUiOiJ0aWxpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHhnbCA9IHJlcXVpcmUoJy4uLy4uL2luZGV4JyksIC8vL1xuICAgICAgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IGNvbmZpZ3VyYXRpb24gPSByZXF1aXJlKCcuLi9taXNjZWxsYW5lb3VzL2NvbmZpZ3VyYXRpb24nKSxcbiAgICAgIENvbG91cmVkU3F1YXJlID0gcmVxdWlyZSgnLi9lbGVtZW50L2NvbG91cmVkU3F1YXJlJyksXG4gICAgICBUZXh0dXJlZFF1YWRyYW5nbGUgPSByZXF1aXJlKCcuL2VsZW1lbnQvdGV4dHVyZWRRdWFkcmFuZ2xlJyk7XG5cbmNvbnN0IHsgQ2FudmFzLCBTY2VuZSwgUGFydCwgTWFzaywgRGVzaWduQ2FtZXJhIH0gPSB4Z2wsXG4gICAgICB7IGFzeW5jaHJvbm91c1V0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBmb3JFYWNoIH0gPSBhc3luY2hyb25vdXNVdGlsaXRpZXM7XG5cbmNvbnN0IGNhbnZhcyA9IG5ldyBDYW52YXMoKSxcbiAgICAgIG1hc2sgPVxuXG4gICAgICAgIDxNYXNrPlxuICAgICAgICAgIDxDb2xvdXJlZFNxdWFyZSBzY2FsZT17WyAwLjI1LCAwLjI1LCAxIF19IHBvc2l0aW9uPXtbIDAuMTI1LCAwLjEyNSwgMCBdfSAvPlxuICAgICAgICA8L01hc2s+XG5cbiAgICAgIDtcblxuY29uc3QgdGlsaW5nRXhhbXBsZSA9ICgpID0+IHtcbiAgY29uc3QgeyBpbWFnZU5hbWVzLCBpbWFnZURpcmVjdG9yeVVSSSB9ID0gY29uZmlndXJhdGlvbjtcblxuICBwcmVsb2FkSW1hZ2VzKGltYWdlTmFtZXMsIGltYWdlRGlyZWN0b3J5VVJJLCAoaW1hZ2VzKSA9PiB7XG4gICAgcmV0dXJuIChcblxuICAgICAgPFNjZW5lIGNhbnZhcz17Y2FudmFzfT5cbiAgICAgICAgPFBhcnQgaW1hZ2VzPXtpbWFnZXN9IGltYWdlTmFtZXM9e2ltYWdlTmFtZXN9IGltYWdlVGlsaW5nID5cbiAgICAgICAgICA8VGV4dHVyZWRRdWFkcmFuZ2xlIHBvc2l0aW9uPXtbIDAsIDAsIDAgXX0gaW1hZ2VOYW1lPXsnZmxvb3Jib2FyZHMuanBnJ30gbWFzaz17bWFza30gLz5cbiAgICAgICAgICA8VGV4dHVyZWRRdWFkcmFuZ2xlIHBvc2l0aW9uPXtbIC0wLjUsIC0wLjUsIC0wLjUgXX0gaW1hZ2VOYW1lPXsncGF2aW5nLmpwZyd9IG1hc2s9e21hc2t9IC8+XG4gICAgICAgIDwvUGFydD5cbiAgICAgICAgPERlc2lnbkNhbWVyYSBpbml0aWFsRGlzdGFuY2U9ezI1fSAvPlxuICAgICAgPC9TY2VuZT5cblxuICAgICk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB0aWxpbmdFeGFtcGxlO1xuXG5mdW5jdGlvbiBwcmVsb2FkSW1hZ2VzKGltYWdlTmFtZXMsIGltYWdlRGlyZWN0b3J5VVJJLCBjYWxsYmFjaykge1xuICBjb25zdCBpbWFnZXMgPSBbXSxcbiAgICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgICBpbWFnZXNcbiAgICAgICAgfTtcblxuICBmb3JFYWNoKGltYWdlTmFtZXMsIChpbWFnZU5hbWUsIG5leHQsIGRvbmUsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpLFxuICAgICAgICAgIHNyYyA9IGAke2ltYWdlRGlyZWN0b3J5VVJJfS8ke2ltYWdlTmFtZX1gO1xuXG4gICAgT2JqZWN0LmFzc2lnbihpbWFnZSwge1xuICAgICAgc3JjLFxuICAgICAgb25sb2FkXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWQoKSB7XG4gICAgICBpbWFnZXMucHVzaChpbWFnZSk7XG5cbiAgICAgIG5leHQoKTtcbiAgICB9XG4gIH0sIGRvbmUsIGNvbnRleHQpO1xuXG4gIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgY29uc3QgeyBpbWFnZXMgfSA9IGNvbnRleHQ7XG5cbiAgICBjYWxsYmFjayhpbWFnZXMpO1xuICB9XG59XG4iXX0=