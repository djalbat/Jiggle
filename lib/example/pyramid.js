'use strict';

var jiggle = require('../../index');

var Pyramid = require('./element/pyramid'),
    configuration = require('../miscellaneous/configuration'),
    ColouredSquare = require('./element/colouredSquare');

var Canvas = jiggle.Canvas,
    Scene = jiggle.Scene,
    Mask = jiggle.Mask,
    Part = jiggle.Part,
    Camera = jiggle.Camera;


var canvas = new Canvas();

var mask = React.createElement(
  Mask,
  null,
  React.createElement(ColouredSquare, { size: [0.25, 0.25, 1], position: [-0.125, +0.125, 1] })
);

var pyramidExample = function pyramidExample() {
  preloadImageMap(function (imageMap) {
    var imageMapJSON = configuration.imageMapJSON;


    return React.createElement(
      Scene,
      { canvas: canvas },
      React.createElement(
        Part,
        { imageMap: imageMap, imageMapJSON: imageMapJSON },
        React.createElement(ColouredSquare, { size: [0.25, 0.25, 1], position: [-0.125, +0.125, 1] }),
        React.createElement(Pyramid, { mask: mask })
      ),
      React.createElement(Camera, null)
    );
  });
};

module.exports = pyramidExample;

function preloadImageMap(callback) {
  var imageMapURI = configuration.imageMapURI,
      imageMap = new Image(),
      src = imageMapURI; ///

  Object.assign(imageMap, {
    src: src,
    onload: onload
  });

  function onload(event) {
    callback(imageMap);
  }
}

/*

    <ColouredSquare size={[ 0.25, 0.25, 1]} position={[ -0.25, +0.25, 0 ]} />

 */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlL3B5cmFtaWQuanMiXSwibmFtZXMiOlsiamlnZ2xlIiwicmVxdWlyZSIsIlB5cmFtaWQiLCJjb25maWd1cmF0aW9uIiwiQ29sb3VyZWRTcXVhcmUiLCJDYW52YXMiLCJTY2VuZSIsIk1hc2siLCJQYXJ0IiwiQ2FtZXJhIiwiY2FudmFzIiwibWFzayIsInB5cmFtaWRFeGFtcGxlIiwicHJlbG9hZEltYWdlTWFwIiwiaW1hZ2VNYXAiLCJpbWFnZU1hcEpTT04iLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FsbGJhY2siLCJpbWFnZU1hcFVSSSIsIkltYWdlIiwic3JjIiwiT2JqZWN0IiwiYXNzaWduIiwib25sb2FkIiwiZXZlbnQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFNBQVNDLFFBQVEsYUFBUixDQUFmOztBQUVBLElBQU1DLFVBQVVELFFBQVEsbUJBQVIsQ0FBaEI7QUFBQSxJQUNNRSxnQkFBZ0JGLFFBQVEsZ0NBQVIsQ0FEdEI7QUFBQSxJQUVNRyxpQkFBaUJILFFBQVEsMEJBQVIsQ0FGdkI7O0lBSVFJLE0sR0FBc0NMLE0sQ0FBdENLLE07SUFBUUMsSyxHQUE4Qk4sTSxDQUE5Qk0sSztJQUFPQyxJLEdBQXVCUCxNLENBQXZCTyxJO0lBQU1DLEksR0FBaUJSLE0sQ0FBakJRLEk7SUFBTUMsTSxHQUFXVCxNLENBQVhTLE07OztBQUVuQyxJQUFNQyxTQUFTLElBQUlMLE1BQUosRUFBZjs7QUFFQSxJQUFNTSxPQUVKO0FBQUMsTUFBRDtBQUFBO0FBQ0Usc0JBQUMsY0FBRCxJQUFnQixNQUFNLENBQUUsSUFBRixFQUFRLElBQVIsRUFBYyxDQUFkLENBQXRCLEVBQXlDLFVBQVUsQ0FBRSxDQUFDLEtBQUgsRUFBVSxDQUFDLEtBQVgsRUFBa0IsQ0FBbEIsQ0FBbkQ7QUFERixDQUZGOztBQVFBLElBQU1DLGlCQUFpQixTQUFqQkEsY0FBaUIsR0FBTTtBQUMzQkMsa0JBQWdCLFVBQUNDLFFBQUQsRUFBYztBQUFBLFFBQ3BCQyxZQURvQixHQUNIWixhQURHLENBQ3BCWSxZQURvQjs7O0FBRzVCLFdBRUU7QUFBQyxXQUFEO0FBQUEsUUFBTyxRQUFRTCxNQUFmO0FBQ0U7QUFBQyxZQUFEO0FBQUEsVUFBTSxVQUFVSSxRQUFoQixFQUEwQixjQUFjQyxZQUF4QztBQUNFLDRCQUFDLGNBQUQsSUFBZ0IsTUFBTSxDQUFFLElBQUYsRUFBUSxJQUFSLEVBQWMsQ0FBZCxDQUF0QixFQUF5QyxVQUFVLENBQUUsQ0FBQyxLQUFILEVBQVUsQ0FBQyxLQUFYLEVBQWtCLENBQWxCLENBQW5ELEdBREY7QUFFRSw0QkFBQyxPQUFELElBQVMsTUFBTUosSUFBZjtBQUZGLE9BREY7QUFLRSwwQkFBQyxNQUFEO0FBTEYsS0FGRjtBQVdELEdBZEQ7QUFlRCxDQWhCRDs7QUFrQkFLLE9BQU9DLE9BQVAsR0FBaUJMLGNBQWpCOztBQUVBLFNBQVNDLGVBQVQsQ0FBeUJLLFFBQXpCLEVBQW1DO0FBQzNCLE1BQUVDLFdBQUYsR0FBa0JoQixhQUFsQixDQUFFZ0IsV0FBRjtBQUFBLE1BQ0FMLFFBREEsR0FDVyxJQUFJTSxLQUFKLEVBRFg7QUFBQSxNQUVBQyxHQUZBLEdBRU1GLFdBRk4sQ0FEMkIsQ0FHUDs7QUFFMUJHLFNBQU9DLE1BQVAsQ0FBY1QsUUFBZCxFQUF3QjtBQUN0Qk8sWUFEc0I7QUFFdEJHO0FBRnNCLEdBQXhCOztBQUtBLFdBQVNBLE1BQVQsQ0FBZ0JDLEtBQWhCLEVBQXVCO0FBQ3JCUCxhQUFTSixRQUFUO0FBQ0Q7QUFDRjs7QUFFRCIsImZpbGUiOiJweXJhbWlkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBqaWdnbGUgPSByZXF1aXJlKCcuLi8uLi9pbmRleCcpO1xuXG5jb25zdCBQeXJhbWlkID0gcmVxdWlyZSgnLi9lbGVtZW50L3B5cmFtaWQnKSxcbiAgICAgIGNvbmZpZ3VyYXRpb24gPSByZXF1aXJlKCcuLi9taXNjZWxsYW5lb3VzL2NvbmZpZ3VyYXRpb24nKSxcbiAgICAgIENvbG91cmVkU3F1YXJlID0gcmVxdWlyZSgnLi9lbGVtZW50L2NvbG91cmVkU3F1YXJlJyk7XG5cbmNvbnN0IHsgQ2FudmFzLCBTY2VuZSwgTWFzaywgUGFydCwgQ2FtZXJhIH0gPSBqaWdnbGU7XG5cbmNvbnN0IGNhbnZhcyA9IG5ldyBDYW52YXMoKTtcblxuY29uc3QgbWFzayA9XG5cbiAgPE1hc2s+XG4gICAgPENvbG91cmVkU3F1YXJlIHNpemU9e1sgMC4yNSwgMC4yNSwgMSBdfSBwb3NpdGlvbj17WyAtMC4xMjUsICswLjEyNSwgMSBdfSAvPlxuICA8L01hc2s+XG5cbjtcblxuY29uc3QgcHlyYW1pZEV4YW1wbGUgPSAoKSA9PiB7XG4gIHByZWxvYWRJbWFnZU1hcCgoaW1hZ2VNYXApID0+IHtcbiAgICBjb25zdCB7IGltYWdlTWFwSlNPTiB9ID0gY29uZmlndXJhdGlvbjtcblxuICAgIHJldHVybiAoXG5cbiAgICAgIDxTY2VuZSBjYW52YXM9e2NhbnZhc30+XG4gICAgICAgIDxQYXJ0IGltYWdlTWFwPXtpbWFnZU1hcH0gaW1hZ2VNYXBKU09OPXtpbWFnZU1hcEpTT059PlxuICAgICAgICAgIDxDb2xvdXJlZFNxdWFyZSBzaXplPXtbIDAuMjUsIDAuMjUsIDEgXX0gcG9zaXRpb249e1sgLTAuMTI1LCArMC4xMjUsIDEgXX0gLz5cbiAgICAgICAgICA8UHlyYW1pZCBtYXNrPXttYXNrfSAvPlxuICAgICAgICA8L1BhcnQ+XG4gICAgICAgIDxDYW1lcmEgLz5cbiAgICAgIDwvU2NlbmU+XG5cbiAgICApO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcHlyYW1pZEV4YW1wbGU7XG5cbmZ1bmN0aW9uIHByZWxvYWRJbWFnZU1hcChjYWxsYmFjaykge1xuICBjb25zdCB7IGltYWdlTWFwVVJJIH0gPSBjb25maWd1cmF0aW9uLFxuICAgICAgICBpbWFnZU1hcCA9IG5ldyBJbWFnZSgpLFx0Ly8vXG4gICAgICAgIHNyYyA9IGltYWdlTWFwVVJJOyAgLy8vXG5cbiAgT2JqZWN0LmFzc2lnbihpbWFnZU1hcCwge1xuICAgIHNyYyxcbiAgICBvbmxvYWRcbiAgfSk7XG5cbiAgZnVuY3Rpb24gb25sb2FkKGV2ZW50KSB7XG4gICAgY2FsbGJhY2soaW1hZ2VNYXApO1xuICB9XG59XG5cbi8qXG5cbiAgICA8Q29sb3VyZWRTcXVhcmUgc2l6ZT17WyAwLjI1LCAwLjI1LCAxXX0gcG9zaXRpb249e1sgLTAuMjUsICswLjI1LCAwIF19IC8+XG5cbiAqLyJdfQ==