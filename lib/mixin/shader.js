'use strict';

function createShader(type, shaderSource) {
  var shader = this.context.createShader(type);

  this.context.shaderSource(shader, shaderSource);

  this.context.compileShader(shader);

  var compileStatus = this.context.getShaderParameter(shader, this.context.COMPILE_STATUS);

  if (!compileStatus) {
    throw new Error('Unable to create the shader.');
  }

  return shader;
}

function createVertexShader(vertexShaderSource) {
  var VERTEX_SHADER_TYPE = this.context.VERTEX_SHADER,
      ///
  vertexShader = this.createShader(VERTEX_SHADER_TYPE, vertexShaderSource);

  return vertexShader;
}

function createFragmentShader(fragmentShaderSource) {
  var FRAGMENT_SHADER_TYPE = this.context.FRAGMENT_SHADER,
      ///
  vertexShader = this.createShader(FRAGMENT_SHADER_TYPE, fragmentShaderSource);

  return vertexShader;
}

function createShaderProgram(vertexShaderSource, fragmentShaderSource) {
  var shaderProgram = this.context.createProgram(),
      vertexShader = this.createVertexShader(vertexShaderSource),
      fragmentShader = this.createFragmentShader(fragmentShaderSource);

  this.context.attachShader(shaderProgram, vertexShader);
  this.context.attachShader(shaderProgram, fragmentShader);

  this.context.linkProgram(shaderProgram);

  var linkStatus = this.context.getProgramParameter(shaderProgram, this.context.LINK_STATUS);

  if (!linkStatus) {
    var message = this.context.getProgramInfoLog(shaderProgram); ///

    throw new Error('Unable to create the shader program, \'' + message + '\'.');
  }

  return shaderProgram;
}

var shaderMixin = {
  createShader: createShader,
  createVertexShader: createVertexShader,
  createFragmentShader: createFragmentShader,
  createShaderProgram: createShaderProgram
};

module.exports = shaderMixin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9zaGFkZXIuanMiXSwibmFtZXMiOlsiY3JlYXRlU2hhZGVyIiwidHlwZSIsInNoYWRlclNvdXJjZSIsInNoYWRlciIsImNvbnRleHQiLCJjb21waWxlU2hhZGVyIiwiY29tcGlsZVN0YXR1cyIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiRXJyb3IiLCJjcmVhdGVWZXJ0ZXhTaGFkZXIiLCJ2ZXJ0ZXhTaGFkZXJTb3VyY2UiLCJWRVJURVhfU0hBREVSX1RZUEUiLCJWRVJURVhfU0hBREVSIiwidmVydGV4U2hhZGVyIiwiY3JlYXRlRnJhZ21lbnRTaGFkZXIiLCJmcmFnbWVudFNoYWRlclNvdXJjZSIsIkZSQUdNRU5UX1NIQURFUl9UWVBFIiwiRlJBR01FTlRfU0hBREVSIiwiY3JlYXRlU2hhZGVyUHJvZ3JhbSIsInNoYWRlclByb2dyYW0iLCJjcmVhdGVQcm9ncmFtIiwiZnJhZ21lbnRTaGFkZXIiLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImxpbmtTdGF0dXMiLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJtZXNzYWdlIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJzaGFkZXJNaXhpbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLFlBQVQsQ0FBc0JDLElBQXRCLEVBQTRCQyxZQUE1QixFQUEwQztBQUN4QyxNQUFNQyxTQUFTLEtBQUtDLE9BQUwsQ0FBYUosWUFBYixDQUEwQkMsSUFBMUIsQ0FBZjs7QUFFQSxPQUFLRyxPQUFMLENBQWFGLFlBQWIsQ0FBMEJDLE1BQTFCLEVBQWtDRCxZQUFsQzs7QUFFQSxPQUFLRSxPQUFMLENBQWFDLGFBQWIsQ0FBMkJGLE1BQTNCOztBQUVBLE1BQU1HLGdCQUFnQixLQUFLRixPQUFMLENBQWFHLGtCQUFiLENBQWdDSixNQUFoQyxFQUF3QyxLQUFLQyxPQUFMLENBQWFJLGNBQXJELENBQXRCOztBQUVBLE1BQUksQ0FBQ0YsYUFBTCxFQUFvQjtBQUNsQixVQUFNLElBQUlHLEtBQUosZ0NBQU47QUFDRDs7QUFFRCxTQUFPTixNQUFQO0FBQ0Q7O0FBRUQsU0FBU08sa0JBQVQsQ0FBNEJDLGtCQUE1QixFQUFnRDtBQUM5QyxNQUFNQyxxQkFBcUIsS0FBS1IsT0FBTCxDQUFhUyxhQUF4QztBQUFBLE1BQXdEO0FBQ2xEQyxpQkFBZSxLQUFLZCxZQUFMLENBQWtCWSxrQkFBbEIsRUFBc0NELGtCQUF0QyxDQURyQjs7QUFHQSxTQUFPRyxZQUFQO0FBQ0Q7O0FBRUQsU0FBU0Msb0JBQVQsQ0FBOEJDLG9CQUE5QixFQUFvRDtBQUNsRCxNQUFNQyx1QkFBdUIsS0FBS2IsT0FBTCxDQUFhYyxlQUExQztBQUFBLE1BQTREO0FBQ3RESixpQkFBZSxLQUFLZCxZQUFMLENBQWtCaUIsb0JBQWxCLEVBQXdDRCxvQkFBeEMsQ0FEckI7O0FBR0EsU0FBT0YsWUFBUDtBQUNEOztBQUVELFNBQVNLLG1CQUFULENBQTZCUixrQkFBN0IsRUFBaURLLG9CQUFqRCxFQUF1RTtBQUNyRSxNQUFNSSxnQkFBZ0IsS0FBS2hCLE9BQUwsQ0FBYWlCLGFBQWIsRUFBdEI7QUFBQSxNQUNNUCxlQUFlLEtBQUtKLGtCQUFMLENBQXdCQyxrQkFBeEIsQ0FEckI7QUFBQSxNQUVNVyxpQkFBaUIsS0FBS1Asb0JBQUwsQ0FBMEJDLG9CQUExQixDQUZ2Qjs7QUFJQSxPQUFLWixPQUFMLENBQWFtQixZQUFiLENBQTBCSCxhQUExQixFQUF5Q04sWUFBekM7QUFDQSxPQUFLVixPQUFMLENBQWFtQixZQUFiLENBQTBCSCxhQUExQixFQUF5Q0UsY0FBekM7O0FBRUEsT0FBS2xCLE9BQUwsQ0FBYW9CLFdBQWIsQ0FBeUJKLGFBQXpCOztBQUVBLE1BQU1LLGFBQWEsS0FBS3JCLE9BQUwsQ0FBYXNCLG1CQUFiLENBQWlDTixhQUFqQyxFQUFnRCxLQUFLaEIsT0FBTCxDQUFhdUIsV0FBN0QsQ0FBbkI7O0FBRUEsTUFBSSxDQUFDRixVQUFMLEVBQWlCO0FBQ2YsUUFBTUcsVUFBVSxLQUFLeEIsT0FBTCxDQUFheUIsaUJBQWIsQ0FBK0JULGFBQS9CLENBQWhCLENBRGUsQ0FDaUQ7O0FBRWhFLFVBQU0sSUFBSVgsS0FBSiw2Q0FBbURtQixPQUFuRCxTQUFOO0FBQ0Q7O0FBRUQsU0FBT1IsYUFBUDtBQUNEOztBQUVELElBQU1VLGNBQWM7QUFDbEI5QixnQkFBY0EsWUFESTtBQUVsQlUsc0JBQW9CQSxrQkFGRjtBQUdsQkssd0JBQXNCQSxvQkFISjtBQUlsQkksdUJBQXFCQTtBQUpILENBQXBCOztBQU9BWSxPQUFPQyxPQUFQLEdBQWlCRixXQUFqQiIsImZpbGUiOiJzaGFkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRlcih0eXBlLCBzaGFkZXJTb3VyY2UpIHtcbiAgY29uc3Qgc2hhZGVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZVNoYWRlcih0eXBlKTtcblxuICB0aGlzLmNvbnRleHQuc2hhZGVyU291cmNlKHNoYWRlciwgc2hhZGVyU291cmNlKTtcblxuICB0aGlzLmNvbnRleHQuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xuXG4gIGNvbnN0IGNvbXBpbGVTdGF0dXMgPSB0aGlzLmNvbnRleHQuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgdGhpcy5jb250ZXh0LkNPTVBJTEVfU1RBVFVTKTtcblxuICBpZiAoIWNvbXBpbGVTdGF0dXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBjcmVhdGUgdGhlIHNoYWRlci5gKTtcbiAgfVxuXG4gIHJldHVybiBzaGFkZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVZlcnRleFNoYWRlcih2ZXJ0ZXhTaGFkZXJTb3VyY2UpIHtcbiAgY29uc3QgVkVSVEVYX1NIQURFUl9UWVBFID0gdGhpcy5jb250ZXh0LlZFUlRFWF9TSEFERVIsICAvLy9cbiAgICAgICAgdmVydGV4U2hhZGVyID0gdGhpcy5jcmVhdGVTaGFkZXIoVkVSVEVYX1NIQURFUl9UWVBFLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UpO1xuXG4gIHJldHVybiB2ZXJ0ZXhTaGFkZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50U2hhZGVyKGZyYWdtZW50U2hhZGVyU291cmNlKSB7XG4gIGNvbnN0IEZSQUdNRU5UX1NIQURFUl9UWVBFID0gdGhpcy5jb250ZXh0LkZSQUdNRU5UX1NIQURFUiwgIC8vL1xuICAgICAgICB2ZXJ0ZXhTaGFkZXIgPSB0aGlzLmNyZWF0ZVNoYWRlcihGUkFHTUVOVF9TSEFERVJfVFlQRSwgZnJhZ21lbnRTaGFkZXJTb3VyY2UpO1xuXG4gIHJldHVybiB2ZXJ0ZXhTaGFkZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRlclByb2dyYW0odmVydGV4U2hhZGVyU291cmNlLCBmcmFnbWVudFNoYWRlclNvdXJjZSkge1xuICBjb25zdCBzaGFkZXJQcm9ncmFtID0gdGhpcy5jb250ZXh0LmNyZWF0ZVByb2dyYW0oKSxcbiAgICAgICAgdmVydGV4U2hhZGVyID0gdGhpcy5jcmVhdGVWZXJ0ZXhTaGFkZXIodmVydGV4U2hhZGVyU291cmNlKSxcbiAgICAgICAgZnJhZ21lbnRTaGFkZXIgPSB0aGlzLmNyZWF0ZUZyYWdtZW50U2hhZGVyKGZyYWdtZW50U2hhZGVyU291cmNlKTtcblxuICB0aGlzLmNvbnRleHQuYXR0YWNoU2hhZGVyKHNoYWRlclByb2dyYW0sIHZlcnRleFNoYWRlcik7XG4gIHRoaXMuY29udGV4dC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpO1xuXG4gIHRoaXMuY29udGV4dC5saW5rUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcblxuICBjb25zdCBsaW5rU3RhdHVzID0gdGhpcy5jb250ZXh0LmdldFByb2dyYW1QYXJhbWV0ZXIoc2hhZGVyUHJvZ3JhbSwgdGhpcy5jb250ZXh0LkxJTktfU1RBVFVTKTtcblxuICBpZiAoIWxpbmtTdGF0dXMpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5jb250ZXh0LmdldFByb2dyYW1JbmZvTG9nKHNoYWRlclByb2dyYW0pOyAgLy8vXG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBjcmVhdGUgdGhlIHNoYWRlciBwcm9ncmFtLCAnJHttZXNzYWdlfScuYCk7XG4gIH1cblxuICByZXR1cm4gc2hhZGVyUHJvZ3JhbTtcbn1cblxuY29uc3Qgc2hhZGVyTWl4aW4gPSB7XG4gIGNyZWF0ZVNoYWRlcjogY3JlYXRlU2hhZGVyLFxuICBjcmVhdGVWZXJ0ZXhTaGFkZXI6IGNyZWF0ZVZlcnRleFNoYWRlcixcbiAgY3JlYXRlRnJhZ21lbnRTaGFkZXI6IGNyZWF0ZUZyYWdtZW50U2hhZGVyLFxuICBjcmVhdGVTaGFkZXJQcm9ncmFtOiBjcmVhdGVTaGFkZXJQcm9ncmFtXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWRlck1peGluO1xuIl19