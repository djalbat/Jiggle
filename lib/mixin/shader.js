'use strict';

function createShader(type, shaderSource) {
  var shader = this.context.createShader(type),
      pname = this.COMPILE_STATUS_PNAME;

  this.context.shaderSource(shader, shaderSource);

  this.context.compileShader(shader);

  var compileStatus = this.context.getShaderParameter(shader, pname);

  if (!compileStatus) {
    throw new Error('Unable to create the shader.');
  }

  return shader;
}

function createVertexShader(vertexShaderSource) {
  var type = this.VERTEX_SHADER_TYPE,
      vertexShader = this.createShader(type, vertexShaderSource);

  return vertexShader;
}

function createFragmentShader(fragmentShaderSource) {
  var type = this.FRAGMENT_SHADER_TYPE,
      vertexShader = this.createShader(type, fragmentShaderSource);

  return vertexShader;
}

function createShaderProgram(vertexShaderSource, fragmentShaderSource) {
  var shaderProgram = this.context.createProgram(),
      vertexShader = this.createVertexShader(vertexShaderSource),
      fragmentShader = this.createFragmentShader(fragmentShaderSource),
      pname = this.LINK_STATUS_PNAME;

  this.context.attachShader(shaderProgram, vertexShader);
  this.context.attachShader(shaderProgram, fragmentShader);

  this.context.linkProgram(shaderProgram);

  var linkStatus = this.context.getProgramParameter(shaderProgram, pname);

  if (!linkStatus) {
    var message = this.context.getProgramInfoLog(shaderProgram); ///

    throw new Error('Unable to create the shader program, \'' + message + '\'.');
  }

  return shaderProgram;
}

var shaderMixin = {
  createShader: createShader,
  createVertexShader: createVertexShader,
  createFragmentShader: createFragmentShader,
  createShaderProgram: createShaderProgram
};

module.exports = shaderMixin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9zaGFkZXIuanMiXSwibmFtZXMiOlsiY3JlYXRlU2hhZGVyIiwidHlwZSIsInNoYWRlclNvdXJjZSIsInNoYWRlciIsImNvbnRleHQiLCJwbmFtZSIsIkNPTVBJTEVfU1RBVFVTX1BOQU1FIiwiY29tcGlsZVNoYWRlciIsImNvbXBpbGVTdGF0dXMiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJFcnJvciIsImNyZWF0ZVZlcnRleFNoYWRlciIsInZlcnRleFNoYWRlclNvdXJjZSIsIlZFUlRFWF9TSEFERVJfVFlQRSIsInZlcnRleFNoYWRlciIsImNyZWF0ZUZyYWdtZW50U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXJTb3VyY2UiLCJGUkFHTUVOVF9TSEFERVJfVFlQRSIsImNyZWF0ZVNoYWRlclByb2dyYW0iLCJzaGFkZXJQcm9ncmFtIiwiY3JlYXRlUHJvZ3JhbSIsImZyYWdtZW50U2hhZGVyIiwiTElOS19TVEFUVVNfUE5BTUUiLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImxpbmtTdGF0dXMiLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwibWVzc2FnZSIsImdldFByb2dyYW1JbmZvTG9nIiwic2hhZGVyTWl4aW4iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxZQUFULENBQXNCQyxJQUF0QixFQUE0QkMsWUFBNUIsRUFBMEM7QUFDeEMsTUFBTUMsU0FBUyxLQUFLQyxPQUFMLENBQWFKLFlBQWIsQ0FBMEJDLElBQTFCLENBQWY7QUFBQSxNQUNNSSxRQUFRLEtBQUtDLG9CQURuQjs7QUFHQSxPQUFLRixPQUFMLENBQWFGLFlBQWIsQ0FBMEJDLE1BQTFCLEVBQWtDRCxZQUFsQzs7QUFFQSxPQUFLRSxPQUFMLENBQWFHLGFBQWIsQ0FBMkJKLE1BQTNCOztBQUVBLE1BQU1LLGdCQUFnQixLQUFLSixPQUFMLENBQWFLLGtCQUFiLENBQWdDTixNQUFoQyxFQUF3Q0UsS0FBeEMsQ0FBdEI7O0FBRUEsTUFBSSxDQUFDRyxhQUFMLEVBQW9CO0FBQ2xCLFVBQU0sSUFBSUUsS0FBSixnQ0FBTjtBQUNEOztBQUVELFNBQU9QLE1BQVA7QUFDRDs7QUFFRCxTQUFTUSxrQkFBVCxDQUE0QkMsa0JBQTVCLEVBQWdEO0FBQzlDLE1BQU1YLE9BQU8sS0FBS1ksa0JBQWxCO0FBQUEsTUFDTUMsZUFBZSxLQUFLZCxZQUFMLENBQWtCQyxJQUFsQixFQUF3Qlcsa0JBQXhCLENBRHJCOztBQUdBLFNBQU9FLFlBQVA7QUFDRDs7QUFFRCxTQUFTQyxvQkFBVCxDQUE4QkMsb0JBQTlCLEVBQW9EO0FBQ2xELE1BQU1mLE9BQU8sS0FBS2dCLG9CQUFsQjtBQUFBLE1BQ01ILGVBQWUsS0FBS2QsWUFBTCxDQUFrQkMsSUFBbEIsRUFBd0JlLG9CQUF4QixDQURyQjs7QUFHQSxTQUFPRixZQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksbUJBQVQsQ0FBNkJOLGtCQUE3QixFQUFpREksb0JBQWpELEVBQXVFO0FBQ3JFLE1BQU1HLGdCQUFnQixLQUFLZixPQUFMLENBQWFnQixhQUFiLEVBQXRCO0FBQUEsTUFDTU4sZUFBZSxLQUFLSCxrQkFBTCxDQUF3QkMsa0JBQXhCLENBRHJCO0FBQUEsTUFFTVMsaUJBQWlCLEtBQUtOLG9CQUFMLENBQTBCQyxvQkFBMUIsQ0FGdkI7QUFBQSxNQUdNWCxRQUFRLEtBQUtpQixpQkFIbkI7O0FBS0EsT0FBS2xCLE9BQUwsQ0FBYW1CLFlBQWIsQ0FBMEJKLGFBQTFCLEVBQXlDTCxZQUF6QztBQUNBLE9BQUtWLE9BQUwsQ0FBYW1CLFlBQWIsQ0FBMEJKLGFBQTFCLEVBQXlDRSxjQUF6Qzs7QUFFQSxPQUFLakIsT0FBTCxDQUFhb0IsV0FBYixDQUF5QkwsYUFBekI7O0FBRUEsTUFBTU0sYUFBYSxLQUFLckIsT0FBTCxDQUFhc0IsbUJBQWIsQ0FBaUNQLGFBQWpDLEVBQWdEZCxLQUFoRCxDQUFuQjs7QUFFQSxNQUFJLENBQUNvQixVQUFMLEVBQWlCO0FBQ2YsUUFBTUUsVUFBVSxLQUFLdkIsT0FBTCxDQUFhd0IsaUJBQWIsQ0FBK0JULGFBQS9CLENBQWhCLENBRGUsQ0FDaUQ7O0FBRWhFLFVBQU0sSUFBSVQsS0FBSiw2Q0FBbURpQixPQUFuRCxTQUFOO0FBQ0Q7O0FBRUQsU0FBT1IsYUFBUDtBQUNEOztBQUVELElBQU1VLGNBQWM7QUFDbEI3QixnQkFBY0EsWUFESTtBQUVsQlcsc0JBQW9CQSxrQkFGRjtBQUdsQkksd0JBQXNCQSxvQkFISjtBQUlsQkcsdUJBQXFCQTtBQUpILENBQXBCOztBQU9BWSxPQUFPQyxPQUFQLEdBQWlCRixXQUFqQiIsImZpbGUiOiJzaGFkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRlcih0eXBlLCBzaGFkZXJTb3VyY2UpIHtcbiAgY29uc3Qgc2hhZGVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZVNoYWRlcih0eXBlKSxcbiAgICAgICAgcG5hbWUgPSB0aGlzLkNPTVBJTEVfU1RBVFVTX1BOQU1FO1xuXG4gIHRoaXMuY29udGV4dC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzaGFkZXJTb3VyY2UpO1xuXG4gIHRoaXMuY29udGV4dC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG5cbiAgY29uc3QgY29tcGlsZVN0YXR1cyA9IHRoaXMuY29udGV4dC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBwbmFtZSk7XG5cbiAgaWYgKCFjb21waWxlU3RhdHVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gY3JlYXRlIHRoZSBzaGFkZXIuYCk7XG4gIH1cblxuICByZXR1cm4gc2hhZGVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVWZXJ0ZXhTaGFkZXIodmVydGV4U2hhZGVyU291cmNlKSB7XG4gIGNvbnN0IHR5cGUgPSB0aGlzLlZFUlRFWF9TSEFERVJfVFlQRSxcbiAgICAgICAgdmVydGV4U2hhZGVyID0gdGhpcy5jcmVhdGVTaGFkZXIodHlwZSwgdmVydGV4U2hhZGVyU291cmNlKTtcblxuICByZXR1cm4gdmVydGV4U2hhZGVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGcmFnbWVudFNoYWRlcihmcmFnbWVudFNoYWRlclNvdXJjZSkge1xuICBjb25zdCB0eXBlID0gdGhpcy5GUkFHTUVOVF9TSEFERVJfVFlQRSxcbiAgICAgICAgdmVydGV4U2hhZGVyID0gdGhpcy5jcmVhdGVTaGFkZXIodHlwZSwgZnJhZ21lbnRTaGFkZXJTb3VyY2UpO1xuXG4gIHJldHVybiB2ZXJ0ZXhTaGFkZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRlclByb2dyYW0odmVydGV4U2hhZGVyU291cmNlLCBmcmFnbWVudFNoYWRlclNvdXJjZSkge1xuICBjb25zdCBzaGFkZXJQcm9ncmFtID0gdGhpcy5jb250ZXh0LmNyZWF0ZVByb2dyYW0oKSxcbiAgICAgICAgdmVydGV4U2hhZGVyID0gdGhpcy5jcmVhdGVWZXJ0ZXhTaGFkZXIodmVydGV4U2hhZGVyU291cmNlKSxcbiAgICAgICAgZnJhZ21lbnRTaGFkZXIgPSB0aGlzLmNyZWF0ZUZyYWdtZW50U2hhZGVyKGZyYWdtZW50U2hhZGVyU291cmNlKSxcbiAgICAgICAgcG5hbWUgPSB0aGlzLkxJTktfU1RBVFVTX1BOQU1FO1xuXG4gIHRoaXMuY29udGV4dC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcbiAgdGhpcy5jb250ZXh0LmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG5cbiAgdGhpcy5jb250ZXh0LmxpbmtQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xuXG4gIGNvbnN0IGxpbmtTdGF0dXMgPSB0aGlzLmNvbnRleHQuZ2V0UHJvZ3JhbVBhcmFtZXRlcihzaGFkZXJQcm9ncmFtLCBwbmFtZSk7XG5cbiAgaWYgKCFsaW5rU3RhdHVzKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMuY29udGV4dC5nZXRQcm9ncmFtSW5mb0xvZyhzaGFkZXJQcm9ncmFtKTsgIC8vL1xuXG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gY3JlYXRlIHRoZSBzaGFkZXIgcHJvZ3JhbSwgJyR7bWVzc2FnZX0nLmApO1xuICB9XG5cbiAgcmV0dXJuIHNoYWRlclByb2dyYW07XG59XG5cbmNvbnN0IHNoYWRlck1peGluID0ge1xuICBjcmVhdGVTaGFkZXI6IGNyZWF0ZVNoYWRlcixcbiAgY3JlYXRlVmVydGV4U2hhZGVyOiBjcmVhdGVWZXJ0ZXhTaGFkZXIsXG4gIGNyZWF0ZUZyYWdtZW50U2hhZGVyOiBjcmVhdGVGcmFnbWVudFNoYWRlcixcbiAgY3JlYXRlU2hhZGVyUHJvZ3JhbTogY3JlYXRlU2hhZGVyUHJvZ3JhbVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzaGFkZXJNaXhpbjtcbiJdfQ==