'use strict';

function createShader(type, shaderSource) {
  var COMPILE_STATUS = this.context.COMPILE_STATUS,
      pname = COMPILE_STATUS,
      shader = this.context.createShader(type);


  this.context.shaderSource(shader, shaderSource);

  this.context.compileShader(shader);

  var compileStatus = this.context.getShaderParameter(shader, pname);

  if (!compileStatus) {
    throw new Error('Unable to create the shader.');
  }

  return shader;
}

function createVertexShader(vertexShaderSource) {
  var VERTEX_SHADER = this.context.VERTEX_SHADER,
      type = VERTEX_SHADER,
      vertexShader = this.createShader(type, vertexShaderSource);


  return vertexShader;
}

function createFragmentShader(fragmentShaderSource) {
  var FRAGMENT_SHADER = this.context.FRAGMENT_SHADER,
      type = FRAGMENT_SHADER,
      vertexShader = this.createShader(type, fragmentShaderSource);


  return vertexShader;
}

function createShaderProgram(vertexShaderSource, fragmentShaderSource) {
  var LINK_STATUS = this.context.LINK_STATUS,
      pname = LINK_STATUS,
      shaderProgram = this.context.createProgram(),
      vertexShader = this.createVertexShader(vertexShaderSource),
      fragmentShader = this.createFragmentShader(fragmentShaderSource);


  this.context.attachShader(shaderProgram, vertexShader);
  this.context.attachShader(shaderProgram, fragmentShader);

  this.context.linkProgram(shaderProgram);

  var linkStatus = this.context.getProgramParameter(shaderProgram, pname);

  if (!linkStatus) {
    var message = this.context.getProgramInfoLog(shaderProgram); ///

    throw new Error('Unable to create the shader program, \'' + message + '\'.');
  }

  return shaderProgram;
}

var shaderMixin = {
  createShader: createShader,
  createVertexShader: createVertexShader,
  createFragmentShader: createFragmentShader,
  createShaderProgram: createShaderProgram
};

module.exports = shaderMixin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9zaGFkZXIuanMiXSwibmFtZXMiOlsiY3JlYXRlU2hhZGVyIiwidHlwZSIsInNoYWRlclNvdXJjZSIsIkNPTVBJTEVfU1RBVFVTIiwiY29udGV4dCIsInBuYW1lIiwic2hhZGVyIiwiY29tcGlsZVNoYWRlciIsImNvbXBpbGVTdGF0dXMiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJFcnJvciIsImNyZWF0ZVZlcnRleFNoYWRlciIsInZlcnRleFNoYWRlclNvdXJjZSIsIlZFUlRFWF9TSEFERVIiLCJ2ZXJ0ZXhTaGFkZXIiLCJjcmVhdGVGcmFnbWVudFNoYWRlciIsImZyYWdtZW50U2hhZGVyU291cmNlIiwiRlJBR01FTlRfU0hBREVSIiwiY3JlYXRlU2hhZGVyUHJvZ3JhbSIsIkxJTktfU1RBVFVTIiwic2hhZGVyUHJvZ3JhbSIsImNyZWF0ZVByb2dyYW0iLCJmcmFnbWVudFNoYWRlciIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwibGlua1N0YXR1cyIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJtZXNzYWdlIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJzaGFkZXJNaXhpbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLFlBQVQsQ0FBc0JDLElBQXRCLEVBQTRCQyxZQUE1QixFQUEwQztBQUNsQyxNQUFFQyxjQUFGLEdBQXFCLEtBQUtDLE9BQTFCLENBQUVELGNBQUY7QUFBQSxNQUNBRSxLQURBLEdBQ1FGLGNBRFI7QUFBQSxNQUVBRyxNQUZBLEdBRVMsS0FBS0YsT0FBTCxDQUFhSixZQUFiLENBQTBCQyxJQUExQixDQUZUOzs7QUFJTixPQUFLRyxPQUFMLENBQWFGLFlBQWIsQ0FBMEJJLE1BQTFCLEVBQWtDSixZQUFsQzs7QUFFQSxPQUFLRSxPQUFMLENBQWFHLGFBQWIsQ0FBMkJELE1BQTNCOztBQUVBLE1BQU1FLGdCQUFnQixLQUFLSixPQUFMLENBQWFLLGtCQUFiLENBQWdDSCxNQUFoQyxFQUF3Q0QsS0FBeEMsQ0FBdEI7O0FBRUEsTUFBSSxDQUFDRyxhQUFMLEVBQW9CO0FBQ2xCLFVBQU0sSUFBSUUsS0FBSixnQ0FBTjtBQUNEOztBQUVELFNBQU9KLE1BQVA7QUFDRDs7QUFFRCxTQUFTSyxrQkFBVCxDQUE0QkMsa0JBQTVCLEVBQWdEO0FBQ3hDLE1BQUVDLGFBQUYsR0FBb0IsS0FBS1QsT0FBekIsQ0FBRVMsYUFBRjtBQUFBLE1BQ0FaLElBREEsR0FDT1ksYUFEUDtBQUFBLE1BRUFDLFlBRkEsR0FFZSxLQUFLZCxZQUFMLENBQWtCQyxJQUFsQixFQUF3Qlcsa0JBQXhCLENBRmY7OztBQUlOLFNBQU9FLFlBQVA7QUFDRDs7QUFFRCxTQUFTQyxvQkFBVCxDQUE4QkMsb0JBQTlCLEVBQW9EO0FBQzVDLE1BQUVDLGVBQUYsR0FBc0IsS0FBS2IsT0FBM0IsQ0FBRWEsZUFBRjtBQUFBLE1BQ0FoQixJQURBLEdBQ09nQixlQURQO0FBQUEsTUFFQUgsWUFGQSxHQUVlLEtBQUtkLFlBQUwsQ0FBa0JDLElBQWxCLEVBQXdCZSxvQkFBeEIsQ0FGZjs7O0FBSU4sU0FBT0YsWUFBUDtBQUNEOztBQUVELFNBQVNJLG1CQUFULENBQTZCTixrQkFBN0IsRUFBaURJLG9CQUFqRCxFQUF1RTtBQUMvRCxNQUFFRyxXQUFGLEdBQWtCLEtBQUtmLE9BQXZCLENBQUVlLFdBQUY7QUFBQSxNQUNBZCxLQURBLEdBQ1FjLFdBRFI7QUFBQSxNQUVBQyxhQUZBLEdBRWdCLEtBQUtoQixPQUFMLENBQWFpQixhQUFiLEVBRmhCO0FBQUEsTUFHQVAsWUFIQSxHQUdlLEtBQUtILGtCQUFMLENBQXdCQyxrQkFBeEIsQ0FIZjtBQUFBLE1BSUFVLGNBSkEsR0FJaUIsS0FBS1Asb0JBQUwsQ0FBMEJDLG9CQUExQixDQUpqQjs7O0FBTU4sT0FBS1osT0FBTCxDQUFhbUIsWUFBYixDQUEwQkgsYUFBMUIsRUFBeUNOLFlBQXpDO0FBQ0EsT0FBS1YsT0FBTCxDQUFhbUIsWUFBYixDQUEwQkgsYUFBMUIsRUFBeUNFLGNBQXpDOztBQUVBLE9BQUtsQixPQUFMLENBQWFvQixXQUFiLENBQXlCSixhQUF6Qjs7QUFFQSxNQUFNSyxhQUFhLEtBQUtyQixPQUFMLENBQWFzQixtQkFBYixDQUFpQ04sYUFBakMsRUFBZ0RmLEtBQWhELENBQW5COztBQUVBLE1BQUksQ0FBQ29CLFVBQUwsRUFBaUI7QUFDZixRQUFNRSxVQUFVLEtBQUt2QixPQUFMLENBQWF3QixpQkFBYixDQUErQlIsYUFBL0IsQ0FBaEIsQ0FEZSxDQUNpRDs7QUFFaEUsVUFBTSxJQUFJVixLQUFKLDZDQUFtRGlCLE9BQW5ELFNBQU47QUFDRDs7QUFFRCxTQUFPUCxhQUFQO0FBQ0Q7O0FBRUQsSUFBTVMsY0FBYztBQUNsQjdCLGdCQUFjQSxZQURJO0FBRWxCVyxzQkFBb0JBLGtCQUZGO0FBR2xCSSx3QkFBc0JBLG9CQUhKO0FBSWxCRyx1QkFBcUJBO0FBSkgsQ0FBcEI7O0FBT0FZLE9BQU9DLE9BQVAsR0FBaUJGLFdBQWpCIiwiZmlsZSI6InNoYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY3JlYXRlU2hhZGVyKHR5cGUsIHNoYWRlclNvdXJjZSkge1xuICBjb25zdCB7IENPTVBJTEVfU1RBVFVTIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHBuYW1lID0gQ09NUElMRV9TVEFUVVMsXG4gICAgICAgIHNoYWRlciA9IHRoaXMuY29udGV4dC5jcmVhdGVTaGFkZXIodHlwZSk7XG5cbiAgdGhpcy5jb250ZXh0LnNoYWRlclNvdXJjZShzaGFkZXIsIHNoYWRlclNvdXJjZSk7XG5cbiAgdGhpcy5jb250ZXh0LmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcblxuICBjb25zdCBjb21waWxlU3RhdHVzID0gdGhpcy5jb250ZXh0LmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIHBuYW1lKTtcblxuICBpZiAoIWNvbXBpbGVTdGF0dXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBjcmVhdGUgdGhlIHNoYWRlci5gKTtcbiAgfVxuXG4gIHJldHVybiBzaGFkZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVZlcnRleFNoYWRlcih2ZXJ0ZXhTaGFkZXJTb3VyY2UpIHtcbiAgY29uc3QgeyBWRVJURVhfU0hBREVSIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHR5cGUgPSBWRVJURVhfU0hBREVSLFxuICAgICAgICB2ZXJ0ZXhTaGFkZXIgPSB0aGlzLmNyZWF0ZVNoYWRlcih0eXBlLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UpO1xuXG4gIHJldHVybiB2ZXJ0ZXhTaGFkZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50U2hhZGVyKGZyYWdtZW50U2hhZGVyU291cmNlKSB7XG4gIGNvbnN0IHsgRlJBR01FTlRfU0hBREVSIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHR5cGUgPSBGUkFHTUVOVF9TSEFERVIsXG4gICAgICAgIHZlcnRleFNoYWRlciA9IHRoaXMuY3JlYXRlU2hhZGVyKHR5cGUsIGZyYWdtZW50U2hhZGVyU291cmNlKTtcblxuICByZXR1cm4gdmVydGV4U2hhZGVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTaGFkZXJQcm9ncmFtKHZlcnRleFNoYWRlclNvdXJjZSwgZnJhZ21lbnRTaGFkZXJTb3VyY2UpIHtcbiAgY29uc3QgeyBMSU5LX1NUQVRVUyB9ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICBwbmFtZSA9IExJTktfU1RBVFVTLFxuICAgICAgICBzaGFkZXJQcm9ncmFtID0gdGhpcy5jb250ZXh0LmNyZWF0ZVByb2dyYW0oKSxcbiAgICAgICAgdmVydGV4U2hhZGVyID0gdGhpcy5jcmVhdGVWZXJ0ZXhTaGFkZXIodmVydGV4U2hhZGVyU291cmNlKSxcbiAgICAgICAgZnJhZ21lbnRTaGFkZXIgPSB0aGlzLmNyZWF0ZUZyYWdtZW50U2hhZGVyKGZyYWdtZW50U2hhZGVyU291cmNlKTtcblxuICB0aGlzLmNvbnRleHQuYXR0YWNoU2hhZGVyKHNoYWRlclByb2dyYW0sIHZlcnRleFNoYWRlcik7XG4gIHRoaXMuY29udGV4dC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpO1xuXG4gIHRoaXMuY29udGV4dC5saW5rUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcblxuICBjb25zdCBsaW5rU3RhdHVzID0gdGhpcy5jb250ZXh0LmdldFByb2dyYW1QYXJhbWV0ZXIoc2hhZGVyUHJvZ3JhbSwgcG5hbWUpO1xuXG4gIGlmICghbGlua1N0YXR1cykge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLmNvbnRleHQuZ2V0UHJvZ3JhbUluZm9Mb2coc2hhZGVyUHJvZ3JhbSk7ICAvLy9cblxuICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGNyZWF0ZSB0aGUgc2hhZGVyIHByb2dyYW0sICcke21lc3NhZ2V9Jy5gKTtcbiAgfVxuXG4gIHJldHVybiBzaGFkZXJQcm9ncmFtO1xufVxuXG5jb25zdCBzaGFkZXJNaXhpbiA9IHtcbiAgY3JlYXRlU2hhZGVyOiBjcmVhdGVTaGFkZXIsXG4gIGNyZWF0ZVZlcnRleFNoYWRlcjogY3JlYXRlVmVydGV4U2hhZGVyLFxuICBjcmVhdGVGcmFnbWVudFNoYWRlcjogY3JlYXRlRnJhZ21lbnRTaGFkZXIsXG4gIGNyZWF0ZVNoYWRlclByb2dyYW06IGNyZWF0ZVNoYWRlclByb2dyYW1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhZGVyTWl4aW47XG4iXX0=