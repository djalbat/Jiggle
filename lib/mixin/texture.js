'use strict';

function createTexture(image) {
  var _context = this.context,
      RGBA = _context.RGBA,
      LINEAR = _context.LINEAR,
      UNSIGNED_BYTE = _context.UNSIGNED_BYTE,
      TEXTURE_2D = _context.TEXTURE_2D,
      TEXTURE_WRAP_R = _context.TEXTURE_WRAP_R,
      TEXTURE_WRAP_S = _context.TEXTURE_WRAP_S,
      TEXTURE_WRAP_T = _context.TEXTURE_WRAP_T,
      CLAMP_TO_EDGE = _context.CLAMP_TO_EDGE,
      TEXTURE_MIN_FILTER = _context.TEXTURE_MIN_FILTER,
      target = TEXTURE_2D,
      level = 0,
      internalFormat = RGBA,
      format = RGBA,
      type = UNSIGNED_BYTE,
      texture = this.context.createTexture();


  this.context.bindTexture(target, texture);

  this.context.texImage2D(target, level, internalFormat, format, type, image);

  this.context.texParameteri(target, TEXTURE_WRAP_R, CLAMP_TO_EDGE);
  this.context.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
  this.context.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
  this.context.texParameteri(target, TEXTURE_MIN_FILTER, LINEAR);
}

function activateTexture(target) {
  this.context.activeTexture(target);
}

function enableAnisotropicFiltering() {
  var extension = this.context.getExtension('EXT_texture_filter_anisotropic') || this.context.getExtension('MOZ_EXT_texture_filter_anisotropic') || this.context.getExtension('WEBKIT_EXT_texture_filter_anisotropic');

  if (extension) {
    var TEXTURE_2D = this.context.TEXTURE_2D,
        MAX_TEXTURE_MAX_ANISOTROPY_EXT = extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT,
        TEXTURE_MAX_ANISOTROPY_EXT = extension.TEXTURE_MAX_ANISOTROPY_EXT,
        maximum = this.context.getParameter(MAX_TEXTURE_MAX_ANISOTROPY_EXT);


    this.context.texParameterf(TEXTURE_2D, TEXTURE_MAX_ANISOTROPY_EXT, maximum);
  }
}

module.exports = {
  createTexture: createTexture,
  activateTexture: activateTexture,
  enableAnisotropicFiltering: enableAnisotropicFiltering
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi90ZXh0dXJlLmpzIl0sIm5hbWVzIjpbImNyZWF0ZVRleHR1cmUiLCJpbWFnZSIsImNvbnRleHQiLCJSR0JBIiwiTElORUFSIiwiVU5TSUdORURfQllURSIsIlRFWFRVUkVfMkQiLCJURVhUVVJFX1dSQVBfUiIsIlRFWFRVUkVfV1JBUF9TIiwiVEVYVFVSRV9XUkFQX1QiLCJDTEFNUF9UT19FREdFIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwidGFyZ2V0IiwibGV2ZWwiLCJpbnRlcm5hbEZvcm1hdCIsImZvcm1hdCIsInR5cGUiLCJ0ZXh0dXJlIiwiYmluZFRleHR1cmUiLCJ0ZXhJbWFnZTJEIiwidGV4UGFyYW1ldGVyaSIsImFjdGl2YXRlVGV4dHVyZSIsImFjdGl2ZVRleHR1cmUiLCJlbmFibGVBbmlzb3Ryb3BpY0ZpbHRlcmluZyIsImV4dGVuc2lvbiIsImdldEV4dGVuc2lvbiIsIk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwibWF4aW11bSIsImdldFBhcmFtZXRlciIsInRleFBhcmFtZXRlcmYiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxhQUFULENBQXVCQyxLQUF2QixFQUE4QjtBQUFBLGlCQUMwRyxLQUFLQyxPQUQvRztBQUFBLE1BQ3JCQyxJQURxQixZQUNyQkEsSUFEcUI7QUFBQSxNQUNmQyxNQURlLFlBQ2ZBLE1BRGU7QUFBQSxNQUNQQyxhQURPLFlBQ1BBLGFBRE87QUFBQSxNQUNRQyxVQURSLFlBQ1FBLFVBRFI7QUFBQSxNQUNvQkMsY0FEcEIsWUFDb0JBLGNBRHBCO0FBQUEsTUFDb0NDLGNBRHBDLFlBQ29DQSxjQURwQztBQUFBLE1BQ29EQyxjQURwRCxZQUNvREEsY0FEcEQ7QUFBQSxNQUNvRUMsYUFEcEUsWUFDb0VBLGFBRHBFO0FBQUEsTUFDbUZDLGtCQURuRixZQUNtRkEsa0JBRG5GO0FBQUEsTUFFMUJDLE1BRjBCLEdBRWpCTixVQUZpQjtBQUFBLE1BRzFCTyxLQUgwQixHQUdsQixDQUhrQjtBQUFBLE1BSTFCQyxjQUowQixHQUlUWCxJQUpTO0FBQUEsTUFLMUJZLE1BTDBCLEdBS2pCWixJQUxpQjtBQUFBLE1BTTFCYSxJQU4wQixHQU1uQlgsYUFObUI7QUFBQSxNQU8xQlksT0FQMEIsR0FPaEIsS0FBS2YsT0FBTCxDQUFhRixhQUFiLEVBUGdCOzs7QUFTN0IsT0FBS0UsT0FBTCxDQUFhZ0IsV0FBYixDQUF5Qk4sTUFBekIsRUFBaUNLLE9BQWpDOztBQUVDLE9BQUtmLE9BQUwsQ0FBYWlCLFVBQWIsQ0FBd0JQLE1BQXhCLEVBQWdDQyxLQUFoQyxFQUF1Q0MsY0FBdkMsRUFBdURDLE1BQXZELEVBQStEQyxJQUEvRCxFQUFxRWYsS0FBckU7O0FBRUEsT0FBS0MsT0FBTCxDQUFha0IsYUFBYixDQUEyQlIsTUFBM0IsRUFBbUNMLGNBQW5DLEVBQW1ERyxhQUFuRDtBQUNBLE9BQUtSLE9BQUwsQ0FBYWtCLGFBQWIsQ0FBMkJSLE1BQTNCLEVBQW1DSixjQUFuQyxFQUFtREUsYUFBbkQ7QUFDQSxPQUFLUixPQUFMLENBQWFrQixhQUFiLENBQTJCUixNQUEzQixFQUFtQ0gsY0FBbkMsRUFBbURDLGFBQW5EO0FBQ0QsT0FBS1IsT0FBTCxDQUFha0IsYUFBYixDQUEyQlIsTUFBM0IsRUFBbUNELGtCQUFuQyxFQUF1RFAsTUFBdkQ7QUFDQTs7QUFFRCxTQUFTaUIsZUFBVCxDQUF5QlQsTUFBekIsRUFBaUM7QUFBRSxPQUFLVixPQUFMLENBQWFvQixhQUFiLENBQTJCVixNQUEzQjtBQUFxQzs7QUFFeEUsU0FBU1csMEJBQVQsR0FBc0M7QUFDcEMsTUFBTUMsWUFDSixLQUFLdEIsT0FBTCxDQUFhdUIsWUFBYixDQUEwQixnQ0FBMUIsS0FDQSxLQUFLdkIsT0FBTCxDQUFhdUIsWUFBYixDQUEwQixvQ0FBMUIsQ0FEQSxJQUVBLEtBQUt2QixPQUFMLENBQWF1QixZQUFiLENBQTBCLHVDQUExQixDQUhGOztBQU1BLE1BQUlELFNBQUosRUFBZTtBQUNQLFFBQUVsQixVQUFGLEdBQWlCLEtBQUtKLE9BQXRCLENBQUVJLFVBQUY7QUFBQSxRQUNFb0IsOEJBREYsR0FDaUVGLFNBRGpFLENBQ0VFLDhCQURGO0FBQUEsUUFDa0NDLDBCQURsQyxHQUNpRUgsU0FEakUsQ0FDa0NHLDBCQURsQztBQUFBLFFBRUFDLE9BRkEsR0FFVSxLQUFLMUIsT0FBTCxDQUFhMkIsWUFBYixDQUEwQkgsOEJBQTFCLENBRlY7OztBQUlOLFNBQUt4QixPQUFMLENBQWE0QixhQUFiLENBQTJCeEIsVUFBM0IsRUFBdUNxQiwwQkFBdkMsRUFBbUVDLE9BQW5FO0FBQ0Q7QUFDRjs7QUFFREcsT0FBT0MsT0FBUCxHQUFpQjtBQUNmaEMsOEJBRGU7QUFFZnFCLGtDQUZlO0FBR2ZFO0FBSGUsQ0FBakIiLCJmaWxlIjoidGV4dHVyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY3JlYXRlVGV4dHVyZShpbWFnZSkge1xuXHRjb25zdCB7IFJHQkEsIExJTkVBUiwgVU5TSUdORURfQllURSwgVEVYVFVSRV8yRCwgVEVYVFVSRV9XUkFQX1IsIFRFWFRVUkVfV1JBUF9TLCBURVhUVVJFX1dSQVBfVCwgQ0xBTVBfVE9fRURHRSwgVEVYVFVSRV9NSU5fRklMVEVSIH0gPSB0aGlzLmNvbnRleHQsXG5cdFx0XHRcdHRhcmdldCA9IFRFWFRVUkVfMkQsXG5cdFx0XHRcdGxldmVsID0gMCxcblx0XHRcdFx0aW50ZXJuYWxGb3JtYXQgPSBSR0JBLFxuXHRcdFx0XHRmb3JtYXQgPSBSR0JBLFxuXHRcdFx0XHR0eXBlID0gVU5TSUdORURfQllURSxcblx0XHRcdFx0dGV4dHVyZSA9IHRoaXMuY29udGV4dC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0dGhpcy5jb250ZXh0LmJpbmRUZXh0dXJlKHRhcmdldCwgdGV4dHVyZSk7XG5cbiAgdGhpcy5jb250ZXh0LnRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxGb3JtYXQsIGZvcm1hdCwgdHlwZSwgaW1hZ2UpO1xuXG4gIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKHRhcmdldCwgVEVYVFVSRV9XUkFQX1IsIENMQU1QX1RPX0VER0UpO1xuICB0aGlzLmNvbnRleHQudGV4UGFyYW1ldGVyaSh0YXJnZXQsIFRFWFRVUkVfV1JBUF9TLCBDTEFNUF9UT19FREdFKTtcbiAgdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkodGFyZ2V0LCBURVhUVVJFX1dSQVBfVCwgQ0xBTVBfVE9fRURHRSk7XG5cdHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKHRhcmdldCwgVEVYVFVSRV9NSU5fRklMVEVSLCBMSU5FQVIpO1xufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZVRleHR1cmUodGFyZ2V0KSB7IHRoaXMuY29udGV4dC5hY3RpdmVUZXh0dXJlKHRhcmdldCk7IH1cblxuZnVuY3Rpb24gZW5hYmxlQW5pc290cm9waWNGaWx0ZXJpbmcoKSB7XG4gIGNvbnN0IGV4dGVuc2lvbiA9IChcbiAgICB0aGlzLmNvbnRleHQuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKSB8fFxuICAgIHRoaXMuY29udGV4dC5nZXRFeHRlbnNpb24oJ01PWl9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKSB8fFxuICAgIHRoaXMuY29udGV4dC5nZXRFeHRlbnNpb24oJ1dFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKVxuICApO1xuXG4gIGlmIChleHRlbnNpb24pIHtcbiAgICBjb25zdCB7IFRFWFRVUkVfMkQgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgICB7IE1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCwgVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQgfSA9IGV4dGVuc2lvbixcbiAgICAgICAgICBtYXhpbXVtID0gdGhpcy5jb250ZXh0LmdldFBhcmFtZXRlcihNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQpO1xuXG4gICAgdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmYoVEVYVFVSRV8yRCwgVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIG1heGltdW0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVUZXh0dXJlLFxuICBhY3RpdmF0ZVRleHR1cmUsXG4gIGVuYWJsZUFuaXNvdHJvcGljRmlsdGVyaW5nXG59O1xuIl19