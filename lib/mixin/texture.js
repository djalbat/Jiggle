'use strict';

function createTexture(image) {
  var _context = this.context,
      RGBA = _context.RGBA,
      LINEAR = _context.LINEAR,
      UNSIGNED_BYTE = _context.UNSIGNED_BYTE,
      TEXTURE_2D = _context.TEXTURE_2D,
      TEXTURE_MIN_FILTER = _context.TEXTURE_MIN_FILTER,
      target = TEXTURE_2D,
      level = 0,
      internalFormat = RGBA,
      format = RGBA,
      type = UNSIGNED_BYTE,
      pname = TEXTURE_MIN_FILTER,
      param = LINEAR,
      texture = this.context.createTexture();


  this.context.bindTexture(target, texture);

  this.context.texImage2D(target, level, internalFormat, format, type, image);

  this.context.texParameteri(target, pname, param);
}

function activateTexture(target) {
  this.context.activeTexture(target);
}

function enableAnisotropicFiltering() {
  var extension = this.context.getExtension('EXT_texture_filter_anisotropic') || this.context.getExtension('MOZ_EXT_texture_filter_anisotropic') || this.context.getExtension('WEBKIT_EXT_texture_filter_anisotropic');

  if (extension) {
    var TEXTURE_2D = this.context.TEXTURE_2D,
        MAX_TEXTURE_MAX_ANISOTROPY_EXT = extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT,
        TEXTURE_MAX_ANISOTROPY_EXT = extension.TEXTURE_MAX_ANISOTROPY_EXT,
        maximum = this.context.getParameter(MAX_TEXTURE_MAX_ANISOTROPY_EXT);


    this.context.texParameterf(TEXTURE_2D, TEXTURE_MAX_ANISOTROPY_EXT, maximum);
  }
}

module.exports = {
  createTexture: createTexture,
  activateTexture: activateTexture,
  enableAnisotropicFiltering: enableAnisotropicFiltering
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi90ZXh0dXJlLmpzIl0sIm5hbWVzIjpbImNyZWF0ZVRleHR1cmUiLCJpbWFnZSIsImNvbnRleHQiLCJSR0JBIiwiTElORUFSIiwiVU5TSUdORURfQllURSIsIlRFWFRVUkVfMkQiLCJURVhUVVJFX01JTl9GSUxURVIiLCJ0YXJnZXQiLCJsZXZlbCIsImludGVybmFsRm9ybWF0IiwiZm9ybWF0IiwidHlwZSIsInBuYW1lIiwicGFyYW0iLCJ0ZXh0dXJlIiwiYmluZFRleHR1cmUiLCJ0ZXhJbWFnZTJEIiwidGV4UGFyYW1ldGVyaSIsImFjdGl2YXRlVGV4dHVyZSIsImFjdGl2ZVRleHR1cmUiLCJlbmFibGVBbmlzb3Ryb3BpY0ZpbHRlcmluZyIsImV4dGVuc2lvbiIsImdldEV4dGVuc2lvbiIsIk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwibWF4aW11bSIsImdldFBhcmFtZXRlciIsInRleFBhcmFtZXRlcmYiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxhQUFULENBQXVCQyxLQUF2QixFQUE4QjtBQUFBLGlCQUMyQyxLQUFLQyxPQURoRDtBQUFBLE1BQ3JCQyxJQURxQixZQUNyQkEsSUFEcUI7QUFBQSxNQUNmQyxNQURlLFlBQ2ZBLE1BRGU7QUFBQSxNQUNQQyxhQURPLFlBQ1BBLGFBRE87QUFBQSxNQUNRQyxVQURSLFlBQ1FBLFVBRFI7QUFBQSxNQUNvQkMsa0JBRHBCLFlBQ29CQSxrQkFEcEI7QUFBQSxNQUUxQkMsTUFGMEIsR0FFakJGLFVBRmlCO0FBQUEsTUFHMUJHLEtBSDBCLEdBR2xCLENBSGtCO0FBQUEsTUFJMUJDLGNBSjBCLEdBSVRQLElBSlM7QUFBQSxNQUsxQlEsTUFMMEIsR0FLakJSLElBTGlCO0FBQUEsTUFNMUJTLElBTjBCLEdBTW5CUCxhQU5tQjtBQUFBLE1BTzFCUSxLQVAwQixHQU9sQk4sa0JBUGtCO0FBQUEsTUFRMUJPLEtBUjBCLEdBUWxCVixNQVJrQjtBQUFBLE1BUzFCVyxPQVQwQixHQVNoQixLQUFLYixPQUFMLENBQWFGLGFBQWIsRUFUZ0I7OztBQVc3QixPQUFLRSxPQUFMLENBQWFjLFdBQWIsQ0FBeUJSLE1BQXpCLEVBQWlDTyxPQUFqQzs7QUFFQyxPQUFLYixPQUFMLENBQWFlLFVBQWIsQ0FBd0JULE1BQXhCLEVBQWdDQyxLQUFoQyxFQUF1Q0MsY0FBdkMsRUFBdURDLE1BQXZELEVBQStEQyxJQUEvRCxFQUFxRVgsS0FBckU7O0FBRUQsT0FBS0MsT0FBTCxDQUFhZ0IsYUFBYixDQUEyQlYsTUFBM0IsRUFBbUNLLEtBQW5DLEVBQTBDQyxLQUExQztBQUNBOztBQUVELFNBQVNLLGVBQVQsQ0FBeUJYLE1BQXpCLEVBQWlDO0FBQUUsT0FBS04sT0FBTCxDQUFha0IsYUFBYixDQUEyQlosTUFBM0I7QUFBcUM7O0FBRXhFLFNBQVNhLDBCQUFULEdBQXNDO0FBQ3BDLE1BQU1DLFlBQ0osS0FBS3BCLE9BQUwsQ0FBYXFCLFlBQWIsQ0FBMEIsZ0NBQTFCLEtBQ0EsS0FBS3JCLE9BQUwsQ0FBYXFCLFlBQWIsQ0FBMEIsb0NBQTFCLENBREEsSUFFQSxLQUFLckIsT0FBTCxDQUFhcUIsWUFBYixDQUEwQix1Q0FBMUIsQ0FIRjs7QUFNQSxNQUFJRCxTQUFKLEVBQWU7QUFDUCxRQUFFaEIsVUFBRixHQUFpQixLQUFLSixPQUF0QixDQUFFSSxVQUFGO0FBQUEsUUFDRWtCLDhCQURGLEdBQ2lFRixTQURqRSxDQUNFRSw4QkFERjtBQUFBLFFBQ2tDQywwQkFEbEMsR0FDaUVILFNBRGpFLENBQ2tDRywwQkFEbEM7QUFBQSxRQUVBQyxPQUZBLEdBRVUsS0FBS3hCLE9BQUwsQ0FBYXlCLFlBQWIsQ0FBMEJILDhCQUExQixDQUZWOzs7QUFJTixTQUFLdEIsT0FBTCxDQUFhMEIsYUFBYixDQUEyQnRCLFVBQTNCLEVBQXVDbUIsMEJBQXZDLEVBQW1FQyxPQUFuRTtBQUNEO0FBQ0Y7O0FBRURHLE9BQU9DLE9BQVAsR0FBaUI7QUFDZjlCLDhCQURlO0FBRWZtQixrQ0FGZTtBQUdmRTtBQUhlLENBQWpCIiwiZmlsZSI6InRleHR1cmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHR1cmUoaW1hZ2UpIHtcblx0Y29uc3QgeyBSR0JBLCBMSU5FQVIsIFVOU0lHTkVEX0JZVEUsIFRFWFRVUkVfMkQsIFRFWFRVUkVfTUlOX0ZJTFRFUiB9ID0gdGhpcy5jb250ZXh0LFxuXHRcdFx0XHR0YXJnZXQgPSBURVhUVVJFXzJELFxuXHRcdFx0XHRsZXZlbCA9IDAsXG5cdFx0XHRcdGludGVybmFsRm9ybWF0ID0gUkdCQSxcblx0XHRcdFx0Zm9ybWF0ID0gUkdCQSxcblx0XHRcdFx0dHlwZSA9IFVOU0lHTkVEX0JZVEUsXG5cdFx0XHRcdHBuYW1lID0gVEVYVFVSRV9NSU5fRklMVEVSLFxuXHRcdFx0XHRwYXJhbSA9IExJTkVBUixcblx0XHRcdFx0dGV4dHVyZSA9IHRoaXMuY29udGV4dC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0dGhpcy5jb250ZXh0LmJpbmRUZXh0dXJlKHRhcmdldCwgdGV4dHVyZSk7XG5cbiAgdGhpcy5jb250ZXh0LnRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxGb3JtYXQsIGZvcm1hdCwgdHlwZSwgaW1hZ2UpO1xuXG5cdHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKHRhcmdldCwgcG5hbWUsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVUZXh0dXJlKHRhcmdldCkgeyB0aGlzLmNvbnRleHQuYWN0aXZlVGV4dHVyZSh0YXJnZXQpOyB9XG5cbmZ1bmN0aW9uIGVuYWJsZUFuaXNvdHJvcGljRmlsdGVyaW5nKCkge1xuICBjb25zdCBleHRlbnNpb24gPSAoXG4gICAgdGhpcy5jb250ZXh0LmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykgfHxcbiAgICB0aGlzLmNvbnRleHQuZ2V0RXh0ZW5zaW9uKCdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykgfHxcbiAgICB0aGlzLmNvbnRleHQuZ2V0RXh0ZW5zaW9uKCdXRUJLSVRfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJylcbiAgKTtcblxuICBpZiAoZXh0ZW5zaW9uKSB7XG4gICAgY29uc3QgeyBURVhUVVJFXzJEIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgICAgeyBNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIFRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIH0gPSBleHRlbnNpb24sXG4gICAgICAgICAgbWF4aW11bSA9IHRoaXMuY29udGV4dC5nZXRQYXJhbWV0ZXIoTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUKTtcblxuICAgIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJmKFRFWFRVUkVfMkQsIFRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBtYXhpbXVtKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlVGV4dHVyZSxcbiAgYWN0aXZhdGVUZXh0dXJlLFxuICBlbmFibGVBbmlzb3Ryb3BpY0ZpbHRlcmluZ1xufTtcbiJdfQ==