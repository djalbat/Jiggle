'use strict';

function createTexture(image) {
  var _context = this.context,
      RGBA = _context.RGBA,
      LINEAR = _context.LINEAR,
      UNSIGNED_BYTE = _context.UNSIGNED_BYTE,
      TEXTURE_2D = _context.TEXTURE_2D,
      TEXTURE_WRAP_R = _context.TEXTURE_WRAP_R,
      TEXTURE_WRAP_S = _context.TEXTURE_WRAP_S,
      TEXTURE_WRAP_T = _context.TEXTURE_WRAP_T,
      CLAMP_TO_EDGE = _context.CLAMP_TO_EDGE,
      TEXTURE_MIN_FILTER = _context.TEXTURE_MIN_FILTER,
      target = TEXTURE_2D,
      level = 0,
      internalFormat = RGBA,
      format = RGBA,
      type = UNSIGNED_BYTE,
      texture = this.context.createTexture();


  this.context.bindTexture(target, texture);

  this.context.texImage2D(target, level, internalFormat, format, type, image);

  this.context.generateMipmap(TEXTURE_2D);

  // this.context.texParameteri(target, TEXTURE_WRAP_R, CLAMP_TO_EDGE);
  // this.context.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
  // this.context.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
  // this.context.texParameteri(target, TEXTURE_MIN_FILTER, LINEAR);
}

function activateTexture(target) {
  this.context.activeTexture(target);
}

function enableAnisotropicFiltering() {
  var extension = this.context.getExtension('EXT_texture_filter_anisotropic') || this.context.getExtension('MOZ_EXT_texture_filter_anisotropic') || this.context.getExtension('WEBKIT_EXT_texture_filter_anisotropic');

  if (extension) {
    var TEXTURE_2D = this.context.TEXTURE_2D,
        MAX_TEXTURE_MAX_ANISOTROPY_EXT = extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT,
        TEXTURE_MAX_ANISOTROPY_EXT = extension.TEXTURE_MAX_ANISOTROPY_EXT,
        maximum = this.context.getParameter(MAX_TEXTURE_MAX_ANISOTROPY_EXT);


    this.context.texParameterf(TEXTURE_2D, TEXTURE_MAX_ANISOTROPY_EXT, maximum);
  }
}

module.exports = {
  createTexture: createTexture,
  activateTexture: activateTexture,
  enableAnisotropicFiltering: enableAnisotropicFiltering
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi90ZXh0dXJlLmpzIl0sIm5hbWVzIjpbImNyZWF0ZVRleHR1cmUiLCJpbWFnZSIsImNvbnRleHQiLCJSR0JBIiwiTElORUFSIiwiVU5TSUdORURfQllURSIsIlRFWFRVUkVfMkQiLCJURVhUVVJFX1dSQVBfUiIsIlRFWFRVUkVfV1JBUF9TIiwiVEVYVFVSRV9XUkFQX1QiLCJDTEFNUF9UT19FREdFIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwidGFyZ2V0IiwibGV2ZWwiLCJpbnRlcm5hbEZvcm1hdCIsImZvcm1hdCIsInR5cGUiLCJ0ZXh0dXJlIiwiYmluZFRleHR1cmUiLCJ0ZXhJbWFnZTJEIiwiZ2VuZXJhdGVNaXBtYXAiLCJhY3RpdmF0ZVRleHR1cmUiLCJhY3RpdmVUZXh0dXJlIiwiZW5hYmxlQW5pc290cm9waWNGaWx0ZXJpbmciLCJleHRlbnNpb24iLCJnZXRFeHRlbnNpb24iLCJNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJURVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsIm1heGltdW0iLCJnZXRQYXJhbWV0ZXIiLCJ0ZXhQYXJhbWV0ZXJmIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsYUFBVCxDQUF1QkMsS0FBdkIsRUFBOEI7QUFBQSxpQkFDMEcsS0FBS0MsT0FEL0c7QUFBQSxNQUNyQkMsSUFEcUIsWUFDckJBLElBRHFCO0FBQUEsTUFDZkMsTUFEZSxZQUNmQSxNQURlO0FBQUEsTUFDUEMsYUFETyxZQUNQQSxhQURPO0FBQUEsTUFDUUMsVUFEUixZQUNRQSxVQURSO0FBQUEsTUFDb0JDLGNBRHBCLFlBQ29CQSxjQURwQjtBQUFBLE1BQ29DQyxjQURwQyxZQUNvQ0EsY0FEcEM7QUFBQSxNQUNvREMsY0FEcEQsWUFDb0RBLGNBRHBEO0FBQUEsTUFDb0VDLGFBRHBFLFlBQ29FQSxhQURwRTtBQUFBLE1BQ21GQyxrQkFEbkYsWUFDbUZBLGtCQURuRjtBQUFBLE1BRTFCQyxNQUYwQixHQUVqQk4sVUFGaUI7QUFBQSxNQUcxQk8sS0FIMEIsR0FHbEIsQ0FIa0I7QUFBQSxNQUkxQkMsY0FKMEIsR0FJVFgsSUFKUztBQUFBLE1BSzFCWSxNQUwwQixHQUtqQlosSUFMaUI7QUFBQSxNQU0xQmEsSUFOMEIsR0FNbkJYLGFBTm1CO0FBQUEsTUFPMUJZLE9BUDBCLEdBT2hCLEtBQUtmLE9BQUwsQ0FBYUYsYUFBYixFQVBnQjs7O0FBUzdCLE9BQUtFLE9BQUwsQ0FBYWdCLFdBQWIsQ0FBeUJOLE1BQXpCLEVBQWlDSyxPQUFqQzs7QUFFQyxPQUFLZixPQUFMLENBQWFpQixVQUFiLENBQXdCUCxNQUF4QixFQUFnQ0MsS0FBaEMsRUFBdUNDLGNBQXZDLEVBQXVEQyxNQUF2RCxFQUErREMsSUFBL0QsRUFBcUVmLEtBQXJFOztBQUVBLE9BQUtDLE9BQUwsQ0FBYWtCLGNBQWIsQ0FBNEJkLFVBQTVCOztBQUVBO0FBQ0E7QUFDQTtBQUNEO0FBQ0E7O0FBRUQsU0FBU2UsZUFBVCxDQUF5QlQsTUFBekIsRUFBaUM7QUFBRSxPQUFLVixPQUFMLENBQWFvQixhQUFiLENBQTJCVixNQUEzQjtBQUFxQzs7QUFFeEUsU0FBU1csMEJBQVQsR0FBc0M7QUFDcEMsTUFBTUMsWUFDSixLQUFLdEIsT0FBTCxDQUFhdUIsWUFBYixDQUEwQixnQ0FBMUIsS0FDQSxLQUFLdkIsT0FBTCxDQUFhdUIsWUFBYixDQUEwQixvQ0FBMUIsQ0FEQSxJQUVBLEtBQUt2QixPQUFMLENBQWF1QixZQUFiLENBQTBCLHVDQUExQixDQUhGOztBQU1BLE1BQUlELFNBQUosRUFBZTtBQUNQLFFBQUVsQixVQUFGLEdBQWlCLEtBQUtKLE9BQXRCLENBQUVJLFVBQUY7QUFBQSxRQUNFb0IsOEJBREYsR0FDaUVGLFNBRGpFLENBQ0VFLDhCQURGO0FBQUEsUUFDa0NDLDBCQURsQyxHQUNpRUgsU0FEakUsQ0FDa0NHLDBCQURsQztBQUFBLFFBRUFDLE9BRkEsR0FFVSxLQUFLMUIsT0FBTCxDQUFhMkIsWUFBYixDQUEwQkgsOEJBQTFCLENBRlY7OztBQUlOLFNBQUt4QixPQUFMLENBQWE0QixhQUFiLENBQTJCeEIsVUFBM0IsRUFBdUNxQiwwQkFBdkMsRUFBbUVDLE9BQW5FO0FBQ0Q7QUFDRjs7QUFFREcsT0FBT0MsT0FBUCxHQUFpQjtBQUNmaEMsOEJBRGU7QUFFZnFCLGtDQUZlO0FBR2ZFO0FBSGUsQ0FBakIiLCJmaWxlIjoidGV4dHVyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY3JlYXRlVGV4dHVyZShpbWFnZSkge1xuXHRjb25zdCB7IFJHQkEsIExJTkVBUiwgVU5TSUdORURfQllURSwgVEVYVFVSRV8yRCwgVEVYVFVSRV9XUkFQX1IsIFRFWFRVUkVfV1JBUF9TLCBURVhUVVJFX1dSQVBfVCwgQ0xBTVBfVE9fRURHRSwgVEVYVFVSRV9NSU5fRklMVEVSIH0gPSB0aGlzLmNvbnRleHQsXG5cdFx0XHRcdHRhcmdldCA9IFRFWFRVUkVfMkQsXG5cdFx0XHRcdGxldmVsID0gMCxcblx0XHRcdFx0aW50ZXJuYWxGb3JtYXQgPSBSR0JBLFxuXHRcdFx0XHRmb3JtYXQgPSBSR0JBLFxuXHRcdFx0XHR0eXBlID0gVU5TSUdORURfQllURSxcblx0XHRcdFx0dGV4dHVyZSA9IHRoaXMuY29udGV4dC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0dGhpcy5jb250ZXh0LmJpbmRUZXh0dXJlKHRhcmdldCwgdGV4dHVyZSk7XG5cbiAgdGhpcy5jb250ZXh0LnRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxGb3JtYXQsIGZvcm1hdCwgdHlwZSwgaW1hZ2UpO1xuXG4gIHRoaXMuY29udGV4dC5nZW5lcmF0ZU1pcG1hcChURVhUVVJFXzJEKTtcblxuICAvLyB0aGlzLmNvbnRleHQudGV4UGFyYW1ldGVyaSh0YXJnZXQsIFRFWFRVUkVfV1JBUF9SLCBDTEFNUF9UT19FREdFKTtcbiAgLy8gdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkodGFyZ2V0LCBURVhUVVJFX1dSQVBfUywgQ0xBTVBfVE9fRURHRSk7XG4gIC8vIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKHRhcmdldCwgVEVYVFVSRV9XUkFQX1QsIENMQU1QX1RPX0VER0UpO1xuXHQvLyB0aGlzLmNvbnRleHQudGV4UGFyYW1ldGVyaSh0YXJnZXQsIFRFWFRVUkVfTUlOX0ZJTFRFUiwgTElORUFSKTtcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVUZXh0dXJlKHRhcmdldCkgeyB0aGlzLmNvbnRleHQuYWN0aXZlVGV4dHVyZSh0YXJnZXQpOyB9XG5cbmZ1bmN0aW9uIGVuYWJsZUFuaXNvdHJvcGljRmlsdGVyaW5nKCkge1xuICBjb25zdCBleHRlbnNpb24gPSAoXG4gICAgdGhpcy5jb250ZXh0LmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykgfHxcbiAgICB0aGlzLmNvbnRleHQuZ2V0RXh0ZW5zaW9uKCdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykgfHxcbiAgICB0aGlzLmNvbnRleHQuZ2V0RXh0ZW5zaW9uKCdXRUJLSVRfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJylcbiAgKTtcblxuICBpZiAoZXh0ZW5zaW9uKSB7XG4gICAgY29uc3QgeyBURVhUVVJFXzJEIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgICAgeyBNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIFRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIH0gPSBleHRlbnNpb24sXG4gICAgICAgICAgbWF4aW11bSA9IHRoaXMuY29udGV4dC5nZXRQYXJhbWV0ZXIoTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUKTtcblxuICAgIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJmKFRFWFRVUkVfMkQsIFRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBtYXhpbXVtKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlVGV4dHVyZSxcbiAgYWN0aXZhdGVUZXh0dXJlLFxuICBlbmFibGVBbmlzb3Ryb3BpY0ZpbHRlcmluZ1xufTtcbiJdfQ==