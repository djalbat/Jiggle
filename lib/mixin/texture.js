'use strict';

function createTexture(image) {
  var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var _context = this.context,
      RGBA = _context.RGBA,
      LINEAR = _context.LINEAR,
      UNSIGNED_BYTE = _context.UNSIGNED_BYTE,
      TEXTURE0 = _context.TEXTURE0,
      TEXTURE_2D = _context.TEXTURE_2D,
      TEXTURE_WRAP_S = _context.TEXTURE_WRAP_S,
      TEXTURE_WRAP_T = _context.TEXTURE_WRAP_T,
      UNPACK_FLIP_Y_WEBGL = _context.UNPACK_FLIP_Y_WEBGL,
      CLAMP_TO_EDGE = _context.CLAMP_TO_EDGE,
      NEAREST = _context.NEAREST,
      REPEAT = _context.REPEAT,
      TEXTURE_MIN_FILTER = _context.TEXTURE_MIN_FILTER,
      target = TEXTURE0 + index,
      level = 0,
      internalFormat = RGBA,
      format = RGBA,
      type = UNSIGNED_BYTE,
      texture = this.context.createTexture();


  this.context.activeTexture(target);

  this.context.bindTexture(TEXTURE_2D, texture);

  this.context.texImage2D(TEXTURE_2D, level, internalFormat, format, type, image);

  this.context.pixelStorei(UNPACK_FLIP_Y_WEBGL, 1);

  this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, REPEAT);
  this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, REPEAT);
  this.context.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, LINEAR);

  return texture;
}

function enableAnisotropicFiltering() {
  var extension = this.context.getExtension('EXT_texture_filter_anisotropic') || this.context.getExtension('MOZ_EXT_texture_filter_anisotropic') || this.context.getExtension('WEBKIT_EXT_texture_filter_anisotropic');

  if (extension) {
    var TEXTURE_2D = this.context.TEXTURE_2D,
        MAX_TEXTURE_MAX_ANISOTROPY_EXT = extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT,
        TEXTURE_MAX_ANISOTROPY_EXT = extension.TEXTURE_MAX_ANISOTROPY_EXT,
        maximum = this.context.getParameter(MAX_TEXTURE_MAX_ANISOTROPY_EXT);


    this.context.texParameterf(TEXTURE_2D, TEXTURE_MAX_ANISOTROPY_EXT, maximum);
  }
}

module.exports = {
  createTexture: createTexture,
  enableAnisotropicFiltering: enableAnisotropicFiltering
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi90ZXh0dXJlLmpzIl0sIm5hbWVzIjpbImNyZWF0ZVRleHR1cmUiLCJpbWFnZSIsImluZGV4IiwiY29udGV4dCIsIlJHQkEiLCJMSU5FQVIiLCJVTlNJR05FRF9CWVRFIiwiVEVYVFVSRTAiLCJURVhUVVJFXzJEIiwiVEVYVFVSRV9XUkFQX1MiLCJURVhUVVJFX1dSQVBfVCIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJDTEFNUF9UT19FREdFIiwiTkVBUkVTVCIsIlJFUEVBVCIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsInRhcmdldCIsImxldmVsIiwiaW50ZXJuYWxGb3JtYXQiLCJmb3JtYXQiLCJ0eXBlIiwidGV4dHVyZSIsImFjdGl2ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsInRleEltYWdlMkQiLCJwaXhlbFN0b3JlaSIsInRleFBhcmFtZXRlcmkiLCJlbmFibGVBbmlzb3Ryb3BpY0ZpbHRlcmluZyIsImV4dGVuc2lvbiIsImdldEV4dGVuc2lvbiIsIk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwibWF4aW11bSIsImdldFBhcmFtZXRlciIsInRleFBhcmFtZXRlcmYiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxhQUFULENBQXVCQyxLQUF2QixFQUF5QztBQUFBLE1BQVhDLEtBQVcsdUVBQUgsQ0FBRztBQUFBLGlCQUMrSCxLQUFLQyxPQURwSTtBQUFBLE1BQ2hDQyxJQURnQyxZQUNoQ0EsSUFEZ0M7QUFBQSxNQUMxQkMsTUFEMEIsWUFDMUJBLE1BRDBCO0FBQUEsTUFDbEJDLGFBRGtCLFlBQ2xCQSxhQURrQjtBQUFBLE1BQ0hDLFFBREcsWUFDSEEsUUFERztBQUFBLE1BQ09DLFVBRFAsWUFDT0EsVUFEUDtBQUFBLE1BQ21CQyxjQURuQixZQUNtQkEsY0FEbkI7QUFBQSxNQUNtQ0MsY0FEbkMsWUFDbUNBLGNBRG5DO0FBQUEsTUFDbURDLG1CQURuRCxZQUNtREEsbUJBRG5EO0FBQUEsTUFDd0VDLGFBRHhFLFlBQ3dFQSxhQUR4RTtBQUFBLE1BQ3VGQyxPQUR2RixZQUN1RkEsT0FEdkY7QUFBQSxNQUNnR0MsTUFEaEcsWUFDZ0dBLE1BRGhHO0FBQUEsTUFDd0dDLGtCQUR4RyxZQUN3R0Esa0JBRHhHO0FBQUEsTUFFckNDLE1BRnFDLEdBRTVCVCxXQUFXTCxLQUZpQjtBQUFBLE1BR3JDZSxLQUhxQyxHQUc3QixDQUg2QjtBQUFBLE1BSXJDQyxjQUpxQyxHQUlwQmQsSUFKb0I7QUFBQSxNQUtyQ2UsTUFMcUMsR0FLNUJmLElBTDRCO0FBQUEsTUFNckNnQixJQU5xQyxHQU05QmQsYUFOOEI7QUFBQSxNQU9yQ2UsT0FQcUMsR0FPM0IsS0FBS2xCLE9BQUwsQ0FBYUgsYUFBYixFQVAyQjs7O0FBU3ZDLE9BQUtHLE9BQUwsQ0FBYW1CLGFBQWIsQ0FBMkJOLE1BQTNCOztBQUVBLE9BQUtiLE9BQUwsQ0FBYW9CLFdBQWIsQ0FBeUJmLFVBQXpCLEVBQXFDYSxPQUFyQzs7QUFFQSxPQUFLbEIsT0FBTCxDQUFhcUIsVUFBYixDQUF3QmhCLFVBQXhCLEVBQW9DUyxLQUFwQyxFQUEyQ0MsY0FBM0MsRUFBMkRDLE1BQTNELEVBQW1FQyxJQUFuRSxFQUF5RW5CLEtBQXpFOztBQUVBLE9BQUtFLE9BQUwsQ0FBYXNCLFdBQWIsQ0FBeUJkLG1CQUF6QixFQUE4QyxDQUE5Qzs7QUFFQSxPQUFLUixPQUFMLENBQWF1QixhQUFiLENBQTJCbEIsVUFBM0IsRUFBdUNDLGNBQXZDLEVBQXVESyxNQUF2RDtBQUNBLE9BQUtYLE9BQUwsQ0FBYXVCLGFBQWIsQ0FBMkJsQixVQUEzQixFQUF1Q0UsY0FBdkMsRUFBdURJLE1BQXZEO0FBQ0QsT0FBS1gsT0FBTCxDQUFhdUIsYUFBYixDQUEyQmxCLFVBQTNCLEVBQXVDTyxrQkFBdkMsRUFBMkRWLE1BQTNEOztBQUVBLFNBQU9nQixPQUFQO0FBQ0E7O0FBRUQsU0FBU00sMEJBQVQsR0FBc0M7QUFDcEMsTUFBTUMsWUFDSixLQUFLekIsT0FBTCxDQUFhMEIsWUFBYixDQUEwQixnQ0FBMUIsS0FDQSxLQUFLMUIsT0FBTCxDQUFhMEIsWUFBYixDQUEwQixvQ0FBMUIsQ0FEQSxJQUVBLEtBQUsxQixPQUFMLENBQWEwQixZQUFiLENBQTBCLHVDQUExQixDQUhGOztBQU1BLE1BQUlELFNBQUosRUFBZTtBQUNQLFFBQUVwQixVQUFGLEdBQWlCLEtBQUtMLE9BQXRCLENBQUVLLFVBQUY7QUFBQSxRQUNFc0IsOEJBREYsR0FDaUVGLFNBRGpFLENBQ0VFLDhCQURGO0FBQUEsUUFDa0NDLDBCQURsQyxHQUNpRUgsU0FEakUsQ0FDa0NHLDBCQURsQztBQUFBLFFBRUFDLE9BRkEsR0FFVSxLQUFLN0IsT0FBTCxDQUFhOEIsWUFBYixDQUEwQkgsOEJBQTFCLENBRlY7OztBQUlOLFNBQUszQixPQUFMLENBQWErQixhQUFiLENBQTJCMUIsVUFBM0IsRUFBdUN1QiwwQkFBdkMsRUFBbUVDLE9BQW5FO0FBQ0Q7QUFDRjs7QUFFREcsT0FBT0MsT0FBUCxHQUFpQjtBQUNmcEMsOEJBRGU7QUFFZjJCO0FBRmUsQ0FBakIiLCJmaWxlIjoidGV4dHVyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY3JlYXRlVGV4dHVyZShpbWFnZSwgaW5kZXggPSAwKSB7XG5cdGNvbnN0IHsgUkdCQSwgTElORUFSLCBVTlNJR05FRF9CWVRFLCBURVhUVVJFMCwgVEVYVFVSRV8yRCwgVEVYVFVSRV9XUkFQX1MsIFRFWFRVUkVfV1JBUF9ULCBVTlBBQ0tfRkxJUF9ZX1dFQkdMLCBDTEFNUF9UT19FREdFLCBORUFSRVNULCBSRVBFQVQsIFRFWFRVUkVfTUlOX0ZJTFRFUiB9ID0gdGhpcy5jb250ZXh0LFxuXHRcdFx0XHR0YXJnZXQgPSBURVhUVVJFMCArIGluZGV4LFxuXHRcdFx0XHRsZXZlbCA9IDAsXG5cdFx0XHRcdGludGVybmFsRm9ybWF0ID0gUkdCQSxcblx0XHRcdFx0Zm9ybWF0ID0gUkdCQSxcblx0XHRcdFx0dHlwZSA9IFVOU0lHTkVEX0JZVEUsXG5cdFx0XHRcdHRleHR1cmUgPSB0aGlzLmNvbnRleHQuY3JlYXRlVGV4dHVyZSgpO1xuXG4gIHRoaXMuY29udGV4dC5hY3RpdmVUZXh0dXJlKHRhcmdldCk7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRUZXh0dXJlKFRFWFRVUkVfMkQsIHRleHR1cmUpO1xuXG4gIHRoaXMuY29udGV4dC50ZXhJbWFnZTJEKFRFWFRVUkVfMkQsIGxldmVsLCBpbnRlcm5hbEZvcm1hdCwgZm9ybWF0LCB0eXBlLCBpbWFnZSk7XG5cbiAgdGhpcy5jb250ZXh0LnBpeGVsU3RvcmVpKFVOUEFDS19GTElQX1lfV0VCR0wsIDEpO1xuXG4gIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIFRFWFRVUkVfV1JBUF9TLCBSRVBFQVQpO1xuICB0aGlzLmNvbnRleHQudGV4UGFyYW1ldGVyaShURVhUVVJFXzJELCBURVhUVVJFX1dSQVBfVCwgUkVQRUFUKTtcblx0dGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgVEVYVFVSRV9NSU5fRklMVEVSLCBMSU5FQVIpO1xuXG5cdHJldHVybiB0ZXh0dXJlO1xufVxuXG5mdW5jdGlvbiBlbmFibGVBbmlzb3Ryb3BpY0ZpbHRlcmluZygpIHtcbiAgY29uc3QgZXh0ZW5zaW9uID0gKFxuICAgIHRoaXMuY29udGV4dC5nZXRFeHRlbnNpb24oJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpIHx8XG4gICAgdGhpcy5jb250ZXh0LmdldEV4dGVuc2lvbignTU9aX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpIHx8XG4gICAgdGhpcy5jb250ZXh0LmdldEV4dGVuc2lvbignV0VCS0lUX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpXG4gICk7XG5cbiAgaWYgKGV4dGVuc2lvbikge1xuICAgIGNvbnN0IHsgVEVYVFVSRV8yRCB9ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICAgIHsgTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBURVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCB9ID0gZXh0ZW5zaW9uLFxuICAgICAgICAgIG1heGltdW0gPSB0aGlzLmNvbnRleHQuZ2V0UGFyYW1ldGVyKE1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCk7XG5cbiAgICB0aGlzLmNvbnRleHQudGV4UGFyYW1ldGVyZihURVhUVVJFXzJELCBURVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCwgbWF4aW11bSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZVRleHR1cmUsXG4gIGVuYWJsZUFuaXNvdHJvcGljRmlsdGVyaW5nXG59O1xuIl19