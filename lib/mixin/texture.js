'use strict';

function createTexture(image, index, repeat) {
  var _this$context = this.context,
      RGBA = _this$context.RGBA,
      LINEAR = _this$context.LINEAR,
      UNSIGNED_BYTE = _this$context.UNSIGNED_BYTE,
      TEXTURE0 = _this$context.TEXTURE0,
      TEXTURE_2D = _this$context.TEXTURE_2D,
      TEXTURE_WRAP_S = _this$context.TEXTURE_WRAP_S,
      TEXTURE_WRAP_T = _this$context.TEXTURE_WRAP_T,
      UNPACK_FLIP_Y_WEBGL = _this$context.UNPACK_FLIP_Y_WEBGL,
      CLAMP_TO_EDGE = _this$context.CLAMP_TO_EDGE,
      NEAREST = _this$context.NEAREST,
      REPEAT = _this$context.REPEAT,
      TEXTURE_MIN_FILTER = _this$context.TEXTURE_MIN_FILTER,
      target = TEXTURE0 + index,
      level = 0,
      internalFormat = RGBA,
      format = RGBA,
      type = UNSIGNED_BYTE,
      texture = this.context.createTexture();
  this.context.activeTexture(target);
  this.context.bindTexture(TEXTURE_2D, texture);
  this.context.pixelStorei(UNPACK_FLIP_Y_WEBGL, true);
  this.context.texImage2D(TEXTURE_2D, level, internalFormat, format, type, image);

  if (repeat) {
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, REPEAT);
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, REPEAT);
  } else {
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
  }

  this.context.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, LINEAR);
  return texture;
}

function enableAnisotropicFiltering() {
  var extension = this.context.getExtension('EXT_texture_filter_anisotropic') || this.context.getExtension('MOZ_EXT_texture_filter_anisotropic') || this.context.getExtension('WEBKIT_EXT_texture_filter_anisotropic');

  if (extension) {
    var TEXTURE_2D = this.context.TEXTURE_2D,
        MAX_TEXTURE_MAX_ANISOTROPY_EXT = extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT,
        TEXTURE_MAX_ANISOTROPY_EXT = extension.TEXTURE_MAX_ANISOTROPY_EXT,
        maximum = this.context.getParameter(MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    this.context.texParameterf(TEXTURE_2D, TEXTURE_MAX_ANISOTROPY_EXT, maximum);
  }
}

module.exports = {
  createTexture: createTexture,
  enableAnisotropicFiltering: enableAnisotropicFiltering
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHR1cmUuanMiXSwibmFtZXMiOlsiY3JlYXRlVGV4dHVyZSIsImltYWdlIiwiaW5kZXgiLCJyZXBlYXQiLCJjb250ZXh0IiwiUkdCQSIsIkxJTkVBUiIsIlVOU0lHTkVEX0JZVEUiLCJURVhUVVJFMCIsIlRFWFRVUkVfMkQiLCJURVhUVVJFX1dSQVBfUyIsIlRFWFRVUkVfV1JBUF9UIiwiVU5QQUNLX0ZMSVBfWV9XRUJHTCIsIkNMQU1QX1RPX0VER0UiLCJORUFSRVNUIiwiUkVQRUFUIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwidGFyZ2V0IiwibGV2ZWwiLCJpbnRlcm5hbEZvcm1hdCIsImZvcm1hdCIsInR5cGUiLCJ0ZXh0dXJlIiwiYWN0aXZlVGV4dHVyZSIsImJpbmRUZXh0dXJlIiwicGl4ZWxTdG9yZWkiLCJ0ZXhJbWFnZTJEIiwidGV4UGFyYW1ldGVyaSIsImVuYWJsZUFuaXNvdHJvcGljRmlsdGVyaW5nIiwiZXh0ZW5zaW9uIiwiZ2V0RXh0ZW5zaW9uIiwiTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJtYXhpbXVtIiwiZ2V0UGFyYW1ldGVyIiwidGV4UGFyYW1ldGVyZiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLGFBQVQsQ0FBdUJDLEtBQXZCLEVBQThCQyxLQUE5QixFQUFxQ0MsTUFBckMsRUFBNkM7QUFBQSxzQkFDMkgsS0FBS0MsT0FEaEk7QUFBQSxNQUNwQ0MsSUFEb0MsaUJBQ3BDQSxJQURvQztBQUFBLE1BQzlCQyxNQUQ4QixpQkFDOUJBLE1BRDhCO0FBQUEsTUFDdEJDLGFBRHNCLGlCQUN0QkEsYUFEc0I7QUFBQSxNQUNQQyxRQURPLGlCQUNQQSxRQURPO0FBQUEsTUFDR0MsVUFESCxpQkFDR0EsVUFESDtBQUFBLE1BQ2VDLGNBRGYsaUJBQ2VBLGNBRGY7QUFBQSxNQUMrQkMsY0FEL0IsaUJBQytCQSxjQUQvQjtBQUFBLE1BQytDQyxtQkFEL0MsaUJBQytDQSxtQkFEL0M7QUFBQSxNQUNvRUMsYUFEcEUsaUJBQ29FQSxhQURwRTtBQUFBLE1BQ21GQyxPQURuRixpQkFDbUZBLE9BRG5GO0FBQUEsTUFDNEZDLE1BRDVGLGlCQUM0RkEsTUFENUY7QUFBQSxNQUNvR0Msa0JBRHBHLGlCQUNvR0Esa0JBRHBHO0FBQUEsTUFFekNDLE1BRnlDLEdBRWhDVCxRQUFRLEdBQUdOLEtBRnFCO0FBQUEsTUFHekNnQixLQUh5QyxHQUdqQyxDQUhpQztBQUFBLE1BSXpDQyxjQUp5QyxHQUl4QmQsSUFKd0I7QUFBQSxNQUt6Q2UsTUFMeUMsR0FLaENmLElBTGdDO0FBQUEsTUFNekNnQixJQU55QyxHQU1sQ2QsYUFOa0M7QUFBQSxNQU96Q2UsT0FQeUMsR0FPL0IsS0FBS2xCLE9BQUwsQ0FBYUosYUFBYixFQVArQjtBQVMzQyxPQUFLSSxPQUFMLENBQWFtQixhQUFiLENBQTJCTixNQUEzQjtBQUVBLE9BQUtiLE9BQUwsQ0FBYW9CLFdBQWIsQ0FBeUJmLFVBQXpCLEVBQXFDYSxPQUFyQztBQUVBLE9BQUtsQixPQUFMLENBQWFxQixXQUFiLENBQXlCYixtQkFBekIsRUFBOEMsSUFBOUM7QUFFQSxPQUFLUixPQUFMLENBQWFzQixVQUFiLENBQXdCakIsVUFBeEIsRUFBb0NTLEtBQXBDLEVBQTJDQyxjQUEzQyxFQUEyREMsTUFBM0QsRUFBbUVDLElBQW5FLEVBQXlFcEIsS0FBekU7O0FBRUEsTUFBSUUsTUFBSixFQUFZO0FBQ1YsU0FBS0MsT0FBTCxDQUFhdUIsYUFBYixDQUEyQmxCLFVBQTNCLEVBQXVDQyxjQUF2QyxFQUF1REssTUFBdkQ7QUFDQSxTQUFLWCxPQUFMLENBQWF1QixhQUFiLENBQTJCbEIsVUFBM0IsRUFBdUNFLGNBQXZDLEVBQXVESSxNQUF2RDtBQUNELEdBSEQsTUFHTztBQUNMLFNBQUtYLE9BQUwsQ0FBYXVCLGFBQWIsQ0FBMkJsQixVQUEzQixFQUF1Q0MsY0FBdkMsRUFBdURHLGFBQXZEO0FBQ0EsU0FBS1QsT0FBTCxDQUFhdUIsYUFBYixDQUEyQmxCLFVBQTNCLEVBQXVDRSxjQUF2QyxFQUF1REUsYUFBdkQ7QUFDRDs7QUFFRixPQUFLVCxPQUFMLENBQWF1QixhQUFiLENBQTJCbEIsVUFBM0IsRUFBdUNPLGtCQUF2QyxFQUEyRFYsTUFBM0Q7QUFFQSxTQUFPZ0IsT0FBUDtBQUNBOztBQUVELFNBQVNNLDBCQUFULEdBQXNDO0FBQ3BDLE1BQU1DLFNBQVMsR0FDYixLQUFLekIsT0FBTCxDQUFhMEIsWUFBYixDQUEwQixnQ0FBMUIsS0FDQSxLQUFLMUIsT0FBTCxDQUFhMEIsWUFBYixDQUEwQixvQ0FBMUIsQ0FEQSxJQUVBLEtBQUsxQixPQUFMLENBQWEwQixZQUFiLENBQTBCLHVDQUExQixDQUhGOztBQU1BLE1BQUlELFNBQUosRUFBZTtBQUNQLFFBQUVwQixVQUFGLEdBQWlCLEtBQUtMLE9BQXRCLENBQUVLLFVBQUY7QUFBQSxRQUNFc0IsOEJBREYsR0FDaUVGLFNBRGpFLENBQ0VFLDhCQURGO0FBQUEsUUFDa0NDLDBCQURsQyxHQUNpRUgsU0FEakUsQ0FDa0NHLDBCQURsQztBQUFBLFFBRUFDLE9BRkEsR0FFVSxLQUFLN0IsT0FBTCxDQUFhOEIsWUFBYixDQUEwQkgsOEJBQTFCLENBRlY7QUFJTixTQUFLM0IsT0FBTCxDQUFhK0IsYUFBYixDQUEyQjFCLFVBQTNCLEVBQXVDdUIsMEJBQXZDLEVBQW1FQyxPQUFuRTtBQUNEO0FBQ0Y7O0FBRURHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmckMsRUFBQUEsYUFBYSxFQUFiQSxhQURlO0FBRWY0QixFQUFBQSwwQkFBMEIsRUFBMUJBO0FBRmUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHR1cmUoaW1hZ2UsIGluZGV4LCByZXBlYXQpIHtcblx0Y29uc3QgeyBSR0JBLCBMSU5FQVIsIFVOU0lHTkVEX0JZVEUsIFRFWFRVUkUwLCBURVhUVVJFXzJELCBURVhUVVJFX1dSQVBfUywgVEVYVFVSRV9XUkFQX1QsIFVOUEFDS19GTElQX1lfV0VCR0wsIENMQU1QX1RPX0VER0UsIE5FQVJFU1QsIFJFUEVBVCwgVEVYVFVSRV9NSU5fRklMVEVSIH0gPSB0aGlzLmNvbnRleHQsXG5cdFx0XHRcdHRhcmdldCA9IFRFWFRVUkUwICsgaW5kZXgsXG5cdFx0XHRcdGxldmVsID0gMCxcblx0XHRcdFx0aW50ZXJuYWxGb3JtYXQgPSBSR0JBLFxuXHRcdFx0XHRmb3JtYXQgPSBSR0JBLFxuXHRcdFx0XHR0eXBlID0gVU5TSUdORURfQllURSxcblx0XHRcdFx0dGV4dHVyZSA9IHRoaXMuY29udGV4dC5jcmVhdGVUZXh0dXJlKCk7XG5cbiAgdGhpcy5jb250ZXh0LmFjdGl2ZVRleHR1cmUodGFyZ2V0KTtcblxuICB0aGlzLmNvbnRleHQuYmluZFRleHR1cmUoVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG5cbiAgdGhpcy5jb250ZXh0LnBpeGVsU3RvcmVpKFVOUEFDS19GTElQX1lfV0VCR0wsIHRydWUpO1xuXG4gIHRoaXMuY29udGV4dC50ZXhJbWFnZTJEKFRFWFRVUkVfMkQsIGxldmVsLCBpbnRlcm5hbEZvcm1hdCwgZm9ybWF0LCB0eXBlLCBpbWFnZSk7XG5cbiAgaWYgKHJlcGVhdCkge1xuICAgIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIFRFWFRVUkVfV1JBUF9TLCBSRVBFQVQpO1xuICAgIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIFRFWFRVUkVfV1JBUF9ULCBSRVBFQVQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIFRFWFRVUkVfV1JBUF9TLCBDTEFNUF9UT19FREdFKTtcbiAgICB0aGlzLmNvbnRleHQudGV4UGFyYW1ldGVyaShURVhUVVJFXzJELCBURVhUVVJFX1dSQVBfVCwgQ0xBTVBfVE9fRURHRSk7XG4gIH1cblxuXHR0aGlzLmNvbnRleHQudGV4UGFyYW1ldGVyaShURVhUVVJFXzJELCBURVhUVVJFX01JTl9GSUxURVIsIExJTkVBUik7XG5cblx0cmV0dXJuIHRleHR1cmU7XG59XG5cbmZ1bmN0aW9uIGVuYWJsZUFuaXNvdHJvcGljRmlsdGVyaW5nKCkge1xuICBjb25zdCBleHRlbnNpb24gPSAoXG4gICAgdGhpcy5jb250ZXh0LmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykgfHxcbiAgICB0aGlzLmNvbnRleHQuZ2V0RXh0ZW5zaW9uKCdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykgfHxcbiAgICB0aGlzLmNvbnRleHQuZ2V0RXh0ZW5zaW9uKCdXRUJLSVRfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJylcbiAgKTtcblxuICBpZiAoZXh0ZW5zaW9uKSB7XG4gICAgY29uc3QgeyBURVhUVVJFXzJEIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgICAgeyBNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIFRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIH0gPSBleHRlbnNpb24sXG4gICAgICAgICAgbWF4aW11bSA9IHRoaXMuY29udGV4dC5nZXRQYXJhbWV0ZXIoTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUKTtcblxuICAgIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJmKFRFWFRVUkVfMkQsIFRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBtYXhpbXVtKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlVGV4dHVyZSxcbiAgZW5hYmxlQW5pc290cm9waWNGaWx0ZXJpbmdcbn07XG4iXX0=