'use strict';

function createTexture(image, index, repeat) {
  var _context = this.context,
      RGBA = _context.RGBA,
      LINEAR = _context.LINEAR,
      UNSIGNED_BYTE = _context.UNSIGNED_BYTE,
      TEXTURE0 = _context.TEXTURE0,
      TEXTURE_2D = _context.TEXTURE_2D,
      TEXTURE_WRAP_S = _context.TEXTURE_WRAP_S,
      TEXTURE_WRAP_T = _context.TEXTURE_WRAP_T,
      UNPACK_FLIP_Y_WEBGL = _context.UNPACK_FLIP_Y_WEBGL,
      CLAMP_TO_EDGE = _context.CLAMP_TO_EDGE,
      NEAREST = _context.NEAREST,
      REPEAT = _context.REPEAT,
      TEXTURE_MIN_FILTER = _context.TEXTURE_MIN_FILTER,
      target = TEXTURE0 + index,
      level = 0,
      internalFormat = RGBA,
      format = RGBA,
      type = UNSIGNED_BYTE,
      texture = this.context.createTexture();


  this.context.activeTexture(target);

  this.context.bindTexture(TEXTURE_2D, texture);

  this.context.pixelStorei(UNPACK_FLIP_Y_WEBGL, true);

  this.context.texImage2D(TEXTURE_2D, level, internalFormat, format, type, image);

  if (repeat) {
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, REPEAT);
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, REPEAT);
  } else {
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
  }

  this.context.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, LINEAR);

  return texture;
}

function enableAnisotropicFiltering() {
  var extension = this.context.getExtension('EXT_texture_filter_anisotropic') || this.context.getExtension('MOZ_EXT_texture_filter_anisotropic') || this.context.getExtension('WEBKIT_EXT_texture_filter_anisotropic');

  if (extension) {
    var TEXTURE_2D = this.context.TEXTURE_2D,
        MAX_TEXTURE_MAX_ANISOTROPY_EXT = extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT,
        TEXTURE_MAX_ANISOTROPY_EXT = extension.TEXTURE_MAX_ANISOTROPY_EXT,
        maximum = this.context.getParameter(MAX_TEXTURE_MAX_ANISOTROPY_EXT);


    this.context.texParameterf(TEXTURE_2D, TEXTURE_MAX_ANISOTROPY_EXT, maximum);
  }
}

module.exports = {
  createTexture: createTexture,
  enableAnisotropicFiltering: enableAnisotropicFiltering
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi90ZXh0dXJlLmpzIl0sIm5hbWVzIjpbImNyZWF0ZVRleHR1cmUiLCJpbWFnZSIsImluZGV4IiwicmVwZWF0IiwiY29udGV4dCIsIlJHQkEiLCJMSU5FQVIiLCJVTlNJR05FRF9CWVRFIiwiVEVYVFVSRTAiLCJURVhUVVJFXzJEIiwiVEVYVFVSRV9XUkFQX1MiLCJURVhUVVJFX1dSQVBfVCIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJDTEFNUF9UT19FREdFIiwiTkVBUkVTVCIsIlJFUEVBVCIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsInRhcmdldCIsImxldmVsIiwiaW50ZXJuYWxGb3JtYXQiLCJmb3JtYXQiLCJ0eXBlIiwidGV4dHVyZSIsImFjdGl2ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsInBpeGVsU3RvcmVpIiwidGV4SW1hZ2UyRCIsInRleFBhcmFtZXRlcmkiLCJlbmFibGVBbmlzb3Ryb3BpY0ZpbHRlcmluZyIsImV4dGVuc2lvbiIsImdldEV4dGVuc2lvbiIsIk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwibWF4aW11bSIsImdldFBhcmFtZXRlciIsInRleFBhcmFtZXRlcmYiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxhQUFULENBQXVCQyxLQUF2QixFQUE4QkMsS0FBOUIsRUFBcUNDLE1BQXJDLEVBQTZDO0FBQUEsaUJBQzJILEtBQUtDLE9BRGhJO0FBQUEsTUFDcENDLElBRG9DLFlBQ3BDQSxJQURvQztBQUFBLE1BQzlCQyxNQUQ4QixZQUM5QkEsTUFEOEI7QUFBQSxNQUN0QkMsYUFEc0IsWUFDdEJBLGFBRHNCO0FBQUEsTUFDUEMsUUFETyxZQUNQQSxRQURPO0FBQUEsTUFDR0MsVUFESCxZQUNHQSxVQURIO0FBQUEsTUFDZUMsY0FEZixZQUNlQSxjQURmO0FBQUEsTUFDK0JDLGNBRC9CLFlBQytCQSxjQUQvQjtBQUFBLE1BQytDQyxtQkFEL0MsWUFDK0NBLG1CQUQvQztBQUFBLE1BQ29FQyxhQURwRSxZQUNvRUEsYUFEcEU7QUFBQSxNQUNtRkMsT0FEbkYsWUFDbUZBLE9BRG5GO0FBQUEsTUFDNEZDLE1BRDVGLFlBQzRGQSxNQUQ1RjtBQUFBLE1BQ29HQyxrQkFEcEcsWUFDb0dBLGtCQURwRztBQUFBLE1BRXpDQyxNQUZ5QyxHQUVoQ1QsV0FBV04sS0FGcUI7QUFBQSxNQUd6Q2dCLEtBSHlDLEdBR2pDLENBSGlDO0FBQUEsTUFJekNDLGNBSnlDLEdBSXhCZCxJQUp3QjtBQUFBLE1BS3pDZSxNQUx5QyxHQUtoQ2YsSUFMZ0M7QUFBQSxNQU16Q2dCLElBTnlDLEdBTWxDZCxhQU5rQztBQUFBLE1BT3pDZSxPQVB5QyxHQU8vQixLQUFLbEIsT0FBTCxDQUFhSixhQUFiLEVBUCtCOzs7QUFTM0MsT0FBS0ksT0FBTCxDQUFhbUIsYUFBYixDQUEyQk4sTUFBM0I7O0FBRUEsT0FBS2IsT0FBTCxDQUFhb0IsV0FBYixDQUF5QmYsVUFBekIsRUFBcUNhLE9BQXJDOztBQUVBLE9BQUtsQixPQUFMLENBQWFxQixXQUFiLENBQXlCYixtQkFBekIsRUFBOEMsSUFBOUM7O0FBRUEsT0FBS1IsT0FBTCxDQUFhc0IsVUFBYixDQUF3QmpCLFVBQXhCLEVBQW9DUyxLQUFwQyxFQUEyQ0MsY0FBM0MsRUFBMkRDLE1BQTNELEVBQW1FQyxJQUFuRSxFQUF5RXBCLEtBQXpFOztBQUVBLE1BQUlFLE1BQUosRUFBWTtBQUNWLFNBQUtDLE9BQUwsQ0FBYXVCLGFBQWIsQ0FBMkJsQixVQUEzQixFQUF1Q0MsY0FBdkMsRUFBdURLLE1BQXZEO0FBQ0EsU0FBS1gsT0FBTCxDQUFhdUIsYUFBYixDQUEyQmxCLFVBQTNCLEVBQXVDRSxjQUF2QyxFQUF1REksTUFBdkQ7QUFDRCxHQUhELE1BR087QUFDTCxTQUFLWCxPQUFMLENBQWF1QixhQUFiLENBQTJCbEIsVUFBM0IsRUFBdUNDLGNBQXZDLEVBQXVERyxhQUF2RDtBQUNBLFNBQUtULE9BQUwsQ0FBYXVCLGFBQWIsQ0FBMkJsQixVQUEzQixFQUF1Q0UsY0FBdkMsRUFBdURFLGFBQXZEO0FBQ0Q7O0FBRUYsT0FBS1QsT0FBTCxDQUFhdUIsYUFBYixDQUEyQmxCLFVBQTNCLEVBQXVDTyxrQkFBdkMsRUFBMkRWLE1BQTNEOztBQUVBLFNBQU9nQixPQUFQO0FBQ0E7O0FBRUQsU0FBU00sMEJBQVQsR0FBc0M7QUFDcEMsTUFBTUMsWUFDSixLQUFLekIsT0FBTCxDQUFhMEIsWUFBYixDQUEwQixnQ0FBMUIsS0FDQSxLQUFLMUIsT0FBTCxDQUFhMEIsWUFBYixDQUEwQixvQ0FBMUIsQ0FEQSxJQUVBLEtBQUsxQixPQUFMLENBQWEwQixZQUFiLENBQTBCLHVDQUExQixDQUhGOztBQU1BLE1BQUlELFNBQUosRUFBZTtBQUNQLFFBQUVwQixVQUFGLEdBQWlCLEtBQUtMLE9BQXRCLENBQUVLLFVBQUY7QUFBQSxRQUNFc0IsOEJBREYsR0FDaUVGLFNBRGpFLENBQ0VFLDhCQURGO0FBQUEsUUFDa0NDLDBCQURsQyxHQUNpRUgsU0FEakUsQ0FDa0NHLDBCQURsQztBQUFBLFFBRUFDLE9BRkEsR0FFVSxLQUFLN0IsT0FBTCxDQUFhOEIsWUFBYixDQUEwQkgsOEJBQTFCLENBRlY7OztBQUlOLFNBQUszQixPQUFMLENBQWErQixhQUFiLENBQTJCMUIsVUFBM0IsRUFBdUN1QiwwQkFBdkMsRUFBbUVDLE9BQW5FO0FBQ0Q7QUFDRjs7QUFFREcsT0FBT0MsT0FBUCxHQUFpQjtBQUNmckMsOEJBRGU7QUFFZjRCO0FBRmUsQ0FBakIiLCJmaWxlIjoidGV4dHVyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY3JlYXRlVGV4dHVyZShpbWFnZSwgaW5kZXgsIHJlcGVhdCkge1xuXHRjb25zdCB7IFJHQkEsIExJTkVBUiwgVU5TSUdORURfQllURSwgVEVYVFVSRTAsIFRFWFRVUkVfMkQsIFRFWFRVUkVfV1JBUF9TLCBURVhUVVJFX1dSQVBfVCwgVU5QQUNLX0ZMSVBfWV9XRUJHTCwgQ0xBTVBfVE9fRURHRSwgTkVBUkVTVCwgUkVQRUFULCBURVhUVVJFX01JTl9GSUxURVIgfSA9IHRoaXMuY29udGV4dCxcblx0XHRcdFx0dGFyZ2V0ID0gVEVYVFVSRTAgKyBpbmRleCxcblx0XHRcdFx0bGV2ZWwgPSAwLFxuXHRcdFx0XHRpbnRlcm5hbEZvcm1hdCA9IFJHQkEsXG5cdFx0XHRcdGZvcm1hdCA9IFJHQkEsXG5cdFx0XHRcdHR5cGUgPSBVTlNJR05FRF9CWVRFLFxuXHRcdFx0XHR0ZXh0dXJlID0gdGhpcy5jb250ZXh0LmNyZWF0ZVRleHR1cmUoKTtcblxuICB0aGlzLmNvbnRleHQuYWN0aXZlVGV4dHVyZSh0YXJnZXQpO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kVGV4dHVyZShURVhUVVJFXzJELCB0ZXh0dXJlKTtcblxuICB0aGlzLmNvbnRleHQucGl4ZWxTdG9yZWkoVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdHJ1ZSk7XG5cbiAgdGhpcy5jb250ZXh0LnRleEltYWdlMkQoVEVYVFVSRV8yRCwgbGV2ZWwsIGludGVybmFsRm9ybWF0LCBmb3JtYXQsIHR5cGUsIGltYWdlKTtcblxuICBpZiAocmVwZWF0KSB7XG4gICAgdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgVEVYVFVSRV9XUkFQX1MsIFJFUEVBVCk7XG4gICAgdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgVEVYVFVSRV9XUkFQX1QsIFJFUEVBVCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgVEVYVFVSRV9XUkFQX1MsIENMQU1QX1RPX0VER0UpO1xuICAgIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIFRFWFRVUkVfV1JBUF9ULCBDTEFNUF9UT19FREdFKTtcbiAgfVxuXG5cdHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIFRFWFRVUkVfTUlOX0ZJTFRFUiwgTElORUFSKTtcblxuXHRyZXR1cm4gdGV4dHVyZTtcbn1cblxuZnVuY3Rpb24gZW5hYmxlQW5pc290cm9waWNGaWx0ZXJpbmcoKSB7XG4gIGNvbnN0IGV4dGVuc2lvbiA9IChcbiAgICB0aGlzLmNvbnRleHQuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKSB8fFxuICAgIHRoaXMuY29udGV4dC5nZXRFeHRlbnNpb24oJ01PWl9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKSB8fFxuICAgIHRoaXMuY29udGV4dC5nZXRFeHRlbnNpb24oJ1dFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKVxuICApO1xuXG4gIGlmIChleHRlbnNpb24pIHtcbiAgICBjb25zdCB7IFRFWFRVUkVfMkQgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgICB7IE1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCwgVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQgfSA9IGV4dGVuc2lvbixcbiAgICAgICAgICBtYXhpbXVtID0gdGhpcy5jb250ZXh0LmdldFBhcmFtZXRlcihNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQpO1xuXG4gICAgdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmYoVEVYVFVSRV8yRCwgVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIG1heGltdW0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVUZXh0dXJlLFxuICBlbmFibGVBbmlzb3Ryb3BpY0ZpbHRlcmluZ1xufTtcbiJdfQ==