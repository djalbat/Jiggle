'use strict';

function createTexture(image, index) {
  var _context = this.context,
      RGBA = _context.RGBA,
      LINEAR = _context.LINEAR,
      UNSIGNED_BYTE = _context.UNSIGNED_BYTE,
      TEXTURE0 = _context.TEXTURE0,
      TEXTURE_2D = _context.TEXTURE_2D,
      TEXTURE_WRAP_S = _context.TEXTURE_WRAP_S,
      TEXTURE_WRAP_T = _context.TEXTURE_WRAP_T,
      UNPACK_FLIP_Y_WEBGL = _context.UNPACK_FLIP_Y_WEBGL,
      CLAMP_TO_EDGE = _context.CLAMP_TO_EDGE,
      NEAREST = _context.NEAREST,
      REPEAT = _context.REPEAT,
      TEXTURE_MIN_FILTER = _context.TEXTURE_MIN_FILTER,
      target = TEXTURE0 + index,
      level = 0,
      internalFormat = RGBA,
      format = RGBA,
      type = UNSIGNED_BYTE,
      texture = this.context.createTexture();


  this.context.activeTexture(target);

  this.context.bindTexture(TEXTURE_2D, texture);

  this.context.pixelStorei(UNPACK_FLIP_Y_WEBGL, true);

  this.context.texImage2D(TEXTURE_2D, level, internalFormat, format, type, image);

  // this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, REPEAT);
  // this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, REPEAT);

  this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
  this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);

  this.context.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, LINEAR);

  return texture;
}

function enableAnisotropicFiltering() {
  var extension = this.context.getExtension('EXT_texture_filter_anisotropic') || this.context.getExtension('MOZ_EXT_texture_filter_anisotropic') || this.context.getExtension('WEBKIT_EXT_texture_filter_anisotropic');

  if (extension) {
    var TEXTURE_2D = this.context.TEXTURE_2D,
        MAX_TEXTURE_MAX_ANISOTROPY_EXT = extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT,
        TEXTURE_MAX_ANISOTROPY_EXT = extension.TEXTURE_MAX_ANISOTROPY_EXT,
        maximum = this.context.getParameter(MAX_TEXTURE_MAX_ANISOTROPY_EXT);


    this.context.texParameterf(TEXTURE_2D, TEXTURE_MAX_ANISOTROPY_EXT, maximum);
  }
}

module.exports = {
  createTexture: createTexture,
  enableAnisotropicFiltering: enableAnisotropicFiltering
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi90ZXh0dXJlLmpzIl0sIm5hbWVzIjpbImNyZWF0ZVRleHR1cmUiLCJpbWFnZSIsImluZGV4IiwiY29udGV4dCIsIlJHQkEiLCJMSU5FQVIiLCJVTlNJR05FRF9CWVRFIiwiVEVYVFVSRTAiLCJURVhUVVJFXzJEIiwiVEVYVFVSRV9XUkFQX1MiLCJURVhUVVJFX1dSQVBfVCIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJDTEFNUF9UT19FREdFIiwiTkVBUkVTVCIsIlJFUEVBVCIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsInRhcmdldCIsImxldmVsIiwiaW50ZXJuYWxGb3JtYXQiLCJmb3JtYXQiLCJ0eXBlIiwidGV4dHVyZSIsImFjdGl2ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsInBpeGVsU3RvcmVpIiwidGV4SW1hZ2UyRCIsInRleFBhcmFtZXRlcmkiLCJlbmFibGVBbmlzb3Ryb3BpY0ZpbHRlcmluZyIsImV4dGVuc2lvbiIsImdldEV4dGVuc2lvbiIsIk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwibWF4aW11bSIsImdldFBhcmFtZXRlciIsInRleFBhcmFtZXRlcmYiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxhQUFULENBQXVCQyxLQUF2QixFQUE4QkMsS0FBOUIsRUFBcUM7QUFBQSxpQkFDbUksS0FBS0MsT0FEeEk7QUFBQSxNQUM1QkMsSUFENEIsWUFDNUJBLElBRDRCO0FBQUEsTUFDdEJDLE1BRHNCLFlBQ3RCQSxNQURzQjtBQUFBLE1BQ2RDLGFBRGMsWUFDZEEsYUFEYztBQUFBLE1BQ0NDLFFBREQsWUFDQ0EsUUFERDtBQUFBLE1BQ1dDLFVBRFgsWUFDV0EsVUFEWDtBQUFBLE1BQ3VCQyxjQUR2QixZQUN1QkEsY0FEdkI7QUFBQSxNQUN1Q0MsY0FEdkMsWUFDdUNBLGNBRHZDO0FBQUEsTUFDdURDLG1CQUR2RCxZQUN1REEsbUJBRHZEO0FBQUEsTUFDNEVDLGFBRDVFLFlBQzRFQSxhQUQ1RTtBQUFBLE1BQzJGQyxPQUQzRixZQUMyRkEsT0FEM0Y7QUFBQSxNQUNvR0MsTUFEcEcsWUFDb0dBLE1BRHBHO0FBQUEsTUFDNEdDLGtCQUQ1RyxZQUM0R0Esa0JBRDVHO0FBQUEsTUFFakNDLE1BRmlDLEdBRXhCVCxXQUFXTCxLQUZhO0FBQUEsTUFHakNlLEtBSGlDLEdBR3pCLENBSHlCO0FBQUEsTUFJakNDLGNBSmlDLEdBSWhCZCxJQUpnQjtBQUFBLE1BS2pDZSxNQUxpQyxHQUt4QmYsSUFMd0I7QUFBQSxNQU1qQ2dCLElBTmlDLEdBTTFCZCxhQU4wQjtBQUFBLE1BT2pDZSxPQVBpQyxHQU92QixLQUFLbEIsT0FBTCxDQUFhSCxhQUFiLEVBUHVCOzs7QUFTbkMsT0FBS0csT0FBTCxDQUFhbUIsYUFBYixDQUEyQk4sTUFBM0I7O0FBRUEsT0FBS2IsT0FBTCxDQUFhb0IsV0FBYixDQUF5QmYsVUFBekIsRUFBcUNhLE9BQXJDOztBQUVBLE9BQUtsQixPQUFMLENBQWFxQixXQUFiLENBQXlCYixtQkFBekIsRUFBOEMsSUFBOUM7O0FBRUEsT0FBS1IsT0FBTCxDQUFhc0IsVUFBYixDQUF3QmpCLFVBQXhCLEVBQW9DUyxLQUFwQyxFQUEyQ0MsY0FBM0MsRUFBMkRDLE1BQTNELEVBQW1FQyxJQUFuRSxFQUF5RW5CLEtBQXpFOztBQUVBO0FBQ0E7O0FBRUEsT0FBS0UsT0FBTCxDQUFhdUIsYUFBYixDQUEyQmxCLFVBQTNCLEVBQXVDQyxjQUF2QyxFQUF1REcsYUFBdkQ7QUFDQSxPQUFLVCxPQUFMLENBQWF1QixhQUFiLENBQTJCbEIsVUFBM0IsRUFBdUNFLGNBQXZDLEVBQXVERSxhQUF2RDs7QUFFRCxPQUFLVCxPQUFMLENBQWF1QixhQUFiLENBQTJCbEIsVUFBM0IsRUFBdUNPLGtCQUF2QyxFQUEyRFYsTUFBM0Q7O0FBRUEsU0FBT2dCLE9BQVA7QUFDQTs7QUFFRCxTQUFTTSwwQkFBVCxHQUFzQztBQUNwQyxNQUFNQyxZQUNKLEtBQUt6QixPQUFMLENBQWEwQixZQUFiLENBQTBCLGdDQUExQixLQUNBLEtBQUsxQixPQUFMLENBQWEwQixZQUFiLENBQTBCLG9DQUExQixDQURBLElBRUEsS0FBSzFCLE9BQUwsQ0FBYTBCLFlBQWIsQ0FBMEIsdUNBQTFCLENBSEY7O0FBTUEsTUFBSUQsU0FBSixFQUFlO0FBQ1AsUUFBRXBCLFVBQUYsR0FBaUIsS0FBS0wsT0FBdEIsQ0FBRUssVUFBRjtBQUFBLFFBQ0VzQiw4QkFERixHQUNpRUYsU0FEakUsQ0FDRUUsOEJBREY7QUFBQSxRQUNrQ0MsMEJBRGxDLEdBQ2lFSCxTQURqRSxDQUNrQ0csMEJBRGxDO0FBQUEsUUFFQUMsT0FGQSxHQUVVLEtBQUs3QixPQUFMLENBQWE4QixZQUFiLENBQTBCSCw4QkFBMUIsQ0FGVjs7O0FBSU4sU0FBSzNCLE9BQUwsQ0FBYStCLGFBQWIsQ0FBMkIxQixVQUEzQixFQUF1Q3VCLDBCQUF2QyxFQUFtRUMsT0FBbkU7QUFDRDtBQUNGOztBQUVERyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZwQyw4QkFEZTtBQUVmMkI7QUFGZSxDQUFqQiIsImZpbGUiOiJ0ZXh0dXJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjcmVhdGVUZXh0dXJlKGltYWdlLCBpbmRleCkge1xuXHRjb25zdCB7IFJHQkEsIExJTkVBUiwgVU5TSUdORURfQllURSwgVEVYVFVSRTAsIFRFWFRVUkVfMkQsIFRFWFRVUkVfV1JBUF9TLCBURVhUVVJFX1dSQVBfVCwgVU5QQUNLX0ZMSVBfWV9XRUJHTCwgQ0xBTVBfVE9fRURHRSwgTkVBUkVTVCwgUkVQRUFULCBURVhUVVJFX01JTl9GSUxURVIgfSA9IHRoaXMuY29udGV4dCxcblx0XHRcdFx0dGFyZ2V0ID0gVEVYVFVSRTAgKyBpbmRleCxcblx0XHRcdFx0bGV2ZWwgPSAwLFxuXHRcdFx0XHRpbnRlcm5hbEZvcm1hdCA9IFJHQkEsXG5cdFx0XHRcdGZvcm1hdCA9IFJHQkEsXG5cdFx0XHRcdHR5cGUgPSBVTlNJR05FRF9CWVRFLFxuXHRcdFx0XHR0ZXh0dXJlID0gdGhpcy5jb250ZXh0LmNyZWF0ZVRleHR1cmUoKTtcblxuICB0aGlzLmNvbnRleHQuYWN0aXZlVGV4dHVyZSh0YXJnZXQpO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kVGV4dHVyZShURVhUVVJFXzJELCB0ZXh0dXJlKTtcblxuICB0aGlzLmNvbnRleHQucGl4ZWxTdG9yZWkoVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdHJ1ZSk7XG5cbiAgdGhpcy5jb250ZXh0LnRleEltYWdlMkQoVEVYVFVSRV8yRCwgbGV2ZWwsIGludGVybmFsRm9ybWF0LCBmb3JtYXQsIHR5cGUsIGltYWdlKTtcblxuICAvLyB0aGlzLmNvbnRleHQudGV4UGFyYW1ldGVyaShURVhUVVJFXzJELCBURVhUVVJFX1dSQVBfUywgUkVQRUFUKTtcbiAgLy8gdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgVEVYVFVSRV9XUkFQX1QsIFJFUEVBVCk7XG5cbiAgdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgVEVYVFVSRV9XUkFQX1MsIENMQU1QX1RPX0VER0UpO1xuICB0aGlzLmNvbnRleHQudGV4UGFyYW1ldGVyaShURVhUVVJFXzJELCBURVhUVVJFX1dSQVBfVCwgQ0xBTVBfVE9fRURHRSk7XG5cblx0dGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgVEVYVFVSRV9NSU5fRklMVEVSLCBMSU5FQVIpO1xuXG5cdHJldHVybiB0ZXh0dXJlO1xufVxuXG5mdW5jdGlvbiBlbmFibGVBbmlzb3Ryb3BpY0ZpbHRlcmluZygpIHtcbiAgY29uc3QgZXh0ZW5zaW9uID0gKFxuICAgIHRoaXMuY29udGV4dC5nZXRFeHRlbnNpb24oJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpIHx8XG4gICAgdGhpcy5jb250ZXh0LmdldEV4dGVuc2lvbignTU9aX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpIHx8XG4gICAgdGhpcy5jb250ZXh0LmdldEV4dGVuc2lvbignV0VCS0lUX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpXG4gICk7XG5cbiAgaWYgKGV4dGVuc2lvbikge1xuICAgIGNvbnN0IHsgVEVYVFVSRV8yRCB9ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICAgIHsgTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBURVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCB9ID0gZXh0ZW5zaW9uLFxuICAgICAgICAgIG1heGltdW0gPSB0aGlzLmNvbnRleHQuZ2V0UGFyYW1ldGVyKE1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCk7XG5cbiAgICB0aGlzLmNvbnRleHQudGV4UGFyYW1ldGVyZihURVhUVVJFXzJELCBURVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCwgbWF4aW11bSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZVRleHR1cmUsXG4gIGVuYWJsZUFuaXNvdHJvcGljRmlsdGVyaW5nXG59O1xuIl19