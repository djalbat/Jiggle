"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTexture = createTexture;
exports.enableAnisotropicFiltering = enableAnisotropicFiltering;

function createTexture(image, index, repeat) {
  var _this$context = this.context,
      RGBA = _this$context.RGBA,
      LINEAR = _this$context.LINEAR,
      UNSIGNED_BYTE = _this$context.UNSIGNED_BYTE,
      TEXTURE0 = _this$context.TEXTURE0,
      TEXTURE_2D = _this$context.TEXTURE_2D,
      TEXTURE_WRAP_S = _this$context.TEXTURE_WRAP_S,
      TEXTURE_WRAP_T = _this$context.TEXTURE_WRAP_T,
      UNPACK_FLIP_Y_WEBGL = _this$context.UNPACK_FLIP_Y_WEBGL,
      CLAMP_TO_EDGE = _this$context.CLAMP_TO_EDGE,
      NEAREST = _this$context.NEAREST,
      REPEAT = _this$context.REPEAT,
      TEXTURE_MIN_FILTER = _this$context.TEXTURE_MIN_FILTER,
      target = TEXTURE0 + index,
      level = 0,
      internalFormat = RGBA,
      format = RGBA,
      type = UNSIGNED_BYTE,
      texture = this.context.createTexture();
  this.context.activeTexture(target);
  this.context.bindTexture(TEXTURE_2D, texture);
  this.context.pixelStorei(UNPACK_FLIP_Y_WEBGL, true);
  this.context.texImage2D(TEXTURE_2D, level, internalFormat, format, type, image);

  if (repeat) {
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, REPEAT);
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, REPEAT);
  } else {
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
  }

  this.context.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, LINEAR);
  return texture;
}

function enableAnisotropicFiltering() {
  var extension = this.context.getExtension("EXT_texture_filter_anisotropic") || this.context.getExtension("MOZ_EXT_texture_filter_anisotropic") || this.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");

  if (extension) {
    var TEXTURE_2D = this.context.TEXTURE_2D,
        MAX_TEXTURE_MAX_ANISOTROPY_EXT = extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT,
        TEXTURE_MAX_ANISOTROPY_EXT = extension.TEXTURE_MAX_ANISOTROPY_EXT,
        maximum = this.context.getParameter(MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    this.context.texParameterf(TEXTURE_2D, TEXTURE_MAX_ANISOTROPY_EXT, maximum);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHR1cmUuanMiXSwibmFtZXMiOlsiY3JlYXRlVGV4dHVyZSIsImltYWdlIiwiaW5kZXgiLCJyZXBlYXQiLCJjb250ZXh0IiwiUkdCQSIsIkxJTkVBUiIsIlVOU0lHTkVEX0JZVEUiLCJURVhUVVJFMCIsIlRFWFRVUkVfMkQiLCJURVhUVVJFX1dSQVBfUyIsIlRFWFRVUkVfV1JBUF9UIiwiVU5QQUNLX0ZMSVBfWV9XRUJHTCIsIkNMQU1QX1RPX0VER0UiLCJORUFSRVNUIiwiUkVQRUFUIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwidGFyZ2V0IiwibGV2ZWwiLCJpbnRlcm5hbEZvcm1hdCIsImZvcm1hdCIsInR5cGUiLCJ0ZXh0dXJlIiwiYWN0aXZlVGV4dHVyZSIsImJpbmRUZXh0dXJlIiwicGl4ZWxTdG9yZWkiLCJ0ZXhJbWFnZTJEIiwidGV4UGFyYW1ldGVyaSIsImVuYWJsZUFuaXNvdHJvcGljRmlsdGVyaW5nIiwiZXh0ZW5zaW9uIiwiZ2V0RXh0ZW5zaW9uIiwiTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJtYXhpbXVtIiwiZ2V0UGFyYW1ldGVyIiwidGV4UGFyYW1ldGVyZiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRU8sU0FBU0EsYUFBVCxDQUF1QkMsS0FBdkIsRUFBOEJDLEtBQTlCLEVBQXFDQyxNQUFyQyxFQUE2QztBQUFBLHNCQUNvSCxLQUFLQyxPQUR6SDtBQUFBLE1BQzNDQyxJQUQyQyxpQkFDM0NBLElBRDJDO0FBQUEsTUFDckNDLE1BRHFDLGlCQUNyQ0EsTUFEcUM7QUFBQSxNQUM3QkMsYUFENkIsaUJBQzdCQSxhQUQ2QjtBQUFBLE1BQ2RDLFFBRGMsaUJBQ2RBLFFBRGM7QUFBQSxNQUNKQyxVQURJLGlCQUNKQSxVQURJO0FBQUEsTUFDUUMsY0FEUixpQkFDUUEsY0FEUjtBQUFBLE1BQ3dCQyxjQUR4QixpQkFDd0JBLGNBRHhCO0FBQUEsTUFDd0NDLG1CQUR4QyxpQkFDd0NBLG1CQUR4QztBQUFBLE1BQzZEQyxhQUQ3RCxpQkFDNkRBLGFBRDdEO0FBQUEsTUFDNEVDLE9BRDVFLGlCQUM0RUEsT0FENUU7QUFBQSxNQUNxRkMsTUFEckYsaUJBQ3FGQSxNQURyRjtBQUFBLE1BQzZGQyxrQkFEN0YsaUJBQzZGQSxrQkFEN0Y7QUFBQSxNQUVoREMsTUFGZ0QsR0FFdkNULFFBQVEsR0FBR04sS0FGNEI7QUFBQSxNQUdoRGdCLEtBSGdELEdBR3hDLENBSHdDO0FBQUEsTUFJaERDLGNBSmdELEdBSS9CZCxJQUorQjtBQUFBLE1BS2hEZSxNQUxnRCxHQUt2Q2YsSUFMdUM7QUFBQSxNQU1oRGdCLElBTmdELEdBTXpDZCxhQU55QztBQUFBLE1BT2hEZSxPQVBnRCxHQU90QyxLQUFLbEIsT0FBTCxDQUFhSixhQUFiLEVBUHNDO0FBU2xELE9BQUtJLE9BQUwsQ0FBYW1CLGFBQWIsQ0FBMkJOLE1BQTNCO0FBRUEsT0FBS2IsT0FBTCxDQUFhb0IsV0FBYixDQUF5QmYsVUFBekIsRUFBcUNhLE9BQXJDO0FBRUEsT0FBS2xCLE9BQUwsQ0FBYXFCLFdBQWIsQ0FBeUJiLG1CQUF6QixFQUE4QyxJQUE5QztBQUVBLE9BQUtSLE9BQUwsQ0FBYXNCLFVBQWIsQ0FBd0JqQixVQUF4QixFQUFvQ1MsS0FBcEMsRUFBMkNDLGNBQTNDLEVBQTJEQyxNQUEzRCxFQUFtRUMsSUFBbkUsRUFBeUVwQixLQUF6RTs7QUFFQSxNQUFJRSxNQUFKLEVBQVk7QUFDVixTQUFLQyxPQUFMLENBQWF1QixhQUFiLENBQTJCbEIsVUFBM0IsRUFBdUNDLGNBQXZDLEVBQXVESyxNQUF2RDtBQUNBLFNBQUtYLE9BQUwsQ0FBYXVCLGFBQWIsQ0FBMkJsQixVQUEzQixFQUF1Q0UsY0FBdkMsRUFBdURJLE1BQXZEO0FBQ0QsR0FIRCxNQUdPO0FBQ0wsU0FBS1gsT0FBTCxDQUFhdUIsYUFBYixDQUEyQmxCLFVBQTNCLEVBQXVDQyxjQUF2QyxFQUF1REcsYUFBdkQ7QUFDQSxTQUFLVCxPQUFMLENBQWF1QixhQUFiLENBQTJCbEIsVUFBM0IsRUFBdUNFLGNBQXZDLEVBQXVERSxhQUF2RDtBQUNEOztBQUVGLE9BQUtULE9BQUwsQ0FBYXVCLGFBQWIsQ0FBMkJsQixVQUEzQixFQUF1Q08sa0JBQXZDLEVBQTJEVixNQUEzRDtBQUVBLFNBQU9nQixPQUFQO0FBQ0E7O0FBRU0sU0FBU00sMEJBQVQsR0FBc0M7QUFDM0MsTUFBTUMsU0FBUyxHQUNiLEtBQUt6QixPQUFMLENBQWEwQixZQUFiLENBQTBCLGdDQUExQixLQUNBLEtBQUsxQixPQUFMLENBQWEwQixZQUFiLENBQTBCLG9DQUExQixDQURBLElBRUEsS0FBSzFCLE9BQUwsQ0FBYTBCLFlBQWIsQ0FBMEIsdUNBQTFCLENBSEY7O0FBTUEsTUFBSUQsU0FBSixFQUFlO0FBQ1AsUUFBRXBCLFVBQUYsR0FBaUIsS0FBS0wsT0FBdEIsQ0FBRUssVUFBRjtBQUFBLFFBQ0VzQiw4QkFERixHQUNpRUYsU0FEakUsQ0FDRUUsOEJBREY7QUFBQSxRQUNrQ0MsMEJBRGxDLEdBQ2lFSCxTQURqRSxDQUNrQ0csMEJBRGxDO0FBQUEsUUFFQUMsT0FGQSxHQUVVLEtBQUs3QixPQUFMLENBQWE4QixZQUFiLENBQTBCSCw4QkFBMUIsQ0FGVjtBQUlOLFNBQUszQixPQUFMLENBQWErQixhQUFiLENBQTJCMUIsVUFBM0IsRUFBdUN1QiwwQkFBdkMsRUFBbUVDLE9BQW5FO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGV4dHVyZShpbWFnZSwgaW5kZXgsIHJlcGVhdCkge1xuXHRjb25zdCB7IFJHQkEsIExJTkVBUiwgVU5TSUdORURfQllURSwgVEVYVFVSRTAsIFRFWFRVUkVfMkQsIFRFWFRVUkVfV1JBUF9TLCBURVhUVVJFX1dSQVBfVCwgVU5QQUNLX0ZMSVBfWV9XRUJHTCwgQ0xBTVBfVE9fRURHRSwgTkVBUkVTVCwgUkVQRUFULCBURVhUVVJFX01JTl9GSUxURVIgfSA9IHRoaXMuY29udGV4dCxcblx0XHRcdFx0dGFyZ2V0ID0gVEVYVFVSRTAgKyBpbmRleCxcblx0XHRcdFx0bGV2ZWwgPSAwLFxuXHRcdFx0XHRpbnRlcm5hbEZvcm1hdCA9IFJHQkEsXG5cdFx0XHRcdGZvcm1hdCA9IFJHQkEsXG5cdFx0XHRcdHR5cGUgPSBVTlNJR05FRF9CWVRFLFxuXHRcdFx0XHR0ZXh0dXJlID0gdGhpcy5jb250ZXh0LmNyZWF0ZVRleHR1cmUoKTtcblxuICB0aGlzLmNvbnRleHQuYWN0aXZlVGV4dHVyZSh0YXJnZXQpO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kVGV4dHVyZShURVhUVVJFXzJELCB0ZXh0dXJlKTtcblxuICB0aGlzLmNvbnRleHQucGl4ZWxTdG9yZWkoVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdHJ1ZSk7XG5cbiAgdGhpcy5jb250ZXh0LnRleEltYWdlMkQoVEVYVFVSRV8yRCwgbGV2ZWwsIGludGVybmFsRm9ybWF0LCBmb3JtYXQsIHR5cGUsIGltYWdlKTtcblxuICBpZiAocmVwZWF0KSB7XG4gICAgdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgVEVYVFVSRV9XUkFQX1MsIFJFUEVBVCk7XG4gICAgdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgVEVYVFVSRV9XUkFQX1QsIFJFUEVBVCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgVEVYVFVSRV9XUkFQX1MsIENMQU1QX1RPX0VER0UpO1xuICAgIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIFRFWFRVUkVfV1JBUF9ULCBDTEFNUF9UT19FREdFKTtcbiAgfVxuXG5cdHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIFRFWFRVUkVfTUlOX0ZJTFRFUiwgTElORUFSKTtcblxuXHRyZXR1cm4gdGV4dHVyZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZUFuaXNvdHJvcGljRmlsdGVyaW5nKCkge1xuICBjb25zdCBleHRlbnNpb24gPSAoXG4gICAgdGhpcy5jb250ZXh0LmdldEV4dGVuc2lvbihcIkVYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpY1wiKSB8fFxuICAgIHRoaXMuY29udGV4dC5nZXRFeHRlbnNpb24oXCJNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpIHx8XG4gICAgdGhpcy5jb250ZXh0LmdldEV4dGVuc2lvbihcIldFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIilcbiAgKTtcblxuICBpZiAoZXh0ZW5zaW9uKSB7XG4gICAgY29uc3QgeyBURVhUVVJFXzJEIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgICAgeyBNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIFRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIH0gPSBleHRlbnNpb24sXG4gICAgICAgICAgbWF4aW11bSA9IHRoaXMuY29udGV4dC5nZXRQYXJhbWV0ZXIoTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUKTtcblxuICAgIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJmKFRFWFRVUkVfMkQsIFRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBtYXhpbXVtKTtcbiAgfVxufVxuIl19