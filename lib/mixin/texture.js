"use strict";

function createTexture(image, index, repeat) {
  var _this$context = this.context,
      RGBA = _this$context.RGBA,
      LINEAR = _this$context.LINEAR,
      UNSIGNED_BYTE = _this$context.UNSIGNED_BYTE,
      TEXTURE0 = _this$context.TEXTURE0,
      TEXTURE_2D = _this$context.TEXTURE_2D,
      TEXTURE_WRAP_S = _this$context.TEXTURE_WRAP_S,
      TEXTURE_WRAP_T = _this$context.TEXTURE_WRAP_T,
      UNPACK_FLIP_Y_WEBGL = _this$context.UNPACK_FLIP_Y_WEBGL,
      CLAMP_TO_EDGE = _this$context.CLAMP_TO_EDGE,
      NEAREST = _this$context.NEAREST,
      REPEAT = _this$context.REPEAT,
      TEXTURE_MIN_FILTER = _this$context.TEXTURE_MIN_FILTER,
      target = TEXTURE0 + index,
      level = 0,
      internalFormat = RGBA,
      format = RGBA,
      type = UNSIGNED_BYTE,
      texture = this.context.createTexture();
  this.context.activeTexture(target);
  this.context.bindTexture(TEXTURE_2D, texture);
  this.context.pixelStorei(UNPACK_FLIP_Y_WEBGL, true);
  this.context.texImage2D(TEXTURE_2D, level, internalFormat, format, type, image);

  if (repeat) {
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, REPEAT);
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, REPEAT);
  } else {
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
    this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
  }

  this.context.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, LINEAR);
  return texture;
}

function enableAnisotropicFiltering() {
  var extension = this.context.getExtension("EXT_texture_filter_anisotropic") || this.context.getExtension("MOZ_EXT_texture_filter_anisotropic") || this.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");

  if (extension) {
    var TEXTURE_2D = this.context.TEXTURE_2D,
        MAX_TEXTURE_MAX_ANISOTROPY_EXT = extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT,
        TEXTURE_MAX_ANISOTROPY_EXT = extension.TEXTURE_MAX_ANISOTROPY_EXT,
        maximum = this.context.getParameter(MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    this.context.texParameterf(TEXTURE_2D, TEXTURE_MAX_ANISOTROPY_EXT, maximum);
  }
}

module.exports = {
  createTexture: createTexture,
  enableAnisotropicFiltering: enableAnisotropicFiltering
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHR1cmUuanMiXSwibmFtZXMiOlsiY3JlYXRlVGV4dHVyZSIsImltYWdlIiwiaW5kZXgiLCJyZXBlYXQiLCJjb250ZXh0IiwiUkdCQSIsIkxJTkVBUiIsIlVOU0lHTkVEX0JZVEUiLCJURVhUVVJFMCIsIlRFWFRVUkVfMkQiLCJURVhUVVJFX1dSQVBfUyIsIlRFWFRVUkVfV1JBUF9UIiwiVU5QQUNLX0ZMSVBfWV9XRUJHTCIsIkNMQU1QX1RPX0VER0UiLCJORUFSRVNUIiwiUkVQRUFUIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwidGFyZ2V0IiwibGV2ZWwiLCJpbnRlcm5hbEZvcm1hdCIsImZvcm1hdCIsInR5cGUiLCJ0ZXh0dXJlIiwiYWN0aXZlVGV4dHVyZSIsImJpbmRUZXh0dXJlIiwicGl4ZWxTdG9yZWkiLCJ0ZXhJbWFnZTJEIiwidGV4UGFyYW1ldGVyaSIsImVuYWJsZUFuaXNvdHJvcGljRmlsdGVyaW5nIiwiZXh0ZW5zaW9uIiwiZ2V0RXh0ZW5zaW9uIiwiTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJtYXhpbXVtIiwiZ2V0UGFyYW1ldGVyIiwidGV4UGFyYW1ldGVyZiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLGFBQVQsQ0FBdUJDLEtBQXZCLEVBQThCQyxLQUE5QixFQUFxQ0MsTUFBckMsRUFBNkM7QUFBQSxzQkFDMkgsS0FBS0MsT0FEaEk7QUFBQSxNQUNwQ0MsSUFEb0MsaUJBQ3BDQSxJQURvQztBQUFBLE1BQzlCQyxNQUQ4QixpQkFDOUJBLE1BRDhCO0FBQUEsTUFDdEJDLGFBRHNCLGlCQUN0QkEsYUFEc0I7QUFBQSxNQUNQQyxRQURPLGlCQUNQQSxRQURPO0FBQUEsTUFDR0MsVUFESCxpQkFDR0EsVUFESDtBQUFBLE1BQ2VDLGNBRGYsaUJBQ2VBLGNBRGY7QUFBQSxNQUMrQkMsY0FEL0IsaUJBQytCQSxjQUQvQjtBQUFBLE1BQytDQyxtQkFEL0MsaUJBQytDQSxtQkFEL0M7QUFBQSxNQUNvRUMsYUFEcEUsaUJBQ29FQSxhQURwRTtBQUFBLE1BQ21GQyxPQURuRixpQkFDbUZBLE9BRG5GO0FBQUEsTUFDNEZDLE1BRDVGLGlCQUM0RkEsTUFENUY7QUFBQSxNQUNvR0Msa0JBRHBHLGlCQUNvR0Esa0JBRHBHO0FBQUEsTUFFekNDLE1BRnlDLEdBRWhDVCxRQUFRLEdBQUdOLEtBRnFCO0FBQUEsTUFHekNnQixLQUh5QyxHQUdqQyxDQUhpQztBQUFBLE1BSXpDQyxjQUp5QyxHQUl4QmQsSUFKd0I7QUFBQSxNQUt6Q2UsTUFMeUMsR0FLaENmLElBTGdDO0FBQUEsTUFNekNnQixJQU55QyxHQU1sQ2QsYUFOa0M7QUFBQSxNQU96Q2UsT0FQeUMsR0FPL0IsS0FBS2xCLE9BQUwsQ0FBYUosYUFBYixFQVArQjtBQVMzQyxPQUFLSSxPQUFMLENBQWFtQixhQUFiLENBQTJCTixNQUEzQjtBQUVBLE9BQUtiLE9BQUwsQ0FBYW9CLFdBQWIsQ0FBeUJmLFVBQXpCLEVBQXFDYSxPQUFyQztBQUVBLE9BQUtsQixPQUFMLENBQWFxQixXQUFiLENBQXlCYixtQkFBekIsRUFBOEMsSUFBOUM7QUFFQSxPQUFLUixPQUFMLENBQWFzQixVQUFiLENBQXdCakIsVUFBeEIsRUFBb0NTLEtBQXBDLEVBQTJDQyxjQUEzQyxFQUEyREMsTUFBM0QsRUFBbUVDLElBQW5FLEVBQXlFcEIsS0FBekU7O0FBRUEsTUFBSUUsTUFBSixFQUFZO0FBQ1YsU0FBS0MsT0FBTCxDQUFhdUIsYUFBYixDQUEyQmxCLFVBQTNCLEVBQXVDQyxjQUF2QyxFQUF1REssTUFBdkQ7QUFDQSxTQUFLWCxPQUFMLENBQWF1QixhQUFiLENBQTJCbEIsVUFBM0IsRUFBdUNFLGNBQXZDLEVBQXVESSxNQUF2RDtBQUNELEdBSEQsTUFHTztBQUNMLFNBQUtYLE9BQUwsQ0FBYXVCLGFBQWIsQ0FBMkJsQixVQUEzQixFQUF1Q0MsY0FBdkMsRUFBdURHLGFBQXZEO0FBQ0EsU0FBS1QsT0FBTCxDQUFhdUIsYUFBYixDQUEyQmxCLFVBQTNCLEVBQXVDRSxjQUF2QyxFQUF1REUsYUFBdkQ7QUFDRDs7QUFFRixPQUFLVCxPQUFMLENBQWF1QixhQUFiLENBQTJCbEIsVUFBM0IsRUFBdUNPLGtCQUF2QyxFQUEyRFYsTUFBM0Q7QUFFQSxTQUFPZ0IsT0FBUDtBQUNBOztBQUVELFNBQVNNLDBCQUFULEdBQXNDO0FBQ3BDLE1BQU1DLFNBQVMsR0FDYixLQUFLekIsT0FBTCxDQUFhMEIsWUFBYixDQUEwQixnQ0FBMUIsS0FDQSxLQUFLMUIsT0FBTCxDQUFhMEIsWUFBYixDQUEwQixvQ0FBMUIsQ0FEQSxJQUVBLEtBQUsxQixPQUFMLENBQWEwQixZQUFiLENBQTBCLHVDQUExQixDQUhGOztBQU1BLE1BQUlELFNBQUosRUFBZTtBQUNQLFFBQUVwQixVQUFGLEdBQWlCLEtBQUtMLE9BQXRCLENBQUVLLFVBQUY7QUFBQSxRQUNFc0IsOEJBREYsR0FDaUVGLFNBRGpFLENBQ0VFLDhCQURGO0FBQUEsUUFDa0NDLDBCQURsQyxHQUNpRUgsU0FEakUsQ0FDa0NHLDBCQURsQztBQUFBLFFBRUFDLE9BRkEsR0FFVSxLQUFLN0IsT0FBTCxDQUFhOEIsWUFBYixDQUEwQkgsOEJBQTFCLENBRlY7QUFJTixTQUFLM0IsT0FBTCxDQUFhK0IsYUFBYixDQUEyQjFCLFVBQTNCLEVBQXVDdUIsMEJBQXZDLEVBQW1FQyxPQUFuRTtBQUNEO0FBQ0Y7O0FBRURHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmckMsRUFBQUEsYUFBYSxFQUFiQSxhQURlO0FBRWY0QixFQUFBQSwwQkFBMEIsRUFBMUJBO0FBRmUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dHVyZShpbWFnZSwgaW5kZXgsIHJlcGVhdCkge1xuXHRjb25zdCB7IFJHQkEsIExJTkVBUiwgVU5TSUdORURfQllURSwgVEVYVFVSRTAsIFRFWFRVUkVfMkQsIFRFWFRVUkVfV1JBUF9TLCBURVhUVVJFX1dSQVBfVCwgVU5QQUNLX0ZMSVBfWV9XRUJHTCwgQ0xBTVBfVE9fRURHRSwgTkVBUkVTVCwgUkVQRUFULCBURVhUVVJFX01JTl9GSUxURVIgfSA9IHRoaXMuY29udGV4dCxcblx0XHRcdFx0dGFyZ2V0ID0gVEVYVFVSRTAgKyBpbmRleCxcblx0XHRcdFx0bGV2ZWwgPSAwLFxuXHRcdFx0XHRpbnRlcm5hbEZvcm1hdCA9IFJHQkEsXG5cdFx0XHRcdGZvcm1hdCA9IFJHQkEsXG5cdFx0XHRcdHR5cGUgPSBVTlNJR05FRF9CWVRFLFxuXHRcdFx0XHR0ZXh0dXJlID0gdGhpcy5jb250ZXh0LmNyZWF0ZVRleHR1cmUoKTtcblxuICB0aGlzLmNvbnRleHQuYWN0aXZlVGV4dHVyZSh0YXJnZXQpO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kVGV4dHVyZShURVhUVVJFXzJELCB0ZXh0dXJlKTtcblxuICB0aGlzLmNvbnRleHQucGl4ZWxTdG9yZWkoVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdHJ1ZSk7XG5cbiAgdGhpcy5jb250ZXh0LnRleEltYWdlMkQoVEVYVFVSRV8yRCwgbGV2ZWwsIGludGVybmFsRm9ybWF0LCBmb3JtYXQsIHR5cGUsIGltYWdlKTtcblxuICBpZiAocmVwZWF0KSB7XG4gICAgdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgVEVYVFVSRV9XUkFQX1MsIFJFUEVBVCk7XG4gICAgdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgVEVYVFVSRV9XUkFQX1QsIFJFUEVBVCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmkoVEVYVFVSRV8yRCwgVEVYVFVSRV9XUkFQX1MsIENMQU1QX1RPX0VER0UpO1xuICAgIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIFRFWFRVUkVfV1JBUF9ULCBDTEFNUF9UT19FREdFKTtcbiAgfVxuXG5cdHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIFRFWFRVUkVfTUlOX0ZJTFRFUiwgTElORUFSKTtcblxuXHRyZXR1cm4gdGV4dHVyZTtcbn1cblxuZnVuY3Rpb24gZW5hYmxlQW5pc290cm9waWNGaWx0ZXJpbmcoKSB7XG4gIGNvbnN0IGV4dGVuc2lvbiA9IChcbiAgICB0aGlzLmNvbnRleHQuZ2V0RXh0ZW5zaW9uKFwiRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpIHx8XG4gICAgdGhpcy5jb250ZXh0LmdldEV4dGVuc2lvbihcIk1PWl9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIikgfHxcbiAgICB0aGlzLmNvbnRleHQuZ2V0RXh0ZW5zaW9uKFwiV0VCS0lUX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpY1wiKVxuICApO1xuXG4gIGlmIChleHRlbnNpb24pIHtcbiAgICBjb25zdCB7IFRFWFRVUkVfMkQgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgICB7IE1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCwgVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQgfSA9IGV4dGVuc2lvbixcbiAgICAgICAgICBtYXhpbXVtID0gdGhpcy5jb250ZXh0LmdldFBhcmFtZXRlcihNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQpO1xuXG4gICAgdGhpcy5jb250ZXh0LnRleFBhcmFtZXRlcmYoVEVYVFVSRV8yRCwgVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIG1heGltdW0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVUZXh0dXJlLFxuICBlbmFibGVBbmlzb3Ryb3BpY0ZpbHRlcmluZ1xufTtcbiJdfQ==