'use strict';

function createAndBindElementBuffer(vertexIndexData) {
  var vertexIndexElementBuffer = this.createElementBuffer(vertexIndexData),
      vertexIndexDataLength = vertexIndexData.length,
      count = vertexIndexDataLength; ///

  this.bindElementBuffer(vertexIndexElementBuffer);

  return count;
}

function createElementBuffer(data) {
  var _context = this.context,
      ELEMENT_ARRAY_BUFFER = _context.ELEMENT_ARRAY_BUFFER,
      STATIC_DRAW = _context.STATIC_DRAW,
      target = ELEMENT_ARRAY_BUFFER,
      usage = STATIC_DRAW,
      elementBuffer = this.context.createBuffer(),
      uint16Array = new Uint16Array(data);


  this.context.bindBuffer(target, elementBuffer);

  this.context.bufferData(target, uint16Array, usage);

  return elementBuffer;
}

function bindElementBuffer(elementBuffer) {
  var ELEMENT_ARRAY_BUFFER = this.context.ELEMENT_ARRAY_BUFFER,
      target = ELEMENT_ARRAY_BUFFER;


  this.context.bindBuffer(target, elementBuffer);
}

function createBuffer(data) {
  var _context2 = this.context,
      ARRAY_BUFFER = _context2.ARRAY_BUFFER,
      STATIC_DRAW = _context2.STATIC_DRAW,
      target = ARRAY_BUFFER,
      usage = STATIC_DRAW,
      buffer = this.context.createBuffer(),
      float32Array = new Float32Array(data);


  this.context.bindBuffer(target, buffer);

  this.context.bufferData(target, float32Array, usage);

  return buffer;
}

function bindBuffer(buffer, attributeLocation, components) {
  var _context3 = this.context,
      ARRAY_BUFFER = _context3.ARRAY_BUFFER,
      FLOAT = _context3.FLOAT,
      target = ARRAY_BUFFER,
      type = FLOAT,
      normalize = false,
      stride = 0,
      offset = 0;


  this.context.bindBuffer(target, buffer);

  this.context.vertexAttribPointer(attributeLocation, components, type, normalize, stride, offset);

  this.context.enableVertexAttribArray(attributeLocation);
}

module.exports = {
  createAndBindElementBuffer: createAndBindElementBuffer,
  createElementBuffer: createElementBuffer,
  bindElementBuffer: bindElementBuffer,
  createBuffer: createBuffer,
  bindBuffer: bindBuffer
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9idWZmZXIuanMiXSwibmFtZXMiOlsiY3JlYXRlQW5kQmluZEVsZW1lbnRCdWZmZXIiLCJ2ZXJ0ZXhJbmRleERhdGEiLCJ2ZXJ0ZXhJbmRleEVsZW1lbnRCdWZmZXIiLCJjcmVhdGVFbGVtZW50QnVmZmVyIiwidmVydGV4SW5kZXhEYXRhTGVuZ3RoIiwibGVuZ3RoIiwiY291bnQiLCJiaW5kRWxlbWVudEJ1ZmZlciIsImRhdGEiLCJjb250ZXh0IiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJTVEFUSUNfRFJBVyIsInRhcmdldCIsInVzYWdlIiwiZWxlbWVudEJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsInVpbnQxNkFycmF5IiwiVWludDE2QXJyYXkiLCJiaW5kQnVmZmVyIiwiYnVmZmVyRGF0YSIsIkFSUkFZX0JVRkZFUiIsImJ1ZmZlciIsImZsb2F0MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsImF0dHJpYnV0ZUxvY2F0aW9uIiwiY29tcG9uZW50cyIsIkZMT0FUIiwidHlwZSIsIm5vcm1hbGl6ZSIsInN0cmlkZSIsIm9mZnNldCIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLDBCQUFULENBQW9DQyxlQUFwQyxFQUFxRDtBQUNuRCxNQUFNQywyQkFBMkIsS0FBS0MsbUJBQUwsQ0FBeUJGLGVBQXpCLENBQWpDO0FBQUEsTUFDTUcsd0JBQXdCSCxnQkFBZ0JJLE1BRDlDO0FBQUEsTUFFTUMsUUFBUUYscUJBRmQsQ0FEbUQsQ0FHYjs7QUFFdEMsT0FBS0csaUJBQUwsQ0FBdUJMLHdCQUF2Qjs7QUFFQSxTQUFPSSxLQUFQO0FBQ0Q7O0FBRUQsU0FBU0gsbUJBQVQsQ0FBNkJLLElBQTdCLEVBQW1DO0FBQUEsaUJBQ2EsS0FBS0MsT0FEbEI7QUFBQSxNQUN6QkMsb0JBRHlCLFlBQ3pCQSxvQkFEeUI7QUFBQSxNQUNIQyxXQURHLFlBQ0hBLFdBREc7QUFBQSxNQUUzQkMsTUFGMkIsR0FFbEJGLG9CQUZrQjtBQUFBLE1BRzNCRyxLQUgyQixHQUduQkYsV0FIbUI7QUFBQSxNQUkzQkcsYUFKMkIsR0FJWCxLQUFLTCxPQUFMLENBQWFNLFlBQWIsRUFKVztBQUFBLE1BSzNCQyxXQUwyQixHQUtiLElBQUlDLFdBQUosQ0FBZ0JULElBQWhCLENBTGE7OztBQU9qQyxPQUFLQyxPQUFMLENBQWFTLFVBQWIsQ0FBd0JOLE1BQXhCLEVBQWdDRSxhQUFoQzs7QUFFQSxPQUFLTCxPQUFMLENBQWFVLFVBQWIsQ0FBd0JQLE1BQXhCLEVBQWdDSSxXQUFoQyxFQUE2Q0gsS0FBN0M7O0FBRUEsU0FBT0MsYUFBUDtBQUNEOztBQUVELFNBQVNQLGlCQUFULENBQTJCTyxhQUEzQixFQUEwQztBQUNsQyxNQUFFSixvQkFBRixHQUEyQixLQUFLRCxPQUFoQyxDQUFFQyxvQkFBRjtBQUFBLE1BQ0FFLE1BREEsR0FDU0Ysb0JBRFQ7OztBQUdOLE9BQUtELE9BQUwsQ0FBYVMsVUFBYixDQUF3Qk4sTUFBeEIsRUFBZ0NFLGFBQWhDO0FBQ0Q7O0FBRUQsU0FBU0MsWUFBVCxDQUFzQlAsSUFBdEIsRUFBNEI7QUFBQSxrQkFDWSxLQUFLQyxPQURqQjtBQUFBLE1BQ2xCVyxZQURrQixhQUNsQkEsWUFEa0I7QUFBQSxNQUNKVCxXQURJLGFBQ0pBLFdBREk7QUFBQSxNQUVwQkMsTUFGb0IsR0FFWFEsWUFGVztBQUFBLE1BR3BCUCxLQUhvQixHQUdaRixXQUhZO0FBQUEsTUFJcEJVLE1BSm9CLEdBSVgsS0FBS1osT0FBTCxDQUFhTSxZQUFiLEVBSlc7QUFBQSxNQUtwQk8sWUFMb0IsR0FLTCxJQUFJQyxZQUFKLENBQWlCZixJQUFqQixDQUxLOzs7QUFPMUIsT0FBS0MsT0FBTCxDQUFhUyxVQUFiLENBQXdCTixNQUF4QixFQUFnQ1MsTUFBaEM7O0FBRUEsT0FBS1osT0FBTCxDQUFhVSxVQUFiLENBQXdCUCxNQUF4QixFQUFnQ1UsWUFBaEMsRUFBOENULEtBQTlDOztBQUVBLFNBQU9RLE1BQVA7QUFDRDs7QUFFRCxTQUFTSCxVQUFULENBQW9CRyxNQUFwQixFQUE0QkcsaUJBQTVCLEVBQStDQyxVQUEvQyxFQUEyRDtBQUFBLGtCQUN6QixLQUFLaEIsT0FEb0I7QUFBQSxNQUNqRFcsWUFEaUQsYUFDakRBLFlBRGlEO0FBQUEsTUFDbkNNLEtBRG1DLGFBQ25DQSxLQURtQztBQUFBLE1BRW5EZCxNQUZtRCxHQUUxQ1EsWUFGMEM7QUFBQSxNQUduRE8sSUFIbUQsR0FHNUNELEtBSDRDO0FBQUEsTUFJbkRFLFNBSm1ELEdBSXZDLEtBSnVDO0FBQUEsTUFLbkRDLE1BTG1ELEdBSzFDLENBTDBDO0FBQUEsTUFNbkRDLE1BTm1ELEdBTTFDLENBTjBDOzs7QUFRekQsT0FBS3JCLE9BQUwsQ0FBYVMsVUFBYixDQUF3Qk4sTUFBeEIsRUFBZ0NTLE1BQWhDOztBQUVBLE9BQUtaLE9BQUwsQ0FBYXNCLG1CQUFiLENBQWlDUCxpQkFBakMsRUFBb0RDLFVBQXBELEVBQWdFRSxJQUFoRSxFQUFzRUMsU0FBdEUsRUFBaUZDLE1BQWpGLEVBQXlGQyxNQUF6Rjs7QUFFQSxPQUFLckIsT0FBTCxDQUFhdUIsdUJBQWIsQ0FBcUNSLGlCQUFyQztBQUNEOztBQUVEUyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZsQyw4QkFBNEJBLDBCQURiO0FBRWZHLHVCQUFxQkEsbUJBRk47QUFHZkkscUJBQW1CQSxpQkFISjtBQUlmUSxnQkFBY0EsWUFKQztBQUtmRyxjQUFZQTtBQUxHLENBQWpCIiwiZmlsZSI6ImJ1ZmZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY3JlYXRlQW5kQmluZEVsZW1lbnRCdWZmZXIodmVydGV4SW5kZXhEYXRhKSB7XG4gIGNvbnN0IHZlcnRleEluZGV4RWxlbWVudEJ1ZmZlciA9IHRoaXMuY3JlYXRlRWxlbWVudEJ1ZmZlcih2ZXJ0ZXhJbmRleERhdGEpLFxuICAgICAgICB2ZXJ0ZXhJbmRleERhdGFMZW5ndGggPSB2ZXJ0ZXhJbmRleERhdGEubGVuZ3RoLFxuICAgICAgICBjb3VudCA9IHZlcnRleEluZGV4RGF0YUxlbmd0aDsgIC8vL1xuXG4gIHRoaXMuYmluZEVsZW1lbnRCdWZmZXIodmVydGV4SW5kZXhFbGVtZW50QnVmZmVyKTtcblxuICByZXR1cm4gY291bnQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRCdWZmZXIoZGF0YSkge1xuICBjb25zdCB7IEVMRU1FTlRfQVJSQVlfQlVGRkVSLCBTVEFUSUNfRFJBVyB9ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICB0YXJnZXQgPSBFTEVNRU5UX0FSUkFZX0JVRkZFUixcbiAgICAgICAgdXNhZ2UgPSBTVEFUSUNfRFJBVyxcbiAgICAgICAgZWxlbWVudEJ1ZmZlciA9IHRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXIoKSxcbiAgICAgICAgdWludDE2QXJyYXkgPSBuZXcgVWludDE2QXJyYXkoZGF0YSk7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBlbGVtZW50QnVmZmVyKTtcblxuICB0aGlzLmNvbnRleHQuYnVmZmVyRGF0YSh0YXJnZXQsIHVpbnQxNkFycmF5LCB1c2FnZSk7XG5cbiAgcmV0dXJuIGVsZW1lbnRCdWZmZXI7XG59XG5cbmZ1bmN0aW9uIGJpbmRFbGVtZW50QnVmZmVyKGVsZW1lbnRCdWZmZXIpIHtcbiAgY29uc3QgeyBFTEVNRU5UX0FSUkFZX0JVRkZFUiB9ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICB0YXJnZXQgPSBFTEVNRU5UX0FSUkFZX0JVRkZFUjtcblxuICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0YXJnZXQsIGVsZW1lbnRCdWZmZXIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIoZGF0YSkge1xuICBjb25zdCB7IEFSUkFZX0JVRkZFUiwgU1RBVElDX0RSQVcgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gQVJSQVlfQlVGRkVSLFxuICAgICAgICB1c2FnZSA9IFNUQVRJQ19EUkFXLFxuICAgICAgICBidWZmZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyKCksXG4gICAgICAgIGZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoZGF0YSk7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBidWZmZXIpO1xuXG4gIHRoaXMuY29udGV4dC5idWZmZXJEYXRhKHRhcmdldCwgZmxvYXQzMkFycmF5LCB1c2FnZSk7XG5cbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cblxuZnVuY3Rpb24gYmluZEJ1ZmZlcihidWZmZXIsIGF0dHJpYnV0ZUxvY2F0aW9uLCBjb21wb25lbnRzKSB7XG4gIGNvbnN0IHsgQVJSQVlfQlVGRkVSLCBGTE9BVCB9ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICB0YXJnZXQgPSBBUlJBWV9CVUZGRVIsXG4gICAgICAgIHR5cGUgPSBGTE9BVCxcbiAgICAgICAgbm9ybWFsaXplID0gZmFsc2UsXG4gICAgICAgIHN0cmlkZSA9IDAsXG4gICAgICAgIG9mZnNldCA9IDA7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBidWZmZXIpO1xuXG4gIHRoaXMuY29udGV4dC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGF0dHJpYnV0ZUxvY2F0aW9uLCBjb21wb25lbnRzLCB0eXBlLCBub3JtYWxpemUsIHN0cmlkZSwgb2Zmc2V0KTtcblxuICB0aGlzLmNvbnRleHQuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYXR0cmlidXRlTG9jYXRpb24pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlQW5kQmluZEVsZW1lbnRCdWZmZXI6IGNyZWF0ZUFuZEJpbmRFbGVtZW50QnVmZmVyLFxuICBjcmVhdGVFbGVtZW50QnVmZmVyOiBjcmVhdGVFbGVtZW50QnVmZmVyLFxuICBiaW5kRWxlbWVudEJ1ZmZlcjogYmluZEVsZW1lbnRCdWZmZXIsXG4gIGNyZWF0ZUJ1ZmZlcjogY3JlYXRlQnVmZmVyLFxuICBiaW5kQnVmZmVyOiBiaW5kQnVmZmVyXG59O1xuIl19