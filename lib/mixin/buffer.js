'use strict';

function createBuffer(data) {
  var target = this.ARRAY_BUFFER_TARGET,
      buffer = this.context.createBuffer(),
      float32Array = new Float32Array(data),
      usage = this.STATIC_DRAW_USAGE;

  this.context.bindBuffer(target, buffer);

  this.context.bufferData(target, float32Array, usage);

  return buffer;
}

function bindBuffer(buffer, attributeLocation, components) {
  var target = this.ARRAY_BUFFER_TARGET,
      type = this.FLOAT_TYPE,
      normalize = false,
      stride = 0,
      offset = 0;

  this.context.bindBuffer(target, buffer);

  this.context.vertexAttribPointer(attributeLocation, components, type, normalize, stride, offset);

  this.context.enableVertexAttribArray(attributeLocation);
}

function createElementBuffer(data) {
  var target = this.ELEMENT_ARRAY_BUFFER_TARGET,
      elementBuffer = this.context.createBuffer(),
      uint16Array = new Uint16Array(data),
      usage = this.STATIC_DRAW_USAGE;

  this.context.bindBuffer(target, elementBuffer);

  this.context.bufferData(target, uint16Array, usage);

  return elementBuffer;
}

function bindElementBuffer(elementBuffer) {
  var target = this.ELEMENT_ARRAY_BUFFER_TARGET;

  this.context.bindBuffer(target, elementBuffer);
}

var bufferMixin = {
  createBuffer: createBuffer,
  bindBuffer: bindBuffer,
  createElementBuffer: createElementBuffer,
  bindElementBuffer: bindElementBuffer
};

module.exports = bufferMixin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9idWZmZXIuanMiXSwibmFtZXMiOlsiY3JlYXRlQnVmZmVyIiwiZGF0YSIsInRhcmdldCIsIkFSUkFZX0JVRkZFUl9UQVJHRVQiLCJidWZmZXIiLCJjb250ZXh0IiwiZmxvYXQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwidXNhZ2UiLCJTVEFUSUNfRFJBV19VU0FHRSIsImJpbmRCdWZmZXIiLCJidWZmZXJEYXRhIiwiYXR0cmlidXRlTG9jYXRpb24iLCJjb21wb25lbnRzIiwidHlwZSIsIkZMT0FUX1RZUEUiLCJub3JtYWxpemUiLCJzdHJpZGUiLCJvZmZzZXQiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJjcmVhdGVFbGVtZW50QnVmZmVyIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVJfVEFSR0VUIiwiZWxlbWVudEJ1ZmZlciIsInVpbnQxNkFycmF5IiwiVWludDE2QXJyYXkiLCJiaW5kRWxlbWVudEJ1ZmZlciIsImJ1ZmZlck1peGluIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEI7QUFDMUIsTUFBTUMsU0FBUyxLQUFLQyxtQkFBcEI7QUFBQSxNQUNNQyxTQUFTLEtBQUtDLE9BQUwsQ0FBYUwsWUFBYixFQURmO0FBQUEsTUFFTU0sZUFBZSxJQUFJQyxZQUFKLENBQWlCTixJQUFqQixDQUZyQjtBQUFBLE1BR01PLFFBQVEsS0FBS0MsaUJBSG5COztBQUtBLE9BQUtKLE9BQUwsQ0FBYUssVUFBYixDQUF3QlIsTUFBeEIsRUFBZ0NFLE1BQWhDOztBQUVBLE9BQUtDLE9BQUwsQ0FBYU0sVUFBYixDQUF3QlQsTUFBeEIsRUFBZ0NJLFlBQWhDLEVBQThDRSxLQUE5Qzs7QUFFQSxTQUFPSixNQUFQO0FBQ0Q7O0FBRUQsU0FBU00sVUFBVCxDQUFvQk4sTUFBcEIsRUFBNEJRLGlCQUE1QixFQUErQ0MsVUFBL0MsRUFBMkQ7QUFDekQsTUFBTVgsU0FBUyxLQUFLQyxtQkFBcEI7QUFBQSxNQUNNVyxPQUFPLEtBQUtDLFVBRGxCO0FBQUEsTUFFTUMsWUFBWSxLQUZsQjtBQUFBLE1BR01DLFNBQVMsQ0FIZjtBQUFBLE1BSU1DLFNBQVMsQ0FKZjs7QUFNQSxPQUFLYixPQUFMLENBQWFLLFVBQWIsQ0FBd0JSLE1BQXhCLEVBQWdDRSxNQUFoQzs7QUFFQSxPQUFLQyxPQUFMLENBQWFjLG1CQUFiLENBQWlDUCxpQkFBakMsRUFBb0RDLFVBQXBELEVBQWdFQyxJQUFoRSxFQUFzRUUsU0FBdEUsRUFBaUZDLE1BQWpGLEVBQXlGQyxNQUF6Rjs7QUFFQSxPQUFLYixPQUFMLENBQWFlLHVCQUFiLENBQXFDUixpQkFBckM7QUFDRDs7QUFFRCxTQUFTUyxtQkFBVCxDQUE2QnBCLElBQTdCLEVBQW1DO0FBQ2pDLE1BQU1DLFNBQVMsS0FBS29CLDJCQUFwQjtBQUFBLE1BQ01DLGdCQUFnQixLQUFLbEIsT0FBTCxDQUFhTCxZQUFiLEVBRHRCO0FBQUEsTUFFTXdCLGNBQWMsSUFBSUMsV0FBSixDQUFnQnhCLElBQWhCLENBRnBCO0FBQUEsTUFHTU8sUUFBUSxLQUFLQyxpQkFIbkI7O0FBS0EsT0FBS0osT0FBTCxDQUFhSyxVQUFiLENBQXdCUixNQUF4QixFQUFnQ3FCLGFBQWhDOztBQUVBLE9BQUtsQixPQUFMLENBQWFNLFVBQWIsQ0FBd0JULE1BQXhCLEVBQWdDc0IsV0FBaEMsRUFBNkNoQixLQUE3Qzs7QUFFQSxTQUFPZSxhQUFQO0FBQ0Q7O0FBRUQsU0FBU0csaUJBQVQsQ0FBMkJILGFBQTNCLEVBQTBDO0FBQ3hDLE1BQU1yQixTQUFTLEtBQUtvQiwyQkFBcEI7O0FBRUEsT0FBS2pCLE9BQUwsQ0FBYUssVUFBYixDQUF3QlIsTUFBeEIsRUFBZ0NxQixhQUFoQztBQUNEOztBQUVELElBQU1JLGNBQWM7QUFDbEIzQixnQkFBY0EsWUFESTtBQUVsQlUsY0FBWUEsVUFGTTtBQUdsQlcsdUJBQXFCQSxtQkFISDtBQUlsQksscUJBQW1CQTtBQUpELENBQXBCOztBQU9BRSxPQUFPQyxPQUFQLEdBQWlCRixXQUFqQiIsImZpbGUiOiJidWZmZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlcihkYXRhKSB7XG4gIGNvbnN0IHRhcmdldCA9IHRoaXMuQVJSQVlfQlVGRkVSX1RBUkdFVCxcbiAgICAgICAgYnVmZmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlcigpLFxuICAgICAgICBmbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGRhdGEpLFxuICAgICAgICB1c2FnZSA9IHRoaXMuU1RBVElDX0RSQVdfVVNBR0U7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBidWZmZXIpO1xuXG4gIHRoaXMuY29udGV4dC5idWZmZXJEYXRhKHRhcmdldCwgZmxvYXQzMkFycmF5LCB1c2FnZSk7XG5cbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cblxuZnVuY3Rpb24gYmluZEJ1ZmZlcihidWZmZXIsIGF0dHJpYnV0ZUxvY2F0aW9uLCBjb21wb25lbnRzKSB7XG4gIGNvbnN0IHRhcmdldCA9IHRoaXMuQVJSQVlfQlVGRkVSX1RBUkdFVCxcbiAgICAgICAgdHlwZSA9IHRoaXMuRkxPQVRfVFlQRSxcbiAgICAgICAgbm9ybWFsaXplID0gZmFsc2UsXG4gICAgICAgIHN0cmlkZSA9IDAsXG4gICAgICAgIG9mZnNldCA9IDA7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBidWZmZXIpO1xuXG4gIHRoaXMuY29udGV4dC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGF0dHJpYnV0ZUxvY2F0aW9uLCBjb21wb25lbnRzLCB0eXBlLCBub3JtYWxpemUsIHN0cmlkZSwgb2Zmc2V0KTtcblxuICB0aGlzLmNvbnRleHQuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYXR0cmlidXRlTG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50QnVmZmVyKGRhdGEpIHtcbiAgY29uc3QgdGFyZ2V0ID0gdGhpcy5FTEVNRU5UX0FSUkFZX0JVRkZFUl9UQVJHRVQsXG4gICAgICAgIGVsZW1lbnRCdWZmZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyKCksXG4gICAgICAgIHVpbnQxNkFycmF5ID0gbmV3IFVpbnQxNkFycmF5KGRhdGEpLFxuICAgICAgICB1c2FnZSA9IHRoaXMuU1RBVElDX0RSQVdfVVNBR0U7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBlbGVtZW50QnVmZmVyKTtcblxuICB0aGlzLmNvbnRleHQuYnVmZmVyRGF0YSh0YXJnZXQsIHVpbnQxNkFycmF5LCB1c2FnZSk7XG5cbiAgcmV0dXJuIGVsZW1lbnRCdWZmZXI7XG59XG5cbmZ1bmN0aW9uIGJpbmRFbGVtZW50QnVmZmVyKGVsZW1lbnRCdWZmZXIpIHtcbiAgY29uc3QgdGFyZ2V0ID0gdGhpcy5FTEVNRU5UX0FSUkFZX0JVRkZFUl9UQVJHRVQ7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBlbGVtZW50QnVmZmVyKTtcbn1cblxuY29uc3QgYnVmZmVyTWl4aW4gPSB7XG4gIGNyZWF0ZUJ1ZmZlcjogY3JlYXRlQnVmZmVyLFxuICBiaW5kQnVmZmVyOiBiaW5kQnVmZmVyLFxuICBjcmVhdGVFbGVtZW50QnVmZmVyOiBjcmVhdGVFbGVtZW50QnVmZmVyLFxuICBiaW5kRWxlbWVudEJ1ZmZlcjogYmluZEVsZW1lbnRCdWZmZXJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYnVmZmVyTWl4aW47XG4iXX0=