'use strict';

function createElementBuffer(data) {
  var _context = this.context,
      ELEMENT_ARRAY_BUFFER = _context.ELEMENT_ARRAY_BUFFER,
      STATIC_DRAW = _context.STATIC_DRAW,
      target = ELEMENT_ARRAY_BUFFER,
      usage = STATIC_DRAW,
      uint16Array = new Uint16Array(data),
      elementBuffer = this.context.createBuffer();


  this.context.bindBuffer(target, elementBuffer);

  this.context.bufferData(target, uint16Array, usage);

  return elementBuffer;
}

function bindElementBuffer(elementBuffer) {
  var ELEMENT_ARRAY_BUFFER = this.context.ELEMENT_ARRAY_BUFFER,
      target = ELEMENT_ARRAY_BUFFER;


  this.context.bindBuffer(target, elementBuffer);
}

function createBuffer(data) {
  var _context2 = this.context,
      ARRAY_BUFFER = _context2.ARRAY_BUFFER,
      STATIC_DRAW = _context2.STATIC_DRAW,
      target = ARRAY_BUFFER,
      usage = STATIC_DRAW,
      buffer = this.context.createBuffer(),
      float32Array = new Float32Array(data);


  this.context.bindBuffer(target, buffer);

  this.context.bufferData(target, float32Array, usage);

  return buffer;
}

function bindBuffer(buffer, attributeLocation, components) {
  var _context3 = this.context,
      ARRAY_BUFFER = _context3.ARRAY_BUFFER,
      FLOAT = _context3.FLOAT,
      target = ARRAY_BUFFER,
      type = FLOAT,
      normalize = false,
      stride = 0,
      offset = 0;


  this.context.bindBuffer(target, buffer);

  this.context.vertexAttribPointer(attributeLocation, components, type, normalize, stride, offset);

  this.context.enableVertexAttribArray(attributeLocation);
}

module.exports = {
  createElementBuffer: createElementBuffer,
  bindElementBuffer: bindElementBuffer,
  createBuffer: createBuffer,
  bindBuffer: bindBuffer
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9idWZmZXIuanMiXSwibmFtZXMiOlsiY3JlYXRlRWxlbWVudEJ1ZmZlciIsImRhdGEiLCJjb250ZXh0IiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJTVEFUSUNfRFJBVyIsInRhcmdldCIsInVzYWdlIiwidWludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsImVsZW1lbnRCdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiYnVmZmVyRGF0YSIsImJpbmRFbGVtZW50QnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYnVmZmVyIiwiZmxvYXQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiYXR0cmlidXRlTG9jYXRpb24iLCJjb21wb25lbnRzIiwiRkxPQVQiLCJ0eXBlIiwibm9ybWFsaXplIiwic3RyaWRlIiwib2Zmc2V0IiwidmVydGV4QXR0cmliUG9pbnRlciIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsbUJBQVQsQ0FBNkJDLElBQTdCLEVBQW1DO0FBQUEsaUJBQ2EsS0FBS0MsT0FEbEI7QUFBQSxNQUN6QkMsb0JBRHlCLFlBQ3pCQSxvQkFEeUI7QUFBQSxNQUNIQyxXQURHLFlBQ0hBLFdBREc7QUFBQSxNQUUzQkMsTUFGMkIsR0FFbEJGLG9CQUZrQjtBQUFBLE1BRzNCRyxLQUgyQixHQUduQkYsV0FIbUI7QUFBQSxNQUkzQkcsV0FKMkIsR0FJYixJQUFJQyxXQUFKLENBQWdCUCxJQUFoQixDQUphO0FBQUEsTUFLM0JRLGFBTDJCLEdBS1gsS0FBS1AsT0FBTCxDQUFhUSxZQUFiLEVBTFc7OztBQU9qQyxPQUFLUixPQUFMLENBQWFTLFVBQWIsQ0FBd0JOLE1BQXhCLEVBQWdDSSxhQUFoQzs7QUFFQSxPQUFLUCxPQUFMLENBQWFVLFVBQWIsQ0FBd0JQLE1BQXhCLEVBQWdDRSxXQUFoQyxFQUE2Q0QsS0FBN0M7O0FBRUEsU0FBT0csYUFBUDtBQUNEOztBQUVELFNBQVNJLGlCQUFULENBQTJCSixhQUEzQixFQUEwQztBQUNsQyxNQUFFTixvQkFBRixHQUEyQixLQUFLRCxPQUFoQyxDQUFFQyxvQkFBRjtBQUFBLE1BQ0FFLE1BREEsR0FDU0Ysb0JBRFQ7OztBQUdOLE9BQUtELE9BQUwsQ0FBYVMsVUFBYixDQUF3Qk4sTUFBeEIsRUFBZ0NJLGFBQWhDO0FBQ0Q7O0FBRUQsU0FBU0MsWUFBVCxDQUFzQlQsSUFBdEIsRUFBNEI7QUFBQSxrQkFDWSxLQUFLQyxPQURqQjtBQUFBLE1BQ2xCWSxZQURrQixhQUNsQkEsWUFEa0I7QUFBQSxNQUNKVixXQURJLGFBQ0pBLFdBREk7QUFBQSxNQUVwQkMsTUFGb0IsR0FFWFMsWUFGVztBQUFBLE1BR3BCUixLQUhvQixHQUdaRixXQUhZO0FBQUEsTUFJcEJXLE1BSm9CLEdBSVgsS0FBS2IsT0FBTCxDQUFhUSxZQUFiLEVBSlc7QUFBQSxNQUtwQk0sWUFMb0IsR0FLTCxJQUFJQyxZQUFKLENBQWlCaEIsSUFBakIsQ0FMSzs7O0FBTzFCLE9BQUtDLE9BQUwsQ0FBYVMsVUFBYixDQUF3Qk4sTUFBeEIsRUFBZ0NVLE1BQWhDOztBQUVBLE9BQUtiLE9BQUwsQ0FBYVUsVUFBYixDQUF3QlAsTUFBeEIsRUFBZ0NXLFlBQWhDLEVBQThDVixLQUE5Qzs7QUFFQSxTQUFPUyxNQUFQO0FBQ0Q7O0FBRUQsU0FBU0osVUFBVCxDQUFvQkksTUFBcEIsRUFBNEJHLGlCQUE1QixFQUErQ0MsVUFBL0MsRUFBMkQ7QUFBQSxrQkFDekIsS0FBS2pCLE9BRG9CO0FBQUEsTUFDakRZLFlBRGlELGFBQ2pEQSxZQURpRDtBQUFBLE1BQ25DTSxLQURtQyxhQUNuQ0EsS0FEbUM7QUFBQSxNQUVuRGYsTUFGbUQsR0FFMUNTLFlBRjBDO0FBQUEsTUFHbkRPLElBSG1ELEdBRzVDRCxLQUg0QztBQUFBLE1BSW5ERSxTQUptRCxHQUl2QyxLQUp1QztBQUFBLE1BS25EQyxNQUxtRCxHQUsxQyxDQUwwQztBQUFBLE1BTW5EQyxNQU5tRCxHQU0xQyxDQU4wQzs7O0FBUXpELE9BQUt0QixPQUFMLENBQWFTLFVBQWIsQ0FBd0JOLE1BQXhCLEVBQWdDVSxNQUFoQzs7QUFFQSxPQUFLYixPQUFMLENBQWF1QixtQkFBYixDQUFpQ1AsaUJBQWpDLEVBQW9EQyxVQUFwRCxFQUFnRUUsSUFBaEUsRUFBc0VDLFNBQXRFLEVBQWlGQyxNQUFqRixFQUF5RkMsTUFBekY7O0FBRUEsT0FBS3RCLE9BQUwsQ0FBYXdCLHVCQUFiLENBQXFDUixpQkFBckM7QUFDRDs7QUFFRFMsT0FBT0MsT0FBUCxHQUFpQjtBQUNmNUIsdUJBQXFCQSxtQkFETjtBQUVmYSxxQkFBbUJBLGlCQUZKO0FBR2ZILGdCQUFjQSxZQUhDO0FBSWZDLGNBQVlBO0FBSkcsQ0FBakIiLCJmaWxlIjoiYnVmZmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50QnVmZmVyKGRhdGEpIHtcbiAgY29uc3QgeyBFTEVNRU5UX0FSUkFZX0JVRkZFUiwgU1RBVElDX0RSQVcgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gRUxFTUVOVF9BUlJBWV9CVUZGRVIsXG4gICAgICAgIHVzYWdlID0gU1RBVElDX0RSQVcsXG4gICAgICAgIHVpbnQxNkFycmF5ID0gbmV3IFVpbnQxNkFycmF5KGRhdGEpLFxuICAgICAgICBlbGVtZW50QnVmZmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlcigpO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgZWxlbWVudEJ1ZmZlcik7XG5cbiAgdGhpcy5jb250ZXh0LmJ1ZmZlckRhdGEodGFyZ2V0LCB1aW50MTZBcnJheSwgdXNhZ2UpO1xuXG4gIHJldHVybiBlbGVtZW50QnVmZmVyO1xufVxuXG5mdW5jdGlvbiBiaW5kRWxlbWVudEJ1ZmZlcihlbGVtZW50QnVmZmVyKSB7XG4gIGNvbnN0IHsgRUxFTUVOVF9BUlJBWV9CVUZGRVIgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gRUxFTUVOVF9BUlJBWV9CVUZGRVI7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBlbGVtZW50QnVmZmVyKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyKGRhdGEpIHtcbiAgY29uc3QgeyBBUlJBWV9CVUZGRVIsIFNUQVRJQ19EUkFXIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHRhcmdldCA9IEFSUkFZX0JVRkZFUixcbiAgICAgICAgdXNhZ2UgPSBTVEFUSUNfRFJBVyxcbiAgICAgICAgYnVmZmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlcigpLFxuICAgICAgICBmbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGRhdGEpO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgYnVmZmVyKTtcblxuICB0aGlzLmNvbnRleHQuYnVmZmVyRGF0YSh0YXJnZXQsIGZsb2F0MzJBcnJheSwgdXNhZ2UpO1xuXG4gIHJldHVybiBidWZmZXI7XG59XG5cbmZ1bmN0aW9uIGJpbmRCdWZmZXIoYnVmZmVyLCBhdHRyaWJ1dGVMb2NhdGlvbiwgY29tcG9uZW50cykge1xuICBjb25zdCB7IEFSUkFZX0JVRkZFUiwgRkxPQVQgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gQVJSQVlfQlVGRkVSLFxuICAgICAgICB0eXBlID0gRkxPQVQsXG4gICAgICAgIG5vcm1hbGl6ZSA9IGZhbHNlLFxuICAgICAgICBzdHJpZGUgPSAwLFxuICAgICAgICBvZmZzZXQgPSAwO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgYnVmZmVyKTtcblxuICB0aGlzLmNvbnRleHQudmVydGV4QXR0cmliUG9pbnRlcihhdHRyaWJ1dGVMb2NhdGlvbiwgY29tcG9uZW50cywgdHlwZSwgbm9ybWFsaXplLCBzdHJpZGUsIG9mZnNldCk7XG5cbiAgdGhpcy5jb250ZXh0LmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGF0dHJpYnV0ZUxvY2F0aW9uKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZUVsZW1lbnRCdWZmZXI6IGNyZWF0ZUVsZW1lbnRCdWZmZXIsXG4gIGJpbmRFbGVtZW50QnVmZmVyOiBiaW5kRWxlbWVudEJ1ZmZlcixcbiAgY3JlYXRlQnVmZmVyOiBjcmVhdGVCdWZmZXIsXG4gIGJpbmRCdWZmZXI6IGJpbmRCdWZmZXJcbn07XG4iXX0=