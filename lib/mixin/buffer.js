'use strict';

function createElementBuffer(data) {
  var _this$context = this.context,
      ELEMENT_ARRAY_BUFFER = _this$context.ELEMENT_ARRAY_BUFFER,
      STATIC_DRAW = _this$context.STATIC_DRAW,
      target = ELEMENT_ARRAY_BUFFER,
      usage = STATIC_DRAW,
      uint16Array = new Uint16Array(data),
      elementBuffer = this.context.createBuffer();
  this.context.bindBuffer(target, elementBuffer);
  this.context.bufferData(target, uint16Array, usage);
  return elementBuffer;
}

function bindElementBuffer(elementBuffer) {
  var ELEMENT_ARRAY_BUFFER = this.context.ELEMENT_ARRAY_BUFFER,
      target = ELEMENT_ARRAY_BUFFER;
  this.context.bindBuffer(target, elementBuffer);
}

function createBuffer(data) {
  var _this$context2 = this.context,
      ARRAY_BUFFER = _this$context2.ARRAY_BUFFER,
      STATIC_DRAW = _this$context2.STATIC_DRAW,
      target = ARRAY_BUFFER,
      usage = STATIC_DRAW,
      buffer = this.context.createBuffer(),
      float32Array = new Float32Array(data);
  this.context.bindBuffer(target, buffer);
  this.context.bufferData(target, float32Array, usage);
  return buffer;
}

function bindBuffer(buffer, attributeLocation, components) {
  var _this$context3 = this.context,
      ARRAY_BUFFER = _this$context3.ARRAY_BUFFER,
      FLOAT = _this$context3.FLOAT,
      target = ARRAY_BUFFER,
      type = FLOAT,
      normalize = false,
      stride = 0,
      offset = 0;
  this.context.bindBuffer(target, buffer);
  this.context.vertexAttribPointer(attributeLocation, components, type, normalize, stride, offset);
  this.context.enableVertexAttribArray(attributeLocation);
}

module.exports = {
  createElementBuffer: createElementBuffer,
  bindElementBuffer: bindElementBuffer,
  createBuffer: createBuffer,
  bindBuffer: bindBuffer
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1ZmZlci5qcyJdLCJuYW1lcyI6WyJjcmVhdGVFbGVtZW50QnVmZmVyIiwiZGF0YSIsImNvbnRleHQiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsIlNUQVRJQ19EUkFXIiwidGFyZ2V0IiwidXNhZ2UiLCJ1aW50MTZBcnJheSIsIlVpbnQxNkFycmF5IiwiZWxlbWVudEJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJidWZmZXJEYXRhIiwiYmluZEVsZW1lbnRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJidWZmZXIiLCJmbG9hdDMyQXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJhdHRyaWJ1dGVMb2NhdGlvbiIsImNvbXBvbmVudHMiLCJGTE9BVCIsInR5cGUiLCJub3JtYWxpemUiLCJzdHJpZGUiLCJvZmZzZXQiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxtQkFBVCxDQUE2QkMsSUFBN0IsRUFBbUM7QUFBQSxzQkFDYSxLQUFLQyxPQURsQjtBQUFBLE1BQ3pCQyxvQkFEeUIsaUJBQ3pCQSxvQkFEeUI7QUFBQSxNQUNIQyxXQURHLGlCQUNIQSxXQURHO0FBQUEsTUFFM0JDLE1BRjJCLEdBRWxCRixvQkFGa0I7QUFBQSxNQUczQkcsS0FIMkIsR0FHbkJGLFdBSG1CO0FBQUEsTUFJM0JHLFdBSjJCLEdBSWIsSUFBSUMsV0FBSixDQUFnQlAsSUFBaEIsQ0FKYTtBQUFBLE1BSzNCUSxhQUwyQixHQUtYLEtBQUtQLE9BQUwsQ0FBYVEsWUFBYixFQUxXO0FBT2pDLE9BQUtSLE9BQUwsQ0FBYVMsVUFBYixDQUF3Qk4sTUFBeEIsRUFBZ0NJLGFBQWhDO0FBRUEsT0FBS1AsT0FBTCxDQUFhVSxVQUFiLENBQXdCUCxNQUF4QixFQUFnQ0UsV0FBaEMsRUFBNkNELEtBQTdDO0FBRUEsU0FBT0csYUFBUDtBQUNEOztBQUVELFNBQVNJLGlCQUFULENBQTJCSixhQUEzQixFQUEwQztBQUNsQyxNQUFFTixvQkFBRixHQUEyQixLQUFLRCxPQUFoQyxDQUFFQyxvQkFBRjtBQUFBLE1BQ0FFLE1BREEsR0FDU0Ysb0JBRFQ7QUFHTixPQUFLRCxPQUFMLENBQWFTLFVBQWIsQ0FBd0JOLE1BQXhCLEVBQWdDSSxhQUFoQztBQUNEOztBQUVELFNBQVNDLFlBQVQsQ0FBc0JULElBQXRCLEVBQTRCO0FBQUEsdUJBQ1ksS0FBS0MsT0FEakI7QUFBQSxNQUNsQlksWUFEa0Isa0JBQ2xCQSxZQURrQjtBQUFBLE1BQ0pWLFdBREksa0JBQ0pBLFdBREk7QUFBQSxNQUVwQkMsTUFGb0IsR0FFWFMsWUFGVztBQUFBLE1BR3BCUixLQUhvQixHQUdaRixXQUhZO0FBQUEsTUFJcEJXLE1BSm9CLEdBSVgsS0FBS2IsT0FBTCxDQUFhUSxZQUFiLEVBSlc7QUFBQSxNQUtwQk0sWUFMb0IsR0FLTCxJQUFJQyxZQUFKLENBQWlCaEIsSUFBakIsQ0FMSztBQU8xQixPQUFLQyxPQUFMLENBQWFTLFVBQWIsQ0FBd0JOLE1BQXhCLEVBQWdDVSxNQUFoQztBQUVBLE9BQUtiLE9BQUwsQ0FBYVUsVUFBYixDQUF3QlAsTUFBeEIsRUFBZ0NXLFlBQWhDLEVBQThDVixLQUE5QztBQUVBLFNBQU9TLE1BQVA7QUFDRDs7QUFFRCxTQUFTSixVQUFULENBQW9CSSxNQUFwQixFQUE0QkcsaUJBQTVCLEVBQStDQyxVQUEvQyxFQUEyRDtBQUFBLHVCQUN6QixLQUFLakIsT0FEb0I7QUFBQSxNQUNqRFksWUFEaUQsa0JBQ2pEQSxZQURpRDtBQUFBLE1BQ25DTSxLQURtQyxrQkFDbkNBLEtBRG1DO0FBQUEsTUFFbkRmLE1BRm1ELEdBRTFDUyxZQUYwQztBQUFBLE1BR25ETyxJQUhtRCxHQUc1Q0QsS0FINEM7QUFBQSxNQUluREUsU0FKbUQsR0FJdkMsS0FKdUM7QUFBQSxNQUtuREMsTUFMbUQsR0FLMUMsQ0FMMEM7QUFBQSxNQU1uREMsTUFObUQsR0FNMUMsQ0FOMEM7QUFRekQsT0FBS3RCLE9BQUwsQ0FBYVMsVUFBYixDQUF3Qk4sTUFBeEIsRUFBZ0NVLE1BQWhDO0FBRUEsT0FBS2IsT0FBTCxDQUFhdUIsbUJBQWIsQ0FBaUNQLGlCQUFqQyxFQUFvREMsVUFBcEQsRUFBZ0VFLElBQWhFLEVBQXNFQyxTQUF0RSxFQUFpRkMsTUFBakYsRUFBeUZDLE1BQXpGO0FBRUEsT0FBS3RCLE9BQUwsQ0FBYXdCLHVCQUFiLENBQXFDUixpQkFBckM7QUFDRDs7QUFFRFMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2Y1QixFQUFBQSxtQkFBbUIsRUFBbkJBLG1CQURlO0FBRWZhLEVBQUFBLGlCQUFpQixFQUFqQkEsaUJBRmU7QUFHZkgsRUFBQUEsWUFBWSxFQUFaQSxZQUhlO0FBSWZDLEVBQUFBLFVBQVUsRUFBVkE7QUFKZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudEJ1ZmZlcihkYXRhKSB7XG4gIGNvbnN0IHsgRUxFTUVOVF9BUlJBWV9CVUZGRVIsIFNUQVRJQ19EUkFXIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHRhcmdldCA9IEVMRU1FTlRfQVJSQVlfQlVGRkVSLFxuICAgICAgICB1c2FnZSA9IFNUQVRJQ19EUkFXLFxuICAgICAgICB1aW50MTZBcnJheSA9IG5ldyBVaW50MTZBcnJheShkYXRhKSxcbiAgICAgICAgZWxlbWVudEJ1ZmZlciA9IHRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXIoKTtcblxuICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0YXJnZXQsIGVsZW1lbnRCdWZmZXIpO1xuXG4gIHRoaXMuY29udGV4dC5idWZmZXJEYXRhKHRhcmdldCwgdWludDE2QXJyYXksIHVzYWdlKTtcblxuICByZXR1cm4gZWxlbWVudEJ1ZmZlcjtcbn1cblxuZnVuY3Rpb24gYmluZEVsZW1lbnRCdWZmZXIoZWxlbWVudEJ1ZmZlcikge1xuICBjb25zdCB7IEVMRU1FTlRfQVJSQVlfQlVGRkVSIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHRhcmdldCA9IEVMRU1FTlRfQVJSQVlfQlVGRkVSO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgZWxlbWVudEJ1ZmZlcik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlcihkYXRhKSB7XG4gIGNvbnN0IHsgQVJSQVlfQlVGRkVSLCBTVEFUSUNfRFJBVyB9ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICB0YXJnZXQgPSBBUlJBWV9CVUZGRVIsXG4gICAgICAgIHVzYWdlID0gU1RBVElDX0RSQVcsXG4gICAgICAgIGJ1ZmZlciA9IHRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXIoKSxcbiAgICAgICAgZmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShkYXRhKTtcblxuICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0YXJnZXQsIGJ1ZmZlcik7XG5cbiAgdGhpcy5jb250ZXh0LmJ1ZmZlckRhdGEodGFyZ2V0LCBmbG9hdDMyQXJyYXksIHVzYWdlKTtcblxuICByZXR1cm4gYnVmZmVyO1xufVxuXG5mdW5jdGlvbiBiaW5kQnVmZmVyKGJ1ZmZlciwgYXR0cmlidXRlTG9jYXRpb24sIGNvbXBvbmVudHMpIHtcbiAgY29uc3QgeyBBUlJBWV9CVUZGRVIsIEZMT0FUIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHRhcmdldCA9IEFSUkFZX0JVRkZFUixcbiAgICAgICAgdHlwZSA9IEZMT0FULFxuICAgICAgICBub3JtYWxpemUgPSBmYWxzZSxcbiAgICAgICAgc3RyaWRlID0gMCxcbiAgICAgICAgb2Zmc2V0ID0gMDtcblxuICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0YXJnZXQsIGJ1ZmZlcik7XG5cbiAgdGhpcy5jb250ZXh0LnZlcnRleEF0dHJpYlBvaW50ZXIoYXR0cmlidXRlTG9jYXRpb24sIGNvbXBvbmVudHMsIHR5cGUsIG5vcm1hbGl6ZSwgc3RyaWRlLCBvZmZzZXQpO1xuXG4gIHRoaXMuY29udGV4dC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhdHRyaWJ1dGVMb2NhdGlvbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVFbGVtZW50QnVmZmVyLFxuICBiaW5kRWxlbWVudEJ1ZmZlcixcbiAgY3JlYXRlQnVmZmVyLFxuICBiaW5kQnVmZmVyXG59O1xuIl19