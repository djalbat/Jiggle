'use strict';

function createBuffer(data) {
  var _context = this.context,
      ARRAY_BUFFER = _context.ARRAY_BUFFER,
      STATIC_DRAW = _context.STATIC_DRAW,
      target = ARRAY_BUFFER,
      usage = STATIC_DRAW,
      buffer = this.context.createBuffer(),
      float32Array = new Float32Array(data);


  this.context.bindBuffer(target, buffer);

  this.context.bufferData(target, float32Array, usage);

  return buffer;
}

function bindBuffer(buffer, attributeLocation, components) {
  var _context2 = this.context,
      ARRAY_BUFFER = _context2.ARRAY_BUFFER,
      FLOAT = _context2.FLOAT,
      target = ARRAY_BUFFER,
      type = FLOAT,
      normalize = false,
      stride = 0,
      offset = 0;


  this.context.bindBuffer(target, buffer);

  this.context.vertexAttribPointer(attributeLocation, components, type, normalize, stride, offset);

  this.context.enableVertexAttribArray(attributeLocation);
}

function createElementBuffer(data) {
  var _context3 = this.context,
      ELEMENT_ARRAY_BUFFER = _context3.ELEMENT_ARRAY_BUFFER,
      STATIC_DRAW = _context3.STATIC_DRAW,
      target = ELEMENT_ARRAY_BUFFER,
      usage = STATIC_DRAW,
      elementBuffer = this.context.createBuffer(),
      uint16Array = new Uint16Array(data);


  this.context.bindBuffer(target, elementBuffer);

  this.context.bufferData(target, uint16Array, usage);

  return elementBuffer;
}

function bindElementBuffer(elementBuffer) {
  var ELEMENT_ARRAY_BUFFER = this.context.ELEMENT_ARRAY_BUFFER,
      target = ELEMENT_ARRAY_BUFFER;


  this.context.bindBuffer(target, elementBuffer);
}

var bufferMixin = {
  createBuffer: createBuffer,
  bindBuffer: bindBuffer,
  createElementBuffer: createElementBuffer,
  bindElementBuffer: bindElementBuffer
};

module.exports = bufferMixin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9idWZmZXIuanMiXSwibmFtZXMiOlsiY3JlYXRlQnVmZmVyIiwiZGF0YSIsImNvbnRleHQiLCJBUlJBWV9CVUZGRVIiLCJTVEFUSUNfRFJBVyIsInRhcmdldCIsInVzYWdlIiwiYnVmZmVyIiwiZmxvYXQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiYmluZEJ1ZmZlciIsImJ1ZmZlckRhdGEiLCJhdHRyaWJ1dGVMb2NhdGlvbiIsImNvbXBvbmVudHMiLCJGTE9BVCIsInR5cGUiLCJub3JtYWxpemUiLCJzdHJpZGUiLCJvZmZzZXQiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJjcmVhdGVFbGVtZW50QnVmZmVyIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJlbGVtZW50QnVmZmVyIiwidWludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsImJpbmRFbGVtZW50QnVmZmVyIiwiYnVmZmVyTWl4aW4iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxZQUFULENBQXNCQyxJQUF0QixFQUE0QjtBQUFBLGlCQUNZLEtBQUtDLE9BRGpCO0FBQUEsTUFDbEJDLFlBRGtCLFlBQ2xCQSxZQURrQjtBQUFBLE1BQ0pDLFdBREksWUFDSkEsV0FESTtBQUFBLE1BRXBCQyxNQUZvQixHQUVYRixZQUZXO0FBQUEsTUFHcEJHLEtBSG9CLEdBR1pGLFdBSFk7QUFBQSxNQUlwQkcsTUFKb0IsR0FJWCxLQUFLTCxPQUFMLENBQWFGLFlBQWIsRUFKVztBQUFBLE1BS3BCUSxZQUxvQixHQUtMLElBQUlDLFlBQUosQ0FBaUJSLElBQWpCLENBTEs7OztBQU8xQixPQUFLQyxPQUFMLENBQWFRLFVBQWIsQ0FBd0JMLE1BQXhCLEVBQWdDRSxNQUFoQzs7QUFFQSxPQUFLTCxPQUFMLENBQWFTLFVBQWIsQ0FBd0JOLE1BQXhCLEVBQWdDRyxZQUFoQyxFQUE4Q0YsS0FBOUM7O0FBRUEsU0FBT0MsTUFBUDtBQUNEOztBQUVELFNBQVNHLFVBQVQsQ0FBb0JILE1BQXBCLEVBQTRCSyxpQkFBNUIsRUFBK0NDLFVBQS9DLEVBQTJEO0FBQUEsa0JBQ3pCLEtBQUtYLE9BRG9CO0FBQUEsTUFDakRDLFlBRGlELGFBQ2pEQSxZQURpRDtBQUFBLE1BQ25DVyxLQURtQyxhQUNuQ0EsS0FEbUM7QUFBQSxNQUVuRFQsTUFGbUQsR0FFMUNGLFlBRjBDO0FBQUEsTUFHbkRZLElBSG1ELEdBRzVDRCxLQUg0QztBQUFBLE1BSW5ERSxTQUptRCxHQUl2QyxLQUp1QztBQUFBLE1BS25EQyxNQUxtRCxHQUsxQyxDQUwwQztBQUFBLE1BTW5EQyxNQU5tRCxHQU0xQyxDQU4wQzs7O0FBUXpELE9BQUtoQixPQUFMLENBQWFRLFVBQWIsQ0FBd0JMLE1BQXhCLEVBQWdDRSxNQUFoQzs7QUFFQSxPQUFLTCxPQUFMLENBQWFpQixtQkFBYixDQUFpQ1AsaUJBQWpDLEVBQW9EQyxVQUFwRCxFQUFnRUUsSUFBaEUsRUFBc0VDLFNBQXRFLEVBQWlGQyxNQUFqRixFQUF5RkMsTUFBekY7O0FBRUEsT0FBS2hCLE9BQUwsQ0FBYWtCLHVCQUFiLENBQXFDUixpQkFBckM7QUFDRDs7QUFFRCxTQUFTUyxtQkFBVCxDQUE2QnBCLElBQTdCLEVBQW1DO0FBQUEsa0JBQ2EsS0FBS0MsT0FEbEI7QUFBQSxNQUN6Qm9CLG9CQUR5QixhQUN6QkEsb0JBRHlCO0FBQUEsTUFDSGxCLFdBREcsYUFDSEEsV0FERztBQUFBLE1BRTNCQyxNQUYyQixHQUVsQmlCLG9CQUZrQjtBQUFBLE1BRzNCaEIsS0FIMkIsR0FHbkJGLFdBSG1CO0FBQUEsTUFJM0JtQixhQUoyQixHQUlYLEtBQUtyQixPQUFMLENBQWFGLFlBQWIsRUFKVztBQUFBLE1BSzNCd0IsV0FMMkIsR0FLYixJQUFJQyxXQUFKLENBQWdCeEIsSUFBaEIsQ0FMYTs7O0FBT2pDLE9BQUtDLE9BQUwsQ0FBYVEsVUFBYixDQUF3QkwsTUFBeEIsRUFBZ0NrQixhQUFoQzs7QUFFQSxPQUFLckIsT0FBTCxDQUFhUyxVQUFiLENBQXdCTixNQUF4QixFQUFnQ21CLFdBQWhDLEVBQTZDbEIsS0FBN0M7O0FBRUEsU0FBT2lCLGFBQVA7QUFDRDs7QUFFRCxTQUFTRyxpQkFBVCxDQUEyQkgsYUFBM0IsRUFBMEM7QUFDbEMsTUFBRUQsb0JBQUYsR0FBMkIsS0FBS3BCLE9BQWhDLENBQUVvQixvQkFBRjtBQUFBLE1BQ0FqQixNQURBLEdBQ1NpQixvQkFEVDs7O0FBR04sT0FBS3BCLE9BQUwsQ0FBYVEsVUFBYixDQUF3QkwsTUFBeEIsRUFBZ0NrQixhQUFoQztBQUNEOztBQUVELElBQU1JLGNBQWM7QUFDbEIzQixnQkFBY0EsWUFESTtBQUVsQlUsY0FBWUEsVUFGTTtBQUdsQlcsdUJBQXFCQSxtQkFISDtBQUlsQksscUJBQW1CQTtBQUpELENBQXBCOztBQU9BRSxPQUFPQyxPQUFQLEdBQWlCRixXQUFqQiIsImZpbGUiOiJidWZmZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlcihkYXRhKSB7XG4gIGNvbnN0IHsgQVJSQVlfQlVGRkVSLCBTVEFUSUNfRFJBVyB9ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICB0YXJnZXQgPSBBUlJBWV9CVUZGRVIsXG4gICAgICAgIHVzYWdlID0gU1RBVElDX0RSQVcsXG4gICAgICAgIGJ1ZmZlciA9IHRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXIoKSxcbiAgICAgICAgZmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShkYXRhKTtcblxuICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0YXJnZXQsIGJ1ZmZlcik7XG5cbiAgdGhpcy5jb250ZXh0LmJ1ZmZlckRhdGEodGFyZ2V0LCBmbG9hdDMyQXJyYXksIHVzYWdlKTtcblxuICByZXR1cm4gYnVmZmVyO1xufVxuXG5mdW5jdGlvbiBiaW5kQnVmZmVyKGJ1ZmZlciwgYXR0cmlidXRlTG9jYXRpb24sIGNvbXBvbmVudHMpIHtcbiAgY29uc3QgeyBBUlJBWV9CVUZGRVIsIEZMT0FUIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHRhcmdldCA9IEFSUkFZX0JVRkZFUixcbiAgICAgICAgdHlwZSA9IEZMT0FULFxuICAgICAgICBub3JtYWxpemUgPSBmYWxzZSxcbiAgICAgICAgc3RyaWRlID0gMCxcbiAgICAgICAgb2Zmc2V0ID0gMDtcblxuICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0YXJnZXQsIGJ1ZmZlcik7XG5cbiAgdGhpcy5jb250ZXh0LnZlcnRleEF0dHJpYlBvaW50ZXIoYXR0cmlidXRlTG9jYXRpb24sIGNvbXBvbmVudHMsIHR5cGUsIG5vcm1hbGl6ZSwgc3RyaWRlLCBvZmZzZXQpO1xuXG4gIHRoaXMuY29udGV4dC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhdHRyaWJ1dGVMb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRCdWZmZXIoZGF0YSkge1xuICBjb25zdCB7IEVMRU1FTlRfQVJSQVlfQlVGRkVSLCBTVEFUSUNfRFJBVyB9ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICB0YXJnZXQgPSBFTEVNRU5UX0FSUkFZX0JVRkZFUixcbiAgICAgICAgdXNhZ2UgPSBTVEFUSUNfRFJBVyxcbiAgICAgICAgZWxlbWVudEJ1ZmZlciA9IHRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXIoKSxcbiAgICAgICAgdWludDE2QXJyYXkgPSBuZXcgVWludDE2QXJyYXkoZGF0YSk7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBlbGVtZW50QnVmZmVyKTtcblxuICB0aGlzLmNvbnRleHQuYnVmZmVyRGF0YSh0YXJnZXQsIHVpbnQxNkFycmF5LCB1c2FnZSk7XG5cbiAgcmV0dXJuIGVsZW1lbnRCdWZmZXI7XG59XG5cbmZ1bmN0aW9uIGJpbmRFbGVtZW50QnVmZmVyKGVsZW1lbnRCdWZmZXIpIHtcbiAgY29uc3QgeyBFTEVNRU5UX0FSUkFZX0JVRkZFUiB9ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICB0YXJnZXQgPSBFTEVNRU5UX0FSUkFZX0JVRkZFUjtcblxuICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0YXJnZXQsIGVsZW1lbnRCdWZmZXIpO1xufVxuXG5jb25zdCBidWZmZXJNaXhpbiA9IHtcbiAgY3JlYXRlQnVmZmVyOiBjcmVhdGVCdWZmZXIsXG4gIGJpbmRCdWZmZXI6IGJpbmRCdWZmZXIsXG4gIGNyZWF0ZUVsZW1lbnRCdWZmZXI6IGNyZWF0ZUVsZW1lbnRCdWZmZXIsXG4gIGJpbmRFbGVtZW50QnVmZmVyOiBiaW5kRWxlbWVudEJ1ZmZlclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBidWZmZXJNaXhpbjtcbiJdfQ==