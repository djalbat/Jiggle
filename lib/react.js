'use strict';

var Scene = require('./scene'),
    Element = require('./element'),
    arrayUtilities = require('./utilities/array');

var flatten = arrayUtilities.flatten,
    guarantee = arrayUtilities.guarantee;


function createElement(firstArgument, properties) {
  for (var _len = arguments.length, childElements = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    childElements[_key - 2] = arguments[_key];
  }

  var elementOrElements = void 0;

  if (firstArgument !== undefined) {
    childElements = flatten(childElements);

    properties = Object.assign({
      childElements: childElements
    }, properties);

    if (false) {} else if (firstArgument === Scene) {
      var scene = Scene.fromProperties(properties);

      elementOrElements = scene; ///
    } else if (isSubclassOf(firstArgument, Element)) {
      var Class = firstArgument; ///

      elementOrElements = Class.fromProperties(properties);
    } else if (typeof firstArgument === 'function') {
      var func = firstArgument; ///

      elementOrElements = func(properties);
    }
  }

  var elements = flatten(guarantee(elementOrElements)); ///

  return elements;
}

var React = {
  createElement: createElement
};

module.exports = React;

function isSubclassOf(argument, Class) {
  var typeOf = false;

  if (argument.name === Class.name) {
    ///
    typeOf = true;
  } else {
    argument = Object.getPrototypeOf(argument); ///

    if (argument) {
      typeOf = isSubclassOf(argument, Class);
    }
  }

  return typeOf;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9yZWFjdC5qcyJdLCJuYW1lcyI6WyJTY2VuZSIsInJlcXVpcmUiLCJFbGVtZW50IiwiYXJyYXlVdGlsaXRpZXMiLCJmbGF0dGVuIiwiZ3VhcmFudGVlIiwiY3JlYXRlRWxlbWVudCIsImZpcnN0QXJndW1lbnQiLCJwcm9wZXJ0aWVzIiwiY2hpbGRFbGVtZW50cyIsImVsZW1lbnRPckVsZW1lbnRzIiwidW5kZWZpbmVkIiwiT2JqZWN0IiwiYXNzaWduIiwic2NlbmUiLCJmcm9tUHJvcGVydGllcyIsImlzU3ViY2xhc3NPZiIsIkNsYXNzIiwiZnVuYyIsImVsZW1lbnRzIiwiUmVhY3QiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJndW1lbnQiLCJ0eXBlT2YiLCJuYW1lIiwiZ2V0UHJvdG90eXBlT2YiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFFBQVFDLFFBQVEsU0FBUixDQUFkO0FBQUEsSUFDTUMsVUFBVUQsUUFBUSxXQUFSLENBRGhCO0FBQUEsSUFFTUUsaUJBQWlCRixRQUFRLG1CQUFSLENBRnZCOztJQUlRRyxPLEdBQXVCRCxjLENBQXZCQyxPO0lBQVNDLFMsR0FBY0YsYyxDQUFkRSxTOzs7QUFFakIsU0FBU0MsYUFBVCxDQUF1QkMsYUFBdkIsRUFBc0NDLFVBQXRDLEVBQW9FO0FBQUEsb0NBQWZDLGFBQWU7QUFBZkEsaUJBQWU7QUFBQTs7QUFDbEUsTUFBSUMsMEJBQUo7O0FBRUEsTUFBSUgsa0JBQWtCSSxTQUF0QixFQUFpQztBQUMvQkYsb0JBQWdCTCxRQUFRSyxhQUFSLENBQWhCOztBQUVBRCxpQkFBYUksT0FBT0MsTUFBUCxDQUFjO0FBQ3pCSixxQkFBZUE7QUFEVSxLQUFkLEVBRVZELFVBRlUsQ0FBYjs7QUFJQSxRQUFJLEtBQUosRUFBVyxDQUVWLENBRkQsTUFFTyxJQUFJRCxrQkFBa0JQLEtBQXRCLEVBQTZCO0FBQ2xDLFVBQU1jLFFBQVFkLE1BQU1lLGNBQU4sQ0FBcUJQLFVBQXJCLENBQWQ7O0FBRUFFLDBCQUFvQkksS0FBcEIsQ0FIa0MsQ0FHTjtBQUM3QixLQUpNLE1BSUEsSUFBSUUsYUFBYVQsYUFBYixFQUE0QkwsT0FBNUIsQ0FBSixFQUEwQztBQUMvQyxVQUFNZSxRQUFRVixhQUFkLENBRCtDLENBQ2pCOztBQUU5QkcsMEJBQW9CTyxNQUFNRixjQUFOLENBQXFCUCxVQUFyQixDQUFwQjtBQUNELEtBSk0sTUFJQSxJQUFJLE9BQU9ELGFBQVAsS0FBeUIsVUFBN0IsRUFBeUM7QUFDOUMsVUFBTVcsT0FBT1gsYUFBYixDQUQ4QyxDQUNqQjs7QUFFN0JHLDBCQUFvQlEsS0FBS1YsVUFBTCxDQUFwQjtBQUNEO0FBQ0Y7O0FBRUQsTUFBTVcsV0FBV2YsUUFBUUMsVUFBVUssaUJBQVYsQ0FBUixDQUFqQixDQTNCa0UsQ0EyQlY7O0FBRXhELFNBQU9TLFFBQVA7QUFDRDs7QUFFRCxJQUFNQyxRQUFRO0FBQ1pkLGlCQUFlQTtBQURILENBQWQ7O0FBSUFlLE9BQU9DLE9BQVAsR0FBaUJGLEtBQWpCOztBQUVBLFNBQVNKLFlBQVQsQ0FBc0JPLFFBQXRCLEVBQWdDTixLQUFoQyxFQUF1QztBQUNyQyxNQUFJTyxTQUFTLEtBQWI7O0FBRUEsTUFBSUQsU0FBU0UsSUFBVCxLQUFrQlIsTUFBTVEsSUFBNUIsRUFBa0M7QUFBRTtBQUNsQ0QsYUFBUyxJQUFUO0FBQ0QsR0FGRCxNQUVPO0FBQ0xELGVBQVdYLE9BQU9jLGNBQVAsQ0FBc0JILFFBQXRCLENBQVgsQ0FESyxDQUN1Qzs7QUFFNUMsUUFBSUEsUUFBSixFQUFjO0FBQ1pDLGVBQVNSLGFBQWFPLFFBQWIsRUFBdUJOLEtBQXZCLENBQVQ7QUFDRDtBQUNGOztBQUVELFNBQU9PLE1BQVA7QUFDRCIsImZpbGUiOiJyZWFjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU2NlbmUgPSByZXF1aXJlKCcuL3NjZW5lJyksXG4gICAgICBFbGVtZW50ID0gcmVxdWlyZSgnLi9lbGVtZW50JyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL2FycmF5Jyk7XG5cbmNvbnN0IHsgZmxhdHRlbiwgZ3VhcmFudGVlIH0gPSBhcnJheVV0aWxpdGllcztcblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudChmaXJzdEFyZ3VtZW50LCBwcm9wZXJ0aWVzLCAuLi5jaGlsZEVsZW1lbnRzKSB7XG4gIGxldCBlbGVtZW50T3JFbGVtZW50cztcblxuICBpZiAoZmlyc3RBcmd1bWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY2hpbGRFbGVtZW50cyA9IGZsYXR0ZW4oY2hpbGRFbGVtZW50cyk7XG5cbiAgICBwcm9wZXJ0aWVzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBjaGlsZEVsZW1lbnRzOiBjaGlsZEVsZW1lbnRzXG4gICAgfSwgcHJvcGVydGllcyk7XG5cbiAgICBpZiAoZmFsc2UpIHtcblxuICAgIH0gZWxzZSBpZiAoZmlyc3RBcmd1bWVudCA9PT0gU2NlbmUpIHtcbiAgICAgIGNvbnN0IHNjZW5lID0gU2NlbmUuZnJvbVByb3BlcnRpZXMocHJvcGVydGllcyk7XG5cbiAgICAgIGVsZW1lbnRPckVsZW1lbnRzID0gc2NlbmU7ICAvLy9cbiAgICB9IGVsc2UgaWYgKGlzU3ViY2xhc3NPZihmaXJzdEFyZ3VtZW50LCBFbGVtZW50KSkge1xuICAgICAgY29uc3QgQ2xhc3MgPSBmaXJzdEFyZ3VtZW50OyAgLy8vXG5cbiAgICAgIGVsZW1lbnRPckVsZW1lbnRzID0gQ2xhc3MuZnJvbVByb3BlcnRpZXMocHJvcGVydGllcyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZmlyc3RBcmd1bWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc3QgZnVuYyA9IGZpcnN0QXJndW1lbnQ7ICAvLy9cblxuICAgICAgZWxlbWVudE9yRWxlbWVudHMgPSBmdW5jKHByb3BlcnRpZXMpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGVsZW1lbnRzID0gZmxhdHRlbihndWFyYW50ZWUoZWxlbWVudE9yRWxlbWVudHMpKTsgLy8vXG5cbiAgcmV0dXJuIGVsZW1lbnRzO1xufVxuXG5jb25zdCBSZWFjdCA9IHtcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdDtcblxuZnVuY3Rpb24gaXNTdWJjbGFzc09mKGFyZ3VtZW50LCBDbGFzcykge1xuICBsZXQgdHlwZU9mID0gZmFsc2U7XG5cbiAgaWYgKGFyZ3VtZW50Lm5hbWUgPT09IENsYXNzLm5hbWUpIHsgLy8vXG4gICAgdHlwZU9mID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBhcmd1bWVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihhcmd1bWVudCk7IC8vL1xuXG4gICAgaWYgKGFyZ3VtZW50KSB7XG4gICAgICB0eXBlT2YgPSBpc1N1YmNsYXNzT2YoYXJndW1lbnQsIENsYXNzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHlwZU9mO1xufVxuIl19