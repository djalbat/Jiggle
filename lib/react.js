'use strict';

var Element = require('./element'),
    CanvasElement = require('./element/canvas'),
    arrayUtilities = require('./utilities/array'),
    FunctionCanvasElement = require('./element/canvas/function');

var flatten = arrayUtilities.flatten,
    guarantee = arrayUtilities.guarantee;


function createElement(firstArgument, properties) {
  for (var _len = arguments.length, childElements = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    childElements[_key - 2] = arguments[_key];
  }

  properties = properties || {}; ///

  childElements = flatten(childElements); ///

  var element = void 0;

  if (firstArgument instanceof CanvasElement) {
    element = firstArgument; ///
  } else if (isSubclassOf(firstArgument, Element)) {
    var Class = firstArgument; ///

    Object.assign(properties, {
      childElements: childElements
    });

    element = Class.fromProperties(properties);
  } else if (typeof firstArgument === 'function') {
    var func = firstArgument,
        ///
    _childElements = guarantee(func(properties));

    Object.assign(properties, {
      childElements: _childElements
    });

    element = FunctionCanvasElement.fromProperties(properties);
  }

  return element;
}

var React = {
  createElement: createElement
};

module.exports = React;

function isSubclassOf(argument, Class) {
  var typeOf = false;

  if (argument.name === Class.name) {
    ///
    typeOf = true;
  } else {
    argument = Object.getPrototypeOf(argument); ///

    if (argument) {
      typeOf = isSubclassOf(argument, Class);
    }
  }

  return typeOf;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9yZWFjdC5qcyJdLCJuYW1lcyI6WyJFbGVtZW50IiwicmVxdWlyZSIsIkNhbnZhc0VsZW1lbnQiLCJhcnJheVV0aWxpdGllcyIsIkZ1bmN0aW9uQ2FudmFzRWxlbWVudCIsImZsYXR0ZW4iLCJndWFyYW50ZWUiLCJjcmVhdGVFbGVtZW50IiwiZmlyc3RBcmd1bWVudCIsInByb3BlcnRpZXMiLCJjaGlsZEVsZW1lbnRzIiwiZWxlbWVudCIsImlzU3ViY2xhc3NPZiIsIkNsYXNzIiwiT2JqZWN0IiwiYXNzaWduIiwiZnJvbVByb3BlcnRpZXMiLCJmdW5jIiwiUmVhY3QiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJndW1lbnQiLCJ0eXBlT2YiLCJuYW1lIiwiZ2V0UHJvdG90eXBlT2YiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFVBQVVDLFFBQVEsV0FBUixDQUFoQjtBQUFBLElBQ01DLGdCQUFnQkQsUUFBUSxrQkFBUixDQUR0QjtBQUFBLElBRU1FLGlCQUFpQkYsUUFBUSxtQkFBUixDQUZ2QjtBQUFBLElBR01HLHdCQUF3QkgsUUFBUSwyQkFBUixDQUg5Qjs7SUFLUUksTyxHQUF1QkYsYyxDQUF2QkUsTztJQUFTQyxTLEdBQWNILGMsQ0FBZEcsUzs7O0FBRWpCLFNBQVNDLGFBQVQsQ0FBdUJDLGFBQXZCLEVBQXNDQyxVQUF0QyxFQUFvRTtBQUFBLG9DQUFmQyxhQUFlO0FBQWZBLGlCQUFlO0FBQUE7O0FBQ2xFRCxlQUFhQSxjQUFjLEVBQTNCLENBRGtFLENBQ2xDOztBQUVoQ0Msa0JBQWdCTCxRQUFRSyxhQUFSLENBQWhCLENBSGtFLENBRzFCOztBQUV4QyxNQUFJQyxnQkFBSjs7QUFFQSxNQUFJSCx5QkFBeUJOLGFBQTdCLEVBQTRDO0FBQzFDUyxjQUFVSCxhQUFWLENBRDBDLENBQ2hCO0FBQzNCLEdBRkQsTUFFTyxJQUFJSSxhQUFhSixhQUFiLEVBQTRCUixPQUE1QixDQUFKLEVBQTBDO0FBQy9DLFFBQU1hLFFBQVFMLGFBQWQsQ0FEK0MsQ0FDakI7O0FBRTlCTSxXQUFPQyxNQUFQLENBQWNOLFVBQWQsRUFBMEI7QUFDeEJDO0FBRHdCLEtBQTFCOztBQUlBQyxjQUFVRSxNQUFNRyxjQUFOLENBQXFCUCxVQUFyQixDQUFWO0FBQ0QsR0FSTSxNQVFBLElBQUksT0FBT0QsYUFBUCxLQUF5QixVQUE3QixFQUF5QztBQUM5QyxRQUFNUyxPQUFPVCxhQUFiO0FBQUEsUUFBNkI7QUFDdkJFLHFCQUFnQkosVUFBVVcsS0FBS1IsVUFBTCxDQUFWLENBRHRCOztBQUdBSyxXQUFPQyxNQUFQLENBQWNOLFVBQWQsRUFBMEI7QUFDeEJDO0FBRHdCLEtBQTFCOztBQUlBQyxjQUFVUCxzQkFBc0JZLGNBQXRCLENBQXFDUCxVQUFyQyxDQUFWO0FBQ0Q7O0FBRUQsU0FBT0UsT0FBUDtBQUNEOztBQUVELElBQU1PLFFBQVE7QUFDWlgsaUJBQWVBO0FBREgsQ0FBZDs7QUFJQVksT0FBT0MsT0FBUCxHQUFpQkYsS0FBakI7O0FBRUEsU0FBU04sWUFBVCxDQUFzQlMsUUFBdEIsRUFBZ0NSLEtBQWhDLEVBQXVDO0FBQ3JDLE1BQUlTLFNBQVMsS0FBYjs7QUFFQSxNQUFJRCxTQUFTRSxJQUFULEtBQWtCVixNQUFNVSxJQUE1QixFQUFrQztBQUFFO0FBQ2xDRCxhQUFTLElBQVQ7QUFDRCxHQUZELE1BRU87QUFDTEQsZUFBV1AsT0FBT1UsY0FBUCxDQUFzQkgsUUFBdEIsQ0FBWCxDQURLLENBQ3VDOztBQUU1QyxRQUFJQSxRQUFKLEVBQWM7QUFDWkMsZUFBU1YsYUFBYVMsUUFBYixFQUF1QlIsS0FBdkIsQ0FBVDtBQUNEO0FBQ0Y7O0FBRUQsU0FBT1MsTUFBUDtBQUNEIiwiZmlsZSI6InJlYWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFbGVtZW50ID0gcmVxdWlyZSgnLi9lbGVtZW50JyksXG4gICAgICBDYW52YXNFbGVtZW50ID0gcmVxdWlyZSgnLi9lbGVtZW50L2NhbnZhcycpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgRnVuY3Rpb25DYW52YXNFbGVtZW50ID0gcmVxdWlyZSgnLi9lbGVtZW50L2NhbnZhcy9mdW5jdGlvbicpO1xuXG5jb25zdCB7IGZsYXR0ZW4sIGd1YXJhbnRlZSB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoZmlyc3RBcmd1bWVudCwgcHJvcGVydGllcywgLi4uY2hpbGRFbGVtZW50cykge1xuICBwcm9wZXJ0aWVzID0gcHJvcGVydGllcyB8fCB7fTsgIC8vL1xuXG4gIGNoaWxkRWxlbWVudHMgPSBmbGF0dGVuKGNoaWxkRWxlbWVudHMpOyAvLy9cblxuICBsZXQgZWxlbWVudDtcblxuICBpZiAoZmlyc3RBcmd1bWVudCBpbnN0YW5jZW9mIENhbnZhc0VsZW1lbnQpIHtcbiAgICBlbGVtZW50ID0gZmlyc3RBcmd1bWVudDsgIC8vL1xuICB9IGVsc2UgaWYgKGlzU3ViY2xhc3NPZihmaXJzdEFyZ3VtZW50LCBFbGVtZW50KSkge1xuICAgIGNvbnN0IENsYXNzID0gZmlyc3RBcmd1bWVudDsgIC8vL1xuXG4gICAgT2JqZWN0LmFzc2lnbihwcm9wZXJ0aWVzLCB7XG4gICAgICBjaGlsZEVsZW1lbnRzXG4gICAgfSk7XG5cbiAgICBlbGVtZW50ID0gQ2xhc3MuZnJvbVByb3BlcnRpZXMocHJvcGVydGllcyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGZpcnN0QXJndW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zdCBmdW5jID0gZmlyc3RBcmd1bWVudCwgIC8vL1xuICAgICAgICAgIGNoaWxkRWxlbWVudHMgPSBndWFyYW50ZWUoZnVuYyhwcm9wZXJ0aWVzKSk7XG5cbiAgICBPYmplY3QuYXNzaWduKHByb3BlcnRpZXMsIHtcbiAgICAgIGNoaWxkRWxlbWVudHNcbiAgICB9KTtcblxuICAgIGVsZW1lbnQgPSBGdW5jdGlvbkNhbnZhc0VsZW1lbnQuZnJvbVByb3BlcnRpZXMocHJvcGVydGllcyk7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn1cblxuY29uc3QgUmVhY3QgPSB7XG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnRcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7XG5cbmZ1bmN0aW9uIGlzU3ViY2xhc3NPZihhcmd1bWVudCwgQ2xhc3MpIHtcbiAgbGV0IHR5cGVPZiA9IGZhbHNlO1xuXG4gIGlmIChhcmd1bWVudC5uYW1lID09PSBDbGFzcy5uYW1lKSB7IC8vL1xuICAgIHR5cGVPZiA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgYXJndW1lbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYXJndW1lbnQpOyAvLy9cblxuICAgIGlmIChhcmd1bWVudCkge1xuICAgICAgdHlwZU9mID0gaXNTdWJjbGFzc09mKGFyZ3VtZW50LCBDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHR5cGVPZjtcbn1cbiJdfQ==