'use strict';

var Element = require('./element'),
    arrayUtilities = require('./utilities/array');

var flatten = arrayUtilities.flatten,
    guarantee = arrayUtilities.guarantee;


function createElement(firstArgument, properties) {
  for (var _len = arguments.length, childElements = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    childElements[_key - 2] = arguments[_key];
  }

  var elementOrElements = void 0;

  if (firstArgument !== undefined) {
    childElements = flatten(childElements);

    properties = Object.assign({
      childElements: childElements
    }, properties);

    if (false) {} else if (isSubclassOf(firstArgument, Element)) {
      var Class = firstArgument; ///

      elementOrElements = Class.fromProperties(properties);
    } else if (typeof firstArgument === 'function') {
      var elementFunction = firstArgument; ///

      elementOrElements = elementFunction(properties);
    }
  }

  var elements = flatten(guarantee(elementOrElements));

  return elements;
}

var React = {
  createElement: createElement
};

module.exports = React;

function isSubclassOf(argument, Class) {
  var typeOf = false;

  if (argument.name === Class.name) {
    ///
    typeOf = true;
  } else {
    argument = Object.getPrototypeOf(argument); ///

    if (argument) {
      typeOf = isSubclassOf(argument, Class);
    }
  }

  return typeOf;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9yZWFjdC5qcyJdLCJuYW1lcyI6WyJFbGVtZW50IiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiZmxhdHRlbiIsImd1YXJhbnRlZSIsImNyZWF0ZUVsZW1lbnQiLCJmaXJzdEFyZ3VtZW50IiwicHJvcGVydGllcyIsImNoaWxkRWxlbWVudHMiLCJlbGVtZW50T3JFbGVtZW50cyIsInVuZGVmaW5lZCIsIk9iamVjdCIsImFzc2lnbiIsImlzU3ViY2xhc3NPZiIsIkNsYXNzIiwiZnJvbVByb3BlcnRpZXMiLCJlbGVtZW50RnVuY3Rpb24iLCJlbGVtZW50cyIsIlJlYWN0IiwibW9kdWxlIiwiZXhwb3J0cyIsImFyZ3VtZW50IiwidHlwZU9mIiwibmFtZSIsImdldFByb3RvdHlwZU9mIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLFdBQVIsQ0FBaEI7QUFBQSxJQUNNQyxpQkFBaUJELFFBQVEsbUJBQVIsQ0FEdkI7O0lBR1FFLE8sR0FBdUJELGMsQ0FBdkJDLE87SUFBU0MsUyxHQUFjRixjLENBQWRFLFM7OztBQUVqQixTQUFTQyxhQUFULENBQXVCQyxhQUF2QixFQUFzQ0MsVUFBdEMsRUFBb0U7QUFBQSxvQ0FBZkMsYUFBZTtBQUFmQSxpQkFBZTtBQUFBOztBQUNsRSxNQUFJQywwQkFBSjs7QUFFQSxNQUFJSCxrQkFBa0JJLFNBQXRCLEVBQWlDO0FBQy9CRixvQkFBZ0JMLFFBQVFLLGFBQVIsQ0FBaEI7O0FBRUFELGlCQUFhSSxPQUFPQyxNQUFQLENBQWM7QUFDekJKLHFCQUFlQTtBQURVLEtBQWQsRUFFVkQsVUFGVSxDQUFiOztBQUlBLFFBQUksS0FBSixFQUFXLENBRVYsQ0FGRCxNQUVPLElBQUlNLGFBQWFQLGFBQWIsRUFBNEJOLE9BQTVCLENBQUosRUFBMEM7QUFDL0MsVUFBTWMsUUFBUVIsYUFBZCxDQUQrQyxDQUNqQjs7QUFFOUJHLDBCQUFvQkssTUFBTUMsY0FBTixDQUFxQlIsVUFBckIsQ0FBcEI7QUFDRCxLQUpNLE1BSUEsSUFBSSxPQUFPRCxhQUFQLEtBQXlCLFVBQTdCLEVBQXlDO0FBQzlDLFVBQU1VLGtCQUFrQlYsYUFBeEIsQ0FEOEMsQ0FDTjs7QUFFeENHLDBCQUFvQk8sZ0JBQWdCVCxVQUFoQixDQUFwQjtBQUNEO0FBQ0Y7O0FBRUQsTUFBTVUsV0FBV2QsUUFBUUMsVUFBVUssaUJBQVYsQ0FBUixDQUFqQjs7QUFFQSxTQUFPUSxRQUFQO0FBQ0Q7O0FBRUQsSUFBTUMsUUFBUTtBQUNaYixpQkFBZUE7QUFESCxDQUFkOztBQUlBYyxPQUFPQyxPQUFQLEdBQWlCRixLQUFqQjs7QUFFQSxTQUFTTCxZQUFULENBQXNCUSxRQUF0QixFQUFnQ1AsS0FBaEMsRUFBdUM7QUFDckMsTUFBSVEsU0FBUyxLQUFiOztBQUVBLE1BQUlELFNBQVNFLElBQVQsS0FBa0JULE1BQU1TLElBQTVCLEVBQWtDO0FBQUU7QUFDbENELGFBQVMsSUFBVDtBQUNELEdBRkQsTUFFTztBQUNMRCxlQUFXVixPQUFPYSxjQUFQLENBQXNCSCxRQUF0QixDQUFYLENBREssQ0FDdUM7O0FBRTVDLFFBQUlBLFFBQUosRUFBYztBQUNaQyxlQUFTVCxhQUFhUSxRQUFiLEVBQXVCUCxLQUF2QixDQUFUO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPUSxNQUFQO0FBQ0QiLCJmaWxlIjoicmVhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEVsZW1lbnQgPSByZXF1aXJlKCcuL2VsZW1lbnQnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvYXJyYXknKTtcblxuY29uc3QgeyBmbGF0dGVuLCBndWFyYW50ZWUgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KGZpcnN0QXJndW1lbnQsIHByb3BlcnRpZXMsIC4uLmNoaWxkRWxlbWVudHMpIHtcbiAgbGV0IGVsZW1lbnRPckVsZW1lbnRzO1xuXG4gIGlmIChmaXJzdEFyZ3VtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICBjaGlsZEVsZW1lbnRzID0gZmxhdHRlbihjaGlsZEVsZW1lbnRzKTtcblxuICAgIHByb3BlcnRpZXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIGNoaWxkRWxlbWVudHM6IGNoaWxkRWxlbWVudHNcbiAgICB9LCBwcm9wZXJ0aWVzKTtcblxuICAgIGlmIChmYWxzZSkge1xuXG4gICAgfSBlbHNlIGlmIChpc1N1YmNsYXNzT2YoZmlyc3RBcmd1bWVudCwgRWxlbWVudCkpIHtcbiAgICAgIGNvbnN0IENsYXNzID0gZmlyc3RBcmd1bWVudDsgIC8vL1xuXG4gICAgICBlbGVtZW50T3JFbGVtZW50cyA9IENsYXNzLmZyb21Qcm9wZXJ0aWVzKHByb3BlcnRpZXMpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpcnN0QXJndW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnRGdW5jdGlvbiA9IGZpcnN0QXJndW1lbnQ7ICAvLy9cblxuICAgICAgZWxlbWVudE9yRWxlbWVudHMgPSBlbGVtZW50RnVuY3Rpb24ocHJvcGVydGllcyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZWxlbWVudHMgPSBmbGF0dGVuKGd1YXJhbnRlZShlbGVtZW50T3JFbGVtZW50cykpO1xuXG4gIHJldHVybiBlbGVtZW50cztcbn1cblxuY29uc3QgUmVhY3QgPSB7XG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnRcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7XG5cbmZ1bmN0aW9uIGlzU3ViY2xhc3NPZihhcmd1bWVudCwgQ2xhc3MpIHtcbiAgbGV0IHR5cGVPZiA9IGZhbHNlO1xuXG4gIGlmIChhcmd1bWVudC5uYW1lID09PSBDbGFzcy5uYW1lKSB7IC8vL1xuICAgIHR5cGVPZiA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgYXJndW1lbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYXJndW1lbnQpOyAvLy9cblxuICAgIGlmIChhcmd1bWVudCkge1xuICAgICAgdHlwZU9mID0gaXNTdWJjbGFzc09mKGFyZ3VtZW50LCBDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHR5cGVPZjtcbn1cbiJdfQ==