'use strict';

var Scene = require('./scene'),
    Element = require('./element'),
    arrayUtilities = require('./utilities/array');

var flatten = arrayUtilities.flatten,
    guarantee = arrayUtilities.guarantee;


function createElement(firstArgument, properties) {
  for (var _len = arguments.length, childElements = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    childElements[_key - 2] = arguments[_key];
  }

  var elementOrElements = void 0;

  if (firstArgument !== undefined) {
    childElements = flatten(childElements);

    properties = Object.assign({
      childElements: childElements
    }, properties);

    if (false) {} else if (firstArgument === Scene) {
      var scene = Scene.fromProperties(properties);

      elementOrElements = scene; ///
    } else if (isSubclassOf(firstArgument, Element)) {
      var Class = firstArgument; ///

      elementOrElements = Class.fromProperties(properties);
    } else if (typeof firstArgument === 'function') {
      var elementFunction = firstArgument; ///

      elementOrElements = elementFunction(properties);
    }
  }

  var elements = flatten(guarantee(elementOrElements)); ///

  return elements;
}

var React = {
  createElement: createElement
};

module.exports = React;

function isSubclassOf(argument, Class) {
  var typeOf = false;

  if (argument.name === Class.name) {
    ///
    typeOf = true;
  } else {
    argument = Object.getPrototypeOf(argument); ///

    if (argument) {
      typeOf = isSubclassOf(argument, Class);
    }
  }

  return typeOf;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9yZWFjdC5qcyJdLCJuYW1lcyI6WyJTY2VuZSIsInJlcXVpcmUiLCJFbGVtZW50IiwiYXJyYXlVdGlsaXRpZXMiLCJmbGF0dGVuIiwiZ3VhcmFudGVlIiwiY3JlYXRlRWxlbWVudCIsImZpcnN0QXJndW1lbnQiLCJwcm9wZXJ0aWVzIiwiY2hpbGRFbGVtZW50cyIsImVsZW1lbnRPckVsZW1lbnRzIiwidW5kZWZpbmVkIiwiT2JqZWN0IiwiYXNzaWduIiwic2NlbmUiLCJmcm9tUHJvcGVydGllcyIsImlzU3ViY2xhc3NPZiIsIkNsYXNzIiwiZWxlbWVudEZ1bmN0aW9uIiwiZWxlbWVudHMiLCJSZWFjdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcmd1bWVudCIsInR5cGVPZiIsIm5hbWUiLCJnZXRQcm90b3R5cGVPZiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsUUFBUUMsUUFBUSxTQUFSLENBQWQ7QUFBQSxJQUNNQyxVQUFVRCxRQUFRLFdBQVIsQ0FEaEI7QUFBQSxJQUVNRSxpQkFBaUJGLFFBQVEsbUJBQVIsQ0FGdkI7O0lBSVFHLE8sR0FBdUJELGMsQ0FBdkJDLE87SUFBU0MsUyxHQUFjRixjLENBQWRFLFM7OztBQUVqQixTQUFTQyxhQUFULENBQXVCQyxhQUF2QixFQUFzQ0MsVUFBdEMsRUFBb0U7QUFBQSxvQ0FBZkMsYUFBZTtBQUFmQSxpQkFBZTtBQUFBOztBQUNsRSxNQUFJQywwQkFBSjs7QUFFQSxNQUFJSCxrQkFBa0JJLFNBQXRCLEVBQWlDO0FBQy9CRixvQkFBZ0JMLFFBQVFLLGFBQVIsQ0FBaEI7O0FBRUFELGlCQUFhSSxPQUFPQyxNQUFQLENBQWM7QUFDekJKLHFCQUFlQTtBQURVLEtBQWQsRUFFVkQsVUFGVSxDQUFiOztBQUlBLFFBQUksS0FBSixFQUFXLENBRVYsQ0FGRCxNQUVPLElBQUlELGtCQUFrQlAsS0FBdEIsRUFBNkI7QUFDbEMsVUFBTWMsUUFBUWQsTUFBTWUsY0FBTixDQUFxQlAsVUFBckIsQ0FBZDs7QUFFQUUsMEJBQW9CSSxLQUFwQixDQUhrQyxDQUdOO0FBQzdCLEtBSk0sTUFJQSxJQUFJRSxhQUFhVCxhQUFiLEVBQTRCTCxPQUE1QixDQUFKLEVBQTBDO0FBQy9DLFVBQU1lLFFBQVFWLGFBQWQsQ0FEK0MsQ0FDakI7O0FBRTlCRywwQkFBb0JPLE1BQU1GLGNBQU4sQ0FBcUJQLFVBQXJCLENBQXBCO0FBQ0QsS0FKTSxNQUlBLElBQUksT0FBT0QsYUFBUCxLQUF5QixVQUE3QixFQUF5QztBQUM5QyxVQUFNVyxrQkFBa0JYLGFBQXhCLENBRDhDLENBQ047O0FBRXhDRywwQkFBb0JRLGdCQUFnQlYsVUFBaEIsQ0FBcEI7QUFDRDtBQUNGOztBQUVELE1BQU1XLFdBQVdmLFFBQVFDLFVBQVVLLGlCQUFWLENBQVIsQ0FBakIsQ0EzQmtFLENBMkJWOztBQUV4RCxTQUFPUyxRQUFQO0FBQ0Q7O0FBRUQsSUFBTUMsUUFBUTtBQUNaZCxpQkFBZUE7QUFESCxDQUFkOztBQUlBZSxPQUFPQyxPQUFQLEdBQWlCRixLQUFqQjs7QUFFQSxTQUFTSixZQUFULENBQXNCTyxRQUF0QixFQUFnQ04sS0FBaEMsRUFBdUM7QUFDckMsTUFBSU8sU0FBUyxLQUFiOztBQUVBLE1BQUlELFNBQVNFLElBQVQsS0FBa0JSLE1BQU1RLElBQTVCLEVBQWtDO0FBQUU7QUFDbENELGFBQVMsSUFBVDtBQUNELEdBRkQsTUFFTztBQUNMRCxlQUFXWCxPQUFPYyxjQUFQLENBQXNCSCxRQUF0QixDQUFYLENBREssQ0FDdUM7O0FBRTVDLFFBQUlBLFFBQUosRUFBYztBQUNaQyxlQUFTUixhQUFhTyxRQUFiLEVBQXVCTixLQUF2QixDQUFUO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPTyxNQUFQO0FBQ0QiLCJmaWxlIjoicmVhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFNjZW5lID0gcmVxdWlyZSgnLi9zY2VuZScpLFxuICAgICAgRWxlbWVudCA9IHJlcXVpcmUoJy4vZWxlbWVudCcpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9hcnJheScpO1xuXG5jb25zdCB7IGZsYXR0ZW4sIGd1YXJhbnRlZSB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoZmlyc3RBcmd1bWVudCwgcHJvcGVydGllcywgLi4uY2hpbGRFbGVtZW50cykge1xuICBsZXQgZWxlbWVudE9yRWxlbWVudHM7XG5cbiAgaWYgKGZpcnN0QXJndW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgIGNoaWxkRWxlbWVudHMgPSBmbGF0dGVuKGNoaWxkRWxlbWVudHMpO1xuXG4gICAgcHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgY2hpbGRFbGVtZW50czogY2hpbGRFbGVtZW50c1xuICAgIH0sIHByb3BlcnRpZXMpO1xuXG4gICAgaWYgKGZhbHNlKSB7XG5cbiAgICB9IGVsc2UgaWYgKGZpcnN0QXJndW1lbnQgPT09IFNjZW5lKSB7XG4gICAgICBjb25zdCBzY2VuZSA9IFNjZW5lLmZyb21Qcm9wZXJ0aWVzKHByb3BlcnRpZXMpO1xuXG4gICAgICBlbGVtZW50T3JFbGVtZW50cyA9IHNjZW5lOyAgLy8vXG4gICAgfSBlbHNlIGlmIChpc1N1YmNsYXNzT2YoZmlyc3RBcmd1bWVudCwgRWxlbWVudCkpIHtcbiAgICAgIGNvbnN0IENsYXNzID0gZmlyc3RBcmd1bWVudDsgIC8vL1xuXG4gICAgICBlbGVtZW50T3JFbGVtZW50cyA9IENsYXNzLmZyb21Qcm9wZXJ0aWVzKHByb3BlcnRpZXMpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpcnN0QXJndW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnRGdW5jdGlvbiA9IGZpcnN0QXJndW1lbnQ7ICAvLy9cblxuICAgICAgZWxlbWVudE9yRWxlbWVudHMgPSBlbGVtZW50RnVuY3Rpb24ocHJvcGVydGllcyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZWxlbWVudHMgPSBmbGF0dGVuKGd1YXJhbnRlZShlbGVtZW50T3JFbGVtZW50cykpOyAvLy9cblxuICByZXR1cm4gZWxlbWVudHM7XG59XG5cbmNvbnN0IFJlYWN0ID0ge1xuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0O1xuXG5mdW5jdGlvbiBpc1N1YmNsYXNzT2YoYXJndW1lbnQsIENsYXNzKSB7XG4gIGxldCB0eXBlT2YgPSBmYWxzZTtcblxuICBpZiAoYXJndW1lbnQubmFtZSA9PT0gQ2xhc3MubmFtZSkgeyAvLy9cbiAgICB0eXBlT2YgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGFyZ3VtZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGFyZ3VtZW50KTsgLy8vXG5cbiAgICBpZiAoYXJndW1lbnQpIHtcbiAgICAgIHR5cGVPZiA9IGlzU3ViY2xhc3NPZihhcmd1bWVudCwgQ2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0eXBlT2Y7XG59XG4iXX0=