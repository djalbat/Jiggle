'use strict';

var Scene = require('./scene'),
    Camera = require('./camera'),
    Element = require('./element'),
    arrayUtilities = require('./utilities/array');

var flatten = arrayUtilities.flatten,
    guarantee = arrayUtilities.guarantee;


function createElement(firstArgument, properties) {
  for (var _len = arguments.length, childElements = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    childElements[_key - 2] = arguments[_key];
  }

  var elementOrElements = void 0;

  if (firstArgument !== undefined) {
    childElements = flatten(childElements);

    properties = Object.assign({
      childElements: childElements
    }, properties);

    if (false) {} else if (firstArgument === Scene) {
      var scene = Scene.fromProperties(properties);

      elementOrElements = scene; ///
    } else if (firstArgument === Camera) {
      var camera = Camera.fromProperties(properties);

      elementOrElements = camera; ///
    } else if (isSubclassOf(firstArgument, Element)) {
      var Class = firstArgument; ///

      elementOrElements = Class.fromProperties(properties);
    } else if (typeof firstArgument === 'function') {
      var func = firstArgument; ///

      elementOrElements = func(properties);
    }
  }

  var elements = flatten(guarantee(elementOrElements)); ///

  return elements;
}

var React = {
  createElement: createElement
};

module.exports = React;

function isSubclassOf(argument, Class) {
  var typeOf = false;

  if (argument.name === Class.name) {
    ///
    typeOf = true;
  } else {
    argument = Object.getPrototypeOf(argument); ///

    if (argument) {
      typeOf = isSubclassOf(argument, Class);
    }
  }

  return typeOf;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9yZWFjdC5qcyJdLCJuYW1lcyI6WyJTY2VuZSIsInJlcXVpcmUiLCJDYW1lcmEiLCJFbGVtZW50IiwiYXJyYXlVdGlsaXRpZXMiLCJmbGF0dGVuIiwiZ3VhcmFudGVlIiwiY3JlYXRlRWxlbWVudCIsImZpcnN0QXJndW1lbnQiLCJwcm9wZXJ0aWVzIiwiY2hpbGRFbGVtZW50cyIsImVsZW1lbnRPckVsZW1lbnRzIiwidW5kZWZpbmVkIiwiT2JqZWN0IiwiYXNzaWduIiwic2NlbmUiLCJmcm9tUHJvcGVydGllcyIsImNhbWVyYSIsImlzU3ViY2xhc3NPZiIsIkNsYXNzIiwiZnVuYyIsImVsZW1lbnRzIiwiUmVhY3QiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJndW1lbnQiLCJ0eXBlT2YiLCJuYW1lIiwiZ2V0UHJvdG90eXBlT2YiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFFBQVFDLFFBQVEsU0FBUixDQUFkO0FBQUEsSUFDTUMsU0FBU0QsUUFBUSxVQUFSLENBRGY7QUFBQSxJQUVNRSxVQUFVRixRQUFRLFdBQVIsQ0FGaEI7QUFBQSxJQUdNRyxpQkFBaUJILFFBQVEsbUJBQVIsQ0FIdkI7O0lBS1FJLE8sR0FBdUJELGMsQ0FBdkJDLE87SUFBU0MsUyxHQUFjRixjLENBQWRFLFM7OztBQUVqQixTQUFTQyxhQUFULENBQXVCQyxhQUF2QixFQUFzQ0MsVUFBdEMsRUFBb0U7QUFBQSxvQ0FBZkMsYUFBZTtBQUFmQSxpQkFBZTtBQUFBOztBQUNsRSxNQUFJQywwQkFBSjs7QUFFQSxNQUFJSCxrQkFBa0JJLFNBQXRCLEVBQWlDO0FBQy9CRixvQkFBZ0JMLFFBQVFLLGFBQVIsQ0FBaEI7O0FBRUFELGlCQUFhSSxPQUFPQyxNQUFQLENBQWM7QUFDekJKLHFCQUFlQTtBQURVLEtBQWQsRUFFVkQsVUFGVSxDQUFiOztBQUlBLFFBQUksS0FBSixFQUFXLENBRVYsQ0FGRCxNQUVPLElBQUlELGtCQUFrQlIsS0FBdEIsRUFBNkI7QUFDbEMsVUFBTWUsUUFBUWYsTUFBTWdCLGNBQU4sQ0FBcUJQLFVBQXJCLENBQWQ7O0FBRUFFLDBCQUFvQkksS0FBcEIsQ0FIa0MsQ0FHTjtBQUM3QixLQUpNLE1BSUEsSUFBSVAsa0JBQWtCTixNQUF0QixFQUE4QjtBQUNuQyxVQUFNZSxTQUFTZixPQUFPYyxjQUFQLENBQXNCUCxVQUF0QixDQUFmOztBQUVBRSwwQkFBb0JNLE1BQXBCLENBSG1DLENBR1A7QUFDN0IsS0FKTSxNQUlBLElBQUlDLGFBQWFWLGFBQWIsRUFBNEJMLE9BQTVCLENBQUosRUFBMEM7QUFDL0MsVUFBTWdCLFFBQVFYLGFBQWQsQ0FEK0MsQ0FDakI7O0FBRTlCRywwQkFBb0JRLE1BQU1ILGNBQU4sQ0FBcUJQLFVBQXJCLENBQXBCO0FBQ0QsS0FKTSxNQUlBLElBQUksT0FBT0QsYUFBUCxLQUF5QixVQUE3QixFQUF5QztBQUM5QyxVQUFNWSxPQUFPWixhQUFiLENBRDhDLENBQ2pCOztBQUU3QkcsMEJBQW9CUyxLQUFLWCxVQUFMLENBQXBCO0FBQ0Q7QUFDRjs7QUFFRCxNQUFNWSxXQUFXaEIsUUFBUUMsVUFBVUssaUJBQVYsQ0FBUixDQUFqQixDQS9Ca0UsQ0ErQlY7O0FBRXhELFNBQU9VLFFBQVA7QUFDRDs7QUFFRCxJQUFNQyxRQUFRO0FBQ1pmLGlCQUFlQTtBQURILENBQWQ7O0FBSUFnQixPQUFPQyxPQUFQLEdBQWlCRixLQUFqQjs7QUFFQSxTQUFTSixZQUFULENBQXNCTyxRQUF0QixFQUFnQ04sS0FBaEMsRUFBdUM7QUFDckMsTUFBSU8sU0FBUyxLQUFiOztBQUVBLE1BQUlELFNBQVNFLElBQVQsS0FBa0JSLE1BQU1RLElBQTVCLEVBQWtDO0FBQUU7QUFDbENELGFBQVMsSUFBVDtBQUNELEdBRkQsTUFFTztBQUNMRCxlQUFXWixPQUFPZSxjQUFQLENBQXNCSCxRQUF0QixDQUFYLENBREssQ0FDdUM7O0FBRTVDLFFBQUlBLFFBQUosRUFBYztBQUNaQyxlQUFTUixhQUFhTyxRQUFiLEVBQXVCTixLQUF2QixDQUFUO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPTyxNQUFQO0FBQ0QiLCJmaWxlIjoicmVhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFNjZW5lID0gcmVxdWlyZSgnLi9zY2VuZScpLFxuICAgICAgQ2FtZXJhID0gcmVxdWlyZSgnLi9jYW1lcmEnKSxcbiAgICAgIEVsZW1lbnQgPSByZXF1aXJlKCcuL2VsZW1lbnQnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvYXJyYXknKTtcblxuY29uc3QgeyBmbGF0dGVuLCBndWFyYW50ZWUgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KGZpcnN0QXJndW1lbnQsIHByb3BlcnRpZXMsIC4uLmNoaWxkRWxlbWVudHMpIHtcbiAgbGV0IGVsZW1lbnRPckVsZW1lbnRzO1xuXG4gIGlmIChmaXJzdEFyZ3VtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICBjaGlsZEVsZW1lbnRzID0gZmxhdHRlbihjaGlsZEVsZW1lbnRzKTtcblxuICAgIHByb3BlcnRpZXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIGNoaWxkRWxlbWVudHM6IGNoaWxkRWxlbWVudHNcbiAgICB9LCBwcm9wZXJ0aWVzKTtcblxuICAgIGlmIChmYWxzZSkge1xuXG4gICAgfSBlbHNlIGlmIChmaXJzdEFyZ3VtZW50ID09PSBTY2VuZSkge1xuICAgICAgY29uc3Qgc2NlbmUgPSBTY2VuZS5mcm9tUHJvcGVydGllcyhwcm9wZXJ0aWVzKTtcblxuICAgICAgZWxlbWVudE9yRWxlbWVudHMgPSBzY2VuZTsgIC8vL1xuICAgIH0gZWxzZSBpZiAoZmlyc3RBcmd1bWVudCA9PT0gQ2FtZXJhKSB7XG4gICAgICBjb25zdCBjYW1lcmEgPSBDYW1lcmEuZnJvbVByb3BlcnRpZXMocHJvcGVydGllcyk7XG5cbiAgICAgIGVsZW1lbnRPckVsZW1lbnRzID0gY2FtZXJhOyAvLy9cbiAgICB9IGVsc2UgaWYgKGlzU3ViY2xhc3NPZihmaXJzdEFyZ3VtZW50LCBFbGVtZW50KSkge1xuICAgICAgY29uc3QgQ2xhc3MgPSBmaXJzdEFyZ3VtZW50OyAgLy8vXG5cbiAgICAgIGVsZW1lbnRPckVsZW1lbnRzID0gQ2xhc3MuZnJvbVByb3BlcnRpZXMocHJvcGVydGllcyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZmlyc3RBcmd1bWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc3QgZnVuYyA9IGZpcnN0QXJndW1lbnQ7ICAvLy9cblxuICAgICAgZWxlbWVudE9yRWxlbWVudHMgPSBmdW5jKHByb3BlcnRpZXMpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGVsZW1lbnRzID0gZmxhdHRlbihndWFyYW50ZWUoZWxlbWVudE9yRWxlbWVudHMpKTsgLy8vXG5cbiAgcmV0dXJuIGVsZW1lbnRzO1xufVxuXG5jb25zdCBSZWFjdCA9IHtcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdDtcblxuZnVuY3Rpb24gaXNTdWJjbGFzc09mKGFyZ3VtZW50LCBDbGFzcykge1xuICBsZXQgdHlwZU9mID0gZmFsc2U7XG5cbiAgaWYgKGFyZ3VtZW50Lm5hbWUgPT09IENsYXNzLm5hbWUpIHsgLy8vXG4gICAgdHlwZU9mID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBhcmd1bWVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihhcmd1bWVudCk7IC8vL1xuXG4gICAgaWYgKGFyZ3VtZW50KSB7XG4gICAgICB0eXBlT2YgPSBpc1N1YmNsYXNzT2YoYXJndW1lbnQsIENsYXNzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHlwZU9mO1xufVxuIl19